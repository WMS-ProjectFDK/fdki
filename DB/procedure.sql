
  CREATE OR REPLACE PROCEDURE "PORDER"."ACCPAC_AR_DATA_MAKE" 
(
  v_batchid in number,
  v_ac_month in number
)
 as
begin
   declare
	cursor C0(PARA in number)
	is
	select TO_CHAR(OPERATION_DATE,'YYYYMMDD') operation_date ,company_code,inv_no, slip_date,curr_code,
	            sum(round(slip_price * slip_quantity,2)) total_slip_amt 
	       from transaction_sales
		where posting_date is null
		and to_number(to_char(SLIP_DATE,'yyyymm')) = PARA
	       group by   TO_CHAR(OPERATION_DATE,'YYYYMMDD'),company_code,inv_no, slip_date,curr_code
	       order by operation_date,company_code,inv_no,total_slip_amt, slip_date,curr_code;

        C0_REC C0%rowtype := null;

	cursor C1(PARAM1 in number ,PARAM2 in varchar2, PARAM3 in date, PARAM4 in number,PARAM5 in VARCHAR2)
	is
	select t.inv_no							inv_no,
		t.slip_date						slip_date,
		nvl(dh.DUE_DATE,t.slip_date + nvl(c.pdays,1))		duedate,
		c.company						company,
		c.pdays							pdays,
		c.pdesc							pdesc,
		t.company_code						company_code,
		c.accpac_company_code || cu.curr_acc_mark		idcust,
		t.INV_NO						idinvc,
		decode(fdk.company_code,null,'N','Y')			related,
		decode(fdk.company_code,null,'31','30') || substrb(cl.idglacct_class,1,1) || '0' || cu.curr_acc_mark	idacctset,
		cu.curr_short						curr_short,
		cu.curr_acc_mark					curr_acc_mark,
		t.curr_code						curr_code,
		get_accpac_ex_rate(t.curr_code, t.slip_date)		ex_rate,
		get_accpac_ex_rate(23, t.slip_date)			idr_ex_rate,
		'N30'							termcode,
		decode(t.CURR_CODE,1,1,2)				curoper,
		t.item_no						item_no,
		i.description						description,
		t.slip_amt						slip_amt,
		substrb('SALES ' || cl.class_1||cl.class_2 ,1,50)	textdesc ,
		'4000' || substrb(cl.idglacct_class,1,1) || '-' || cl.idglacct_class	idacctrev,
				 decode(to_char(t.slip_date,'mm'), '01', 
				to_number(to_char(t.slip_date,'yyyy') - 1), '02',
				to_number(to_char(t.slip_date,'yyyy') - 1), '03',
				to_number(to_char(t.slip_date,'yyyy') - 1), to_number(to_char(t.slip_date,'yyyy')))		fscsyr,
			to_char(decode(to_char(t.slip_date,'mm'), '04', 1,'05', 2,'06', 3,'07',  4,'08',  5,'09', 6,
								   '10', 7,'11', 8,'12', 9,'01', 10,'02', 11,'03', 12),'fm09')	fscsper,
			decode(to_char(t.slip_date,'mm'), '01', 'I','02', 'II','03', '?','04', 'IV','05', 'V',
				'06', 'VI','07', 'VII','08', 'VIII','09', 'IX',
				'10', 'X','11', 'XI','12', 'XII') || '/' ||to_char(t.slip_date,'YYYY')            roma_desc 

	from (select TO_CHAR(OPERATION_DATE,'YYYYMMDD') operation_date,company_code,inv_no, slip_date,curr_code,ex_rate,
		    item_no,sum(round(slip_price * slip_quantity,2)) slip_amt 
		from transaction_sales
		where posting_date is null
		group by TO_CHAR(OPERATION_DATE,'YYYYMMDD'),company_code,inv_no, slip_date,curr_code,ex_rate, item_no) t,
		item i,
		company c,
		currency cu,
		class cl,
		fdkgroup fdk,
		do_header dh
	where t.company_code = PARAM1
	and t.inv_no =         PARAM2
	and t.slip_date =      PARAM3
	and t.curr_code =      PARAM4
	and t.operation_date = PARAM5
	and t.item_no = i.item_no(+)
	and t.company_code = c.company_code(+)
	and t.curr_code = cu.curr_code(+)
	and i.class_code = cl.class_code(+)
	and t.slip_amt <> 0
	and t.company_code = fdk.company_code(+)
	and t.INV_NO = dh.INV_NO(+)
	order by t.inv_no,t.item_no,t.slip_date;

        c1_rec c1%rowtype := null;

	cursor C2(PARA in varchar2)
	is
	select  pglosas_inv_no			,
		max(inv_cnt)		inv_cnt
	from ar_invoice_contol
	where pglosas_inv_no = PARA
	group by pglosas_inv_no ;


        c2_rec c2%rowtype := null;

	WK_CNTBTCH 		ACCPAC_AR_HEADER.CNTBTCH%type := 0;
	WK_CNTITEM 		ACCPAC_AR_HEADER.CNTITEM%type := 0;
	WK_CNTLINE 		ACCPAC_AR_DETAILS.CNTLINE%type := 0;

	WK_TEXTTRX		ACCPAC_AR_HEADER.TEXTTRX%type := 0;
	WK_IDTRX		ACCPAC_AR_HEADER.IDTRX%type := 0;
	WK_HEADER_WRITE_FLG	NUMBER(2) := 0;

	wk_cnt			number(8)	:= 0;

	wk_inv_cnt		number(6)	:= 0;
	wk_ACCPAC_INV_NO	varchar2(50)	:= null;
	WK_INVCAPPLTO		varchar2(50)	:= null;

   begin

	WK_CNTITEM := 0;

	WK_CNTBTCH := v_batchid;

	open C0(v_ac_month);
	loop
	  fetch C0 into C0_rec;
	  exit when C0%notfound or C0%notfound is null;

		open C2(C0_REC.INV_NO);
        	   C2_rec := null ;
	           fetch C2 into C2_rec ;
		close C2 ;
		if c2_rec.INV_CNT is null  then
			wk_inv_cnt := 1;
		else
			wk_inv_cnt := c2_rec.INV_CNT + 1;
		end if ;

	  	wk_cnt := wk_cnt + 1;

		Wk_CNTLINE		:= 0;
		WK_HEADER_WRITE_FLG	:= 0;
 
		open C1(C0_REC.COMPANY_CODE,C0_REC.INV_NO,C0_REC.SLIP_DATE,C0_REC.CURR_CODE,C0_REC.OPERATION_DATE);
		loop
			fetch C1 into c1_rec;
			if C1%notfound or  C1%notfound is null then
				close C1;
				goto PROC_END;
				end if;

				if WK_HEADER_WRITE_FLG = 0  and c0_rec.TOTAL_SLIP_AMT <> 0 then
					WK_CNTITEM 		:= WK_CNTITEM +  1;


					/* CREDIT NOTE ?3,32 */
					if c0_rec.TOTAL_SLIP_AMT  >= 0 then
						WK_TEXTTRX		:=	1;
						WK_IDTRX		:=	12;
						WK_INVCAPPLTO		:=	NULL;
						if wk_inv_cnt = 1 then
							wk_ACCPAC_INV_NO	:=	C1_REC.IDINVC ;
						else
							wk_ACCPAC_INV_NO	:=	C1_REC.IDINVC || '-' || to_char(wk_inv_cnt,'FM099');
						end if;
					else
						WK_TEXTTRX		:=	3;
						WK_IDTRX		:=	32;
						if wk_inv_cnt = 2 then
							WK_INVCAPPLTO		:=	C1_REC.IDINVC ;--?????INVOICE
						else
							WK_INVCAPPLTO		:=	C1_REC.IDINVC || '-' || to_char(c2_rec.INV_CNT,'FM099');--?????INVOICE
						end if;
						wk_ACCPAC_INV_NO	:=	'CN/' || C1_REC.IDINVC || '-' || to_char(wk_inv_cnt,'FM099');
					end if;

					/* INVOICE NO????????? */
					insert into AR_INVOICE_CONTOL(
						PGLOSAS_INV_NO,
						INV_CNT,
						POSTING_DATE
						)values(
						c0_rec.INV_NO,
						wk_inv_cnt,
						sysdate
						);


				/* ACCPAC_AR_HEADER??? */
				INSERT INTO ACCPAC_AR_HEADER(
					CNTBTCH,
					CNTITEM,
					IDCUST,
					IDINVC,
					TEXTTRX,
					IDTRX,
					ORDRNBR,
					CUSTPO,
					INVCDESC,
					IDACCTSET,
					DATEINVC,
					FISCYR,
					FISCPER,
					CODECURN,
					RATETYPE,
					EXCHRATEHC,
					TERMCODE,
					DATEDUE,
					CODETAXGRP,
					CODETAX1,
					TAXSTTS1,
					AMTNETTOT,
					DATERATE,
					AMTDUE,
					CUROPER,
					INVCTYPE,
					CODECURNRC,
					SWTXCTLRC,
					RATERC,
					RATETYPERC,
					RATEDATERC,
					RATEOPRC,
					AMTGROSHC,
					AMTDUEHC,
					DATEBUS,
					REG_DATE,
					INVCAPPLTO
					) values (
					wk_cntbtch,
					wk_cntitem,
					c1_rec.IDCUST,
					wk_ACCPAC_INV_NO,
					WK_TEXTTRX,
					WK_IDTRX,
					null,
					null,
					c1_rec.COMPANY,
					c1_rec.IDACCTSET,
					c1_rec.SLIP_DATE,
					c1_rec.FSCSYR,
					c1_rec.FSCSPER,
					c1_rec.CURR_SHORT,
					'TX',
					c1_rec.EX_RATE,
					c1_rec.TERMCODE,
					c1_rec.DUEDATE,
					'PPN10',
					'PPN10',
					2,
					abs(c0_rec.TOTAL_SLIP_AMT),
					c0_rec.SLIP_DATE,
					abs(c0_rec.TOTAL_SLIP_AMT),
					c1_rec.CUROPER,
					2,
					'IDR',
					1,
					c1_rec.IDR_EX_RATE,
					'TX',
					c0_rec.SLIP_DATE,
					1,
					abs(c0_rec.TOTAL_SLIP_AMT),
					abs(c0_rec.TOTAL_SLIP_AMT),
					c0_rec.SLIP_DATE,
					sysdate,
					WK_INVCAPPLTO) ;
					WK_HEADER_WRITE_FLG	:= 1;
				end if;

				Wk_CNTLINE	:= Wk_CNTLINE + 20;

				/* ACCPAC_AR_DETAILS??? */
				if WK_HEADER_WRITE_FLG <> 0 then
				insert into ACCPAC_AR_DETAILS(
					CNTBTCH,
					CNTITEM,
					CNTLINE,
					TEXTDESC,
					AMTEXTN,
					TAXSTTS1,
					IDACCTREV,
					AMTEXTNHC,
					REG_DATE
					) values (
					wk_cntbtch,
					wk_cntitem,
					Wk_CNTLINE,
					c1_rec.TEXTDESC,
					abs(c1_rec.SLIP_AMT),
					2,
					c1_rec.IDACCTREV,
					abs(c1_rec.SLIP_AMT),
					sysdate
					) ;
			end if;
		end loop c1;
		<<PROC_END>>

		if c0_rec.TOTAL_SLIP_AMT <> 0 then
			/* ACCPAC_AR_TRAILER??? */
			insert into ACCPAC_AR_TRAILER(
				CNTBTCH,
				CNTITEM,
				CNTPAYM,
				DATEDUE,
				AMTDUE,
				AMTDUEHC,
				REG_DATE
				) values (
				 wk_cntbtch,
				 wk_cntitem,
				1,
				C1_rec.DUEDATE,
				abs(C0_REC.TOTAL_SLIP_AMT),
				abs(C0_REC.TOTAL_SLIP_AMT),
				sysdate
				) ;
		end if;
/*
		update transaction_sales
		  set   POSTING_DATE = sysdate
		where POSTING_DATE is null
		and company_code =   c0_rec.COMPANY_CODE
		and inv_no =         c0_rec.INV_NO
		and slip_date =      c0_rec.SLIP_DATE
		and curr_code =      c0_rec.CURR_CODE
		and TO_CHAR(OPERATION_DATE,'YYYYMMDD') = c0_rec.OPERATION_DATE;
*/
		end loop;
	<<LOOP_END2>>
	close C0;

	update transaction_sales
	  set   POSTING_DATE = sysdate
	where POSTING_DATE is null
	  and to_number(to_char(SLIP_DATE,'yyyymm')) = v_ac_month;

   end;
end accpac_ar_data_make;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ACCPAC_AR_DATA_MAKE2" 
(
  v_batchid in number
)
 as
begin
   declare
	cursor C0
	is
	select TO_CHAR(OPERATION_DATE,'YYYYMMDD') operation_date ,company_code,inv_no, slip_date,curr_code,
	            sum(round(slip_price * slip_quantity,2)) total_slip_amt 
	       from transaction_sales
		where posting_date is null
	       group by   TO_CHAR(OPERATION_DATE,'YYYYMMDD'),company_code,inv_no, slip_date,curr_code
	       order by operation_date,company_code,inv_no,total_slip_amt, slip_date,curr_code;

        C0_REC C0%rowtype := null;

	cursor C1(PARAM1 in number ,PARAM2 in varchar2, PARAM3 in date, PARAM4 in number,PARAM5 in VARCHAR2)
	is
	select t.inv_no							inv_no,
		t.slip_date						slip_date,
		nvl(dh.DUE_DATE,t.slip_date + nvl(c.pdays,1))		duedate,
		c.company						company,
		c.pdays							pdays,
		c.pdesc							pdesc,
		t.company_code						company_code,
		c.accpac_company_code || cu.curr_acc_mark		idcust,
		substrb(cl.idglacct_class,1,1) || '0-' || t.INV_NO	idinvc,
		decode(fdk.company_code,null,'N','Y')			related,
		decode(fdk.company_code,null,'31','30') || substrb(cl.idglacct_class,1,1) || '0' || cu.curr_acc_mark	idacctset,
		cu.curr_short						curr_short,
		cu.curr_acc_mark					curr_acc_mark,
		t.curr_code						curr_code,
		get_accpac_ex_rate(t.curr_code, t.slip_date)		ex_rate,
		get_accpac_ex_rate(23, t.slip_date)			idr_ex_rate,
		'N30'							termcode,
		decode(t.CURR_CODE,1,1,2)				curoper,
		t.item_no						item_no,
		i.description						description,
		t.slip_amt						slip_amt,
		substrb('SALES ' || cl.class_1||cl.class_2 ,1,50)	textdesc ,
		'4000' || substrb(cl.idglacct_class,1,1) || '-' || cl.idglacct_class	idacctrev,
				 decode(to_char(t.slip_date,'mm'), '01', 
				to_number(to_char(t.slip_date,'yyyy') - 1), '02',
				to_number(to_char(t.slip_date,'yyyy') - 1), '03',
				to_number(to_char(t.slip_date,'yyyy') - 1), to_number(to_char(t.slip_date,'yyyy')))		fscsyr,
			to_char(decode(to_char(t.slip_date,'mm'), '04', 1,'05', 2,'06', 3,'07',  4,'08',  5,'09', 6,
								   '10', 7,'11', 8,'12', 9,'01', 10,'02', 11,'03', 12),'fm09')	fscsper,
			decode(to_char(t.slip_date,'mm'), '01', 'I','02', 'II','03', '?','04', 'IV','05', 'V',
				'06', 'VI','07', 'VII','08', 'VIII','09', 'IX',
				'10', 'X','11', 'XI','12', 'XII') || '/' ||to_char(t.slip_date,'YYYY')            roma_desc 

	from (select TO_CHAR(OPERATION_DATE,'YYYYMMDD') operation_date,company_code,inv_no, slip_date,curr_code,ex_rate,
		    item_no,sum(round(slip_price * slip_quantity,2)) slip_amt 
		from transaction_sales
		where posting_date is null
		group by TO_CHAR(OPERATION_DATE,'YYYYMMDD'),company_code,inv_no, slip_date,curr_code,ex_rate, item_no) t,
		item i,
		company c,
		currency cu,
		class cl,
		fdkgroup fdk,
		do_header dh
	where t.company_code = PARAM1
	and t.inv_no =         PARAM2
	and t.slip_date =      PARAM3
	and t.curr_code =      PARAM4
	and t.operation_date = PARAM5
	and t.item_no = i.item_no(+)
	and t.company_code = c.company_code(+)
	and t.curr_code = cu.curr_code(+)
	and i.class_code = cl.class_code(+)
	and t.slip_amt <> 0
	and t.company_code = fdk.company_code(+)
	and t.INV_NO = dh.INV_NO(+)
	order by t.inv_no,t.item_no,t.slip_date;

        c1_rec c1%rowtype := null;

	cursor C2(PARA in varchar2)
	is
	select  pglosas_inv_no			,
		max(inv_cnt)		inv_cnt
	from ar_invoice_contol
	where pglosas_inv_no = PARA
	group by pglosas_inv_no ;


        c2_rec c2%rowtype := null;

	WK_CNTBTCH 		ACCPAC_AR_HEADER.CNTBTCH%type := 0;
	WK_CNTITEM 		ACCPAC_AR_HEADER.CNTITEM%type := 0;
	WK_CNTLINE 		ACCPAC_AR_DETAILS.CNTLINE%type := 0;

	WK_TEXTTRX		ACCPAC_AR_HEADER.TEXTTRX%type := 0;
	WK_IDTRX		ACCPAC_AR_HEADER.IDTRX%type := 0;
	WK_HEADER_WRITE_FLG	NUMBER(2) := 0;

	wk_cnt			number(8)	:= 0;

	wk_inv_cnt		number(6)	:= 0;
	wk_ACCPAC_INV_NO	varchar2(50)	:= null;
	WK_INVCAPPLTO		varchar2(50)	:= null;

   begin

	WK_CNTITEM := 0;

	WK_CNTBTCH := v_batchid;

	open C0;
	loop
	  fetch C0 into C0_rec;
	  exit when C0%notfound or C0%notfound is null;

		open C2(C0_REC.INV_NO);
        	   C2_rec := null ;
	           fetch C2 into C2_rec ;
		close C2 ;
		if c2_rec.INV_CNT is null  then
			wk_inv_cnt := 1;
		else
			wk_inv_cnt := c2_rec.INV_CNT + 1;
		end if ;

	  	wk_cnt := wk_cnt + 1;

		Wk_CNTLINE		:= 0;
		WK_HEADER_WRITE_FLG	:= 0;
 
		open C1(C0_REC.COMPANY_CODE,C0_REC.INV_NO,C0_REC.SLIP_DATE,C0_REC.CURR_CODE,C0_REC.OPERATION_DATE);
		loop
			fetch C1 into c1_rec;
			if C1%notfound or  C1%notfound is null then
				close C1;
				goto PROC_END;
				end if;

				if WK_HEADER_WRITE_FLG = 0  and c0_rec.TOTAL_SLIP_AMT <> 0 then
					WK_CNTITEM 		:= WK_CNTITEM +  1;


					/* CREDIT NOTE ?3,32 */
					if c0_rec.TOTAL_SLIP_AMT  >= 0 then
						WK_TEXTTRX		:=	1;
						WK_IDTRX		:=	12;
						WK_INVCAPPLTO		:=	NULL;
						wk_ACCPAC_INV_NO	:=	C1_REC.IDINVC || '-' || to_char(wk_inv_cnt,'FM099');
					else
						WK_TEXTTRX		:=	3;
						WK_IDTRX		:=	32;
						WK_INVCAPPLTO		:=	C1_REC.IDINVC || '-' || to_char(c2_rec.INV_CNT,'FM099');--?????INVOICE
						wk_ACCPAC_INV_NO	:=	'CN/' || C1_REC.IDINVC || '-' || to_char(wk_inv_cnt,'FM099');
					end if;

					/* INVOICE NO????????? */
					insert into AR_INVOICE_CONTOL(
						PGLOSAS_INV_NO,
						INV_CNT,
						POSTING_DATE
						)values(
						c0_rec.INV_NO,
						wk_inv_cnt,
						sysdate
						);


				/* ACCPAC_AR_HEADER??? */
				INSERT INTO ACCPAC_AR_HEADER(
					CNTBTCH,
					CNTITEM,
					IDCUST,
					IDINVC,
					TEXTTRX,
					IDTRX,
					ORDRNBR,
					CUSTPO,
					INVCDESC,
					IDACCTSET,
					DATEINVC,
					FISCYR,
					FISCPER,
					CODECURN,
					RATETYPE,
					EXCHRATEHC,
					TERMCODE,
					DATEDUE,
					CODETAXGRP,
					CODETAX1,
					TAXSTTS1,
					AMTNETTOT,
					DATERATE,
					AMTDUE,
					CUROPER,
					INVCTYPE,
					CODECURNRC,
					SWTXCTLRC,
					RATERC,
					RATETYPERC,
					RATEDATERC,
					RATEOPRC,
					AMTGROSHC,
					AMTDUEHC,
					DATEBUS,
					REG_DATE,
					INVCAPPLTO
					) values (
					wk_cntbtch,
					wk_cntitem,
					c1_rec.IDCUST,
					wk_ACCPAC_INV_NO,
					WK_TEXTTRX,
					WK_IDTRX,
					null,
					null,
					c1_rec.COMPANY,
					c1_rec.IDACCTSET,
					c1_rec.SLIP_DATE,
					c1_rec.FSCSYR,
					c1_rec.FSCSPER,
					c1_rec.CURR_SHORT,
					'TX',
					c1_rec.EX_RATE,
					c1_rec.TERMCODE,
					c1_rec.DUEDATE,
					'PPN10',
					'PPN10',
					2,
					abs(c0_rec.TOTAL_SLIP_AMT),
					c0_rec.SLIP_DATE,
					abs(c0_rec.TOTAL_SLIP_AMT),
					c1_rec.CUROPER,
					2,
					'IDR',
					1,
					c1_rec.IDR_EX_RATE,
					'TX',
					c0_rec.SLIP_DATE,
					1,
					abs(c0_rec.TOTAL_SLIP_AMT),
					abs(c0_rec.TOTAL_SLIP_AMT),
					c0_rec.SLIP_DATE,
					sysdate,
					WK_INVCAPPLTO) ;
					WK_HEADER_WRITE_FLG	:= 1;
				end if;

				Wk_CNTLINE	:= Wk_CNTLINE + 20;

				/* ACCPAC_AR_DETAILS??? */
				if WK_HEADER_WRITE_FLG <> 0 then
				insert into ACCPAC_AR_DETAILS(
					CNTBTCH,
					CNTITEM,
					CNTLINE,
					TEXTDESC,
					AMTEXTN,
					TAXSTTS1,
					IDACCTREV,
					AMTEXTNHC,
					REG_DATE
					) values (
					wk_cntbtch,
					wk_cntitem,
					Wk_CNTLINE,
					c1_rec.TEXTDESC,
					abs(c1_rec.SLIP_AMT),
					2,
					c1_rec.IDACCTREV,
					c1_rec.SLIP_AMT,
					sysdate
					) ;
			end if;
		end loop c1;
		<<PROC_END>>

		if c0_rec.TOTAL_SLIP_AMT <> 0 then
			/* ACCPAC_AR_TRAILER??? */
			insert into ACCPAC_AR_TRAILER(
				CNTBTCH,
				CNTITEM,
				CNTPAYM,
				DATEDUE,
				AMTDUE,
				AMTDUEHC,
				REG_DATE
				) values (
				 wk_cntbtch,
				 wk_cntitem,
				1,
				C1_rec.DUEDATE,
				abs(C0_REC.TOTAL_SLIP_AMT),
				abs(C0_REC.TOTAL_SLIP_AMT),
				sysdate
				) ;
		end if;
/*
		update transaction_sales
		  set   POSTING_DATE = sysdate
		where POSTING_DATE is null
		and company_code =   c0_rec.COMPANY_CODE
		and inv_no =         c0_rec.INV_NO
		and slip_date =      c0_rec.SLIP_DATE
		and curr_code =      c0_rec.CURR_CODE
		and TO_CHAR(OPERATION_DATE,'YYYYMMDD') = c0_rec.OPERATION_DATE;
*/
		end loop;
	<<LOOP_END2>>
	close C0;

	update transaction_sales
	  set   POSTING_DATE = sysdate
	where POSTING_DATE is null;

   end;
end accpac_ar_data_make2;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ACCPAC_DOMESTIC_MCV_DATA_MAKE" as
begin
   declare
	cursor C0
	is
	select t.company_code,
		t.slip_no,
		t.slip_date,
		t.curr_code,
		t.COST_SUBJECT_CODE,
		c.IDGLACCT_CLASS,
		to_char(t.history_date, 'yyyymmddhh24mi') history_date,
		slip_type
	FROM transaction_for_accpac t,
		item i,
		class c
	where t.ITEM_NO = i.ITEM_NO(+)
	  and i.CLASS_CODE = c.CLASS_CODE(+)
	  and  t.mcv_posting_date  is null
	  AND TO_CHAR(SLIP_DATE,'YYYYMM')= TO_CHAR(TRUNC(SYSDATE) -7,'YYYYMM') 
--	  AND TO_CHAR(SLIP_DATE,'YYYYMM')= '201406' 
	group by t.company_code, t.slip_no, t.slip_date, t.curr_code, t.COST_SUBJECT_CODE,
		c.IDGLACCT_CLASS, to_char(t.history_date, 'yyyymmddhh24mi'), slip_type
	order by t.company_code, t.slip_no, t.slip_date, t.curr_code, t.COST_SUBJECT_CODE,
		c.IDGLACCT_CLASS, to_char(t.history_date, 'yyyymmddhh24mi'), slip_type desc;

        C0_REC C0%rowtype := null;

	cursor C1(PARA1 in number,   PARA2 in varchar2, PARA3 in date,    PARA4 in number,
		  PARA5 in varchar2, PARA6 in varchar2, PARA7 in varchar2,PARA8 in varchar2)
	is
	select t.company_code							company_code,
		c.accpac_company_code						accpac_company_code,
		c.company							company,
		c.country_code							country_code,
		cs.cost_subject_name						cost_subject_name,
		t.slip_no							slip_no,
		t.slip_date							slip_date,
		decode(c.pdays, null, t.slip_date, t.slip_date + c.pdays)	due_date,
		t.purchase_amount						purchase_amount,
		t.standard_amount						standard_amount,
		cu.curr_short							curr_short,
		cu.curr_acc_mark						curr_acc_mark,
		get_accpac_ex_rate(t.curr_code, t.slip_date)			ex_rate,
		t.standard_amount * get_accpac_ex_rate(t.curr_code, t.slip_date) inventory_amnt ,
		t.purchase_amount - t.standard_amount * get_accpac_ex_rate(t.curr_code, t.slip_date)   	mcv_amt,
		rtrim(id.inventory_idglacct) || '-' || t.idglacct_class	inventory_id,
		rtrim(id.mcv_idglacct) || '-' || t.idglacct_class		mcv_id,
		c.pdays								pdays,
		decode(fdk.company_code,null,'N','Y') 				related,
		substrb(t.idglacct_class,1,1) || '0'				acct_class,
		 decode(to_char(t.slip_date,'mm'), '01', 
		        to_number(to_char(t.slip_date,'yyyy') - 1), '02',
		        to_number(to_char(t.slip_date,'yyyy') - 1), '03',
		        to_number(to_char(t.slip_date,'yyyy') - 1), to_number(to_char(t.slip_date,'yyyy')))        fscsyr,
		 to_char(decode(to_char(t.slip_date,'mm'), '04', 1,'05', 2,'06', 3,'07',  4,'08',  5,'09', 6,
		                                       '10', 7,'11', 8,'12', 9,'01', 10,'02', 11,'03', 12),'fm09') fscsperd,
		 decode(to_char(t.slip_date,'mm'), '01', 'I','02', 'II','03', '?','04', 'IV','05', 'V',
       	                        '06', 'VI','07', 'VII','08', 'VIII','09', 'IX',
       	                        '10', 'X','11', 'XI','12', 'XII') || '/' ||to_char(t.slip_date,'YYYY')            roma_desc ,
		t.SLIP_TYPE
	from (	select t1.company_code					,
			t1.slip_no					,
			t1.slip_date					,
			t1.curr_code					,
			t1.COST_SUBJECT_CODE				,
			c.IDGLACCT_CLASS				,
			to_char(t1.history_date, 'yyyymmddhh24mi')	history_date,
			t1.slip_type					slip_type,
			sum(t1.purchase_amount)				purchase_amount,
			sum(round(t1.standard_amount,2))				standard_amount
		FROM transaction_for_accpac t1,
			item i,
			class c
		where t1.ITEM_NO = i.ITEM_NO(+)
		  and i.CLASS_CODE = c.CLASS_CODE(+)
		  and  t1.mcv_posting_date  is null
		group by t1.company_code, t1.slip_no, t1.slip_date, t1.curr_code, t1.COST_SUBJECT_CODE,
			c.IDGLACCT_CLASS, to_char(t1.history_date, 'yyyymmddhh24mi'), t1.slip_type
	    ) t,
		company c,
		costsubject cs,
		currency cu,
		idglacct_costsubject id,
		fdkgroup fdk
	where t.company_code = c.company_code(+)
	and t.COST_SUBJECT_CODE = cs.COST_SUBJECT_CODE(+)
	and t.COST_SUBJECT_CODE = id.COST_SUBJECT_CODE(+)
	and t.curr_code = cu.curr_code(+)
	and t.company_code = fdk.company_code(+)
	and c.COUNTRY_CODE = 118
	and t.company_code	= PARA1
	and t.slip_no		= PARA2
	and t.slip_date		= PARA3
	and t.curr_code		= PARA4
	and t.COST_SUBJECT_CODE	= PARA5
	and t.IDGLACCT_CLASS	= PARA6
	and t.history_date	= PARA7
	and t.slip_type		= PARA8
	order by t.COMPANY_CODE,t.SLIP_NO,t.SLIP_DATE,t.COST_SUBJECT_CODE,t.IDGLACCT_CLASS,t.HISTORY_DATE,t.SLIP_TYPE desc;

        c1_rec c1%rowtype := null;

	cursor C2(PARA in varchar2)
	is
	select  pglosas_inv_no			,
		max(inv_cnt)		inv_cnt
	 from ap_invoice_contol
	 where pglosas_inv_no = PARA
	 group by pglosas_inv_no ;

        c2_rec c2%rowtype := null;

	cursor C3
	is
	select company_code,
		slip_no,
		slip_date,
		curr_code,
		COST_SUBJECT_CODE,
		to_char(history_date, 'yyyymmddhh24mi') history_date,
		slip_type
	FROM transaction_for_accpac t
	where  t.mcv_posting_date  is null
	group by t.company_code, t.slip_no, t.slip_date, t.curr_code, t.COST_SUBJECT_CODE,
		to_char(t.history_date, 'yyyymmddhh24mi'), slip_type
	order by t.company_code, t.slip_no, t.slip_date, t.curr_code, t.COST_SUBJECT_CODE,
		 to_char(t.history_date, 'yyyymmddhh24mi'), slip_type desc;

        c3_rec c3%rowtype := null;


	WK_CNTBTCH		MCV_AP_HEADER.CNTBTCH%type := 0;
	WK_CNTITEM		MCV_AP_HEADER.CNTITEM%type := 0;
	WK_TEXTTRX		MCV_AP_HEADER.TEXTTRX%type := 0;
	WK_IDTRX		MCV_AP_HEADER.IDTRX%type := 0;
	WK_HEADER_WRITE_FLG	NUMBER(2) := 0;
	WK_INVCAPPLTO		MCV_AP_HEADER.INVCAPPLTO%type	:= null;

	wk_cnt			number(8)	:= 0;

	wk_inv_cnt		number(6)	:= 0;
	wk_ACCPAC_INV_NO	varchar2(50)	:= null;

   begin

        /* MCV??????????????? */
        goto END_1;


	select accpacid_seq.nextval into wk_cntbtch from  dual;
	WK_CNTITEM := 0;

	open C0;
	loop
	  fetch C0 into C0_rec;
	  exit when C0%notfound or C0%notfound is null;

		/* SLIP_NO???????????? */
		open C2(C0_REC.SLIP_NO);
        	   C2_rec := null ;
	           fetch C2 into C2_rec ;
		close C2 ;
		if c2_rec.INV_CNT is null  then
			wk_inv_cnt := 1;
		else
			wk_inv_cnt := c2_rec.INV_CNT + 1;
		end if ;

	  	wk_cnt := wk_cnt + 1;
 
		open C1(c0_rec.COMPANY_CODE,c0_rec.SLIP_NO,c0_rec.SLIP_DATE,c0_rec.CURR_CODE,
			c0_rec.COST_SUBJECT_CODE,c0_rec.IDGLACCT_CLASS,c0_rec.HISTORY_DATE,c0_rec.SLIP_TYPE);
		loop
			fetch C1 into c1_rec;
			if C1%notfound or  C1%notfound is null then
				close C1;
				goto PROC_END;
			end if;

			WK_CNTITEM 		:= WK_CNTITEM +  1;


			/* CREDIT NOTE ?3,32 */
			if c0_rec.SLIP_TYPE  in ('01','11','41') then
				WK_TEXTTRX		:=	1;
				WK_IDTRX		:=	12;
				WK_INVCAPPLTO		:=	NULL;
				if wk_inv_cnt = 1 then
					wk_ACCPAC_INV_NO	:=	C1_REC.SLIP_NO ;
				else
					wk_ACCPAC_INV_NO	:=	C1_REC.SLIP_NO || '-' || to_char(wk_inv_cnt,'FM099');
				end if;
			else
				WK_TEXTTRX		:=	3;
				WK_IDTRX		:=	32;
				if wk_inv_cnt = 2 then
					WK_INVCAPPLTO		:=	C1_REC.SLIP_NO ;--?????INVOICE
				else
					WK_INVCAPPLTO		:=	C1_REC.SLIP_NO || '-' || to_char(c2_rec.INV_CNT,'FM099');--?????INVOICE
				end if;
				wk_ACCPAC_INV_NO	:=	'CN/' || C1_REC.SLIP_NO || '-' || to_char(wk_inv_cnt,'FM099');
			end if;

			/* INVOICE NO????????? */
			insert into AP_INVOICE_CONTOL(
				PGLOSAS_INV_NO,
				INV_CNT,
				POSTING_DATE
				)values(
				c1_rec.SLIP_NO,
				wk_inv_cnt,
				sysdate
				);


			  /* MCV_AP_HEADER??? */
			  INSERT INTO MCV_AP_HEADER(
				 CNTBTCH,
				 CNTITEM,
				 IDVEND,
				 TEXTVEN,
				 IDINVC,
				 PONBR,
				 ORDRNBR, 
				 INVCDESC,
				 IDACCTSET,
				 DATEINVC,
				 DATEBUS,
				 FISCYR,
				 FISCPER,
				 CODECURN, 
				 RATETYPE,
				 EXCHRATEHC,
				 CODETAXGRP,
				 CODETAX1,
				 AMTINVCTOT,
				 TAXCLASS1, 
				 AMTTAX1,
				 TAXCLASS2,
				 AMTTAX2,
				 AMTGROSDST,
				 AMTDUETC,
				 AMTGROSTOT, 
				 ACCTREC1,
				 ACCTREC2,
				 TERMCODE,
				 DATEDUE,
				 REG_DATE,
				 TEXTTRX,
				 IDTRX,
				 INVCAPPLTO
				) values (
				 wk_cntbtch,
				 wk_cntitem,
				 c1_rec.ACCPAC_COMPANY_CODE || c1_rec.CURR_ACC_MARK,
				 c1_rec.COST_SUBJECT_NAME,
				 wk_ACCPAC_INV_NO,
				 null,
				 null, 
				 c1_rec.COST_SUBJECT_NAME,
				 decode(c1_rec.RELATED,'Y','62','63') || c1_rec.ACCT_CLASS || c1_rec.CURR_ACC_MARK,
				 c1_rec.SLIP_DATE,
				 c1_rec.SLIP_DATE,
				 c1_rec.FSCSYR,
				 c1_rec.FSCSPERD,
				 c1_rec.CURR_SHORT, 
				 'TX',
				 c1_rec.EX_RATE,
				 'P2130',
				 'PPN30',
				 abs(c1_rec.PURCHASE_AMOUNT),
				 2, 
				 0,
				 2,
				 0,
				 abs(c1_rec.PURCHASE_AMOUNT),
				 abs(c1_rec.PURCHASE_AMOUNT),
				 abs(c1_rec.PURCHASE_AMOUNT), 
				 '11408-30',
				 '24401-30',
				 'N30',
				 c1_rec.DUE_DATE,
				 sysdate,
				 WK_TEXTTRX,
				 WK_IDTRX,
				 WK_INVCAPPLTO
				 ) ;

			  /* MCV_AP_DETAILS??? ???? */
			  insert into mcv_ap_details(
				cntbtch,
				cntitem,
				cntline,
				idglacct,
				amtdist,
				textdesc, 
				taxclass1,
				taxclass2,
				amttax1,
				amttax2,
				reg_date
				) values (
				 wk_cntbtch,
				 wk_cntitem,
				1,
--				c1_rec.INVENTORY_ID,
				GET_NEW_ACCTID(c1_rec.INVENTORY_ID) ,
				c1_rec.INVENTORY_AMNT,
				c1_rec.COST_SUBJECT_NAME, 
				2,
				2,
				0,
				0,
				sysdate
				) ;

			  /* MCV_AP_DETAILS??? ?????*/
			  insert into mcv_ap_details(
				cntbtch,
				cntitem,
				cntline,
				idglacct,
				amtdist,
				textdesc, 
				taxclass1,
				taxclass2,
				amttax1,
				amttax2,
				reg_date
				) values (
				 wk_cntbtch,
				 wk_cntitem,
				2,
--				c1_rec.MCV_ID,
				GET_NEW_ACCTID(c1_rec.MCV_ID),
				c1_rec.MCV_AMT,
				c1_rec.COST_SUBJECT_NAME, 
				2,
				2,
				0,
				0,
				sysdate
				) ;

			  /* MCV_AP_TRAILER??? */
			  insert into mcv_ap_trailer(
				cntbtch,
				cntitem,
				cntpaym,
				datedue,
				amtdue,
				reg_date
				) values (
				 wk_cntbtch,
				 wk_cntitem,
				1,
				c1_rec.DUE_DATE,
				c1_rec.PURCHASE_AMOUNT,
				sysdate
				) ;

		end loop c1;
		<<PROC_END>>
		null;
	end loop;
	<<LOOP_END2>>
	close C0;

	open C3;
	loop
	  fetch C3 into C3_rec;
	  exit when C3%notfound or C3%notfound is null;
		
		update transaction_for_accpac
		   set mcv_posting_date = sysdate
		where company_code = c3_rec.COMPANY_CODE
		  and	slip_no  = c3_rec.SLIP_NO
		  and	slip_date = c3_rec.SLIP_DATE
		  and	curr_code  = c3_rec.CURR_CODE
		  and	COST_SUBJECT_CODE = c3_rec.COST_SUBJECT_CODE
		  and	to_char(history_date, 'yyyymmddhh24mi') = c3_rec.HISTORY_DATE
		  and	slip_type = c3_rec.SLIP_TYPE
		  and mcv_posting_date is null;

	end loop c3;
	<<LOOP_END3>>
	close C3;

<<END_1>>
NULL;
   end;
end accpac_domestic_mcv_data_make;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ACCPAC_IMPORT_MCV_DATA_MAKE" (
  v_batchid in number,
  v_ac_month in number
)
 as
begin
   declare
	cursor C1(PARA in number)
	is
	select t1.SLIP_DATE,
		t1.COMPANY_CODE,
		t1.COMPANY,
		t1.SLIP_NO,
		t1.CURR_SHORT,
		t1.EX_RATE,
		t1.CLASS2,
		t1.CLASS,
		t1.INVENTORY_AMNT_O,
		t1.MCV_AMT_O,
		t1.INVENTORY_AMNT_L,
		t1.MCV_AMT_L,
		t2.transit_amt_o * -1 transit_amt_o,
		t2.transit_amt_l * -1 transit_amt_l,
		 decode(to_char(t1.slip_date,'mm'), '01', 
		        to_number(to_char(t1.slip_date,'yyyy') - 1), '02',
		        to_number(to_char(t1.slip_date,'yyyy') - 1), '03',
		        to_number(to_char(t1.slip_date,'yyyy') - 1), to_number(to_char(t1.slip_date,'yyyy')))        fscsyr,
		 to_char(decode(to_char(t1.slip_date,'mm'), '04', 1,'05', 2,'06', 3,'07',  4,'08',  5,'09', 6,
		                                       '10', 7,'11', 8,'12', 9,'01', 10,'02', 11,'03', 12),'fm09')  fscsperd
	from (select t.slip_date slip_date,
			t.company_code company_code,
			c.company company,
			t.slip_no slip_no,
			cu.curr_short curr_short,
			get_accpac_ex_rate(t.curr_code, t.slip_date) ex_rate,
			substrb(cl.idglacct_class, 1, 1) class2,
			cl.idglacct_class class,
			sum(t.standard_amount) inventory_amnt_o ,
			sum(round((t.purchase_amount - t.standard_amount * get_accpac_ex_rate(t.curr_code,t.slip_date)) /get_accpac_ex_rate(t.curr_code,t.slip_date) ,2)) mcv_amt_o,
			sum(ROUND(t.standard_amount * get_accpac_ex_rate(t.curr_code, t.slip_date),2)) inventory_amnt_l ,
			sum(ROUND(t.purchase_amount - t.standard_amount * get_accpac_ex_rate(t.curr_code, t.slip_date),2)) mcv_amt_l
		from transaction_for_accpac t,
			item i,
			company c,
			currency cu,
			class cl
		where t.item_no = i.item_no(+)
		and t.company_code = c.company_code(+)
		and i.class_code = cl.class_code(+)
		and t.curr_code = cu.curr_code(+)
		and c.COUNTRY_CODE <> 118
		and t.POSTING_DATE is null
		and to_number(to_char(t.SLIP_DATE,'yyyymm')) = PARA
		group by t.slip_date, t.company_code, c.company, t.slip_no, cu.curr_short, cu.curr_acc_mark,
			get_accpac_ex_rate(t.curr_code, t.slip_date), substrb(cl.idglacct_class, 1,1), cl.idglacct_class
		) t1,
		(select t.slip_date slip_date,
			t.company_code company_code,
			c.company company,
			t.slip_no slip_no,
			cu.curr_short curr_short,
			get_accpac_ex_rate(t.curr_code, t.slip_date) ex_rate,
			substrb(cl.idglacct_class, 1, 1) class2,
			ROUND(sum(t.standard_amount)  +    sum(round((t.purchase_amount - t.standard_amount * get_accpac_ex_rate(t.curr_code,t.slip_date)) /get_accpac_ex_rate(t.curr_code,t.slip_date),2)),2)  transit_amt_o ,
			ROUND(sum(t.standard_amount * get_accpac_ex_rate(t.curr_code, t.slip_date)) +  sum(t.purchase_amount - t.standard_amount * get_accpac_ex_rate(t.curr_code,t.slip_date)),2)    transit_amt_l
		from transaction_for_accpac t,
			item i,
			company c,
			currency cu,
			class cl
		where t.item_no = i.item_no(+)
		and t.company_code = c.company_code(+)
		and i.class_code = cl.class_code(+)
		and t.curr_code = cu.curr_code(+)
		and t.POSTING_DATE is null
		and c.COUNTRY_CODE <> 118
		and to_number(to_char(t.SLIP_DATE,'yyyymm')) = PARA
		group by t.slip_date, t.company_code, c.company, t.slip_no, cu.curr_short, cu.curr_acc_mark,
		get_accpac_ex_rate(t.curr_code, t.slip_date), substrb(cl.idglacct_class, 1,1)
		) t2
	where t1.SLIP_DATE = t2.SLIP_DATE(+)
	and t1.COMPANY_CODE = t2.COMPANY_CODE(+)
	and t1.SLIP_NO = t2.SLIP_NO(+)
	and t1.CURR_SHORT = t2.CURR_SHORT(+)
	and t1.CLASS2 = t2.CLASS2(+)
	order by t1.SLIP_DATE, t1.COMPANY_CODE, t1.COMPANY, t1.SLIP_NO, t1.CURR_SHORT,
		t1.EX_RATE, t1.CLASS2, t1.CLASS;

        c1_rec c1%rowtype := null;

	/* ????? */
	bk_rec c1%rowtype := null;	

	WK_BATCHID   GL_INV_I_TRANSIT_HEADER.BATCHID%type := 0;
	WK_BTCHENTRY GL_INV_I_TRANSIT_HEADER.BTCHENTRY%type := 0;
	WK_TRANSNBR  GL_INV_I_TRANSIT_DETAILS.TRANSNBR%type := 0;

	BK_SLIP_DATE	 	date		:= null;
	BK_COMPANY_CODE	number(8)	:= 0;
	BK_SLIP_NO		varchar2(25)	:= null;
	BK_CURR_SHORT		varchar2(3)	:= null;
	BK_CLASS2		varchar2(1)	:= null;

	WK_CNT			number(8)	:= 0;
   begin

	lock table transaction_for_accpac in exclusive mode;

	/* ?????? */
	BK_SLIP_DATE	 	:= null;
	BK_COMPANY_CODE	:= 0;
	BK_SLIP_NO		:= 'zzzzzzzzzzzzzzzzzzzzzzzzz';
	BK_CURR_SHORT		:= 'zzz';
	BK_CLASS2		:= '9';


	WK_BATCHID  := v_batchid;
	WK_BTCHENTRY := 0;

	open C1(v_ac_month);
	loop
	  fetch C1 into c1_rec;
	  exit when C1%notfound or C1%notfound is null;

	  /* Inventory In Transit ??????? */
	  if BK_SLIP_DATE <> c1_rec.SLIP_DATE or BK_COMPANY_CODE <> c1_rec.COMPANY_CODE or
	     BK_SLIP_NO <> c1_rec.SLIP_NO      or BK_CURR_SHORT    <> c1_rec.CURR_SHORT or
             BK_CLASS2 <> c1_rec.CLASS2  then
		
		if wk_cnt <>  0 then
		  /* ????? GL_INV_I_TRANSIT_DETAILS??? Inventory In Transit */

		  WK_TRANSNBR	:= WK_TRANSNBR + 20;

		  insert into GL_INV_I_TRANSIT_DETAILS(
				BATCHNBR,
				JOURNALID,
				TRANSNBR,
				ACCTID,
				TRANSAMT,
				SCURNAMT, 
				HCURNCODE,
				RATETYPE,
				SCURNCODE,
				RATEDATE,
				CONVRATE,
				TRANSDESC, 
				TRANSREF,
				TRANSDATE,
				REMARK,
				REG_DATE
			) values (
				WK_BATCHID,
				WK_BTCHENTRY,
				WK_TRANSNBR,
				'12013' || bk_rec.CLASS2 || '0',
				bk_rec.TRANSIT_AMT_O,
				bk_rec.TRANSIT_AMT_L, 
				'USD',
				'TX',
				bk_rec.CURR_SHORT,
				bk_rec.SLIP_DATE,
				bk_rec.EX_RATE,
				'RECLASS INV IN TRANSIT', 
				bk_rec.SLIP_NO,
				bk_rec.SLIP_DATE,
				null,
				sysdate
			) ;
		end if;
	 end if;


	  /* GL_INV_I_TRANSIT_HEADER??? */
	  if BK_SLIP_DATE <> c1_rec.SLIP_DATE or BK_COMPANY_CODE <> c1_rec.COMPANY_CODE or
	     BK_SLIP_NO <> c1_rec.SLIP_NO      or BK_CURR_SHORT    <> c1_rec.CURR_SHORT then

		  WK_BTCHENTRY := WK_BTCHENTRY +  1;

		   INSERT INTO GL_INV_I_TRANSIT_HEADER(
			BATCHID,
			BTCHENTRY,
			SRCELEDGER,
			SRCETYPE,
			FSCSYR,
			FSCSPERD, 
			JRNLDESC,
			DATEENTRY,
			REG_DATE
			) values (
			WK_BATCHID,
			WK_BTCHENTRY,
			'GL',
			'JE',
			c1_rec.FSCSYR,
			c1_rec.FSCSPERD, 
			c1_rec.COMPANY,
			c1_rec.SLIP_DATE,
			 sysdate) ;

		update TRANSACTION_FOR_ACCPAC
		  set   POSTING_DATE = sysdate
		where   SLIP_DATE	=	 BK_SLIP_DATE     and 
			COMPANY_CODE	=	 BK_COMPANY_CODE  and 
			SLIP_NO		=	 BK_SLIP_NO;



		WK_TRANSNBR		:=	0;
		BK_SLIP_DATE	 	:=	 c1_rec.SLIP_DATE;
		BK_COMPANY_CODE		:=	 c1_rec.COMPANY_CODE;
		BK_SLIP_NO		:=	 c1_rec.SLIP_NO;
		BK_CURR_SHORT		:=	 c1_rec.CURR_SHORT;
		BK_CLASS2		:=	 c1_rec.CLASS2;

	  end if;

	  /* ???????  */
	  bk_rec	:= c1_rec;

	  /* GL_INV_I_TRANSIT_DETAILS??? ??*/
	if  c1_rec.INVENTORY_AMNT_O  = 0  and c1_rec.INVENTORY_AMNT_L  = 0 then 
	   null;
	else 

	  WK_TRANSNBR	:= WK_TRANSNBR + 20;

	  insert into GL_INV_I_TRANSIT_DETAILS(
			BATCHNBR,
			JOURNALID,
			TRANSNBR,
			ACCTID,
			TRANSAMT,
			SCURNAMT, 
			HCURNCODE,
			RATETYPE,
			SCURNCODE,
			RATEDATE,
			CONVRATE,
			TRANSDESC, 
			TRANSREF,
			TRANSDATE,
			REMARK,
			REG_DATE
		) values (
			WK_BATCHID,
			WK_BTCHENTRY,
			WK_TRANSNBR,
			'50101' || c1_rec.CLASS,
			c1_rec.INVENTORY_AMNT_O,
			c1_rec.INVENTORY_AMNT_L, 
			'USD',
			'TX',
			c1_rec.CURR_SHORT,
			c1_rec.SLIP_DATE,
			c1_rec.EX_RATE,
			'RECLASS INV IN TRANSIT', 
			c1_rec.SLIP_NO,
			c1_rec.SLIP_DATE,
			null,
			sysdate
		) ;
	  end if;
	  /* GL_INV_I_TRANSIT_DETAILS??? ?????*/
	if  c1_rec.MCV_AMT_O  = 0  and c1_rec.MCV_AMT_L  = 0 then 
	   null;
	else 
	  WK_TRANSNBR	:= WK_TRANSNBR + 20;

	  insert into GL_INV_I_TRANSIT_DETAILS(
			BATCHNBR,
			JOURNALID,
			TRANSNBR,
			ACCTID,
			TRANSAMT,
			SCURNAMT, 
			HCURNCODE,
			RATETYPE,
			SCURNCODE,
			RATEDATE,
			CONVRATE,
			TRANSDESC, 
			TRANSREF,
			TRANSDATE,
			REMARK,
			REG_DATE
		) values (
			WK_BATCHID,
			WK_BTCHENTRY,
			WK_TRANSNBR,
			'50601' || c1_rec.CLASS,
			c1_rec.MCV_AMT_O,
			c1_rec.MCV_AMT_L, 
			'USD',
			'TX',
			c1_rec.CURR_SHORT,
			c1_rec.SLIP_DATE,
			c1_rec.EX_RATE,
			'RECLASS INV IN TRANSIT', 
			c1_rec.SLIP_NO,
			c1_rec.SLIP_DATE,
			null,
			sysdate
		) ;
		end if;
		BK_SLIP_DATE	 	:=	 c1_rec.SLIP_DATE;
		BK_COMPANY_CODE	:=	 c1_rec.COMPANY_CODE;
		BK_SLIP_NO		:=	 c1_rec.SLIP_NO;
		BK_CURR_SHORT		:=	 c1_rec.CURR_SHORT;
		BK_CLASS2		:=	 c1_rec.CLASS2;

		WK_CNT		:= WK_CNT + 1;
--	update TRANSACTION_FOR_ACCPAC
--	set POSTING_DATE = sysdate
--	where rowid = c1_rec.ROWID;

	<<LOOP_END>>
	  null;
	end loop;
	  /* ????? GL_INV_I_TRANSIT_DETAILS??? Inventory In Transit */
	if WK_CNT <> 0 then
		  WK_TRANSNBR	:= WK_TRANSNBR + 20;

		  insert into GL_INV_I_TRANSIT_DETAILS(
				BATCHNBR,
				JOURNALID,
				TRANSNBR,
				ACCTID,
				TRANSAMT,
				SCURNAMT, 
				HCURNCODE,
				RATETYPE,
				SCURNCODE,
				RATEDATE,
				CONVRATE,
				TRANSDESC, 
				TRANSREF,
				TRANSDATE,
				REMARK,
				REG_DATE
			) values (
				WK_BATCHID,
				WK_BTCHENTRY,
				WK_TRANSNBR,
				'12013' || c1_rec.CLASS2 || '0',
				bk_rec.TRANSIT_AMT_O,
				bk_rec.TRANSIT_AMT_L, 
				'USD',
				'TX',
				bk_rec.CURR_SHORT,
				bk_rec.SLIP_DATE,
				bk_rec.EX_RATE,
				'RECLASS INV IN TRANSIT', 
				bk_rec.SLIP_NO,
				bk_rec.SLIP_DATE,
				null,
				sysdate
			) ;

		update TRANSACTION_FOR_ACCPAC
		  set   POSTING_DATE = sysdate
		where   SLIP_DATE	=	 BK_SLIP_DATE     
		  and	COMPANY_CODE	=	 BK_COMPANY_CODE  
		  and	SLIP_NO		=	 BK_SLIP_NO
		  and	POSTING_DATE is null;
	end if;
	close C1;
   end;
end accpac_import_mcv_data_make;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ACCPAC_IMPORT_MCV_DATA_MAKE2" (
  v_batchid in number
)
 as
begin
   declare
	cursor C1
	is
	select t1.SLIP_DATE,
		t1.COMPANY_CODE,
		t1.COMPANY,
		t1.SLIP_NO,
		t1.CURR_SHORT,
		t1.EX_RATE,
		t1.CLASS2,
		t1.CLASS,
		t1.INVENTORY_AMNT_O,
		t1.MCV_AMT_O,
		t1.INVENTORY_AMNT_L,
		t1.MCV_AMT_L,
		t2.transit_amt_o * -1 transit_amt_o,
		t2.transit_amt_l * -1 transit_amt_l,
		 decode(to_char(t1.slip_date,'mm'), '01', 
		        to_number(to_char(t1.slip_date,'yyyy') - 1), '02',
		        to_number(to_char(t1.slip_date,'yyyy') - 1), '03',
		        to_number(to_char(t1.slip_date,'yyyy') - 1), to_number(to_char(t1.slip_date,'yyyy')))        fscsyr,
		 to_char(decode(to_char(t1.slip_date,'mm'), '04', 1,'05', 2,'06', 3,'07',  4,'08',  5,'09', 6,
		                                       '10', 7,'11', 8,'12', 9,'01', 10,'02', 11,'03', 12),'fm09')  fscsperd
	from (select t.slip_date slip_date,
			t.company_code company_code,
			c.company company,
			t.slip_no slip_no,
			cu.curr_short curr_short,
			get_accpac_ex_rate(t.curr_code, t.slip_date) ex_rate,
			substrb(cl.idglacct_class, 1, 1) class2,
			cl.idglacct_class class,
			sum(t.standard_amount) inventory_amnt_o ,
			sum(round((t.purchase_amount - t.standard_amount * get_accpac_ex_rate(t.curr_code,t.slip_date)) /get_accpac_ex_rate(t.curr_code,t.slip_date) ,2)) mcv_amt_o,
			sum(ROUND(t.standard_amount * get_accpac_ex_rate(t.curr_code, t.slip_date),2)) inventory_amnt_l ,
			sum(ROUND(t.purchase_amount - t.standard_amount * get_accpac_ex_rate(t.curr_code, t.slip_date),2)) mcv_amt_l
		from transaction_for_accpac t,
			item i,
			company c,
			currency cu,
			class cl
		where t.item_no = i.item_no(+)
		and t.company_code = c.company_code(+)
		and i.class_code = cl.class_code(+)
		and t.curr_code = cu.curr_code(+)
		and c.COUNTRY_CODE <> 118
		and t.POSTING_DATE is null
		group by t.slip_date, t.company_code, c.company, t.slip_no, cu.curr_short, cu.curr_acc_mark,
			get_accpac_ex_rate(t.curr_code, t.slip_date), substrb(cl.idglacct_class, 1,1), cl.idglacct_class
		) t1,
		(select t.slip_date slip_date,
			t.company_code company_code,
			c.company company,
			t.slip_no slip_no,
			cu.curr_short curr_short,
			get_accpac_ex_rate(t.curr_code, t.slip_date) ex_rate,
			substrb(cl.idglacct_class, 1, 1) class2,
			ROUND(sum(t.standard_amount)  +    sum(round((t.purchase_amount - t.standard_amount * get_accpac_ex_rate(t.curr_code,t.slip_date)) /get_accpac_ex_rate(t.curr_code,t.slip_date),2)),2)  transit_amt_o ,
			ROUND(sum(t.standard_amount * get_accpac_ex_rate(t.curr_code, t.slip_date)) +  sum(t.purchase_amount - t.standard_amount * get_accpac_ex_rate(t.curr_code,t.slip_date)),2)    transit_amt_l
		from transaction_for_accpac t,
			item i,
			company c,
			currency cu,
			class cl
		where t.item_no = i.item_no(+)
		and t.company_code = c.company_code(+)
		and i.class_code = cl.class_code(+)
		and t.curr_code = cu.curr_code(+)
		and t.POSTING_DATE is null
		and c.COUNTRY_CODE <> 118
		group by t.slip_date, t.company_code, c.company, t.slip_no, cu.curr_short, cu.curr_acc_mark,
		get_accpac_ex_rate(t.curr_code, t.slip_date), substrb(cl.idglacct_class, 1,1)
		) t2
	where t1.SLIP_DATE = t2.SLIP_DATE(+)
	and t1.COMPANY_CODE = t2.COMPANY_CODE(+)
	and t1.SLIP_NO = t2.SLIP_NO(+)
	and t1.CURR_SHORT = t2.CURR_SHORT(+)
	and t1.CLASS2 = t2.CLASS2(+)
	order by t1.SLIP_DATE, t1.COMPANY_CODE, t1.COMPANY, t1.SLIP_NO, t1.CURR_SHORT,
		t1.EX_RATE, t1.CLASS2, t1.CLASS;

        c1_rec c1%rowtype := null;

	/* ????? */
	bk_rec c1%rowtype := null;	

	WK_BATCHID   GL_INV_I_TRANSIT_HEADER.BATCHID%type := 0;
	WK_BTCHENTRY GL_INV_I_TRANSIT_HEADER.BTCHENTRY%type := 0;
	WK_TRANSNBR  GL_INV_I_TRANSIT_DETAILS.TRANSNBR%type := 0;

	BK_SLIP_DATE	 	date		:= null;
	BK_COMPANY_CODE	number(8)	:= 0;
	BK_SLIP_NO		varchar2(25)	:= null;
	BK_CURR_SHORT		varchar2(3)	:= null;
	BK_CLASS2		varchar2(1)	:= null;

	WK_CNT			number(8)	:= 0;
   begin


        /* MCV??????????????? */
        goto END_1;

	lock table transaction_for_accpac in exclusive mode;

	/* ?????? */
	BK_SLIP_DATE	 	:= null;
	BK_COMPANY_CODE	:= 0;
	BK_SLIP_NO		:= 'zzzzzzzzzzzzzzzzzzzzzzzzz';
	BK_CURR_SHORT		:= 'zzz';
	BK_CLASS2		:= '9';


	WK_BATCHID  := v_batchid;
	WK_BTCHENTRY := 0;

	open C1;
	loop
	  fetch C1 into c1_rec;
	  exit when C1%notfound or C1%notfound is null;

	  /* Inventory In Transit ??????? */
	  if BK_SLIP_DATE <> c1_rec.SLIP_DATE or BK_COMPANY_CODE <> c1_rec.COMPANY_CODE or
	     BK_SLIP_NO <> c1_rec.SLIP_NO      or BK_CURR_SHORT    <> c1_rec.CURR_SHORT or
             BK_CLASS2 <> c1_rec.CLASS2  then
		
		if wk_cnt <>  0 then
		  /* ????? GL_INV_I_TRANSIT_DETAILS??? Inventory In Transit */

		  WK_TRANSNBR	:= WK_TRANSNBR + 20;

		  insert into GL_INV_I_TRANSIT_DETAILS(
				BATCHNBR,
				JOURNALID,
				TRANSNBR,
				ACCTID,
				TRANSAMT,
				SCURNAMT, 
				HCURNCODE,
				RATETYPE,
				SCURNCODE,
				RATEDATE,
				CONVRATE,
				TRANSDESC, 
				TRANSREF,
				TRANSDATE,
				REMARK,
				REG_DATE
			) values (
				WK_BATCHID,
				WK_BTCHENTRY,
				WK_TRANSNBR,
				'12013' || bk_rec.CLASS2 || '0',
				bk_rec.TRANSIT_AMT_O,
				bk_rec.TRANSIT_AMT_L, 
				'USD',
				'TX',
				bk_rec.CURR_SHORT,
				bk_rec.SLIP_DATE,
				bk_rec.EX_RATE,
				'RECLASS INV IN TRANSIT', 
				bk_rec.SLIP_NO,
				bk_rec.SLIP_DATE,
				null,
				sysdate
			) ;
		end if;
	 end if;


	  /* GL_INV_I_TRANSIT_HEADER??? */
	  if BK_SLIP_DATE <> c1_rec.SLIP_DATE or BK_COMPANY_CODE <> c1_rec.COMPANY_CODE or
	     BK_SLIP_NO <> c1_rec.SLIP_NO      or BK_CURR_SHORT    <> c1_rec.CURR_SHORT then

		  WK_BTCHENTRY := WK_BTCHENTRY +  1;

		   INSERT INTO GL_INV_I_TRANSIT_HEADER(
			BATCHID,
			BTCHENTRY,
			SRCELEDGER,
			SRCETYPE,
			FSCSYR,
			FSCSPERD, 
			JRNLDESC,
			DATEENTRY,
			REG_DATE
			) values (
			WK_BATCHID,
			WK_BTCHENTRY,
			'GL',
			'JE',
			c1_rec.FSCSYR,
			c1_rec.FSCSPERD, 
			c1_rec.COMPANY,
			c1_rec.SLIP_DATE,
			 sysdate) ;

		update TRANSACTION_FOR_ACCPAC
		  set   POSTING_DATE = sysdate
		where   SLIP_DATE	=	 BK_SLIP_DATE     and 
			COMPANY_CODE	=	 BK_COMPANY_CODE  and 
			SLIP_NO		=	 BK_SLIP_NO;



		WK_TRANSNBR		:=	0;
		BK_SLIP_DATE	 	:=	 c1_rec.SLIP_DATE;
		BK_COMPANY_CODE		:=	 c1_rec.COMPANY_CODE;
		BK_SLIP_NO		:=	 c1_rec.SLIP_NO;
		BK_CURR_SHORT		:=	 c1_rec.CURR_SHORT;
		BK_CLASS2		:=	 c1_rec.CLASS2;

	  end if;

	  /* ???????  */
	  bk_rec	:= c1_rec;

	  /* GL_INV_I_TRANSIT_DETAILS??? ??*/
	if  c1_rec.INVENTORY_AMNT_O  = 0  and c1_rec.INVENTORY_AMNT_L  = 0 then 
	   null;
	else 

	  WK_TRANSNBR	:= WK_TRANSNBR + 20;

	  insert into GL_INV_I_TRANSIT_DETAILS(
			BATCHNBR,
			JOURNALID,
			TRANSNBR,
			ACCTID,
			TRANSAMT,
			SCURNAMT, 
			HCURNCODE,
			RATETYPE,
			SCURNCODE,
			RATEDATE,
			CONVRATE,
			TRANSDESC, 
			TRANSREF,
			TRANSDATE,
			REMARK,
			REG_DATE
		) values (
			WK_BATCHID,
			WK_BTCHENTRY,
			WK_TRANSNBR,
			'50101' || c1_rec.CLASS,
			c1_rec.INVENTORY_AMNT_O,
			c1_rec.INVENTORY_AMNT_L, 
			'USD',
			'TX',
			c1_rec.CURR_SHORT,
			c1_rec.SLIP_DATE,
			c1_rec.EX_RATE,
			'RECLASS INV IN TRANSIT', 
			c1_rec.SLIP_NO,
			c1_rec.SLIP_DATE,
			null,
			sysdate
		) ;
	  end if;
	  /* GL_INV_I_TRANSIT_DETAILS??? ?????*/
	if  c1_rec.MCV_AMT_O  = 0  and c1_rec.MCV_AMT_L  = 0 then 
	   null;
	else 
	  WK_TRANSNBR	:= WK_TRANSNBR + 20;

	  insert into GL_INV_I_TRANSIT_DETAILS(
			BATCHNBR,
			JOURNALID,
			TRANSNBR,
			ACCTID,
			TRANSAMT,
			SCURNAMT, 
			HCURNCODE,
			RATETYPE,
			SCURNCODE,
			RATEDATE,
			CONVRATE,
			TRANSDESC, 
			TRANSREF,
			TRANSDATE,
			REMARK,
			REG_DATE
		) values (
			WK_BATCHID,
			WK_BTCHENTRY,
			WK_TRANSNBR,
			'50601' || c1_rec.CLASS,
			c1_rec.MCV_AMT_O,
			c1_rec.MCV_AMT_L, 
			'USD',
			'TX',
			c1_rec.CURR_SHORT,
			c1_rec.SLIP_DATE,
			c1_rec.EX_RATE,
			'RECLASS INV IN TRANSIT', 
			c1_rec.SLIP_NO,
			c1_rec.SLIP_DATE,
			null,
			sysdate
		) ;
		end if;
		BK_SLIP_DATE	 	:=	 c1_rec.SLIP_DATE;
		BK_COMPANY_CODE	:=	 c1_rec.COMPANY_CODE;
		BK_SLIP_NO		:=	 c1_rec.SLIP_NO;
		BK_CURR_SHORT		:=	 c1_rec.CURR_SHORT;
		BK_CLASS2		:=	 c1_rec.CLASS2;

		WK_CNT		:= WK_CNT + 1;
--	update TRANSACTION_FOR_ACCPAC
--	set POSTING_DATE = sysdate
--	where rowid = c1_rec.ROWID;

	<<LOOP_END>>
	  null;
	end loop;
	  /* ????? GL_INV_I_TRANSIT_DETAILS??? Inventory In Transit */
	if WK_CNT <> 0 then
		  WK_TRANSNBR	:= WK_TRANSNBR + 20;

		  insert into GL_INV_I_TRANSIT_DETAILS(
				BATCHNBR,
				JOURNALID,
				TRANSNBR,
				ACCTID,
				TRANSAMT,
				SCURNAMT, 
				HCURNCODE,
				RATETYPE,
				SCURNCODE,
				RATEDATE,
				CONVRATE,
				TRANSDESC, 
				TRANSREF,
				TRANSDATE,
				REMARK,
				REG_DATE
			) values (
				WK_BATCHID,
				WK_BTCHENTRY,
				WK_TRANSNBR,
				'12013' || c1_rec.CLASS2 || '0',
				bk_rec.TRANSIT_AMT_O,
				bk_rec.TRANSIT_AMT_L, 
				'USD',
				'TX',
				bk_rec.CURR_SHORT,
				bk_rec.SLIP_DATE,
				bk_rec.EX_RATE,
				'RECLASS INV IN TRANSIT', 
				bk_rec.SLIP_NO,
				bk_rec.SLIP_DATE,
				null,
				sysdate
			) ;

		update TRANSACTION_FOR_ACCPAC
		  set   POSTING_DATE = sysdate
		where   SLIP_DATE	=	 BK_SLIP_DATE     and 
			COMPANY_CODE	=	 BK_COMPANY_CODE  and 
			SLIP_NO		=	 BK_SLIP_NO;
	end if;
	close C1;
<<END_1>>
NULL;
   end;
end accpac_import_mcv_data_make2;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ADD_ITEM_FROM_BS" ( out_result out number )
IS
/*
======================================================================

?????  ?FI) PGLOSAS
?      ?  ????????????
              ?S00BHSHV_HISTORY@BS ?ITEM???????? ITEM@PORDER ??????
?      ?  ???
?  ?  ?  ?out_result ???? (0:????????????1:????????????9:???


????
----------------------------------------------------------------------
  Ver    Date        Author          Memo
----------------------------------------------------------------------
  1.0    2015/09/29  NTTk)Hino       ????
  1.1    2016/01/19  NTTk)Hino       'Change'??????
  1.2    2016/01/20  NTTk)Hino       DBMS_OUTPUT.PUT_LINE ?????????????????????9i???
======================================================================
*/
	
BEGIN
    declare

		-- ??????
		wk_sysdate_d  date := sysdate;
		wk_sysdate_v  varchar2(21) := to_char(wk_sysdate_d, 'yyyy/mm/dd hh24:mi:ss');
		
		-- ???????
		wk_err_point   varchar2(100);
		
		-- ??
		column_title_len number := 60; -- ITEM_NO(8) + ??(1) + ITEM(40) + ??(1) + CLASS_CODE(10)
		column_title     varchar2(60);
		column_title_b   varchar2(60);
		wk_cnt           number(8); 
		
		-- ???????
		cursor csr (p_sysdate in varchar2) is
			select   ITEM_NO, ITEM, CLASS_CODE
			from     ITEM
			where    to_char(REG_DATE, 'yyyy/mm/dd hh24:mi:ss') = p_sysdate
			order by ITEM_NO
		;
		rec csr%rowtype;
	
	begin

		dbms_output.ENABLE(100000); --DBMS_OUTPUT.PUT_LINE???????????100KB??? (add Ver1.2)
		
		-- ???
		out_result  := 9;   -- ???
		
		-- DBMS???????
		column_title   := rpad('ITEM_NO', 8, ' ') || ' ' || rpad('ITEM', 40, ' ') || ' ' || 'CLASS_CODE';
		column_title_b := rpad('-', 8, '-') || ' ' || rpad('-', 40, '-') || ' ' || rpad('-', 10, '-') ;
		
		-- ------------------------------------------------
		-- ?DBMS????????
		-- ------------------------------------------------
		dbms_output.put_line('PGID     : ADD_ITEM_FROM_BS');
		dbms_output.put_line('DATE     : ' || wk_sysdate_v);
		
		
		wk_err_point := 'insert ITEM';
		-- ------------------------------------------------
		-- ITEM <Insert>
		-- ------------------------------------------------
		insert into ITEM
		   	   (
			    UPTO_DATE,
			    REG_DATE,
			    ITEM_NO,
				ITEM,
			    ITEM_FLAG,
			    ORIGIN_CODE,
			    CLASS_CODE,
			    UOM_Q,
			    UOM_W,
			    UOM_L,
			    SUPPLIER_CODE,
			    STANDARD_PRICE,
			    NEXT_TERM_PRICE,
			    SUPPLIERS_PRICE,
			    CURR_CODE,
			    WEIGHT,
			    STOCK_SUBJECT_CODE,
			    COST_SUBJECT_CODE,
			    COST_PROCESS_CODE,
			    MANUFACT_LEADTIME,
			    PURCHASE_LEADTIME,
			    ADJUSTMENT_LEADTIME,
			    REORDER_POINT,
			    LLC_CODE,
			    LEVEL_CONT_KEY,
			    SECTION_CODE,
			    MANUFACT_FAIL_RATE,
			    MAKER_FLAG,
			    UNIT_STOCK,
			    UNIT_STOCK_RATE,
			    SAFETY_STOCK,
			    UNIT_ENGINEERING,
			    UNIT_ENGINEER_RATE,
			    LAST_TERM_PRICE,
			    PACKAGE_UNIT_NUMBER,
			    UNIT_PACKAGE,
			    GRADE_CODE,
			    PACKAGE_TYPE
		)
		select
			    wk_sysdate_d,   --UPTO_DATE
			    wk_sysdate_d,   --REG_DATE
			    b.?C,          --ITEM_NO
			    b.??,         --ITEM
			    '1',            --ITEM_FLAG
			    118,            --ORIGIN_CODE
			    case
			      when to_char(b.?C) like '1113__'
			        then 111211  -- (LR 6)
			      when to_char(b.?C) like '1114__'
			        then 111311  -- (LR 03)
			      when to_char(b.?C) like '1115__'
			        then 111111  -- (LR 1)
			    end,            --CLASS_CODE
			    10,             --UOM_Q
			    30,             --UOM_W
			    40,             --UOM_L
			    0,              --SUPPLIER_CODE
			    0,              --STANDARD_PRICE
			    0,              --NEXT_TERM_PRICE
			    0,              --SUPPLIERS_PRICE
			    1,              --CURR_CODE
			    0,              --WEIGHT
			    '5',            --STOCK_SUBJECT_CODE
			    '130040',       --COST_SUBJECT_CODE
			    '231000',       --COST_PROCESS_CODE
			    0,              --MANUFACT_LEADTIME
			    0,              --PURCHASE_LEADTIME
			    0,              --ADJUSTMENT_LEADTIME
			    0,              --REORDER_POINT
			    0,              --LLC_CODE
			    b.?C,          --LEVEL_CONT_KEY
			    100,            --SECTION_CODE
			    0,              --MANUFACT_FAIL_RATE
			    '2',            --MAKER_FLAG
			    10,             --UNIT_STOCK
			    1,              --UNIT_STOCK_RATE
			    0,              --SAFETY_STOCK
			    10,             --UNIT_ENGINEERING
			    1,              --UNIT_ENGINEER_RATE
			    0,              --LAST_TERM_PRICE
			    b.?????,   --PACKAGE_UNIT_NUMBER
			    300,            --UNIT_PACKAGE
			    b.GRADE_CODE,   --GRADE_CODE
			    b.??????  --PACKAGE_TYPE
		-- //(mod Ver1.1 start)
		/*
		from   S00BHSHV_HISTORY@MARUKI_BS.WORLD b,
		       ( select *
		         from   ITEM
		         where  STOCK_SUBJECT_CODE = '5'
		       ) i
		where  trunc(b.HISTORY_DATE) >= add_months(trunc(wk_sysdate_d), -1) -- ??????
		  and  b.OPERATION_TYPE = 'New'
		  and  b.E_????C    = 88475
		  and  ( to_char(b.?C) like '1113__'
		         or to_char(b.?C) like '1114__'
		         or to_char(b.?C) like '1115__'
			   )
		  and  b.?C            = i.ITEM_NO (+)
		  and  i.ITEM_NO        is null
		;
		*/
		from   ( select ?C, max(HISTORY_DATE) as HIS_DT_MAX
                 from   S00BHSHV_HISTORY@MARUKI_BS.WORLD
                 where  trunc(HISTORY_DATE) >= add_months(trunc(wk_sysdate_d), -1) -- ??????
                   and  OPERATION_TYPE in ('New', 'Change')
--                   and  E_????C    = 88475
                   and  ????C    = 88475
                   and  ( to_char(?C) like '1113__'
                          or to_char(?C) like '1114__'
                          or to_char(?C) like '1115__'
			            )
                 group by ?C
               ) b_max,
               S00BHSHV_HISTORY@MARUKI_BS.WORLD b,
		       ( select *
		         from   ITEM
		         where  STOCK_SUBJECT_CODE = '5'
		       ) i
		where  b_max.?C        = b.?C
          and  b_max.HIS_DT_MAX = b.HISTORY_DATE
		  and  b.?C            = i.ITEM_NO (+)
		  and  i.ITEM_NO        is null
		;
		-- //(mod Ver1.1 end)
		
		
		wk_err_point := 'insert ITEM_ADD_BS_HISTORY';
		-- ------------------------------------------------
		-- ITEM_ADD_BS_HISTORY <Insert>
		-- ------------------------------------------------
		insert into ITEM_ADD_BS_HISTORY
		       (
				UPTO_DATE, REG_DATE, DELETE_TYPE, ITEM_NO, ITEM_CODE, ITEM, 
				ITEM_FLAG, ORIGIN_CODE, DESCRIPTION, CLASS_CODE, UOM_Q, UOM_W, UOM_L, 
				SUPPLIER_CODE, EXTERNAL_UNIT_NUMBER, STANDARD_PRICE, NEXT_TERM_PRICE, 
				SUPPLIERS_PRICE, CURR_CODE, WEIGHT, STOCK_SUBJECT_CODE, 
				COST_SUBJECT_CODE, COST_PROCESS_CODE, MANUFACT_LEADTIME, 
				PURCHASE_LEADTIME, ADJUSTMENT_LEADTIME, REORDER_POINT, LLC_CODE, 
				LEVEL_CONT_KEY, DRAWING_NO, DRAWING_REV, APPLICABLE_MODEL, CATALOG_NO, 
				ISSUE_POLICY, SECTION_CODE, MANUFACT_FAIL_RATE, MAKER_FLAG, UNIT_STOCK, 
				UNIT_STOCK_RATE, ISSUE_LOT, SAFETY_STOCK, ORDER_POLICY, MAK, 
				UNIT_ENGINEERING, UNIT_ENGINEER_RATE, ITEM_TYPE1, ITEM_TYPE2, 
				LAST_TERM_PRICE, ITEM_REMARK1, STOCK_ISSUE_FLAG, RECEIVE_DATE, 
				ISSUE_DATE, PACKAGE_UNIT_NUMBER, UNIT_PACKAGE, UNIT_PRICE_O, 
				UNIT_PRICE_RATE, UNIT_CURR_CODE, UPTO_PERSON_CODE, CUSTOMER_ITEM_NO, 
				IS_SONY, GRADE_CODE, CUSTOMER_TYPE, PACKAGE_TYPE, CAPACITY, 
				DATE_CODE_TYPE, DATE_CODE_MONTH, LABEL_TYPE, INNER_BOX_UNIT_NUMBER, 
				INNER_BOX_HEIGHT, INNER_BOX_WIDTH, INNER_BOX_DEPTH, 
				MEDIUM_BOX_UNIT_NUMBER, MEDIUM_BOX_HEIGHT, MEDIUM_BOX_WIDTH, 
				MEDIUM_BOX_DEPTH, OUTER_BOX_HEIGHT, OUTER_BOX_WIDTH, OUTER_BOX_DEPTH, 
				MEASUREMENT, PI_NO, OPERATION_TIME, MAN_POWER, AGING_DAY,
				ADD_DATE
		       )
		select  i.UPTO_DATE, i.REG_DATE, i.DELETE_TYPE, i.ITEM_NO, i.ITEM_CODE, i.ITEM,
				i.ITEM_FLAG, i.ORIGIN_CODE, i.DESCRIPTION, i.CLASS_CODE, i.UOM_Q, i.UOM_W, i.UOM_L,
				i.SUPPLIER_CODE, i.EXTERNAL_UNIT_NUMBER, i.STANDARD_PRICE, i.NEXT_TERM_PRICE,
				i.SUPPLIERS_PRICE, i.CURR_CODE, i.WEIGHT, i.STOCK_SUBJECT_CODE,
				i.COST_SUBJECT_CODE, i.COST_PROCESS_CODE, i.MANUFACT_LEADTIME,
				i.PURCHASE_LEADTIME, i.ADJUSTMENT_LEADTIME, i.REORDER_POINT, i.LLC_CODE,
				i.LEVEL_CONT_KEY, i.DRAWING_NO, i.DRAWING_REV, i.APPLICABLE_MODEL, i.CATALOG_NO,
				i.ISSUE_POLICY, i.SECTION_CODE, i.MANUFACT_FAIL_RATE, i.MAKER_FLAG, i.UNIT_STOCK,
				i.UNIT_STOCK_RATE, i.ISSUE_LOT, i.SAFETY_STOCK, i.ORDER_POLICY, i.MAK,
				i.UNIT_ENGINEERING, i.UNIT_ENGINEER_RATE, i.ITEM_TYPE1, i.ITEM_TYPE2,
				i.LAST_TERM_PRICE, i.ITEM_REMARK1, i.STOCK_ISSUE_FLAG, i.RECEIVE_DATE,
				i.ISSUE_DATE, i.PACKAGE_UNIT_NUMBER, i.UNIT_PACKAGE, i.UNIT_PRICE_O,
				i.UNIT_PRICE_RATE, i.UNIT_CURR_CODE, i.UPTO_PERSON_CODE, i.CUSTOMER_ITEM_NO,
				i.IS_SONY, i.GRADE_CODE, i.CUSTOMER_TYPE, i.PACKAGE_TYPE, i.CAPACITY,
				i.DATE_CODE_TYPE, i.DATE_CODE_MONTH, i.LABEL_TYPE, i.INNER_BOX_UNIT_NUMBER,
				i.INNER_BOX_HEIGHT, i.INNER_BOX_WIDTH, i.INNER_BOX_DEPTH,
				i.MEDIUM_BOX_UNIT_NUMBER, i.MEDIUM_BOX_HEIGHT, i.MEDIUM_BOX_WIDTH,
				i.MEDIUM_BOX_DEPTH, i.OUTER_BOX_HEIGHT, i.OUTER_BOX_WIDTH, i.OUTER_BOX_DEPTH,
				i.MEASUREMENT, i.PI_NO, i.OPERATION_TIME, i.MAN_POWER, i.AGING_DAY,
				wk_sysdate_d --ADD_DATE
		from   ITEM i
		where  i.REG_DATE = wk_sysdate_d
		;
		
		
		wk_err_point := 'dbms_output RESULT';
		-- ************************************************************
		--  ??????
		-- ************************************************************
		
		-- ?????????????
		select   count(*) into wk_cnt
		from     ITEM
		where    to_char(REG_DATE, 'yyyy/mm/dd hh24:mi:ss') = wk_sysdate_v
		;
		
		-- ------------------------------------------------
		-- ?DBMS????????
		-- ------------------------------------------------
		dbms_output.put_line('RESULT   : SUCCESS');
		dbms_output.put_line('-');
		dbms_output.put_line('-');
		
		dbms_output.put_line('<Newly added items> (Cnt=' || wk_cnt || ')');
		
		if wk_cnt > 0 then
			out_result := 1; -- ???????????
		
			-- [???]
			dbms_output.put_line(column_title_b);
			dbms_output.put_line(column_title);
			dbms_output.put_line(column_title_b);
			
			-- [???]
			open csr (wk_sysdate_v);
			loop
				fetch csr into rec;
				exit when csr%notfound or csr%notfound is null;
				
				dbms_output.put_line(rpad(rec.ITEM_NO, 8, ' ') || ' ' || rpad(rec.ITEM, 40, ' ') || ' ' || rpad(rec.CLASS_CODE, 10, ' '));
			end loop;
			close csr;
			dbms_output.put_line(column_title_b);
			
		else
			out_result := 0; -- ???????????
		end if;
		
		--commit;

	exception
		when others then
			-- ************************************************************
			--  ??????
			-- ************************************************************
			dbms_output.put_line('RESULT   : ERROR!');
			dbms_output.put_line('-');
			dbms_output.put_line('ERR_POINT?' || wk_err_point);
			dbms_output.put_line('SQLERRM  ?' || SQLERRM);
			
			rollback;
	end;
END ADD_ITEM_FROM_BS;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."AP2_CL_REMAKE" 
--(
-- v_ret_no in out number
--)
as
begin
  declare
   AP2_REC   ap2_cl%rowtype ;

   v_ret_no  number ;

    cursor C1 is
     select bl_no , CURRENT_CURR_CODE from ap2_cl group by bl_no,CURRENT_CURR_CODE having count(*) > 1;

     C1_REC			C1%ROWTYPE := null;

    cursor C2(PARAM1 in varchar2,PARAM2 in number) is
     select *
     from ap2_cl  where bl_no = PARAM1 and CURRENT_CURR_CODE = PARAM2
     order by last_rate DESC
     for update;
 
    C2_REC			C2%ROWTYPE := null;

    cursor C3(PARAM1 in varchar2,PARAM2 in number) is
     select a.rate from
       (select distinct pur.supplier_code customer_code,
         pur.supplier customer,
         pur.reference_no bl_no,
         pur.curr_code curr_code,
         cur.curr_mark,
         get_ex_rate(pur.curr_code,decode(op_flag,1,ac.ac_month,add_months(ac.ac_month,-1)),0) rate
        from purchase pur,account_month ac,currency cur
        where pur.curr_code = cur.curr_code(+)) a
      where  a.bl_no = PARAM1 and a.CURR_CODE = PARAM2;

     C3_REC		C3%ROWTYPE := null;

    WK_CT		NUMBER(6) :=  0;
    WK_CT1		NUMBER(6) :=  0;
    wk_REALIZE		NUMBER(20,6) :=  0;
    wk_UNREALIZE	NUMBER(20,6) :=  0;
    BK_LAST_RATE	NUMBER(14,6) := 0;



  begin
      open C1 ;
        loop
        fetch C1 into C1_REC ;
        exit when C1%notfound or C1%notfound is null;

             WK_CT :=  1;
             open C2(C1_REC.BL_NO,C1_REC.CURRENT_CURR_CODE) ;
               loop
               fetch C2 into C2_REC ;
               exit when C2%notfound or C2%notfound is null;
                   open C3(C1_REC.BL_NO,C1_REC.CURRENT_CURR_CODE) ;
                   fetch C3 into C3_REC ;
                   close C3;
                   if WK_CT = 1 then 
                      BK_LAST_RATE := C2_REC.LAST_RATE; 
--      DBMS_OUTPUT.PUT_LINE('BK_LAST_RATE=' ||  BK_LAST_RATE);
                   end if;

                   if C2_REC.PURCHASE_AMT_O = 0 then
                          wk_REALIZE   :=   round((nvl(C2_REC.PAYMENT_AMT_O,0) * nvl(BK_LAST_RATE,0))
                                          - (nvl(C2_REC.PAYMENT_AMT_O,0) * nvl(C2_REC.PAYMENT_RATE,0)),2);

                          wk_UNREALIZE :=   round((nvl(nvl(C2_REC.LAST_AMT_O,0) + nvl(C2_REC.PURCHASE_AMT_O,0) - nvl(C2_REC.PAYMENT_AMT_O,0),0) * BK_LAST_RATE)
                                          - (nvl(0 + nvl(C2_REC.PURCHASE_AMT_O,0) - nvl(C2_REC.PAYMENT_AMT_O,0),0) * nvl(C2_REC.CURRENT_RATE,0)),2);
                   Else
                          wk_REALIZE   :=   round((nvl(C2_REC.PAYMENT_AMT_O,0) * nvl(C2_REC.PAYMENT_RATE,0))
                                          - (nvl(C2_REC.PAYMENT_AMT_O,0) * nvl(C2_REC.PAYMENT_RATE,0)),2);

                          wk_UNREALIZE :=   round((nvl(0 + nvl(C2_REC.PURCHASE_AMT_O,0) - nvl(C2_REC.PAYMENT_AMT_O,0),0) * nvl(C2_REC.PURCHASE_RATE,0))
                                          - (nvl(0 + nvl(C2_REC.PURCHASE_AMT_O,0) - nvl(C2_REC.PAYMENT_AMT_O,0),0) * nvl(C3_REC.rate,0)),2);
                   End if;
--      DBMS_OUTPUT.PUT_LINE('UPDATEx BL_NO=' ||  C2_REC.BL_NO);
--      DBMS_OUTPUT.PUT_LINE('UPDATEx PAYMENT_AMT_O=' ||  C2_REC.PAYMENT_AMT_O);
--      DBMS_OUTPUT.PUT_LINE('UPDATEx REALIZE=' ||  wk_REALIZE);

                   if  WK_CT > 1  then
                         update  AP2_CL
                           set   LAST_CURR_MARK   = null,
                                 LAST_RATE        = 0,
                                 LAST_AMT_O       = 0,
                                 LAST_AMT_L       = 0,
                                 THIS_AMT_O       = 0 + purchase_amt_o - payment_amt_o,
--                                 THIS_AMT_L       = 0 + purchase_amt_l - payment_amt_l,
--                                 THIS_AMT_L       = round(THIS_AMT_O * C3_rec.rate,2),
                                 THIS_AMT_L       = round((0 + purchase_amt_o - payment_amt_o) * C3_rec.rate,2),
                                 REALIZE          = wk_REALIZE,
                                 UNREALIZE        = wk_UNREALIZE
                          where  current of C2;

                         WK_CT1  :=  WK_CT1  + 1;
                   End if;
                   WK_CT  :=  WK_CT  + 1;
               end loop ;
             close C2 ;
 <<LOOPEND>>
           null ;
        end loop ;
      close C1 ;
--      DBMS_OUTPUT.PUT_LINE('UPDATE COUNT=' || WK_CT1);

/* 2009/12/19 Y.Hagai  AP3_CL??? */
      MAKE_AP3_CL;

  end ;

end ap2_cl_remake ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."AR2_CL_REMAKE" 
--(
-- v_ret_no in out number
--)
as
begin
  declare
   AR2_REC   ar2_cl%rowtype ;

   v_ret_no  number ;

    cursor C1 is
     select bl_no from ar2_cl group by bl_no having count(*) > 1;

     C1_REC		C1%ROWTYPE := null;

    cursor C2(PARAM1 in varchar2) is
     select *
     from ar2_cl  where bl_no = PARAM1
     for update;
 
    C2_REC		C2%ROWTYPE := null;

    cursor C3(PARAM1 in varchar2) is
     select a.rate from
       (select distinct sal.customer_code customer_code,
         sal.customer customer,
         sal.reference_no bl_no,
         sal.curr_code,
         cur.curr_mark,
         get_ex_rate(sal.curr_code,decode(op_flag,1,ac.ac_month,add_months(ac.ac_month,-1)),0) rate
        from sales sal,account_month ac,currency cur
        where sal.curr_code = cur.curr_code(+)) a
      where  a.bl_no = PARAM1;

    C3_REC		C3%ROWTYPE   := null;

    WK_CT		NUMBER(6)    :=  0;
    WK_CT1		NUMBER(6)    :=  0;
    WK_SALES_AMT_O	NUMBER(20,6) :=  0;
    WK_RECEIPT_AMT_O	NUMBER(20,6) :=  0;
    WK_REALIZE		NUMBER(20,6) :=  0;
    WK_UNREALIZE	NUMBER(20,6) :=  0;


  begin
      open C1 ;
        loop
        fetch C1 into C1_REC ;
        exit when C1%notfound or C1%notfound is null;

             WK_CT :=  1;
             open C2(C1_REC.BL_NO) ;
               loop
               fetch C2 into C2_REC ;
               exit when C2%notfound or C2%notfound is null;
                   open C3(C1_REC.BL_NO) ;
                   fetch C3 into C3_REC ;
                   close C3;
--
                   if C2_REC.SALES_AMT_O = 0 then
                          /*  REALIZE = ????????? - ????????? */
                          WK_REALIZE   :=   round((nvl(C2_REC.RECEIPT_AMT_O,0) * nvl(C2_REC.LAST_RATE,0))
                                          - (nvl(C2_REC.RECEIPT_AMT_O,0) * nvl(C2_REC.RECEIPT_RATE,0)),2);

                          /*  UNREALIZE = ??? - ?????????? - ??? - ?????????? */
                          WK_UNREALIZE :=   round((nvl(0 + nvl(C2_REC.SALES_AMT_O,0) - nvl(C2_REC.RECEIPT_AMT_O,0),0) * nvl(C2_REC.LAST_RATE,0))
                                          - (nvl(0 + nvl(C2_REC.SALES_AMT_O,0) - nvl(C2_REC.RECEIPT_AMT_O,0),0) * nvl(C3_REC.rate,0)),2);
                   Else
                          /*  REALIZE = ??????????? - ????????? */
                          WK_REALIZE   :=   round((nvl(C2_REC.RECEIPT_AMT_O,0) * nvl(C2_REC.SALES_RATE,0))
                                          - (nvl(C2_REC.RECEIPT_AMT_O,0) * nvl(C2_REC.RECEIPT_RATE,0)),2);

                          /*  UNREALIZE = ??? - ???????????? - ??? - ?????????? */
--                          WK_UNREALIZE :=   round((nvl(0 + nvl(C2_REC.SALES_AMT_O,0) - nvl(C2_REC.RECEIPT_AMT_O,0),0) * nvl(C2_REC.SALES_RATE,0)) - 
--                                           (nvl(0 + nvl(C2_REC.SALES_AMT_O,0) - nvl(C2_REC.RECEIPT_AMT_O,0),0) * nvl(C3_REC.rate,0)),2);
                          WK_UNREALIZE :=   round((nvl(0 + nvl(C2_REC.SALES_AMT_O,0) - nvl(C2_REC.RECEIPT_AMT_O,0),0) * nvl(C3_REC.rate,0)) -
                                            (nvl(0 + nvl(C2_REC.SALES_AMT_O,0) - nvl(C2_REC.RECEIPT_AMT_O,0),0) * nvl(C2_REC.SALES_RATE,0)),2);
                   End if;
                   if  WK_CT > 1  then
                       if C2_rec.SALES_AMT_O <> 0 then 
                          /*  REALIZE = ????????? - ????????? */
                          WK_REALIZE   :=   round((nvl(C2_REC.RECEIPT_AMT_O,0) * nvl(C2_REC.LAST_RATE,0))
                                          - (nvl(C2_REC.RECEIPT_AMT_O,0) * nvl(C2_REC.RECEIPT_RATE,0)),2);

                          /*  UNREALIZE = ??? - ?????????? - ??? - ?????????? */
                          WK_UNREALIZE :=   round((nvl(0 + 0 - nvl(C2_REC.RECEIPT_AMT_O,0),0) * nvl(C2_REC.RECEIPT_RATE,0))
                                          - (nvl(0 + 0 - nvl(C2_REC.RECEIPT_AMT_O,0),0) * nvl(C3_REC.rate,0)),2);
                           update  AR2_CL
                             set   LAST_CURR_MARK   = null,
                                   LAST_RATE        = 0,
                                   LAST_AMT_O       = 0,
                                   LAST_AMT_L       = 0,
                                   SALES_RATE       = 0,
                                   SALES_AMT_O      = 0,
                                   SALES_AMT_L      = 0,
                                   THIS_AMT_O       = 0 - RECEIPT_AMT_O,
                                   THIS_AMT_L       = round((0 - RECEIPT_AMT_O) * C3_rec.rate,2),
                                   REALIZE          = 0,
                                   UNREALIZE        = WK_UNREALIZE
                            where  current of C2;
                           WK_CT1  :=  WK_CT1  + 1;
                       else
                           update  AR2_CL
                             set   LAST_CURR_MARK   = null,
                                   LAST_RATE        = 0,
                                   LAST_AMT_O       = 0,
                                   LAST_AMT_L       = 0,
                                   THIS_AMT_O       = 0 + SALES_AMT_O - RECEIPT_AMT_O,
                                   THIS_AMT_L       = round((0 + SALES_AMT_O - RECEIPT_AMT_O) * C3_rec.rate,2),
                                   REALIZE          = WK_REALIZE,
                                   UNREALIZE        = WK_UNREALIZE
                            where  current of C2;
                           WK_CT1  :=  WK_CT1  + 1;
                       End if;
                   End if;
                   WK_CT  :=  WK_CT  + 1;
               end loop ;
             close C2 ;
 <<LOOPEND>>
           null ;
        end loop ;
      close C1 ;
/* 2009/12/19 Y.Hagai  AR3_CL??? */
      MAKE_AR3_CL;

  end ;

end ar2_cl_remake ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."B40A90101PP" 
/*----------------------------------------------------------------------
  PROCEDURE: ?????? P-GLOSAS? (B40A90101PP)
?
  ????:
      Return_Code: ????:0, ????:0??
      Return_Msg:  ????????
----------------------------------------------------------------------
  2014/12/23  H.Suzuki      ????
  2015/02/09  H.Suzuki      ????????????
----------------------------------------------------------------------*/
(
	Return_Code OUT number,
	Return_Msg  OUT varchar2
) as
/*
declare
	Return_Code number(5)      := 0;
	Return_Msg  varchar2(2048) := null;
*/
/*---------- ?? ----------*/
	--??USD
	c_usd			constant CURRENCY.CURR_CODE%type	:= 1;
	--????
	start_time		constant date	:= sysdate;
/*---------- ???? ----------*/
/*---------- ?? ----------*/
	l_regDate		B40STPRICE_FI.OPERATION_DATE%type	:= start_time;
	l_ipAddr		B40STPRICE_FI.IP_ADDRESS%type		:= '1.1.1.1';
	l_employee		B40STPRICE_FI.EMPLOYEE_CODE%type	:= '99999';
	l_today			date := trunc(start_time, 'j');
	l_thisMon		date;
	l_lastMon		date;
	l_accMonth1		B40STPRICE_FI.ACCOUNTING_MONTH%type;
	l_accMonth2		B40STPRICE_FI.ACCOUNTING_MONTH%type;
/*---------- ?? ----------*/
	--????
	procedure process_start is
	begin
		null;
		DBMS_OUTPUT.ENABLE(1000000);
		DBMS_OUTPUT.PUT_LINE('B40A90101PP??  ' || to_char(start_time, 'YYYY/MM/DD hh24:mi:ss'));
	end process_start;
	--????
	procedure process_end is
	begin
		null;
		DBMS_OUTPUT.PUT('B40A90101PP??  ' || to_char(sysdate, 'YYYY/MM/DD hh24:mi:ss'));
		DBMS_OUTPUT.PUT_LINE(' ( spent ' || to_char(trunc((sysdate - start_time) * 86400, 3)) || 'sec )');
	end process_end;
	--??????
	procedure check_point(p_msg in varchar2) is
	begin
		null;
		DBMS_OUTPUT.PUT_LINE(p_msg || ' >> ' || to_char(trunc((sysdate - start_time) * 86400, 3)) || 'sec');
	end check_point;
	--???????
	procedure echo(p_msg in varchar2) is
	begin
		null;
		DBMS_OUTPUT.PUT_LINE(p_msg);
	end echo;
/*---------- ??? ----------*/
begin
	process_start();
	Return_Code := -1;
	Return_Msg  := null;
	l_thisMon := trunc(l_today, 'MM');
	l_lastMon := add_months(l_thisMon, -1);
	l_accMonth1 := to_number(to_char(l_lastMon, 'YYYYMM'));
	l_accMonth2 := to_number(to_char(l_thisMon, 'YYYYMM'));
	--???????
	check_point('???????');
	delete from B40STPRICE_FI a
	 where a.ACCOUNTING_MONTH in (l_accMonth1, l_accMonth2)
	;
	--???????
	insert into B40STPRICE_FI (
		   ITEM_NUMBER, ACCOUNTING_MONTH
		 , STANDARD_PRICE, CURR_CODE, CURR_RATE
		 , OPERATION_DATE, IP_ADDRESS, EMPLOYEE_CODE
	)
	select a.ITEM_NO
	     , l_accMonth1
--	     , case when mod(l_accMonth1, 100) in (3, 9)
--				then a.LAST_TERM_PRICE else a.STANDARD_PRICE end
	     , a.STANDARD_PRICE
	     , c_usd
	     , get_rate_bs(l_lastMon, c_usd)
	     , l_regDate
	     , l_ipAddr
	     , l_employee
	  from ITEM a
	 where exists(
			select *
			  from P91BMLIST_FI b
			 where b.SECTION_CODE      = a.SECTION_CODE
			   and b.LOWER_ITEM_NUMBER = a.ITEM_NO
	       )
	;
	--???????
	insert into B40STPRICE_FI (
		   ITEM_NUMBER, ACCOUNTING_MONTH
		 , STANDARD_PRICE, CURR_CODE, CURR_RATE
		 , OPERATION_DATE, IP_ADDRESS, EMPLOYEE_CODE
	)
	select a.ITEM_NO
	     , l_accMonth2
	     , a.STANDARD_PRICE
	     , c_usd
	     , get_rate_bs(l_thisMon, c_usd)
	     , l_regDate
	     , l_ipAddr
	     , l_employee
	  from ITEM a
	 where exists(
			select *
			  from P91BMLIST_FI b
			 where b.SECTION_CODE      = a.SECTION_CODE
			   and b.LOWER_ITEM_NUMBER = a.ITEM_NO
	       )
	;
--????/??????
--	check_point('????');
--	commit work;
	Return_Code := 0;
	Return_Msg  := null;
	process_end();
	echo('ReturnCode: ' || to_char(Return_Code));
exception
when others then
--	rollback work;
	Return_Code := sqlcode;
	Return_Msg  := sqlerrm;
	if Return_Code = 0 then
		Return_Code := -32768;
	end if;
	echo('ReturnCode: ' || to_char(Return_Code));
	echo('message:    ' || Return_Msg);
end;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."B40A90101PP_TEST" 
/*----------------------------------------------------------------------
  PROCEDURE: ?????? P-GLOSAS? (B40A90101PP)
?
  ????:
      Return_Code: ????:0, ????:0??
      Return_Msg:  ????????
----------------------------------------------------------------------
  2014/12/23  H.Suzuki      ????
  2015/02/09  H.Suzuki      ????????????
----------------------------------------------------------------------*/
(
	Return_Code OUT number,
	Return_Msg  OUT varchar2
) as
/*
declare
	Return_Code number(5)      := 0;
	Return_Msg  varchar2(2048) := null;
*/
/*---------- ?? ----------*/
	--??USD
	c_usd			constant CURRENCY.CURR_CODE%type	:= 1;
	--????
	start_time		constant date	:= sysdate;
/*---------- ???? ----------*/
/*---------- ?? ----------*/
	l_regDate		B40STPRICE_FI.OPERATION_DATE%type	:= start_time;
	l_ipAddr		B40STPRICE_FI.IP_ADDRESS%type		:= '1.1.1.1';
	l_employee		B40STPRICE_FI.EMPLOYEE_CODE%type	:= '99999';
	l_today			date := trunc(start_time, 'j');
	l_thisMon		date;
	l_lastMon		date;
	l_accMonth1		B40STPRICE_FI.ACCOUNTING_MONTH%type;
	l_accMonth2		B40STPRICE_FI.ACCOUNTING_MONTH%type;
/*---------- ?? ----------*/
	--????
	procedure process_start is
	begin
		null;
		DBMS_OUTPUT.ENABLE(1000000);
		DBMS_OUTPUT.PUT_LINE('B40A90101PP??  ' || to_char(start_time, 'YYYY/MM/DD hh24:mi:ss'));
	end process_start;
	--????
	procedure process_end is
	begin
		null;
		DBMS_OUTPUT.PUT('B40A90101PP??  ' || to_char(sysdate, 'YYYY/MM/DD hh24:mi:ss'));
		DBMS_OUTPUT.PUT_LINE(' ( spent ' || to_char(trunc((sysdate - start_time) * 86400, 3)) || 'sec )');
	end process_end;
	--??????
	procedure check_point(p_msg in varchar2) is
	begin
		null;
		DBMS_OUTPUT.PUT_LINE(p_msg || ' >> ' || to_char(trunc((sysdate - start_time) * 86400, 3)) || 'sec');
	end check_point;
	--???????
	procedure echo(p_msg in varchar2) is
	begin
		null;
		DBMS_OUTPUT.PUT_LINE(p_msg);
	end echo;
/*---------- ??? ----------*/
begin
	process_start();
	Return_Code := -1;
	Return_Msg  := null;
	l_thisMon := trunc(l_today, 'MM');
	l_lastMon := add_months(l_thisMon, -1);
	l_accMonth1 := to_number(to_char(l_lastMon, 'YYYYMM'));
	l_accMonth2 := to_number(to_char(l_thisMon, 'YYYYMM'));
	--???????
	check_point('???????');
	delete from B40STPRICE_FI a
	 where a.ACCOUNTING_MONTH in (l_accMonth1, l_accMonth2)
	;
	--???????
	insert into B40STPRICE_FI (
		   ITEM_NUMBER, ACCOUNTING_MONTH
		 , STANDARD_PRICE, CURR_CODE, CURR_RATE
		 , OPERATION_DATE, IP_ADDRESS, EMPLOYEE_CODE
	)
	select a.ITEM_NO
	     , l_accMonth1
	     , case when mod(l_accMonth1, 100) in (3, 9)
				then a.LAST_TERM_PRICE else a.STANDARD_PRICE end
	     , c_usd
	     , get_rate_bs(l_lastMon, c_usd)
	     , l_regDate
	     , l_ipAddr
	     , l_employee
	  from item_hagai a
	 where exists(
			select *
			  from P91BMLIST_FI b
			 where b.SECTION_CODE      = a.SECTION_CODE
			   and b.LOWER_ITEM_NUMBER = a.ITEM_NO
	       )
	;
	--???????
	insert into B40STPRICE_FI (
		   ITEM_NUMBER, ACCOUNTING_MONTH
		 , STANDARD_PRICE, CURR_CODE, CURR_RATE
		 , OPERATION_DATE, IP_ADDRESS, EMPLOYEE_CODE
	)
	select a.ITEM_NO
	     , l_accMonth2
	     , a.STANDARD_PRICE
	     , c_usd
	     , get_rate_bs(l_thisMon, c_usd)
	     , l_regDate
	     , l_ipAddr
	     , l_employee
	  from item_hagai a
	 where exists(
			select *
			  from P91BMLIST_FI b
			 where b.SECTION_CODE      = a.SECTION_CODE
			   and b.LOWER_ITEM_NUMBER = a.ITEM_NO
	       )
	;
--????/??????
--	check_point('????');
--	commit work;
	Return_Code := 0;
	Return_Msg  := null;
	process_end();
	echo('ReturnCode: ' || to_char(Return_Code));
exception
when others then
--	rollback work;
	Return_Code := sqlcode;
	Return_Msg  := sqlerrm;
	if Return_Code = 0 then
		Return_Code := -32768;
	end if;
	echo('ReturnCode: ' || to_char(Return_Code));
	echo('message:    ' || Return_Msg);
end;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."CSPINVENTORY_SET" (
    v_item_no   in number,             -- ???? (?????????? -1)
    v_slip_date in date,               -- ?? ????????????????? -2?
    v_slip_qty  in number,             -- ??
    v_table_position in varchar2,      -- 1:??,2:???,3:??,4:???,9:??(*??*)
                                       -- ??????SLIP_QTY?????????(???Adjust???)??????????
    v_ret_no    in out number,         -- ???????????????
    v_sec_code  in number,             -- ????? (????????? -5)
    v_st_code  in number              -- ????? (????????? -7)

)
is
begin
  declare
   WHI_REC CSPINVENTORY%rowtype ;
   ITM_REC item%rowtype ;

   v_date  date ;
   v_sabun  CSPINVENTORY.stocktaking_adjust1%TYPE   :=0 ;

   v_section_code        CSPINVENTORY.section_code%TYPE          :=v_sec_code ;
   v_station_code        CSPINVENTORY.station_code%TYPE          :=v_st_code ;
   v_receive1            CSPINVENTORY.receive1%TYPE              :=0 ;
   v_other_receive1      CSPINVENTORY.other_receive1%TYPE        :=0 ;
   v_issue1              CSPINVENTORY.issue1%TYPE                :=0 ;
   v_other_issue1        CSPINVENTORY.other_issue1%TYPE          :=0 ;
   v_stocktaking_adjust1 CSPINVENTORY.stocktaking_adjust1%TYPE   :=0 ;
   v_this_inventory      CSPINVENTORY.this_inventory%TYPE        :=0 ;
   v_receive2            CSPINVENTORY.receive2%TYPE              :=0 ;
   v_other_receive2      CSPINVENTORY.other_receive2%TYPE        :=0 ;
   v_issue2              CSPINVENTORY.issue2%TYPE                :=0 ;
   v_other_issue2        CSPINVENTORY.other_issue2%TYPE          :=0 ;
   v_stocktaking_adjust2 CSPINVENTORY.stocktaking_adjust2%TYPE   :=0 ;
   v_last_inventory      CSPINVENTORY.last_inventory%TYPE        :=0 ;

    cursor C1 is
     select *
     from CSPINVENTORY
     where item_no = v_item_no
       and section_code = v_sec_code
       and station_code = v_st_code
     for update ;

    cursor C2 is
     select nvl(to_date(max(this_month),'yyyymm'),trunc(sysdate))
     from CSPINVENTORY  ;

    cursor C3 is
     select *
     from item
     where item_no = v_item_no 
       and stock_subject_code in ('1','2');

  begin
      v_ret_no := 0 ;

      /* ??????*/
      open C3 ;
         fetch C3 into ITM_REC ;
      close C3 ;
      If ITM_REC.item_no is null Then
          v_ret_no := -1 ;
          goto LAST ;
      End If ;

      /* ?????? */
      If v_section_code is null Then
           v_ret_no := -5 ;
           goto LAST ;
      End If ;

      /* ???????? */
      If v_station_code is null Then
           v_ret_no := -7 ;
           goto LAST ;
      End If ;

      /* ????????*/
      open C2 ;
         fetch C2 into v_date ;
      close C2 ;
      /* ????????*/
      If  trunc(v_slip_date,'mm') != trunc(v_date,'mm') and  trunc(v_slip_date,'mm') != trunc(add_months(v_date,-1),'mm') Then
          v_ret_no := -2 ;
          goto LAST ;
      End If ;


      /* ?????? */
      open C1 ;
          fetch C1 into WHI_REC;

          If to_char(v_slip_date,'yyyymm') = to_char(v_date,'yyyymm') Then                    --???
               If    v_table_position = 1 Then  v_receive1            := v_slip_qty ; v_this_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 2 Then  v_other_receive1      := v_slip_qty ; v_this_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 3 Then  v_issue1              := v_slip_qty ; v_this_inventory := -v_slip_qty ;
               ElsIf v_table_position = 4 Then  v_other_issue1        := v_slip_qty ; v_this_inventory := -v_slip_qty ;
               ElsIf v_table_position = 9 Then  
                        v_sabun  := v_slip_qty - nvl(WHI_REC.this_inventory,0) ;
                        v_stocktaking_adjust1 := v_sabun ; v_this_inventory := v_sabun ;
               End If ;
          ElsIf to_char(v_slip_date,'yyyymm') = to_char(add_months(v_date,-1),'yyyymm') Then  --???
               If    v_table_position = 1 Then  v_receive2            := v_slip_qty ; v_this_inventory :=  v_slip_qty ; v_last_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 2 Then  v_other_receive2      := v_slip_qty ; v_this_inventory :=  v_slip_qty ; v_last_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 3 Then  v_issue2              := v_slip_qty ; v_this_inventory := -v_slip_qty ; v_last_inventory := -v_slip_qty ;
               ElsIf v_table_position = 4 Then  v_other_issue2        := v_slip_qty ; v_this_inventory := -v_slip_qty ; v_last_inventory := -v_slip_qty ;
               ElsIf v_table_position = 9 Then 
                        v_sabun  := v_slip_qty - nvl(WHI_REC.last_inventory,0) ;
                        v_stocktaking_adjust2 := v_sabun ; v_this_inventory := v_sabun  ; v_last_inventory :=  v_sabun ;
               End If ;
          Else 
             v_ret_no := -9 ;
          End If ;

          If C1%notfound Then
             -- ?????
            insert into CSPINVENTORY(
               operation_date,
               section_code,
               item_no,
               location,
               this_month,
               receive1,
               other_receive1,
               issue1,
               other_issue1,
               stocktaking_adjust1,
               this_inventory,
               last_month,
               receive2,
               other_receive2,
               issue2,
               other_issue2,
               stocktaking_adjust2,
               last_inventory,
               last2_inventory,
               station_code
            ) VALUES (
               sysdate,
               V_section_code,
               v_item_no,
               null,
               to_char(v_date,'yyyymm'),
               nvl(v_receive1,0),
               nvl(v_other_receive1,0),
               nvl(v_issue1,0),
               nvl(v_other_issue1,0),
               nvl(v_stocktaking_adjust1,0),
               nvl(v_this_inventory,0),
               to_char(add_months(v_date,-1),'yyyymm'),
               nvl(v_receive2,0),
               nvl(v_other_receive2,0),
               nvl(v_issue2,0),
               nvl(v_other_issue2,0),
               nvl(v_stocktaking_adjust2,0),
               nvl(v_last_inventory,0),
               0,
               v_station_code
            ) ;
          Else
             -- ???
            update CSPINVENTORY set
               operation_date        = sysdate,
               receive1              = receive1            + nvl(v_receive1           ,0),
               other_receive1        = other_receive1      + nvl(v_other_receive1     ,0),
               issue1                = issue1              + nvl(v_issue1             ,0),
               other_issue1          = other_issue1        + nvl(v_other_issue1       ,0),
               stocktaking_adjust1   = stocktaking_adjust1 + nvl(v_stocktaking_adjust1,0),
               this_inventory        = this_inventory      + nvl(v_this_inventory     ,0),
               receive2              = receive2            + nvl(v_receive2           ,0),
               other_receive2        = other_receive2      + nvl(v_other_receive2     ,0),
               issue2                = issue2              + nvl(v_issue2             ,0),
               other_issue2          = other_issue2        + nvl(v_other_issue2       ,0),
               stocktaking_adjust2   = stocktaking_adjust2 + nvl(v_stocktaking_adjust2,0),
               last_inventory        = last_inventory      + nvl(v_last_inventory     ,0)
            where item_no = v_item_no
              and section_code = v_section_code
              and nvl(station_code,0) = nvl(v_station_code,0)
            ;


          End If ;
--          If    v_table_position = 1 Then              update item  set  receive_date        = v_slip_date where item_no = v_item_no and receive_date < v_slip_date;
--          ElsIf v_table_position = 2 Then              update item  set  receive_date        = v_slip_date where item_no = v_item_no and receive_date < v_slip_date;
--          ElsIf v_table_position = 3 Then              update item  set  issue_date          = v_slip_date where item_no = v_item_no and receive_date < v_slip_date;
--          ElsIf v_table_position = 4 Then              update item  set  issue_date          = v_slip_date where item_no = v_item_no and receive_date < v_slip_date; 
--          End If ;

      close C1 ;

 <<LAST>>
   null ;

  end ;
end CSPINVENTORY_SET ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."CSPINVENTORY_SLIDE" (para_pc in number, para_today in date,
                            para_check_flag out number) is
begin
declare
       cursor pc is --cspinventory fetch
             select this_month, receive1, other_receive1,
                    issue1, other_issue1, stocktaking_adjust1,
                    this_inventory, last_month, receive2,
                    other_receive2, issue2, other_issue2,
                    stocktaking_adjust2, last_inventory, last2_inventory
               from cspinventory
               for update of
                    this_month, receive1, other_receive1,
                    issue1, other_issue1, stocktaking_adjust1,
                    this_inventory, last_month, receive2,
                    other_receive2, issue2, other_issue2,
                    stocktaking_adjust2, last_inventory, last2_inventory,
                    operation_date;
       w_this_month          cspinventory.this_month%type; --variable start
       w_receive1            cspinventory.receive1%type;
       w_other_receive1      cspinventory.other_receive1%type;
       w_issue1              cspinventory.issue1%type;
       w_other_issue1        cspinventory.other_issue1%type;
       w_stocktaking_adjust1 cspinventory.stocktaking_adjust1%type;
       w_this_inventory      cspinventory.this_inventory%type;
       w_last_month          cspinventory.last_month%type;
       w_receive2            cspinventory.receive2%type;
       w_other_receive2      cspinventory.other_receive2%type;
       w_issue2              cspinventory.issue2%type;
       w_other_issue2        cspinventory.other_issue2%type;
       w_stocktaking_adjust2 cspinventory.stocktaking_adjust2%type;
       w_last_inventory      cspinventory.last_inventory%type;
       w_last2_inventory     cspinventory.last2_inventory%type;
       w_operation_date      whinventory.operation_date%type; --variable end
     begin
     para_check_flag := 0;
     open pc;
     loop
         fetch pc into
                    w_this_month, w_receive1, w_other_receive1,
                    w_issue1, w_other_issue1, w_stocktaking_adjust1,
                    w_this_inventory, w_last_month, w_receive2,
                    w_other_receive2, w_issue2, w_other_issue2,
                    w_stocktaking_adjust2, w_last_inventory, w_last2_inventory;
         exit when pc%notfound or pc%notfound is null;
         if w_this_month <> para_pc then --month changed?
           w_last2_inventory := w_last_inventory; --value slide start
           w_last_month := w_this_month;
           w_receive2 := w_receive1;
           w_other_receive2 := w_other_receive1;
           w_issue2 := w_issue1;
           w_other_issue2 := w_other_issue1;
           w_stocktaking_adjust2 := w_stocktaking_adjust1;
           w_last_inventory := w_this_inventory;
           w_this_month := para_pc;
           w_receive1 := 0;
           w_other_receive1 := 0;
           w_issue1 := 0;
           w_other_issue1 := 0;
           w_stocktaking_adjust1 := 0;
           w_this_inventory := w_this_inventory;
           w_operation_date := para_today;
           if (w_receive2 = 0 or w_receive2 is null) and
              (w_other_receive2 = 0 or w_other_receive2 is null) and
              (w_issue2 = 0 or w_issue2 is null) and
              (w_other_issue2 = 0 or w_other_issue2 is null) and
              (w_stocktaking_adjust2 = 0 or w_stocktaking_adjust2 is null) and
              (w_last_inventory = 0 or w_last_inventory is null) and
              (w_last2_inventory = 0 or w_last2_inventory is null) then
             delete from cspinventory
              where current of pc; --delete no_move_data for two monthes
           else
             update cspinventory
                set operation_date = w_operation_date,
                    this_month = w_this_month,
                    receive1 = w_receive1,
                    other_receive1 = w_other_receive1,
                    issue1 = w_issue1,
                    other_issue1 = w_other_issue1,
                    stocktaking_adjust1 = w_stocktaking_adjust1,
                    this_inventory = w_this_inventory,
                    last_month = w_last_month,
                    receive2 = w_receive2,
                    other_receive2 = w_other_receive2,
                    issue2 = w_issue2,
                    other_issue2 = w_other_issue2,
                    stocktaking_adjust2 = w_stocktaking_adjust2,
                    last_inventory = w_last_inventory,
                    last2_inventory = w_last2_inventory
              where current of pc; --slide update
           end if;
         end if;
     end loop;
     exception
      when others then
       null;
       para_check_flag := 1;
       if pc%isopen then
        close pc;
       end if;
     close pc;
     end;
end cspinventory_slide;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."DAILY_DATA_EXTRACTION" AS
/****************************************************************
  DO_HEADER/DO_DETAILS/GR_HEADER/GR_DETAILS/SR_HEADER/SR_DETAILS/PR_HEADER/PR_DETAILS
  4????????ruiseki??????????????
  ??2005???????2003?????????????2003???????????
  ???          ?2006/02/22
  ???          ?Sayuri Suzuki
*****************************************************************/
BEGIN
  DECLARE

    cursor c1 is
	select  decode(op_flag,1,ac_month,add_months(ac_month,-1)) ac_month
	  from account_month ;

    rec	c1%rowtype;

  BEGIN
    OPEN C1;
    LOOP
    FETCH C1 INTO REC;
    EXIT WHEN C1%NOTFOUND OR C1%NOTFOUND IS NULL;
    -- ===============================================================================================
      -- ?DO_HEADER ??TBL???? 
      insert into DO_HEADER_RUISEKI
           select * 
             from do_header
            where get_period(do_date) < get_period(rec.ac_month)-20 ;

      -- ?DO_DETAILS ??TBL???? 
      insert into DO_DETAILS_RUISEKI
           select * from do_details
            where do_no in (select do_no 
                              from do_header
                             where get_period(do_date) < get_period(rec.ac_month)-20) ;

      -- ?DO_DETAILS ?????? 
      delete from  DO_DETAILS
            where do_no in (select do_no 
                              from do_header
                             where get_period(do_date) < get_period(rec.ac_month)-20) ;

      -- ?DO_HEADER ?????? 
      delete from DO_HEADER
            where get_period(do_date) < get_period(rec.ac_month)-20 ;

    -- ===============================================================================================
      -- ?GR_HEADER ??TBL???? 
      insert into GR_HEADER_RUISEKI
           select * 
             from gr_header
            where get_period(gr_date) < get_period(rec.ac_month)-20 ;

      -- ?GR_DETAILS ??TBL???? 
      insert into GR_DETAILS_RUISEKI
           select * from gr_details
            where gr_no in (select gr_no 
                              from gr_header
                             where get_period(gr_date) < get_period(rec.ac_month)-20) ;

      -- ?GR_DETAILS ?????? 
      delete from  GR_DETAILS
            where gr_no in (select gr_no 
                              from gr_header
                             where get_period(gr_date) < get_period(rec.ac_month)-20) ;

      -- ?GR_HEADER ?????? 
      delete from GR_HEADER
            where get_period(gr_date) < get_period(rec.ac_month)-20 ;

    -- ===============================================================================================
      -- ?SR_HEADER ??TBL???? 
      insert into SR_HEADER_RUISEKI
           select * 
             from sr_header
            where get_period(sr_date) < get_period(rec.ac_month)-20 ;

      -- ?SR_DETAILS ??TBL???? 
      insert into SR_DETAILS_RUISEKI
           select * from sr_details
            where sr_no in (select sr_no 
                              from sr_header
                             where get_period(sr_date) < get_period(rec.ac_month)-20) ;

      -- ?SR_DETAILS ?????? 
      delete from  SR_DETAILS
            where sr_no in (select sr_no 
                              from sr_header
                             where get_period(sr_date) < get_period(rec.ac_month)-20) ;

      -- ?SR_HEADER ?????? 
      delete from SR_HEADER
            where get_period(sr_date) < get_period(rec.ac_month)-20 ;

    -- ===============================================================================================
      -- ?PR_HEADER ??TBL???? 
      insert into PR_HEADER_RUISEKI
           select * 
             from pr_header
            where get_period(pr_date) < get_period(rec.ac_month)-20 ;

      -- ?PR_DETAILS ??TBL???? 
      insert into PR_DETAILS_RUISEKI
           select * from pr_details
            where pr_no in (select pr_no 
                              from pr_header
                             where get_period(pr_date) < get_period(rec.ac_month)-20) ;

      -- ?PR_DETAILS ?????? 
      delete from  PR_DETAILS
            where pr_no in (select pr_no 
                              from pr_header
                             where get_period(pr_date) < get_period(rec.ac_month)-20) ;

      -- ?PR_HEADER ?????? 
      delete from PR_HEADER
            where get_period(pr_date) < get_period(rec.ac_month)-20 ;

    -- ===============================================================================================
    END LOOP;
    CLOSE C1;
  END;
END DAILY_DATA_EXTRACTION;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."DELIVERY_RESTORE" (
  v_ans_no in varchar2,
  v_ret_code in out number
)
as
begin
  declare

   v_slip_type transaction.slip_type%type := '84' ;

   IND_REC indication%rowtype ;
   DOH_REC do_header%rowtype ;
   DOD_REC do_details%rowtype ;
   DOS_REC do_so%rowtype ;
   SOH_REC so_header%rowtype ;
   SOD_REC so_details%rowtype ;
   ITM_REC item%rowtype ;

   /* INDICATION?? */
   cursor C_IND(PARAM1 in varchar2)  is
     select * from indication where answer_no = PARAM1
     for update
     ;

   /* DO HEADER?? */
   cursor C_DOH(PARAM1 in varchar2)  is
     select * from do_header where do_no = PARAM1
     ;

   /* DO DETAIL?? */
   cursor C_DOD(PARAM1 in varchar2 ,PARAM2 in number )  is
     select * from do_details where do_no = PARAM1 and line_no =PARAM2
      and item_no is not null
     ;

   /* DO SO (VIEW)?? */
   cursor C_DOS(PARAM1 in varchar2)  is
     select * from do_so where answer_no = PARAM1
      and item_no is not null
     ;

   /* SO HEADER?? */
   cursor C_SOH(PARAM1 in varchar2)  is
     select * from so_header where so_no = PARAM1
     ;

   /* SO DETAILS?? */
   cursor C_SOD(PARAM1 in varchar2 ,PARAM2 in number)  is
     select * from so_details where so_no = PARAM1 and line_no =PARAM2
     ;

   /* ITEM ????? */
   cursor C_ITM(PARAM1 in number)  is
     select * from item where item_no = PARAM1 and DELETE_TYPE is null
     ;

  begin
--???
    v_ret_code := 0 ;  --???????

--?????
      /* ?????? */
       open C_IND(v_ans_no) ;
           IND_REC := null ;
           fetch C_IND into IND_REC ;
       close C_IND ;

       /*??????? */
        -- ????????????
       IF IND_REC.ANSWER_NO is null Then
          v_ret_code :=-1 ;
          goto ERROR ;
       End If ;

       -- ????????????????
       IF IND_REC.COMMIT_DATE is null Then
          v_ret_code :=-2 ;
          goto ERROR ;
       End If ;


      /* SO?? */
       open C_SOH(IND_REC.SO_NO) ;
           SOH_REC := null ;
           fetch C_SOH into SOH_REC ;
       close C_SOH ;
       open C_SOD(IND_REC.SO_NO,IND_REC.SO_LINE_NO) ;
           SOD_REC := null ;
           fetch C_SOD into SOD_REC ;
       close C_SOD ;
       --SO?????????????
       IF SOH_REC.SO_NO is null or SOD_REC.SO_NO is null Then
          v_ret_code :=-2 ;
          goto ERROR ;
       End If ;

      /* ?????? */
       open C_DOS(v_ans_no) ;
           DOS_REC := null ;
           fetch C_DOS into DOS_REC ;
       close C_DOS ;
       open C_DOD(DOS_REC.DO_NO,DOS_REC.LINE_NO) ;
           DOD_REC := null ;
           fetch C_DOD into DOD_REC ;
       close C_DOD ;
       open C_DOH(DOS_REC.DO_NO) ;
           DOH_REC := null ;
           fetch C_DOH into DOH_REC ;
       close C_DOH ;

      /* ??????? */
       open C_ITM(SOD_REC.ITEM_NO) ;
           ITM_REC := null ;
           fetch C_ITM into ITM_REC ;
       close C_ITM ;
       -- ?????????????????
       IF ITM_REC.ITEM_NO is null Then
           v_ret_code :=-3 ;
           goto ERROR ;
       End If ;

      /* ?????????? */
       DELETE FROM TRANSACTION
        WHERE ANSWER_NO = IND_REC.ANSWER_NO
          AND SLIP_TYPE= v_slip_type ;

      /* ???? */
       WHINVENTORY_SET(
           SOD_REC.ITEM_NO,
           IND_REC.EX_FACTORY,
           round(IND_REC.QTY * -1,4),
           3,
           v_ret_code,ITM_REC.SECTION_CODE
       ) ;
       If v_ret_code <0 Then
            v_ret_code := -5 ;
            goto ERROR ;
       End If ;

     /* ??????? */
       UPDATE ANSWER SET BAL_QTY = BAL_QTY + IND_REC.QTY
       WHERE ANSWER_NO = IND_REC.ANSWER_NO ;

     /* FDAC ORDER DETAILS TRN ??? */
/*
      insert into  FDAC_ORDER_DETAIL_TRN
                   (maintenance_type,
                   quantity              ,
                   quantity_diff         ,
                   order_date            ,
                   customer_po_date      ,
                   customer_po_no        ,
                   customer_line_no      ,
                   vendor_code           ,
                   po_no                 ,
                   line_no               ,
                   order_type            ,
                   company_code          ,
                   customer_code         ,
                   shipto_code           ,
                   item_no               ,
                   sp                    ,
                   sp_curr_code          ,
                   delivery_date         ,
                   sales_delivery_date   ,
                   reason                ,
                   solution              ,
                   data_source_type      ,
                   item_type             ,
                   operation_date        ,
                   operation_type        ,
                   item                  ,
                   src_class_code        ,
                   section_code          ,
                   person_code           ,
                   customer_item_no      ,
                   customer              ,
                   sell_country_code     ,
                   sell_prefecture_code  ,
                   vendor                ,
                   buy_country_code      ,
                   buy_prefecture_code   ,
                   shipto                ,
                   ship_country_code     ,
                   ship_prefecture_code  ,
                   shipto_type           ,
                   cost_curr_code        ,
                   cost                  )  
     SELECT 2,
                   sod.BAL_QTY +  IND_REC.QTY ,
                   IND_REC.QTY           ,
                   trunc(sysdate)        ,
                   soh.so_date           ,
                   soh.customer_po_no    ,
                   sod.line_no           ,
                   null                  ,
                   null                  ,
                   null                  ,
                   'U'                   ,
                   c0.company_code       ,
                   soh.customer_code     ,
                   null                  ,
                   sod.item_no           ,
                   sod.u_price           ,
                   soh.curr_code         ,
                   sod.etd               ,
                   sod.etd               ,
                   null                  ,
                   null                  ,
                   fi.data_source_type   ,
                   0                     ,
                   sysdate               ,
                   0                     ,
                   i.description         ,
                   i.class_code          ,
                   fi.section_code       ,
                   fi.person_code        ,
                   sod.customer_part_no  ,
                   c.company             ,
                   decode(c.country_code ,'192','100',c.country_code),
                   null                  ,
                   null                  ,
                   null                  ,
                   null                  ,
                   null                  ,
                   null                  ,
                   null                  ,
                   null                  ,
                   i.curr_code          ,
                   i.standard_price     
      FROM SO_HEADER SOH,SO_DETAILS SOD,ITEM I, CURRENCY    CU,COMPANY      C,(SELECT * FROM COMPANY WHERE COMPANY_TYPE=0 ) C0,FDAC_INIT   FI
      WHERE SOH.SO_NO          = SOD.SO_NO
        AND SOD.ITEM_NO       = I.ITEM_NO(+)
        AND SOD.ORIGIN_CODE   = I.ORIGIN_CODE(+)
        AND SOH.CURR_CODE     = CU.CURR_CODE
        AND SOH.CUSTOMER_CODE = C.COMPANY_CODE
        AND SOD.SO_NO         = IND_REC.SO_NO
        AND SOD.LINE_NO       = IND_REC.SO_LINE_NO ;
*/
     /* SO_DETAILS?? */
       UPDATE SO_DETAILS SET BAL_QTY = BAL_QTY + IND_REC.QTY
       WHERE SO_NO   = IND_REC.SO_NO
         AND LINE_NO = IND_REC.SO_LINE_NO ;

      /* SO_DELIVERY?????  2013/11/06 Y.Hagai Add */
       PROC_SO_DELIVERY_BAL(IND_REC.SO_NO,IND_REC.SO_LINE_NO);

     /* COMMIT DATE???????  */
        UPDATE INDICATION SET
           SLIP_DATE   = null,
           SLIP_TYPE     = null,
           COMMIT_DATE = null
        WHERE ANSWER_NO = IND_REC.ANSWER_NO ;

--?????
    <<ERROR>>
       null ;
  end ;
end delivery_restore ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."DELIVERY_UPDATE" (
  v_ans_no in varchar2,
  v_ret_code in out number
)
as
begin
  declare

   v_slip_type transaction.slip_type%type := '84' ;

   IND_REC indication%rowtype ;
   DOH_REC do_header%rowtype ;
   DOD_REC do_details%rowtype ;
   DOS_REC do_so%rowtype ;
   SOH_REC so_header%rowtype ;
   SOD_REC so_details%rowtype ;
   ITM_REC item%rowtype ;

   /* INDICATION?? */
   cursor C_IND(PARAM1 in varchar2)  is
     select * from indication where answer_no = PARAM1
     for update
     ;

   /* DO HEADER?? */
   cursor C_DOH(PARAM1 in varchar2)  is
     select * from do_header where do_no = PARAM1
     ;

   /* DO DETAIL?? */
   cursor C_DOD(PARAM1 in varchar2 ,PARAM2 in number )  is
     select * from do_details where do_no = PARAM1 and line_no =PARAM2
     ;

   /* DO SO (VIEW)?? */
   cursor C_DOS(PARAM1 in varchar2)  is
     select * from do_so where answer_no = PARAM1
     ;

   /* SO HEADER?? */
   cursor C_SOH(PARAM1 in varchar2)  is
     select * from so_header where so_no = PARAM1
     ;

   /* SO DETAILS?? */
   cursor C_SOD(PARAM1 in varchar2 ,PARAM2 in number)  is
     select * from so_details where so_no = PARAM1 and line_no =PARAM2
     ;

   /* ITEM ????? */
   cursor C_ITM(PARAM1 in number)  is
     select * from item where item_no = PARAM1
     ;

  begin
--???
    v_ret_code := 0 ;  --???????

--?????
      /* ?????? */
       open C_IND(v_ans_no) ;
           IND_REC := null ;
           fetch C_IND into IND_REC ;
       close C_IND ;

       /*??????? */
      --????????????
       IF IND_REC.ANSWER_NO is null Then
          v_ret_code :=-1 ;
          goto ERROR ;
       End If ;

       -- ????????????????
       IF IND_REC.COMMIT_DATE is not null Then
          v_ret_code :=-2 ;
          goto ERROR ;
       End If ;


      /* SO?? */
       open C_SOH(IND_REC.SO_NO) ;
           SOH_REC := null ;
           fetch C_SOH into SOH_REC ;
       close C_SOH ;
       open C_SOD(IND_REC.SO_NO,IND_REC.SO_LINE_NO) ;
           SOD_REC := null ;
           fetch C_SOD into SOD_REC ;
       close C_SOD ;
       --SO?????????????
       IF SOH_REC.SO_NO is null or SOD_REC.SO_NO is null Then
          v_ret_code :=-3 ;
          goto ERROR ;
       End If ;

      /* ?????? */
       open C_DOS(v_ans_no) ;
           DOS_REC := null ;
           fetch C_DOS into DOS_REC ;
       close C_DOS ;
       open C_DOD(DOS_REC.DO_NO,DOS_REC.LINE_NO) ;
           DOD_REC := null ;
           fetch C_DOD into DOD_REC ;
       close C_DOD ;
       open C_DOH(DOS_REC.DO_NO) ;
           DOH_REC := null ;
           fetch C_DOH into DOH_REC ;
       close C_DOH ;

      /* ??????? */
       open C_ITM(SOD_REC.ITEM_NO) ;
           ITM_REC := null ;
           fetch C_ITM into ITM_REC ;
       close C_ITM ;
       -- ?????????????????
       IF ITM_REC.ITEM_NO is null Then
           v_ret_code :=-4 ;
           goto ERROR ;
       End If ;

     /* ?????????? */
      INSERT INTO TRANSACTION (
           OPERATION_DATE            ,
           SECTION_CODE              ,
           ITEM_NO                   ,
           ITEM_CODE                 ,
           ITEM_NAME                 ,
           ITEM_DESCRIPTION          ,
           STOCK_SUBJECT_CODE        ,
           ACCOUNTING_MONTH          ,
           SLIP_DATE                 ,
           SLIP_TYPE                 ,
           SLIP_NO                   ,
           SLIP_QUANTITY             ,
           SLIP_PRICE                ,
           SLIP_AMOUNT               ,
           CURR_CODE                 ,
           STANDARD_PRICE            ,
           STANDARD_AMOUNT           ,
           SUPPLIERS_PRICE           ,
           COMPANY_CODE              ,
           ORDER_NUMBER              ,
           LINE_NO                   ,
           COST_PROCESS_CODE         ,
           COST_SUBJECT_CODE         ,
           PRODUCT_LOT_NUMBER        ,
           PURCHASE_QUANTITY         ,
           PURCHASE_PRICE            ,
           PURCHASE_AMOUNT           ,
           PURCHASE_UNIT             ,
           UNIT_STOCK                ,
           EX_RATE                   ,
           ANSWER_NO
      ) VALUES (
           SYSDATE                   ,
           ITM_REC.SECTION_CODE      ,
           SOD_REC.ITEM_NO           ,
           ITM_REC.ITEM_CODE         ,
           ITM_REC.ITEM              ,
            substr(ITM_REC.DESCRIPTION,0,30)      ,
           ITM_REC.STOCK_SUBJECT_CODE,
           TO_CHAR(IND_REC.EX_FACTORY,'YYYYMM'),
           IND_REC.EX_FACTORY        ,
           v_slip_type               ,
           nvl(DOH_REC.DO_NO,IND_REC.ANSWER_NO)                 ,
           round(IND_REC.QTY,4),
           round(nvl(DOD_REC.U_PRICE,0),4),
           round(IND_REC.QTY * SOD_REC.U_PRICE,2),
           SOH_REC.CURR_CODE         ,
           ITM_REC.STANDARD_PRICE    ,
           round(ITM_REC.STANDARD_PRICE * IND_REC.QTY,8),
           ITM_REC.SUPPLIERS_PRICE   ,
           SOH_REC.CUSTOMER_CODE     ,
           NULL                      ,
           NULL                      ,
           ITM_REC.COST_PROCESS_CODE ,
           ITM_REC.COST_SUBJECT_CODE ,
           NULL                      ,
           NULL                      ,
           NULL                      ,
           NULL                      ,
           NULL                      ,
           ITM_REC.UNIT_STOCK        ,
           SOH_REC.EX_RATE           ,
           IND_REC.ANSWER_NO
      ) ;

      /* ???? */
       WHINVENTORY_SET(
           SOD_REC.ITEM_NO,
           IND_REC.EX_FACTORY,
           round(IND_REC.QTY,4),
           3,
           v_ret_code,ITM_REC.SECTION_CODE
       ) ;
       If v_ret_code <0 Then
            v_ret_code := -5 ;
            goto ERROR ;
       End If ;

     /* FDAC ORDER DETAILS TRN ??? */
/*
      insert into  FDAC_ORDER_DETAIL_TRN
                   (maintenance_type,
                   quantity              ,
                   quantity_diff         ,
                   order_date            ,
                   customer_po_date      ,
                   customer_po_no        ,
                   customer_line_no      ,
                   vendor_code           ,
                   po_no                 ,
                   line_no               ,
                   order_type            ,
                   company_code          ,
                   customer_code         ,
                   shipto_code           ,
                   item_no               ,
                   sp                    ,
                   sp_curr_code          ,
                   delivery_date         ,
                   sales_delivery_date   ,
                   reason                ,
                   solution              ,
                   data_source_type      ,
                   item_type             ,
                   operation_date        ,
                   operation_type        ,
                   item                  ,
                   src_class_code        ,
                   section_code          ,
                   person_code           ,
                   customer_item_no      ,
                   customer              ,
                   sell_country_code     ,
                   sell_prefecture_code  ,
                   vendor                ,
                   buy_country_code      ,
                   buy_prefecture_code   ,
                   shipto                ,
                   ship_country_code     ,
                   ship_prefecture_code  ,
                   shipto_type           ,
                   cost_curr_code        ,
                   cost                  )  
     SELECT 2,
                   sod.BAL_QTY -  IND_REC.QTY ,
                   0 -  IND_REC.QTY        ,
                   trunc(sysdate)        ,
                   soh.so_date           ,
                   soh.customer_po_no    ,
                   sod.line_no           ,
                   null                  ,
                   null                  ,
                   null                  ,
                   'U'                   ,
                   c0.company_code       ,
                   soh.customer_code     ,
                   null                  ,
                   sod.item_no           ,
                   sod.u_price           ,
                   soh.curr_code         ,
                   sod.etd               ,
                   sod.etd               ,
                   null                  ,
                   null                  ,
                   fi.data_source_type   ,
                   0                     ,
                   sysdate               ,
                   0                     ,
                   i.description         ,
                   i.class_code          ,
                   fi.section_code       ,
                   fi.person_code        ,
                   sod.customer_part_no  ,
                   c.company             ,
                   decode(c.country_code ,'192','100',c.country_code),
                   null                  ,
                   null                  ,
                   null                  ,
                   null                  ,
                   null                  ,
                   null                  ,
                   null                  ,
                   null                  ,
                   i.curr_code          ,
                   i.standard_price     
      FROM SO_HEADER SOH,SO_DETAILS SOD,ITEM I, CURRENCY    CU,COMPANY      C,(SELECT * FROM COMPANY WHERE COMPANY_TYPE=0 ) C0,FDAC_INIT   FI
      WHERE SOH.SO_NO          = SOD.SO_NO
        AND SOD.ITEM_NO       = I.ITEM_NO(+)
        AND SOD.ORIGIN_CODE   = I.ORIGIN_CODE(+)
        AND SOH.CURR_CODE     = CU.CURR_CODE
        AND SOH.CUSTOMER_CODE = C.COMPANY_CODE
        AND SOD.SO_NO         = IND_REC.SO_NO
        AND SOD.LINE_NO       = IND_REC.SO_LINE_NO ;
*/
      /* SO???? */
       UPDATE SO_DETAILS SET
         BAL_QTY = BAL_QTY - IND_REC.QTY
       WHERE SO_NO = IND_REC.SO_NO AND LINE_NO = IND_REC.SO_LINE_NO ;

      /* SO_DELIVERY?????  2013/11/06 Y.Hagai Add */
       PROC_SO_DELIVERY_BAL(IND_REC.SO_NO,IND_REC.SO_LINE_NO);

      /* ??????? */
          UPDATE ANSWER SET BAL_QTY = BAL_QTY - IND_REC.QTY
          WHERE ANSWER_NO = IND_REC.ANSWER_NO ;

      /* COMMIT DATE???????  */
          UPDATE INDICATION SET
            SLIP_TYPE  = v_slip_type,
            SLIP_DATE  = ex_factory,
            COMMIT_DATE= sysdate
          WHERE ANSWER_NO = IND_REC.ANSWER_NO ;
--?????
    <<ERROR>>
       null ;
  end ;
end delivery_update ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."E12A009U2FI" is

--????????????? 
--???????e12chotai2 ?????3?????????
--????????OUT_QUANTITY?????
--2013.01.16 M.KAMIYAMA DISCOVER-J?E12A009U2FF???????
--2013.01.22 M.KAMIYAMA ??K??????????????????
BEGIN
DECLARE
l_curr_day		date;
l_ym			number(4);
l_m				number(2);
l_cnt			number(3);
l_cnt1			number(3);
l_cnt2			number(3);
l_flg			number(1);

w_edpkey		number(8);
w_section		number(6);
w_gun			number(6);
w_name1			varchar2(30);
w_gunnam		varchar2(18);
w_name			varchar2(30);
w_brand			varchar2(30);
w_tani			varchar2(2);
w_tov			number(13,4);
w_zansuu		number(9);
w_nyksuu		number(9);
w_krtnyksuu		number(9);
w_frknyksuu		number(9);
w_kng			number(4);
w_class			varchar2(18);
w_judgment_code	varchar2(1);
w_u_quantity	number(15,6);
w_l_quantity7	number(15,6);
w_l_quantity8	number(15,6);
w_l_quantity9	number(15,6);
w_l_quantity10	number(15,6);
w_l_quantity11	number(15,6);
w_l_quantity12	number(15,6);
w_l_quantity13	number(15,6);
w_t_quantity1	number(15,6);
w_t_quantity2	number(15,6);
w_t_quantity3	number(15,6);
w_t_quantity4	number(15,6);
w_t_quantity5	number(15,6);
w_t_quantity6	number(15,6);
w_t_quantity7	number(15,6);
w_t_quantity8	number(15,6);
w_t_quantity9	number(15,6);
w_t_quantity10	number(15,6);
w_t_quantity11	number(15,6);
w_t_quantity12	number(15,6);
w_t_quantity13	number(15,6);
w_this_inventory	number(15,6);
w_quantity		number(15,6);
--2013.01.22 add m.kamiyama start
w_stock_subject_code varchar2(1);
--2013.01.22 add m.kamiyama end

CURSOR wb_cursor(p in date) is
	SELECT A.SECTION_CODE SECTION_CODE,A.SECTION_CODE SECTION,A.ITEM_NO EDPKEY
	FROM WHI_CL A,ITEM B
	WHERE A.AC_MONTH = p
	AND A.THIS_INVENTORY > 0
	AND NVL(A.ISSUE,0) + NVL(A.OTHER_ISSUE,0) = 0
	AND B.ITEM_NO = A.ITEM_NO;
--2013.01.22 del m.kamiyama start
--	AND B.STOCK_SUBJECT_CODE = '5';
--2013.01.22 del m.kamiyama end
wb_rec wb_cursor%ROWTYPE;

CURSOR we_cursor is
	select rtrim(A.section_code) section_code, A.section_code section, A.item_number edpkey
	from e12chotai2 A;
--2013.01.22 del m.kamiyama start
--	where stock_subject_code = '5';
--2013.01.22 del m.kamiyama end
we_rec we_cursor%ROWTYPE;

CURSOR C1( P1 IN DATE,P2 IN NUMBER,P3 IN NUMBER ) IS
	SELECT COUNT(A.ITEM_NO) AS l_cnt1 FROM WHI_CL A,ITEM B
	WHERE A.AC_MONTH = P1
	AND A.ITEM_NO = P2
	AND A.SECTION_CODE = P3
	AND B.ITEM_NO = A.ITEM_NO
	GROUP BY A.ITEM_NO,B.CLASS_CODE;
row_c1 C1%ROWTYPE;

CURSOR C2 IS
	SELECT DISTINCT A.THIS_MONTH FROM E12CHOTAI2_PRE A;
w_this_month_pre	number(6);

BEGIN
	SELECT AC_MONTH INTO l_curr_day FROM ACCOUNT_MONTH;
	l_curr_day := to_date(20121201,'yyyymmdd');
	l_ym := to_number(to_char(l_curr_day,'YYMM'));
	l_m := to_number(to_char(l_curr_day,'MM'));
	--??????????????????
--DBMS_OUTPUT.PUT_LINE('STEP1');
	OPEN C2;
	FETCH C2 INTO w_this_month_pre;
	IF C2%FOUND THEN
		IF TO_NUMBER(TO_CHAR(ADD_MONTHS(l_curr_day,-1),'YYYYMM')) > w_this_month_pre THEN
			DELETE FROM E12CHOTAI2_PRE;
			INSERT INTO E12CHOTAI2_PRE SELECT * FROM E12CHOTAI2;
		END IF;
	ELSE
		INSERT INTO E12CHOTAI2_PRE SELECT * FROM E12CHOTAI2;
	END IF;
	CLOSE C2;
--DBMS_OUTPUT.PUT_LINE('STEP2');
	--??????????
	delete from e12chotai2;
	insert into e12chotai2 select * from e12chotai2_pre;

	if l_m = 2 or l_m = 8 then
		--2?,8??????????3?,9????????????
		update e12chotai2 set
			t_quantity13 = nvl(t_quantity13,0) + nvl(t_quantity12,0),
			t_quantity12 = t_quantity11,
			t_quantity11 = t_quantity10,
			t_quantity10 = t_quantity9,
			t_quantity9  = t_quantity8,
			t_quantity8  = t_quantity7,
			t_quantity7  = 0,
			last_month   = this_month,
			standard_price2 = standard_price,
			last_inventory = this_inventory,
			l_quantity1  = t_quantity1,
			l_quantity2  = t_quantity2,
			l_quantity3  = t_quantity3,
			l_quantity4  = t_quantity4,
			l_quantity5  = t_quantity5,
			l_quantity6  = t_quantity6,
			l_quantity7  = t_quantity7,
			l_quantity8  = t_quantity8,
			l_quantity9  = t_quantity9,
			l_quantity10  = t_quantity10,
			l_quantity11  = t_quantity11,
			l_quantity12  = t_quantity12,
			l_quantity13  = t_quantity13,
			judgment_code = '',
			failure_code  = '',
			measures_code = '',
			content       = '',
			p_quantity    = 0,
			amount        = 0
		where this_inventory <> 0;
		delete from e12chotai2 where this_inventory = 0;
	end if;

	--???
	update e12chotai2 set
		t_quantity7 = nvl(t_quantity6,0) + nvl(t_quantity7,0),
		t_quantity6 = t_quantity5,
		t_quantity5 = t_quantity4,
		t_quantity4 = t_quantity3,
		t_quantity3 = t_quantity2,
		t_quantity2 = t_quantity1,
		t_quantity1 = 0;

--DBMS_OUTPUT.PUT_LINE('STEP3');

	-- WHI_CL???????????
	OPEN wb_cursor(l_curr_day);
	LOOP
		FETCH wb_cursor INTO wb_rec;
		EXIT WHEN wb_cursor%NOTFOUND;

		select count(*) into l_cnt1 from e12chotai2
			where item_number=wb_rec.edpkey and rtrim(section_code) = wb_rec.section_code;
--2013.01.23 del m.kamiyama start
--			and stock_subject_code='5';
--2013.01.23 del m.kamiyama end


--DBMS_OUTPUT.PUT_LINE(l_cnt1);
		if l_cnt1 = 0 then
--DBMS_OUTPUT.PUT_LINE('STEP3-1');
--DBMS_OUTPUT.PUT_LINE(wb_rec.edpkey);
			SELECT A.ITEM_NO,B.CLASS_CODE,SUBSTR(B.ITEM,1,30),
			       D.CLASS_1||CASE WHEN D.CLASS_2 IS NOT NULL THEN '-' ELSE '' END ||D.CLASS_2||CASE WHEN D.CLASS_3 IS NOT NULL THEN '-' END ||D.CLASS_3,
--2013.01.22 mnt m.kamiyama start
--			       SUBSTR(B.ITEM,1,30),B.DESCRIPTION,SUBSTR(C.UNIT,1,3),
			       SUBSTR(B.ITEM,1,30),substrb(B.DESCRIPTION,30),SUBSTR(C.UNIT,1,3),B.STOCK_SUBJECT_CODE,
--2013.01.22 mnt m.kamiyama end
			       B.STANDARD_PRICE,SUM(NVL(A.THIS_INVENTORY,0)),SUM(NVL(A.RECEIVE,0) + NVL(A.OTHER_RECEIVE,0)),0,0,TO_NUMBER(SUBSTR(TO_CHAR(A.AC_MONTH,'YYYYMM'),3,4))
--2013.01.22 mnt m.kamiyama start
--			  INTO w_edpkey, w_gun, w_name1, w_gunnam, w_name, w_brand, w_tani,
			  INTO w_edpkey, w_gun, w_name1, w_gunnam, w_name, w_brand, w_tani,w_stock_subject_code,
--2013.01.22 mnt m.kamiyama end
			       w_tov, w_zansuu, w_nyksuu, w_krtnyksuu, w_frknyksuu, w_kng
			FROM WHI_CL A,ITEM B,UNIT C,CLASS D
			WHERE A.ITEM_NO = wb_rec.edpkey
			AND A.SECTION_CODE = wb_rec.section
			AND A.AC_MONTH = l_curr_day
			AND B.ITEM_NO = A.ITEM_NO
			AND C.UNIT_CODE = B.UNIT_STOCK
			AND D.CLASS_CODE = B.CLASS_CODE
			GROUP BY A.ITEM_NO,B.CLASS_CODE,SUBSTR(B.ITEM,1,30),
--2013.01.22 mnt m.kamiyama start
--			         B.STANDARD_PRICE,TO_NUMBER(SUBSTR(TO_CHAR(A.AC_MONTH,'YYYYMM'),3,4)),
			         B.STANDARD_PRICE,TO_NUMBER(SUBSTR(TO_CHAR(A.AC_MONTH,'YYYYMM'),3,4)),B.STOCK_SUBJECT_CODE,
--2013.01.22 mnt m.kamiyama end
			         substrb(B.DESCRIPTION,30),C.UNIT,D.CLASS_1,D.CLASS_2,D.CLASS_3;

			if w_zansuu <> 0 then
--DBMS_OUTPUT.PUT_LINE('STEP3-2');
				insert into e12chotai2
				 (section_code, stock_subject_code, item_number, class_code,
				  hbunrk, class, item_name, item_description, unit_stock,
				  standard_price, this_inventory, t_quantity1, end_ym, this_month)
				 values
--2013.01.22 mnt m.kamiyama start
--				 (wb_rec.section_code, 5, w_edpkey, w_gun,
				 (wb_rec.section_code, w_stock_subject_code, w_edpkey, w_gun,
--2013.01.22 mnt m.kamiyama end
				  substr(w_gun,5,2)||w_name1, w_gunnam, w_name, w_brand, w_tani,
				  w_tov, w_zansuu, w_nyksuu+w_krtnyksuu+w_frknyksuu, w_kng+200000, w_kng+200000);

			end if;
		end if;
	END LOOP;
	CLOSE wb_cursor;

--DBMS_OUTPUT.PUT_LINE('STEP4');
	--e12chotai2?????
	w_kng := l_ym;
	OPEN we_cursor;
	LOOP
		FETCH we_cursor INTO we_rec;
		EXIT WHEN we_cursor%NOTFOUND;

--DBMS_OUTPUT.PUT_LINE('e12chotai2');
		w_edpkey := we_rec.edpkey;
		w_section := we_rec.section;
		--WHI_CL????
		open C1(l_curr_day, w_edpkey,w_section );
		fetch C1 into ROW_C1;
		if C1%notfound or C1%notfound is null then
			l_cnt1 := 0;
		else
			l_cnt1 := ROW_C1.l_cnt1;
		end if;
		close C1;

		if l_cnt1 = 0 then
--DBMS_OUTPUT.PUT_LINE('STEP4-1');
			--????????
			select judgment_code, (l_quantity7+l_quantity8+l_quantity9+
			       l_quantity10+l_quantity11+l_quantity12+l_quantity13-
			       t_quantity8-t_quantity9-t_quantity10-t_quantity11-
			       t_quantity12-t_quantity13),
			       class_code,class
			  into w_judgment_code, w_u_quantity,w_gun,w_gunnam
			  from e12chotai2
			  where section_code=we_rec.section_code
--2013.01.22 del m.kamiyama start
--			    and stock_subject_code = '5'
--2013.01.22 del m.kamiyama end
			    and item_number = we_rec.edpkey;

			if w_judgment_code = 'J' or w_judgment_code = 'T' then
				w_judgment_code := 'F';
			else
				w_judgment_code := ' ';
			end if;
			--?????
			update e12chotai2 set
				class_code = w_gun,
				class = w_gunnam,
				judgment_code = w_judgment_code,
				this_inventory = 0,
				t_quantity1 = 0,
				t_quantity2 = 0,
				t_quantity3 = 0,
				t_quantity4 = 0,
				t_quantity5 = 0,
				t_quantity6 = 0,
				t_quantity7 = 0,
				t_quantity8 = 0,
				t_quantity9 = 0,
				t_quantity10 = 0,
				t_quantity11 = 0,
				t_quantity12 = 0,
				t_quantity13 = 0,
				u_quantity = w_u_quantity,
				this_month = w_kng+200000
			  where section_code=we_rec.section_code
--2013.01.22 del m.kamiyama start
--			    and stock_subject_code = '5'
--2013.01.22 del m.kamiyama end
			    and item_number = we_rec.edpkey;

		else
--DBMS_OUTPUT.PUT_LINE('STEP4-2');
			SELECT A.ITEM_NO,B.CLASS_CODE,SUBSTR(B.ITEM,1,30),
			       D.CLASS_1||CASE WHEN D.CLASS_2 IS NOT NULL THEN '-' ELSE '' END ||D.CLASS_2||CASE WHEN D.CLASS_3 IS NOT NULL THEN '-' END ||D.CLASS_3,
			       SUBSTR(B.ITEM,1,30),substrb(B.DESCRIPTION,30),SUBSTR(C.UNIT,1,3),
			       B.STANDARD_PRICE,SUM(NVL(A.THIS_INVENTORY,0)),SUM(NVL(A.RECEIVE,0) + NVL(A.OTHER_RECEIVE,0)),0,0,TO_NUMBER(SUBSTR(TO_CHAR(A.AC_MONTH,'YYYYMM'),3,4))
			  INTO w_edpkey, w_gun, w_name1, w_gunnam, w_name, w_brand, w_tani,
			       w_tov, w_zansuu, w_nyksuu, w_krtnyksuu, w_frknyksuu, w_kng
			FROM WHI_CL A,ITEM B,UNIT C,CLASS D
			WHERE A.ITEM_NO = we_rec.edpkey
			AND A.SECTION_CODE = we_rec.section
			AND A.AC_MONTH = l_curr_day
			AND B.ITEM_NO = A.ITEM_NO
			AND C.UNIT_CODE = B.UNIT_STOCK
			AND D.CLASS_CODE = B.CLASS_CODE
			GROUP BY A.ITEM_NO,B.CLASS_CODE,SUBSTR(B.ITEM,1,30),
			         B.STANDARD_PRICE,TO_NUMBER(SUBSTR(TO_CHAR(A.AC_MONTH,'YYYYMM'),3,4)),
			         substrb(B.DESCRIPTION,30),C.UNIT,D.CLASS_1,D.CLASS_2,D.CLASS_3;

--DBMS_OUTPUT.PUT_LINE(w_zansuu||' '||w_nyksuu||' '||w_krtnyksuu||' '||w_frknyksuu);

			update e12chotai2 set
			  class_code = w_gun,
			  hbunrk = substr(w_gun,5,2)||w_name1,
			  class = w_gunnam,
			  item_name = w_name,
			  item_description = w_brand,
			  unit_stock = w_tani,
			  standard_price = w_tov,
			  this_inventory = w_zansuu,
			  t_quantity1 = w_nyksuu+w_krtnyksuu+w_frknyksuu
			  where section_code=we_rec.section_code
--2013.01.22 del m.kamiyama start
--			    and stock_subject_code = 5
--2013.01.22 del m.kamiyama end
			    and item_number = we_rec.edpkey;

			select judgment_code, (nvl(l_quantity7,0)+nvl(l_quantity8,0)+nvl(l_quantity9,0)+
			       nvl(l_quantity10,0)+nvl(l_quantity11,0)+nvl(l_quantity12,0)+nvl(l_quantity13,0)-
			       nvl(t_quantity8,0)-nvl(t_quantity9,0)-nvl(t_quantity10,0)-nvl(t_quantity11,0)-
			       nvl(t_quantity12,0)-nvl(t_quantity13,0)), nvl(this_inventory,0),
			       nvl(t_quantity1,0), nvl(t_quantity2,0), nvl(t_quantity3,0), nvl(t_quantity4,0),
			       nvl(t_quantity5,0), nvl(t_quantity6,0), nvl(t_quantity7,0), nvl(t_quantity8,0),
			       nvl(t_quantity9,0), nvl(t_quantity10,0), nvl(t_quantity11,0), nvl(t_quantity12,0),
			       nvl(t_quantity13,0)
			  into w_judgment_code, w_u_quantity, w_this_inventory,
			       w_t_quantity1, w_t_quantity2, w_t_quantity3, w_t_quantity4,
			       w_t_quantity5, w_t_quantity6, w_t_quantity7, w_t_quantity8,
			       w_t_quantity9, w_t_quantity10, w_t_quantity11, w_t_quantity12,
			       w_t_quantity13
			  from e12chotai2
			  where section_code=we_rec.section_code
--2013.01.22 del m.kamiyama start
--			    and stock_subject_code = '5'
--2013.01.22 del m.kamiyama end
			    and item_number = we_rec.edpkey;

--DBMS_OUTPUT.PUT_LINE(w_judgment_code);
--DBMS_OUTPUT.PUT_LINE(w_t_quantity4||' '||w_t_quantity5||' '||w_t_quantity6||' '||w_t_quantity7||' '||w_t_quantity8||' '||w_t_quantity9||' '||w_t_quantity10||' '||w_t_quantity11||' '||w_t_quantity12||' '||w_t_quantity13);

			if w_this_inventory = 0 then
--DBMS_OUTPUT.PUT_LINE('this_inventory is 0 '||we_rec.section_code||' '||we_rec.edpkey);
				if w_judgment_code = 'J' or w_judgment_code = 'T' then
					w_judgment_code := 'F';
				else
					w_judgment_code := ' ';
				end if;

--DBMS_OUTPUT.PUT_LINE(w_judgment_code);
				update e12chotai2 set
					judgment_code = w_judgment_code,
					this_inventory = 0,
					t_quantity1 = 0,
					t_quantity2 = 0,
					t_quantity3 = 0,
					t_quantity4 = 0,
					t_quantity5 = 0,
					t_quantity6 = 0,
					t_quantity7 = 0,
					t_quantity8 = 0,
					t_quantity9 = 0,
					t_quantity10 = 0,
					t_quantity11 = 0,
					t_quantity12 = 0,
					t_quantity13 = 0,
					u_quantity = w_u_quantity
				  where section_code=rtrim(we_rec.section_code)
--2013.01.22 del m.kamiyama start
--				    and stock_subject_code = '5'
--2013.01.22 del m.kamiyama end
				    and item_number = we_rec.edpkey;
				select t_quantity1, t_quantity2, t_quantity3, t_quantity4, t_quantity5,
				t_quantity6, t_quantity7, t_quantity8, t_quantity9, t_quantity10,
				t_quantity11, t_quantity12, t_quantity13
				into w_t_quantity1, w_t_quantity2, w_t_quantity3, w_t_quantity4, w_t_quantity5,
				w_t_quantity6, w_t_quantity7, w_t_quantity8, w_t_quantity9, w_t_quantity10,
				w_t_quantity11, w_t_quantity12, w_t_quantity13
				from e12chotai2
				where section_code=rtrim(we_rec.section_code)
--2013.01.22 del m.kamiyama start
--				and stock_subject_code = '5'
--2013.01.22 del m.kamiyama end
				and item_number = we_rec.edpkey;
--DBMS_OUTPUT.PUT_LINE('--'||w_t_quantity5);

			else
				--????????????????????????
				w_quantity := 0;
				w_quantity := w_quantity + w_t_quantity1;
				l_flg := 0;
				if w_quantity > w_this_inventory then
--DBMS_OUTPUT.PUT_LINE('0:'||w_quantity||'  '||w_t_quantity1||' '||w_this_inventory||' '||w_quantity);
					w_t_quantity1 := w_t_quantity1 + w_this_inventory - w_quantity;
					w_t_quantity2 := 0;
					w_t_quantity3 := 0;
					w_t_quantity4 := 0;
					w_t_quantity5 := 0;
					w_t_quantity6 := 0;
					w_t_quantity7 := 0;
					w_t_quantity8 := 0;
					w_t_quantity9 := 0;
					w_t_quantity10 := 0;
					w_t_quantity11 := 0;
					w_t_quantity12 := 0;
					w_t_quantity13 := 0;
					l_flg := 1;
				end if;
--DBMS_OUTPUT.PUT_LINE('1:'||w_quantity||'  '||w_t_quantity1||' '||w_t_quantity2||' '||w_t_quantity3||' '||w_t_quantity4||' '||w_t_quantity5||' '||w_t_quantity6||' '||w_t_quantity7||' '||w_t_quantity8||' '||w_t_quantity9||' '||w_t_quantity10||' '||w_t_quantity11||' '||w_t_quantity12||' '||w_t_quantity13);
				if l_flg = 0 then
					w_quantity := w_quantity + w_t_quantity2;
					if w_quantity > w_this_inventory then
						if l_flg = 0 then
							w_t_quantity2 := w_t_quantity2 + w_this_inventory - w_quantity;
						else
							w_t_quantity2 := w_quantity + w_t_quantity2;
						end if;
						w_t_quantity3 := 0;
						w_t_quantity4 := 0;
						w_t_quantity5 := 0;
						w_t_quantity6 := 0;
						w_t_quantity7 := 0;
						w_t_quantity8 := 0;
						w_t_quantity9 := 0;
						w_t_quantity10 := 0;
						w_t_quantity11 := 0;
						w_t_quantity12 := 0;
						w_t_quantity13 := 0;
						l_flg := 1;
					end if;
				end if;
--DBMS_OUTPUT.PUT_LINE('2:'||w_quantity||'  '||w_t_quantity2||' '||w_t_quantity3||' '||w_t_quantity4||' '||w_t_quantity5||' '||w_t_quantity6||' '||w_t_quantity7||' '||w_t_quantity8||' '||w_t_quantity9||' '||w_t_quantity10||' '||w_t_quantity11||' '||w_t_quantity12||' '||w_t_quantity13);
				if l_flg = 0 then
					w_quantity := w_quantity + w_t_quantity3;
					if w_quantity > w_this_inventory then
						if l_flg = 0 then
							w_t_quantity3 := w_t_quantity3 + w_this_inventory - w_quantity;
						else
							w_t_quantity3 := w_quantity + w_t_quantity3;
						end if;
						w_t_quantity4 := 0;
						w_t_quantity5 := 0;
						w_t_quantity6 := 0;
						w_t_quantity7 := 0;
						w_t_quantity8 := 0;
						w_t_quantity9 := 0;
						w_t_quantity10 := 0;
						w_t_quantity11 := 0;
						w_t_quantity12 := 0;
						w_t_quantity13 := 0;
						l_flg := 1;
					end if;
				end if;
--DBMS_OUTPUT.PUT_LINE('3:'||w_quantity||'  '||w_t_quantity3||' '||w_t_quantity4||' '||w_t_quantity5||' '||w_t_quantity6||' '||w_t_quantity7||' '||w_t_quantity8||' '||w_t_quantity9||' '||w_t_quantity10||' '||w_t_quantity11||' '||w_t_quantity12||' '||w_t_quantity13);
				if l_flg = 0 then
					w_quantity := w_quantity + w_t_quantity4;
					if w_quantity > w_this_inventory then
						if l_flg = 0 then
							w_t_quantity4 := w_t_quantity4 + w_this_inventory - w_quantity;
						else
							w_t_quantity4 := w_quantity + w_t_quantity4;
						end if;
						w_t_quantity5 := 0;
						w_t_quantity6 := 0;
						w_t_quantity7 := 0;
						w_t_quantity8 := 0;
						w_t_quantity9 := 0;
						w_t_quantity10 := 0;
						w_t_quantity11 := 0;
						w_t_quantity12 := 0;
						w_t_quantity13 := 0;
						l_flg := 1;
					end if;
				end if;
--DBMS_OUTPUT.PUT_LINE('4:'||w_quantity||'  '||w_t_quantity4||' '||w_t_quantity5||' '||w_t_quantity6||' '||w_t_quantity7||' '||w_t_quantity8||' '||w_t_quantity9||' '||w_t_quantity10||' '||w_t_quantity11||' '||w_t_quantity12||' '||w_t_quantity13);
				if l_flg = 0 then
					w_quantity := w_quantity + w_t_quantity5;
					if w_quantity > w_this_inventory then
						if l_flg = 0 then
							w_t_quantity5 := w_t_quantity5 + w_this_inventory - w_quantity;
						else
							w_t_quantity5 := w_quantity + w_t_quantity5;
						end if;
						w_t_quantity6 := 0;
						w_t_quantity7 := 0;
						w_t_quantity8 := 0;
						w_t_quantity9 := 0;
						w_t_quantity10 := 0;
						w_t_quantity11 := 0;
						w_t_quantity12 := 0;
						w_t_quantity13 := 0;
						l_flg := 1;
					end if;
				end if;
--DBMS_OUTPUT.PUT_LINE('5:'||w_quantity||'  '||w_t_quantity5||' '||w_t_quantity6||' '||w_t_quantity7||' '||w_t_quantity8||' '||w_t_quantity9||' '||w_t_quantity10||' '||w_t_quantity11||' '||w_t_quantity12||' '||w_t_quantity13);
				if l_flg = 0 then
					w_quantity := w_quantity + w_t_quantity6;
					if w_quantity > w_this_inventory then
						if l_flg = 0 then
							w_t_quantity6 := w_t_quantity6 + w_this_inventory - w_quantity;
						else
							w_t_quantity6 := w_quantity + w_t_quantity6;
						end if;
						w_t_quantity7 := 0;
						w_t_quantity8 := 0;
						w_t_quantity9 := 0;
						w_t_quantity10 := 0;
						w_t_quantity11 := 0;
						w_t_quantity12 := 0;
						w_t_quantity13 := 0;
						l_flg := 1;
					end if;
				end if;
--DBMS_OUTPUT.PUT_LINE('6:'||w_quantity||'  '||w_t_quantity6||' '||w_t_quantity7||' '||w_t_quantity8||' '||w_t_quantity9||' '||w_t_quantity10||' '||w_t_quantity11||' '||w_t_quantity12||' '||w_t_quantity13);
				if l_flg = 0 then
					w_quantity := w_quantity + w_t_quantity7;
					if w_quantity > w_this_inventory then
						if l_flg = 0 then
							w_t_quantity7 := w_t_quantity7 + w_this_inventory - w_quantity;
						else
							w_t_quantity7 := w_quantity + w_t_quantity7;
						end if;
						w_t_quantity8 := 0;
						w_t_quantity9 := 0;
						w_t_quantity10 := 0;
						w_t_quantity11 := 0;
						w_t_quantity12 := 0;
						w_t_quantity13 := 0;
						l_flg := 1;
					end if;
				end if;
--DBMS_OUTPUT.PUT_LINE('7:'||w_quantity||'  '||w_t_quantity7||' '||w_t_quantity8||' '||w_t_quantity9||' '||w_t_quantity10||' '||w_t_quantity11||' '||w_t_quantity12||' '||w_t_quantity13);
				if l_flg = 0 then
					w_quantity := w_quantity + w_t_quantity8;
					if w_quantity > w_this_inventory then
						if l_flg = 0 then
							w_t_quantity8 := w_t_quantity8 + w_this_inventory - w_quantity;
						else
							w_t_quantity8 := w_quantity + w_t_quantity8;
						end if;
						w_t_quantity9 := 0;
						w_t_quantity10 := 0;
						w_t_quantity11 := 0;
						w_t_quantity12 := 0;
						w_t_quantity13 := 0;
						l_flg := 1;
					end if;
				end if;
--DBMS_OUTPUT.PUT_LINE('8:'||w_quantity||'  '||w_t_quantity8||' '||w_t_quantity9||' '||w_t_quantity10||' '||w_t_quantity11||' '||w_t_quantity12||' '||w_t_quantity13);
				if l_flg = 0 then
					w_quantity := w_quantity + w_t_quantity9;
					if w_quantity > w_this_inventory then
						if l_flg = 0 then
							w_t_quantity9 := w_t_quantity9 + w_this_inventory - w_quantity;
						else
							w_t_quantity9 := w_quantity + w_t_quantity9;
						end if;
						w_t_quantity10 := 0;
						w_t_quantity11 := 0;
						w_t_quantity12 := 0;
						w_t_quantity13 := 0;
						l_flg := 1;
					end if;
				end if;
--DBMS_OUTPUT.PUT_LINE('9:'||w_quantity||'  '||w_t_quantity9||' '||w_t_quantity10||' '||w_t_quantity11||' '||w_t_quantity12||' '||w_t_quantity13);
				if l_flg = 0 then
					w_quantity := w_quantity + w_t_quantity10;
					if w_quantity > w_this_inventory then
						if l_flg = 0 then
							w_t_quantity10 := w_t_quantity10 + w_this_inventory - w_quantity;
						else
							w_t_quantity10 := w_quantity + w_t_quantity10;
						end if;
						w_t_quantity11 := 0;
						w_t_quantity12 := 0;
						w_t_quantity13 := 0;
						l_flg := 1;
					end if;
				end if;
--DBMS_OUTPUT.PUT_LINE('10:'||w_quantity||'  '||w_t_quantity10||' '||w_t_quantity11||' '||w_t_quantity12||' '||w_t_quantity13);
				if l_flg = 0 then
					w_quantity := w_quantity + w_t_quantity11;
					if w_quantity > w_this_inventory then
						if l_flg = 0 then
							w_t_quantity11 := w_t_quantity11 + w_this_inventory - w_quantity;
						else
							w_t_quantity11 := w_quantity + w_t_quantity11;
						end if;
						w_t_quantity12 := 0;
						w_t_quantity13 := 0;
						l_flg := 1;
					end if;
				end if;
--DBMS_OUTPUT.PUT_LINE('11:'||w_quantity||'  '||w_t_quantity11||' '||w_t_quantity12||' '||w_t_quantity13);
				if l_flg = 0 then
					w_quantity := w_quantity + w_t_quantity12;
					if w_quantity > w_this_inventory then
						if l_flg = 0 then
							w_t_quantity12 := w_t_quantity12 + w_this_inventory - w_quantity;
						else
							w_t_quantity12 := w_quantity + w_t_quantity12;
						end if;
						w_t_quantity13 := 0;
						l_flg := 1;
					end if;
				end if;
--DBMS_OUTPUT.PUT_LINE('12:'||w_quantity||'  '||w_t_quantity12||' '||w_t_quantity13);
				if l_flg = 0 then
					w_quantity := w_quantity + w_t_quantity13;
					if w_quantity > w_this_inventory then
						w_t_quantity13 := w_t_quantity13 + w_this_inventory - w_quantity;
					end if;
				end if;
--DBMS_OUTPUT.PUT_LINE('13:'||w_quantity||'  '||w_t_quantity13);

				if w_t_quantity7 > 0 or w_t_quantity8 > 0 or w_t_quantity9 > 0 or
				   w_t_quantity10 > 0 or w_t_quantity11 > 0 or w_t_quantity12 > 0 or
				   w_t_quantity13 > 0 then
					w_judgment_code := 'T';
				elsif w_t_quantity4 > 0 or w_t_quantity5 > 0 or w_t_quantity6 > 0 then
					w_judgment_code := 'J';
				else
					if w_judgment_code = 'J' or w_judgment_code = 'T' then
						w_judgment_code := 'F';
					else
						w_judgment_code := ' ';
					end if;
				end if;
			end if;

			--THIS_INV?TQ1?13????TQ1???
			w_t_quantity1 := w_t_quantity1 +
							 w_this_inventory - (w_t_quantity1 + w_t_quantity2 +
							 w_t_quantity3 + w_t_quantity4 + w_t_quantity5 +
							 w_t_quantity6 + w_t_quantity7 + w_t_quantity8 +
							 w_t_quantity9 + w_t_quantity10 + w_t_quantity11 +
							 w_t_quantity12 + w_t_quantity13);

--DBMS_OUTPUT.PUT_LINE(w_judgment_code);
			update e12chotai2 set
				judgment_code = w_judgment_code,
				this_inventory = w_this_inventory,
				t_quantity1 = w_t_quantity1,
				t_quantity2 = w_t_quantity2,
				t_quantity3 = w_t_quantity3,
				t_quantity4 = w_t_quantity4,
				t_quantity5 = w_t_quantity5,
				t_quantity6 = w_t_quantity6,
				t_quantity7 = w_t_quantity7,
				t_quantity8 = w_t_quantity8,
				t_quantity9 = w_t_quantity9,
				t_quantity10 = w_t_quantity10,
				t_quantity11 = w_t_quantity11,
				t_quantity12 = w_t_quantity12,
				t_quantity13 = w_t_quantity13,
				u_quantity = w_u_quantity,
				this_month = w_kng+200000
			  where section_code=we_rec.section_code
--2013.01.22 del m.kamiyama start
--			    and stock_subject_code = '5'
--2013.01.22 del m.kamiyama end
			    and item_number = we_rec.edpkey;
		end if;

	END LOOP;
	CLOSE we_cursor;

	commit;
	--rollback;
EXCEPTION
	when others then
		if wb_cursor%isopen then
			close wb_cursor;
		end if;
		if we_cursor%isopen then
			close we_cursor;
		end if;
		if c1%isopen then
			close c1;
		end if;
		if c2%isopen then
			close c2;
		end if;
		rollback;
--	DBMS_OUTPUT.PUT_LINE('EXCEPTION! ' || SQLERRM || '(' || w_edpkey || ':' || w_section || ')');
		raise;
end;
END E12A009U2FI;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."E12A009U2FI_TEST" is

--????????????? 
--???????e12chotai2 ?????3?????????
--????????OUT_QUANTITY?????
--2013.01.16 M.KAMIYAMA DISCOVER-J?E12A009U2FF???????
--2013.01.22 M.KAMIYAMA ??K??????????????????
BEGIN
DECLARE
l_curr_day		date;
l_ym			number(4);
l_m				number(2);
l_cnt			number(3);
l_cnt1			number(3);
l_cnt2			number(3);
l_flg			number(1);

w_edpkey		number(8);
w_section		number(6);
w_gun			number(6);
w_name1			varchar2(30);
w_gunnam		varchar2(18);
w_name			varchar2(30);
w_brand			varchar2(30);
w_tani			varchar2(2);
w_tov			number(13,4);
w_zansuu		number(9);
w_nyksuu		number(9);
w_krtnyksuu		number(9);
w_frknyksuu		number(9);
w_kng			number(4);
w_class			varchar2(18);
w_judgment_code	varchar2(1);
w_u_quantity	number(17,6);
w_l_quantity7	number(17,6);
w_l_quantity8	number(17,6);
w_l_quantity9	number(17,6);
w_l_quantity10	number(17,6);
w_l_quantity11	number(17,6);
w_l_quantity12	number(17,6);
w_l_quantity13	number(17,6);
w_t_quantity1	number(17,6);
w_t_quantity2	number(17,6);
w_t_quantity3	number(17,6);
w_t_quantity4	number(17,6);
w_t_quantity5	number(17,6);
w_t_quantity6	number(17,6);
w_t_quantity7	number(17,6);
w_t_quantity8	number(17,6);
w_t_quantity9	number(17,6);
w_t_quantity10	number(17,6);
w_t_quantity11	number(17,6);
w_t_quantity12	number(17,6);
w_t_quantity13	number(17,6);
w_this_inventory	number(17,6);
w_quantity		number(17,6);
--2013.01.22 add m.kamiyama start
w_stock_subject_code varchar2(1);
--2013.01.22 add m.kamiyama end

CURSOR wb_cursor(p in date) is
	SELECT A.SECTION_CODE SECTION_CODE,A.SECTION_CODE SECTION,A.ITEM_NO EDPKEY
	FROM WHI_CL A,ITEM B
	WHERE A.AC_MONTH = p
	AND A.THIS_INVENTORY > 0
	AND NVL(A.ISSUE,0) + NVL(A.OTHER_ISSUE,0) = 0
	AND B.ITEM_NO = A.ITEM_NO;
--2013.01.22 del m.kamiyama start
--	AND B.STOCK_SUBJECT_CODE = '5';
--2013.01.22 del m.kamiyama end
wb_rec wb_cursor%ROWTYPE;

CURSOR we_cursor is
	select rtrim(A.section_code) section_code, A.section_code section, A.item_number edpkey
	from e12chotai2 A;
--2013.01.22 del m.kamiyama start
--	where stock_subject_code = '5';
--2013.01.22 del m.kamiyama end
we_rec we_cursor%ROWTYPE;

CURSOR C1( P1 IN DATE,P2 IN NUMBER,P3 IN NUMBER ) IS
	SELECT COUNT(A.ITEM_NO) AS l_cnt1 FROM WHI_CL A,ITEM B
	WHERE A.AC_MONTH = P1
	AND A.ITEM_NO = P2
	AND A.SECTION_CODE = P3
	AND B.ITEM_NO = A.ITEM_NO
	GROUP BY A.ITEM_NO,B.CLASS_CODE;
row_c1 C1%ROWTYPE;

CURSOR C2 IS
	SELECT DISTINCT A.THIS_MONTH FROM E12CHOTAI2_PRE A;
w_this_month_pre	number(6);

BEGIN
	SELECT AC_MONTH INTO l_curr_day FROM ACCOUNT_MONTH;
	l_curr_day := to_date(20121201,'yyyymmdd');
	l_ym := to_number(to_char(l_curr_day,'YYMM'));
	l_m := to_number(to_char(l_curr_day,'MM'));
	--??????????????????
--DBMS_OUTPUT.PUT_LINE('STEP1');
	OPEN C2;
	FETCH C2 INTO w_this_month_pre;
	IF C2%FOUND THEN
		IF TO_NUMBER(TO_CHAR(ADD_MONTHS(l_curr_day,-1),'YYYYMM')) > w_this_month_pre THEN
			DELETE FROM E12CHOTAI2_PRE;
			INSERT INTO E12CHOTAI2_PRE SELECT * FROM E12CHOTAI2;
		END IF;
	ELSE
		INSERT INTO E12CHOTAI2_PRE SELECT * FROM E12CHOTAI2;
	END IF;
	CLOSE C2;
--DBMS_OUTPUT.PUT_LINE('STEP2');
	--??????????
	delete from e12chotai2;
	insert into e12chotai2 select * from e12chotai2_pre;

	if l_m = 2 or l_m = 8 then
		--2?,8??????????3?,9????????????
		update e12chotai2 set
			t_quantity13 = nvl(t_quantity13,0) + nvl(t_quantity12,0),
			t_quantity12 = t_quantity11,
			t_quantity11 = t_quantity10,
			t_quantity10 = t_quantity9,
			t_quantity9  = t_quantity8,
			t_quantity8  = t_quantity7,
			t_quantity7  = 0,
			last_month   = this_month,
			standard_price2 = standard_price,
			last_inventory = this_inventory,
			l_quantity1  = t_quantity1,
			l_quantity2  = t_quantity2,
			l_quantity3  = t_quantity3,
			l_quantity4  = t_quantity4,
			l_quantity5  = t_quantity5,
			l_quantity6  = t_quantity6,
			l_quantity7  = t_quantity7,
			l_quantity8  = t_quantity8,
			l_quantity9  = t_quantity9,
			l_quantity10  = t_quantity10,
			l_quantity11  = t_quantity11,
			l_quantity12  = t_quantity12,
			l_quantity13  = t_quantity13,
			judgment_code = '',
			failure_code  = '',
			measures_code = '',
			content       = '',
			p_quantity    = 0,
			amount        = 0
		where this_inventory <> 0;
		delete from e12chotai2 where this_inventory = 0;
	end if;

	--???
	update e12chotai2 set
		t_quantity7 = nvl(t_quantity6,0) + nvl(t_quantity7,0),
		t_quantity6 = t_quantity5,
		t_quantity5 = t_quantity4,
		t_quantity4 = t_quantity3,
		t_quantity3 = t_quantity2,
		t_quantity2 = t_quantity1,
		t_quantity1 = 0;

--DBMS_OUTPUT.PUT_LINE('STEP3');

	-- WHI_CL???????????
	OPEN wb_cursor(l_curr_day);
	LOOP
		FETCH wb_cursor INTO wb_rec;
		EXIT WHEN wb_cursor%NOTFOUND;

		select count(*) into l_cnt1 from e12chotai2
			where item_number=wb_rec.edpkey and rtrim(section_code) = wb_rec.section_code;
--2013.01.23 del m.kamiyama start
--			and stock_subject_code='5';
--2013.01.23 del m.kamiyama end


--DBMS_OUTPUT.PUT_LINE(l_cnt1);
		if l_cnt1 = 0 then
--DBMS_OUTPUT.PUT_LINE('STEP3-1');
--DBMS_OUTPUT.PUT_LINE(wb_rec.edpkey);
			SELECT A.ITEM_NO,B.CLASS_CODE,SUBSTR(B.ITEM,1,30),
			       D.CLASS_1||CASE WHEN D.CLASS_2 IS NOT NULL THEN '-' ELSE '' END ||D.CLASS_2||CASE WHEN D.CLASS_3 IS NOT NULL THEN '-' END ||D.CLASS_3,
--2013.01.22 mnt m.kamiyama start
--			       SUBSTR(B.ITEM,1,30),B.DESCRIPTION,SUBSTR(C.UNIT,1,3),
			       SUBSTR(B.ITEM,1,30),SUBSTR(B.DESCRIPTION,30),SUBSTR(C.UNIT,1,3),B.STOCK_SUBJECT_CODE,
--2013.01.22 mnt m.kamiyama end
			       B.STANDARD_PRICE,SUM(NVL(A.THIS_INVENTORY,0)),SUM(NVL(A.RECEIVE,0) + NVL(A.OTHER_RECEIVE,0)),0,0,TO_NUMBER(SUBSTR(TO_CHAR(A.AC_MONTH,'YYYYMM'),3,4))
--2013.01.22 mnt m.kamiyama start
--			  INTO w_edpkey, w_gun, w_name1, w_gunnam, w_name, w_brand, w_tani,
			  INTO w_edpkey, w_gun, w_name1, w_gunnam, w_name, w_brand, w_tani,w_stock_subject_code,
--2013.01.22 mnt m.kamiyama end
			       w_tov, w_zansuu, w_nyksuu, w_krtnyksuu, w_frknyksuu, w_kng
			FROM WHI_CL A,ITEM B,UNIT C,CLASS D
			WHERE A.ITEM_NO = wb_rec.edpkey
			AND A.SECTION_CODE = wb_rec.section
			AND A.AC_MONTH = l_curr_day
			AND B.ITEM_NO = A.ITEM_NO
			AND C.UNIT_CODE = B.UNIT_STOCK
			AND D.CLASS_CODE = B.CLASS_CODE
			GROUP BY A.ITEM_NO,B.CLASS_CODE,SUBSTR(B.ITEM,1,30),
--2013.01.22 mnt m.kamiyama start
--			         B.STANDARD_PRICE,TO_NUMBER(SUBSTR(TO_CHAR(A.AC_MONTH,'YYYYMM'),3,4)),
			         B.STANDARD_PRICE,TO_NUMBER(SUBSTR(TO_CHAR(A.AC_MONTH,'YYYYMM'),3,4)),B.STOCK_SUBJECT_CODE,
--2013.01.22 mnt m.kamiyama end
			         B.DESCRIPTION,C.UNIT,D.CLASS_1,D.CLASS_2,D.CLASS_3;

			if w_zansuu <> 0 then
--DBMS_OUTPUT.PUT_LINE('STEP3-2');
				insert into e12chotai2
				 (section_code, stock_subject_code, item_number, class_code,
				  hbunrk, class, item_name, item_description, unit_stock,
				  standard_price, this_inventory, t_quantity1, end_ym, this_month)
				 values
--2013.01.22 mnt m.kamiyama start
--				 (wb_rec.section_code, 5, w_edpkey, w_gun,
				 (wb_rec.section_code, w_stock_subject_code, w_edpkey, w_gun,
--2013.01.22 mnt m.kamiyama end
				  substr(w_gun,5,2)||w_name1, w_gunnam, w_name, w_brand, w_tani,
				  w_tov, w_zansuu, w_nyksuu+w_krtnyksuu+w_frknyksuu, w_kng+200000, w_kng+200000);

			end if;
		end if;
	END LOOP;
	CLOSE wb_cursor;

--DBMS_OUTPUT.PUT_LINE('STEP4');
	--e12chotai2?????
	w_kng := l_ym;
	OPEN we_cursor;
	LOOP
		FETCH we_cursor INTO we_rec;
		EXIT WHEN we_cursor%NOTFOUND;

--DBMS_OUTPUT.PUT_LINE('e12chotai2');
		w_edpkey := we_rec.edpkey;
		w_section := we_rec.section;
		--WHI_CL????
		open C1(l_curr_day, w_edpkey,w_section );
		fetch C1 into ROW_C1;
		if C1%notfound or C1%notfound is null then
			l_cnt1 := 0;
		else
			l_cnt1 := ROW_C1.l_cnt1;
		end if;
		close C1;

		if l_cnt1 = 0 then
--DBMS_OUTPUT.PUT_LINE('STEP4-1');
			--????????
			select judgment_code, (l_quantity7+l_quantity8+l_quantity9+
			       l_quantity10+l_quantity11+l_quantity12+l_quantity13-
			       t_quantity8-t_quantity9-t_quantity10-t_quantity11-
			       t_quantity12-t_quantity13),
			       class_code,class
			  into w_judgment_code, w_u_quantity,w_gun,w_gunnam
			  from e12chotai2
			  where section_code=we_rec.section_code
--2013.01.22 del m.kamiyama start
--			    and stock_subject_code = '5'
--2013.01.22 del m.kamiyama end
			    and item_number = we_rec.edpkey;

			if w_judgment_code = 'J' or w_judgment_code = 'T' then
				w_judgment_code := 'F';
			else
				w_judgment_code := ' ';
			end if;
			--?????
			update e12chotai2 set
				class_code = w_gun,
				class = w_gunnam,
				judgment_code = w_judgment_code,
				this_inventory = 0,
				t_quantity1 = 0,
				t_quantity2 = 0,
				t_quantity3 = 0,
				t_quantity4 = 0,
				t_quantity5 = 0,
				t_quantity6 = 0,
				t_quantity7 = 0,
				t_quantity8 = 0,
				t_quantity9 = 0,
				t_quantity10 = 0,
				t_quantity11 = 0,
				t_quantity12 = 0,
				t_quantity13 = 0,
				u_quantity = w_u_quantity,
				this_month = w_kng+200000
			  where section_code=we_rec.section_code
--2013.01.22 del m.kamiyama start
--			    and stock_subject_code = '5'
--2013.01.22 del m.kamiyama end
			    and item_number = we_rec.edpkey;

		else
--DBMS_OUTPUT.PUT_LINE('STEP4-2');
			SELECT A.ITEM_NO,B.CLASS_CODE,SUBSTR(B.ITEM,1,30),
			       D.CLASS_1||CASE WHEN D.CLASS_2 IS NOT NULL THEN '-' ELSE '' END ||D.CLASS_2||CASE WHEN D.CLASS_3 IS NOT NULL THEN '-' END ||D.CLASS_3,
			       SUBSTR(B.ITEM,1,30),B.DESCRIPTION,SUBSTR(C.UNIT,1,3),
			       B.STANDARD_PRICE,SUM(NVL(A.THIS_INVENTORY,0)),SUM(NVL(A.RECEIVE,0) + NVL(A.OTHER_RECEIVE,0)),0,0,TO_NUMBER(SUBSTR(TO_CHAR(A.AC_MONTH,'YYYYMM'),3,4))
			  INTO w_edpkey, w_gun, w_name1, w_gunnam, w_name, w_brand, w_tani,
			       w_tov, w_zansuu, w_nyksuu, w_krtnyksuu, w_frknyksuu, w_kng
			FROM WHI_CL A,ITEM B,UNIT C,CLASS D
			WHERE A.ITEM_NO = we_rec.edpkey
			AND A.SECTION_CODE = we_rec.section
			AND A.AC_MONTH = l_curr_day
			AND B.ITEM_NO = A.ITEM_NO
			AND C.UNIT_CODE = B.UNIT_STOCK
			AND D.CLASS_CODE = B.CLASS_CODE
			GROUP BY A.ITEM_NO,B.CLASS_CODE,SUBSTR(B.ITEM,1,30),
			         B.STANDARD_PRICE,TO_NUMBER(SUBSTR(TO_CHAR(A.AC_MONTH,'YYYYMM'),3,4)),
			         B.DESCRIPTION,C.UNIT,D.CLASS_1,D.CLASS_2,D.CLASS_3;

--DBMS_OUTPUT.PUT_LINE(w_zansuu||' '||w_nyksuu||' '||w_krtnyksuu||' '||w_frknyksuu);

			update e12chotai2 set
			  class_code = w_gun,
			  hbunrk = substr(w_gun,5,2)||w_name1,
			  class = w_gunnam,
			  item_name = w_name,
			  item_description = w_brand,
			  unit_stock = w_tani,
			  standard_price = w_tov,
			  this_inventory = w_zansuu,
			  t_quantity1 = w_nyksuu+w_krtnyksuu+w_frknyksuu
			  where section_code=we_rec.section_code
--2013.01.22 del m.kamiyama start
--			    and stock_subject_code = 5
--2013.01.22 del m.kamiyama end
			    and item_number = we_rec.edpkey;

			select judgment_code, (nvl(l_quantity7,0)+nvl(l_quantity8,0)+nvl(l_quantity9,0)+
			       nvl(l_quantity10,0)+nvl(l_quantity11,0)+nvl(l_quantity12,0)+nvl(l_quantity13,0)-
			       nvl(t_quantity8,0)-nvl(t_quantity9,0)-nvl(t_quantity10,0)-nvl(t_quantity11,0)-
			       nvl(t_quantity12,0)-nvl(t_quantity13,0)), nvl(this_inventory,0),
			       nvl(t_quantity1,0), nvl(t_quantity2,0), nvl(t_quantity3,0), nvl(t_quantity4,0),
			       nvl(t_quantity5,0), nvl(t_quantity6,0), nvl(t_quantity7,0), nvl(t_quantity8,0),
			       nvl(t_quantity9,0), nvl(t_quantity10,0), nvl(t_quantity11,0), nvl(t_quantity12,0),
			       nvl(t_quantity13,0)
			  into w_judgment_code, w_u_quantity, w_this_inventory,
			       w_t_quantity1, w_t_quantity2, w_t_quantity3, w_t_quantity4,
			       w_t_quantity5, w_t_quantity6, w_t_quantity7, w_t_quantity8,
			       w_t_quantity9, w_t_quantity10, w_t_quantity11, w_t_quantity12,
			       w_t_quantity13
			  from e12chotai2
			  where section_code=we_rec.section_code
--2013.01.22 del m.kamiyama start
--			    and stock_subject_code = '5'
--2013.01.22 del m.kamiyama end
			    and item_number = we_rec.edpkey;

--DBMS_OUTPUT.PUT_LINE(w_judgment_code);
--DBMS_OUTPUT.PUT_LINE(w_t_quantity4||' '||w_t_quantity5||' '||w_t_quantity6||' '||w_t_quantity7||' '||w_t_quantity8||' '||w_t_quantity9||' '||w_t_quantity10||' '||w_t_quantity11||' '||w_t_quantity12||' '||w_t_quantity13);

			if w_this_inventory = 0 then
--DBMS_OUTPUT.PUT_LINE('this_inventory is 0 '||we_rec.section_code||' '||we_rec.edpkey);
				if w_judgment_code = 'J' or w_judgment_code = 'T' then
					w_judgment_code := 'F';
				else
					w_judgment_code := ' ';
				end if;

--DBMS_OUTPUT.PUT_LINE(w_judgment_code);
				update e12chotai2 set
					judgment_code = w_judgment_code,
					this_inventory = 0,
					t_quantity1 = 0,
					t_quantity2 = 0,
					t_quantity3 = 0,
					t_quantity4 = 0,
					t_quantity5 = 0,
					t_quantity6 = 0,
					t_quantity7 = 0,
					t_quantity8 = 0,
					t_quantity9 = 0,
					t_quantity10 = 0,
					t_quantity11 = 0,
					t_quantity12 = 0,
					t_quantity13 = 0,
					u_quantity = w_u_quantity
				  where section_code=rtrim(we_rec.section_code)
--2013.01.22 del m.kamiyama start
--				    and stock_subject_code = '5'
--2013.01.22 del m.kamiyama end
				    and item_number = we_rec.edpkey;
				select t_quantity1, t_quantity2, t_quantity3, t_quantity4, t_quantity5,
				t_quantity6, t_quantity7, t_quantity8, t_quantity9, t_quantity10,
				t_quantity11, t_quantity12, t_quantity13
				into w_t_quantity1, w_t_quantity2, w_t_quantity3, w_t_quantity4, w_t_quantity5,
				w_t_quantity6, w_t_quantity7, w_t_quantity8, w_t_quantity9, w_t_quantity10,
				w_t_quantity11, w_t_quantity12, w_t_quantity13
				from e12chotai2
				where section_code=rtrim(we_rec.section_code)
--2013.01.22 del m.kamiyama start
--				and stock_subject_code = '5'
--2013.01.22 del m.kamiyama end
				and item_number = we_rec.edpkey;
--DBMS_OUTPUT.PUT_LINE('--'||w_t_quantity5);

			else
				--????????????????????????
				w_quantity := 0;
				w_quantity := w_quantity + w_t_quantity1;
				l_flg := 0;
				if w_quantity > w_this_inventory then
--DBMS_OUTPUT.PUT_LINE('0:'||w_quantity||'  '||w_t_quantity1||' '||w_this_inventory||' '||w_quantity);
					w_t_quantity1 := w_t_quantity1 + w_this_inventory - w_quantity;
					w_t_quantity2 := 0;
					w_t_quantity3 := 0;
					w_t_quantity4 := 0;
					w_t_quantity5 := 0;
					w_t_quantity6 := 0;
					w_t_quantity7 := 0;
					w_t_quantity8 := 0;
					w_t_quantity9 := 0;
					w_t_quantity10 := 0;
					w_t_quantity11 := 0;
					w_t_quantity12 := 0;
					w_t_quantity13 := 0;
					l_flg := 1;
				end if;
--DBMS_OUTPUT.PUT_LINE('1:'||w_quantity||'  '||w_t_quantity1||' '||w_t_quantity2||' '||w_t_quantity3||' '||w_t_quantity4||' '||w_t_quantity5||' '||w_t_quantity6||' '||w_t_quantity7||' '||w_t_quantity8||' '||w_t_quantity9||' '||w_t_quantity10||' '||w_t_quantity11||' '||w_t_quantity12||' '||w_t_quantity13);
				if l_flg = 0 then
					w_quantity := w_quantity + w_t_quantity2;
					if w_quantity > w_this_inventory then
						if l_flg = 0 then
							w_t_quantity2 := w_t_quantity2 + w_this_inventory - w_quantity;
						else
							w_t_quantity2 := w_quantity + w_t_quantity2;
						end if;
						w_t_quantity3 := 0;
						w_t_quantity4 := 0;
						w_t_quantity5 := 0;
						w_t_quantity6 := 0;
						w_t_quantity7 := 0;
						w_t_quantity8 := 0;
						w_t_quantity9 := 0;
						w_t_quantity10 := 0;
						w_t_quantity11 := 0;
						w_t_quantity12 := 0;
						w_t_quantity13 := 0;
						l_flg := 1;
					end if;
				end if;
--DBMS_OUTPUT.PUT_LINE('2:'||w_quantity||'  '||w_t_quantity2||' '||w_t_quantity3||' '||w_t_quantity4||' '||w_t_quantity5||' '||w_t_quantity6||' '||w_t_quantity7||' '||w_t_quantity8||' '||w_t_quantity9||' '||w_t_quantity10||' '||w_t_quantity11||' '||w_t_quantity12||' '||w_t_quantity13);
				if l_flg = 0 then
					w_quantity := w_quantity + w_t_quantity3;
					if w_quantity > w_this_inventory then
						if l_flg = 0 then
							w_t_quantity3 := w_t_quantity3 + w_this_inventory - w_quantity;
						else
							w_t_quantity3 := w_quantity + w_t_quantity3;
						end if;
						w_t_quantity4 := 0;
						w_t_quantity5 := 0;
						w_t_quantity6 := 0;
						w_t_quantity7 := 0;
						w_t_quantity8 := 0;
						w_t_quantity9 := 0;
						w_t_quantity10 := 0;
						w_t_quantity11 := 0;
						w_t_quantity12 := 0;
						w_t_quantity13 := 0;
						l_flg := 1;
					end if;
				end if;
--DBMS_OUTPUT.PUT_LINE('3:'||w_quantity||'  '||w_t_quantity3||' '||w_t_quantity4||' '||w_t_quantity5||' '||w_t_quantity6||' '||w_t_quantity7||' '||w_t_quantity8||' '||w_t_quantity9||' '||w_t_quantity10||' '||w_t_quantity11||' '||w_t_quantity12||' '||w_t_quantity13);
				if l_flg = 0 then
					w_quantity := w_quantity + w_t_quantity4;
					if w_quantity > w_this_inventory then
						if l_flg = 0 then
							w_t_quantity4 := w_t_quantity4 + w_this_inventory - w_quantity;
						else
							w_t_quantity4 := w_quantity + w_t_quantity4;
						end if;
						w_t_quantity5 := 0;
						w_t_quantity6 := 0;
						w_t_quantity7 := 0;
						w_t_quantity8 := 0;
						w_t_quantity9 := 0;
						w_t_quantity10 := 0;
						w_t_quantity11 := 0;
						w_t_quantity12 := 0;
						w_t_quantity13 := 0;
						l_flg := 1;
					end if;
				end if;
--DBMS_OUTPUT.PUT_LINE('4:'||w_quantity||'  '||w_t_quantity4||' '||w_t_quantity5||' '||w_t_quantity6||' '||w_t_quantity7||' '||w_t_quantity8||' '||w_t_quantity9||' '||w_t_quantity10||' '||w_t_quantity11||' '||w_t_quantity12||' '||w_t_quantity13);
				if l_flg = 0 then
					w_quantity := w_quantity + w_t_quantity5;
					if w_quantity > w_this_inventory then
						if l_flg = 0 then
							w_t_quantity5 := w_t_quantity5 + w_this_inventory - w_quantity;
						else
							w_t_quantity5 := w_quantity + w_t_quantity5;
						end if;
						w_t_quantity6 := 0;
						w_t_quantity7 := 0;
						w_t_quantity8 := 0;
						w_t_quantity9 := 0;
						w_t_quantity10 := 0;
						w_t_quantity11 := 0;
						w_t_quantity12 := 0;
						w_t_quantity13 := 0;
						l_flg := 1;
					end if;
				end if;
--DBMS_OUTPUT.PUT_LINE('5:'||w_quantity||'  '||w_t_quantity5||' '||w_t_quantity6||' '||w_t_quantity7||' '||w_t_quantity8||' '||w_t_quantity9||' '||w_t_quantity10||' '||w_t_quantity11||' '||w_t_quantity12||' '||w_t_quantity13);
				if l_flg = 0 then
					w_quantity := w_quantity + w_t_quantity6;
					if w_quantity > w_this_inventory then
						if l_flg = 0 then
							w_t_quantity6 := w_t_quantity6 + w_this_inventory - w_quantity;
						else
							w_t_quantity6 := w_quantity + w_t_quantity6;
						end if;
						w_t_quantity7 := 0;
						w_t_quantity8 := 0;
						w_t_quantity9 := 0;
						w_t_quantity10 := 0;
						w_t_quantity11 := 0;
						w_t_quantity12 := 0;
						w_t_quantity13 := 0;
						l_flg := 1;
					end if;
				end if;
--DBMS_OUTPUT.PUT_LINE('6:'||w_quantity||'  '||w_t_quantity6||' '||w_t_quantity7||' '||w_t_quantity8||' '||w_t_quantity9||' '||w_t_quantity10||' '||w_t_quantity11||' '||w_t_quantity12||' '||w_t_quantity13);
				if l_flg = 0 then
					w_quantity := w_quantity + w_t_quantity7;
					if w_quantity > w_this_inventory then
						if l_flg = 0 then
							w_t_quantity7 := w_t_quantity7 + w_this_inventory - w_quantity;
						else
							w_t_quantity7 := w_quantity + w_t_quantity7;
						end if;
						w_t_quantity8 := 0;
						w_t_quantity9 := 0;
						w_t_quantity10 := 0;
						w_t_quantity11 := 0;
						w_t_quantity12 := 0;
						w_t_quantity13 := 0;
						l_flg := 1;
					end if;
				end if;
--DBMS_OUTPUT.PUT_LINE('7:'||w_quantity||'  '||w_t_quantity7||' '||w_t_quantity8||' '||w_t_quantity9||' '||w_t_quantity10||' '||w_t_quantity11||' '||w_t_quantity12||' '||w_t_quantity13);
				if l_flg = 0 then
					w_quantity := w_quantity + w_t_quantity8;
					if w_quantity > w_this_inventory then
						if l_flg = 0 then
							w_t_quantity8 := w_t_quantity8 + w_this_inventory - w_quantity;
						else
							w_t_quantity8 := w_quantity + w_t_quantity8;
						end if;
						w_t_quantity9 := 0;
						w_t_quantity10 := 0;
						w_t_quantity11 := 0;
						w_t_quantity12 := 0;
						w_t_quantity13 := 0;
						l_flg := 1;
					end if;
				end if;
--DBMS_OUTPUT.PUT_LINE('8:'||w_quantity||'  '||w_t_quantity8||' '||w_t_quantity9||' '||w_t_quantity10||' '||w_t_quantity11||' '||w_t_quantity12||' '||w_t_quantity13);
				if l_flg = 0 then
					w_quantity := w_quantity + w_t_quantity9;
					if w_quantity > w_this_inventory then
						if l_flg = 0 then
							w_t_quantity9 := w_t_quantity9 + w_this_inventory - w_quantity;
						else
							w_t_quantity9 := w_quantity + w_t_quantity9;
						end if;
						w_t_quantity10 := 0;
						w_t_quantity11 := 0;
						w_t_quantity12 := 0;
						w_t_quantity13 := 0;
						l_flg := 1;
					end if;
				end if;
--DBMS_OUTPUT.PUT_LINE('9:'||w_quantity||'  '||w_t_quantity9||' '||w_t_quantity10||' '||w_t_quantity11||' '||w_t_quantity12||' '||w_t_quantity13);
				if l_flg = 0 then
					w_quantity := w_quantity + w_t_quantity10;
					if w_quantity > w_this_inventory then
						if l_flg = 0 then
							w_t_quantity10 := w_t_quantity10 + w_this_inventory - w_quantity;
						else
							w_t_quantity10 := w_quantity + w_t_quantity10;
						end if;
						w_t_quantity11 := 0;
						w_t_quantity12 := 0;
						w_t_quantity13 := 0;
						l_flg := 1;
					end if;
				end if;
--DBMS_OUTPUT.PUT_LINE('10:'||w_quantity||'  '||w_t_quantity10||' '||w_t_quantity11||' '||w_t_quantity12||' '||w_t_quantity13);
				if l_flg = 0 then
					w_quantity := w_quantity + w_t_quantity11;
					if w_quantity > w_this_inventory then
						if l_flg = 0 then
							w_t_quantity11 := w_t_quantity11 + w_this_inventory - w_quantity;
						else
							w_t_quantity11 := w_quantity + w_t_quantity11;
						end if;
						w_t_quantity12 := 0;
						w_t_quantity13 := 0;
						l_flg := 1;
					end if;
				end if;
--DBMS_OUTPUT.PUT_LINE('11:'||w_quantity||'  '||w_t_quantity11||' '||w_t_quantity12||' '||w_t_quantity13);
				if l_flg = 0 then
					w_quantity := w_quantity + w_t_quantity12;
					if w_quantity > w_this_inventory then
						if l_flg = 0 then
							w_t_quantity12 := w_t_quantity12 + w_this_inventory - w_quantity;
						else
							w_t_quantity12 := w_quantity + w_t_quantity12;
						end if;
						w_t_quantity13 := 0;
						l_flg := 1;
					end if;
				end if;
--DBMS_OUTPUT.PUT_LINE('12:'||w_quantity||'  '||w_t_quantity12||' '||w_t_quantity13);
				if l_flg = 0 then
					w_quantity := w_quantity + w_t_quantity13;
					if w_quantity > w_this_inventory then
						w_t_quantity13 := w_t_quantity13 + w_this_inventory - w_quantity;
					end if;
				end if;
--DBMS_OUTPUT.PUT_LINE('13:'||w_quantity||'  '||w_t_quantity13);

				if w_t_quantity7 > 0 or w_t_quantity8 > 0 or w_t_quantity9 > 0 or
				   w_t_quantity10 > 0 or w_t_quantity11 > 0 or w_t_quantity12 > 0 or
				   w_t_quantity13 > 0 then
					w_judgment_code := 'T';
				elsif w_t_quantity4 > 0 or w_t_quantity5 > 0 or w_t_quantity6 > 0 then
					w_judgment_code := 'J';
				else
					if w_judgment_code = 'J' or w_judgment_code = 'T' then
						w_judgment_code := 'F';
					else
						w_judgment_code := ' ';
					end if;
				end if;
			end if;

			--THIS_INV?TQ1?13????TQ1???
			w_t_quantity1 := w_t_quantity1 +
							 w_this_inventory - (w_t_quantity1 + w_t_quantity2 +
							 w_t_quantity3 + w_t_quantity4 + w_t_quantity5 +
							 w_t_quantity6 + w_t_quantity7 + w_t_quantity8 +
							 w_t_quantity9 + w_t_quantity10 + w_t_quantity11 +
							 w_t_quantity12 + w_t_quantity13);

--DBMS_OUTPUT.PUT_LINE(w_judgment_code);
			update e12chotai2 set
				judgment_code = w_judgment_code,
				this_inventory = w_this_inventory,
				t_quantity1 = w_t_quantity1,
				t_quantity2 = w_t_quantity2,
				t_quantity3 = w_t_quantity3,
				t_quantity4 = w_t_quantity4,
				t_quantity5 = w_t_quantity5,
				t_quantity6 = w_t_quantity6,
				t_quantity7 = w_t_quantity7,
				t_quantity8 = w_t_quantity8,
				t_quantity9 = w_t_quantity9,
				t_quantity10 = w_t_quantity10,
				t_quantity11 = w_t_quantity11,
				t_quantity12 = w_t_quantity12,
				t_quantity13 = w_t_quantity13,
				u_quantity = w_u_quantity,
				this_month = w_kng+200000
			  where section_code=we_rec.section_code
--2013.01.22 del m.kamiyama start
--			    and stock_subject_code = '5'
--2013.01.22 del m.kamiyama end
			    and item_number = we_rec.edpkey;
		end if;

	END LOOP;
	CLOSE we_cursor;

--	commit;
	--rollback;
EXCEPTION
	when others then
		if wb_cursor%isopen then
			close wb_cursor;
		end if;
		if we_cursor%isopen then
			close we_cursor;
		end if;
		if c1%isopen then
			close c1;
		end if;
		if c2%isopen then
			close c2;
		end if;
		rollback;
	DBMS_OUTPUT.PUT_LINE('EXCEPTION! ' || SQLERRM || '(' || w_edpkey || ':' || w_section || ')');
		raise;
end;
END E12A009U2FI_test;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."FDAC_IN_TRANSIT_EXPORT_PRC" 
IS 
BEGIN
	DECLARE
		WK_C_DATA_SOURCE_TYPE CHAR(10) :='PGL-FI' ;  --????????
		WK_C_PROCESS_MONTHS NUMBER(2) :=2 ;  --????????
		WK_SYSDATE DATE := SYSDATE ;
	BEGIN
		
		--????????
		DELETE FROM FDAC_IN_TRANSIT_EXPORT ; 
		
		--?????????????
		INSERT INTO FDAC_IN_TRANSIT_EXPORT 
		(
			DATA_DATE, 
			ARRIVAL_DATE, 
			WAREHOUSE_CODE, 
			COMPANY_CODE, 
			INVOICE_NO,
			ALT_INVOICE_NO, 
			ITEM_NO, 
			SRC_CLASS_CODE, 
			ITEM, 
			ITEM_TYPE, 
			CURR_CODE, 
			TOV,
			STOCK_QTY, 
			STOCK_AMT, 
			OPERATION_DATE,
			DATA_SOURCE_TYPE
		) 
		SELECT 
			H.DO_DATE,
--2013/12/26 Y.HAGAI DEL
--			CASE WHEN H.ETA IS NULL THEN 
--				CASE WHEN UPPER(H.SHIP_NAME) LIKE '%AIR%' OR UPPER(H.SHIP_NAME)  LIKE '%COOLIER%' THEN 
--					H.DO_DATE + NVL(F.TRANSIT_LEADTIME_DAYS_AIR,0) 
--				ELSE 
--					H.DO_DATE + NVL(F.TRANSIT_LEADTIME_DAYS_BOAT ,0)
--				END 
--			ELSE 
--				H.ETA 
--			END,					
			CASE WHEN H.ETA IS NULL THEN 
				CASE WHEN UPPER(H.SHIP_NAME) LIKE '%AIR%' OR UPPER(H.SHIP_NAME)  LIKE '%COOLIER%' THEN 
					H.DO_DATE + NVL(F.TRANSIT_LEADTIME_DAYS_AIR,0) 
				ELSE 
					CASE WHEN UPPER(FINAL_DESTINATION) LIKE '%JAPAN%' OR UPPER(FINAL_DESTINATION) LIKE '%TOKYO%' THEN
						H.DO_DATE + NVL(F.TRANSIT_LEADTIME_DAYS_BOAT ,0)
					ELSE
						H.DO_DATE + 7
					END
				END 
			ELSE 
				CASE WHEN UPPER(FINAL_DESTINATION) LIKE '%JAPAN%' OR UPPER(FINAL_DESTINATION) LIKE '%TOKYO%' THEN
					H.ETA 
				ELSE
					H.DO_DATE + 7
				END
			END,					
--2013/12/26 Y.HAGAI
			(SELECT C.COMPANY_CODE FROM COMPANY C WHERE C.COMPANY_TYPE=0) COMPANY_CODE,
			F.FDAC_CUSTOMER_CODE,
			H.INV_NO,
			NULL,
			L.ITEM_NO,
			I.CLASS_CODE,
			I.DESCRIPTION,
			1,
			CU.CURR_CODE,
			L.U_PRICE,
			L.T_QTY,
			L.T_AMO,
			WK_SYSDATE,
			WK_C_DATA_SOURCE_TYPE
		FROM (SELECT L.DO_NO,L.ITEM_NO,L.ORIGIN_CODE,L.U_PRICE,SUM(L.QTY) T_QTY,SUM(L.AMT_O) T_AMO 
				FROM DO_DETAILS L 
				GROUP BY L.DO_NO,L.ITEM_NO,L.ORIGIN_CODE,L.U_PRICE) L
			INNER JOIN DO_HEADER H ON H.DO_NO = L.DO_NO
			INNER JOIN ITEM I ON  I.ITEM_NO = L.ITEM_NO AND I.ORIGIN_CODE = L.ORIGIN_CODE
			INNER JOIN CURRENCY CU ON CU.CURR_CODE = H.CURR_CODE
			INNER JOIN FDAC_IN_TRANSIT_EXPORT_CUST F ON F.COMPANY_CODE = (SELECT C.COMPANY_CODE FROM COMPANY C WHERE C.COMPANY_TYPE=0) AND F.CUSTOMER_CODE = H.CUSTOMER_CODE
		WHERE TRUNC(H.DO_DATE, 'MM') >= TRUNC(ADD_MONTHS(WK_SYSDATE, - WK_C_PROCESS_MONTHS), 'MM')
		  AND EXISTS (SELECT * FROM ITEM X WHERE X.ITEM_NO = I.ITEM_NO)
		;
		
	END ;
END FDAC_IN_TRANSIT_EXPORT_PRC;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."FDAC_IN_TRANSIT_IMPORT_PRC" 
IS 
BEGIN
	DECLARE
		WK_C_DATA_SOURCE_TYPE CHAR(10) :='PGL-FI' ;  --????????
		CS_PROCESS_MONTHS NUMBER(2) :=2 ;  --????????
		WK_SYSDATE DATE := SYSDATE;
	BEGIN
	
		--????????
		DELETE FROM FDAC_IN_TRANSIT_IMPORT ; 
	
		--?????????????
		INSERT INTO FDAC_IN_TRANSIT_IMPORT
		(
			DATA_DATE, 
			COMPANY_CODE, 
			INVOICE_NO, 
			OPERATION_DATE,
			DATA_SOURCE_TYPE
		)
		SELECT DISTINCT GH.GR_DATE ,
			(SELECT COMPANY_CODE FROM COMPANY WHERE COMPANY_TYPE = 0),
			GH.INV_NO,
			WK_SYSDATE,
			WK_C_DATA_SOURCE_TYPE
		FROM GR_HEADER GH
			INNER JOIN GR_DETAILS GD ON GH.GR_NO = GD.GR_NO
			INNER JOIN ITEM I ON GD.ITEM_NO = I.ITEM_NO AND GD.ORIGIN_CODE = I.ORIGIN_CODE
		WHERE TRUNC(GH.GR_DATE, 'MM') >= TRUNC(ADD_MONTHS(WK_SYSDATE, -CS_PROCESS_MONTHS), 'MM')
		  AND GH.SUPPLIER_CODE IN (SELECT COMPANY_CODE FROM FDKGROUP)
		  AND GH.INV_NO IS NOT NULL ; 
	
	END ;
END FDAC_IN_TRANSIT_IMPORT_PRC;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."FDAC_MONITOR_DEMAND_PRC" 
IS 
BEGIN
	DECLARE
	BEGIN
		
	--????????
	ZSP_MRP_REQUEST_DATE;
	ZSP_MRP_REQUEST_DATE2;
		--????????
		DELETE FROM FDAC_MONITOR_DEMAND_TRN ; 
		
		--???????????????
		INSERT INTO FDAC_MONITOR_DEMAND_TRN 
		(
			DATA_TYPE,
			INFO_TYPE,
			COMPANY_CODE,
			PLAN_MONTH,
			ACC_MONTH,
			ITEM_NO,
			DEMAND_QTY,
			REG_DATE,
			DATA_SOURCE_TYPE,
			ITEM,
			SRC_CLASS_CODE
		) 
		SELECT  900,
			3,
			c.SECTION_CODE,
			a.PLAN_MONTH,
			a.ACC_MONTH,
			a.ITEM_NO,
			a.SLIP_QUANTITY,
			sysdate,
			c.DATA_SOURCE_TYPE,
			substrb(i.DESCRIPTION,1,30),
			i.CLASS_CODE
		FROM (
			SELECT PLAN_MONTH,ACC_MONTH,ITEM_NO,SUM(QTY) SLIP_QUANTITY  FROM (
			select 
			 TO_CHAR(trunc(sysdate,'mm'),'YYYYMM') PLAN_MONTH ,
			 TO_CHAR(trunc(aa.tgl,'mm'),'YYYYMM') ACC_MONTH,
			  aa.item_no,
			       case when cc.tgl is not null then abs(ROUNDUP(aa.quantity)) else abs(ROUNDUP(bb.quantity_plan)) end Qty 
			from (select * from ztb_mrp_item_need where tipe = 1)aa
			inner join (select * from ztb_mrp_item_need where tipe = 2)bb
			on aa.tgl = bb.tgl and aa.item_no = bb.item_no
			left outer join (select min(tgl) tgl,item_no from ztb_mrp_item_need where tipe = 1 group by item_no)cc
			on aa.tgl = cc.tgl and aa.item_no = cc.item_no
			)
			WHERE QTY <> 0
			GROUP BY  PLAN_MONTH,ACC_MONTH,ITEM_NO
/*
			select to_char(t.DEMAND_DATE, 'YYYYMM') PLAN_MONTH, to_char(t.OPERATION_DATE, 'YYYYMM') ACC_MONTH, t.ITEM_NO item_NO ,SUM(t.DEMAND_QTY)   SLIP_QUANTITY
			  from T_MRP_DEMAND t
			 where TRUNC(t.DEMAND_DATE, 'MM') >= TRUNC(ADD_MONTHS(sysdate, 0), 'MM')
			   AND demand_type  <> 'O'
			   AND DEMAND_DATE IS NOT NULL
			  GROUP BY to_char(t.DEMAND_DATE, 'YYYYMM'),to_char(t.OPERATION_DATE, 'YYYYMM') ,t.ITEM_NO
			  order by acc_month,item_no
*/
) a,item i,FDAC_INIT c
		where a.ITEM_NO = i.ITEM_NO(+)
			;

		--?????????????
		INSERT INTO FDAC_MONITOR_DEMAND_TRN 
		(
			DATA_TYPE,
			INFO_TYPE,
			COMPANY_CODE,
			PLAN_MONTH,
			ACC_MONTH,
			ITEM_NO,
			DEMAND_QTY,
			REG_DATE,
			DATA_SOURCE_TYPE,
			ITEM,
			SRC_CLASS_CODE
		) 
		SELECT  110,
			3,
			c.SECTION_CODE,
			to_char(sysdate, 'YYYYMM') ,
			a.ACC_MONTH,
			a.ITEM_NO,
			a.SLIP_QUANTITY,
			sysdate,
			c.DATA_SOURCE_TYPE,
			substrb(i.DESCRIPTION,1,30),
			i.CLASS_CODE
		FROM (
			select to_char(t.DATA_DATE, 'YYYYMM') ACC_MONTH, t.ITEM_NO item_NO ,SUM(t.QTY)   SLIP_QUANTITY
			  from SALES_PLAN t
			 where TRUNC(t.DATA_DATE, 'MM') >= TRUNC(ADD_MONTHS(sysdate, 0), 'MM') 
			  GROUP BY to_char(t.DATA_DATE, 'YYYYMM'), t.ITEM_NO
			order by ACC_MONTH,item_no) a,item i,FDAC_INIT c
		WHERE a.SLIP_QUANTITY <> 0
		   and a.ITEM_NO = i.ITEM_NO(+)
			;
			
	END ;
END FDAC_MONITOR_DEMAND_PRC;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."FDAC_MONITOR_RECEIVE_PRC" 
IS 
BEGIN
	DECLARE
	BEGIN
		
		--????????
		DELETE FROM FDAC_MONITOR_RECEIVE_TRN ; 
		
		--?????????????
		INSERT INTO FDAC_MONITOR_RECEIVE_TRN 
		(
			DATA_TYPE,
			INFO_TYPE,
			COMPANY_CODE,
			RECEIVE_TYPE,
			ACC_MONTH,
			ITEM_NO,
			RECEIVE_QTY,
			REG_DATE,
			DATA_SOURCE_TYPE,
			ITEM,
			SRC_CLASS_CODE
		) 
		SELECT  610,
			0,
			c.SECTION_CODE,
--			decode(i.STOCK_SUBJECT_CODE ,0,'5',1,'5',2,'5',4,'0',5,'0','5'),
			decode(i.STOCK_SUBJECT_CODE ,0,'BUY',1,'BUY',2,'BUY',4,'KUR',5,'KUR','BUY'),
			a.ACC_MONTH,
			a.ITEM_NO,
			a.SLIP_QUANTITY,
			sysdate,
			c.DATA_SOURCE_TYPE,
			substrb(i.DESCRIPTION,1,30),
			i.CLASS_CODE
		FROM (
			select to_char(t.SLIP_DATE, 'YYYYMM') ACC_MONTH, t.ITEM_NO item_NO ,SUM(t.SLIP_QUANTITY)   SLIP_QUANTITY
			  from transaction t,SLIPTYPE s
			 where t.SLIP_TYPE = s.SLIP_TYPE(+)
			   and  TRUNC(t.SLIP_DATE, 'MM') >= TRUNC(ADD_MONTHS(sysdate, - 1), 'MM')
			   and s.IN_OUT_FLAG = 'I'
			  GROUP BY to_char(t.SLIP_DATE, 'YYYYMM'),t.ITEM_NO) a,item i,FDAC_INIT c
		where a.ITEM_NO = i.ITEM_NO(+)
		order by acc_month,item_no
			;
			
	END ;
END FDAC_MONITOR_RECEIVE_PRC;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."FDAC_MONITOR_RECEIVE_PRC_KARI" 
IS 
BEGIN
	DECLARE
	BEGIN
		
		--????????
		DELETE FROM FDAC_MONITOR_RECEIVE_TRN ; 
		
		--?????????????
		INSERT INTO FDAC_MONITOR_RECEIVE_TRN 
		(
			DATA_TYPE,
			INFO_TYPE,
			COMPANY_CODE,
			RECEIVE_TYPE,
			ACC_MONTH,
			ITEM_NO,
			RECEIVE_QTY,
			REG_DATE,
			DATA_SOURCE_TYPE,
			ITEM,
			SRC_CLASS_CODE
		) 
		SELECT  610,
			0,
			c.SECTION_CODE,
--			decode(i.STOCK_SUBJECT_CODE ,0,'5',1,'5',2,'5',4,'0',5,'0','5'),
			decode(i.STOCK_SUBJECT_CODE ,0,'BUY',1,'BUY',2,'BUY',4,'KUR',5,'KUR','BUY'),
			a.ACC_MONTH,
			a.ITEM_NO,
			a.SLIP_QUANTITY,
			sysdate,
			c.DATA_SOURCE_TYPE,
			substrb(i.DESCRIPTION,1,30),
			i.CLASS_CODE
		FROM (
			select to_char(t.SLIP_DATE, 'YYYYMM') ACC_MONTH, t.ITEM_NO item_NO ,SUM(t.SLIP_QUANTITY)   SLIP_QUANTITY
			  from transaction t,SLIPTYPE s
			 where t.SLIP_TYPE = s.SLIP_TYPE(+)
			   and  to_char(t.SLIP_DATE, 'YYYYMM') >= '201804'
			   and  to_char(t.SLIP_DATE, 'YYYYMM') <= '201901'
			   and s.IN_OUT_FLAG = 'I'
			  GROUP BY to_char(t.SLIP_DATE, 'YYYYMM'),t.ITEM_NO) a,item i,FDAC_INIT c
		where a.ITEM_NO = i.ITEM_NO(+)
		order by acc_month,item_no
			;
			
	END ;
END FDAC_MONITOR_RECEIVE_PRC_KARI;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."FDAC_ORDER_REMAIN_TRN_PRC" 
as
begin
   begin
        --2014/01/29 Y.Hagai ??
           MAKE_SO_DELIVERY_BAL;

        --FDAC??????????????
           insert into fdac_order_remain_trn(
           data_date                    ,
           company_code                 ,
           customer_code                ,
           item_no                      ,
           ordered_qty                  ,
           ordered_remain               ,
           ordered_qty_this             ,
           ordered_remain_this          ,
           ordered_qty_delay            ,
           ordered_remain_delay         ,
           ordered_qty_next             ,
           ordered_remain_next          ,
           ordered_qty_next2            ,
           ordered_remain_next2         ,
           ordered_qty_next3            ,
           ordered_remain_next3         ,
           sp                           ,
           sp_curr_code                 ,
           order_qty_day                ,
           order_amount_day             ,
           order_qty                    ,
           order_amount                 ,
           data_source_type             ,
           item_type                    ,
           operation_date               ,
           operation_type               ,
           item                         ,
           src_class_code               ,
           section_code                 ,
           person_code                  ,
           customer_item_no             ,
           customer                     ,
           sell_country_code            ,
           sell_prefecture_code         ,
           cost_curr_code               ,
           cost
           )
           select 
              trunc(sysdate) data_date,
               c0.company_code company_code,
              soh.customer_code  customer_code,
              sod.item_no,
              sum(sod.bal_qty)  ordered_qty,
              sum(round(sod.bal_qty * u_price,2)) ordered_remain, 
              sum(decode(sign(trunc(sod.etd,'mm') - trunc(sysdate,'mm')),0,sod.bal_qty,0)) ordered_qty_this,
              sum(decode(sign(trunc(sod.etd,'mm') - trunc(sysdate,'mm')),0,round(sod.bal_qty * u_price,2),0)) ordered_remain_this,
              sum(decode(sign(trunc(sod.etd,'mm') - trunc(sysdate,'mm')),-1,sod.bal_qty,0)) ordered_qty_delay,
              sum(decode(sign(trunc(sod.etd,'mm') - trunc(sysdate,'mm')),-1,round(sod.bal_qty * u_price,2),0)) ordered_remain_delay,
              sum(decode(sign(trunc(sod.etd,'mm') - trunc(add_months(sysdate,1),'mm')),0,sod.bal_qty,0)) ordered_qty_next,
              sum(decode(sign(trunc(sod.etd,'mm') - trunc(add_months(sysdate,1),'mm')),0,round(sod.bal_qty * u_price,2),0)) ordered_remain_next1,
              sum(decode(sign(trunc(sod.etd,'mm') - trunc(add_months(sysdate,2),'mm')),0,sod.bal_qty,0)) ordered_qty_next2,
              sum(decode(sign(trunc(sod.etd,'mm') - trunc(add_months(sysdate,2),'mm')),0,round(sod.bal_qty * u_price,2),0)) ordered_remain_next2,
              sum(decode(sign(trunc(sod.etd,'mm') - trunc(add_months(sysdate,2),'mm')),1,sod.bal_qty,0)) ordered_qty_next3,
              sum(decode(sign(trunc(sod.etd,'mm') - trunc(add_months(sysdate,2),'mm')),1,round(sod.bal_qty * u_price,2),0)) ordered_remain_next3,
              sod.u_price sp,
              soh.curr_code sp_curr_code,
              0 order_qty_day,
              0 order_amount_day,
              0 order_qty,
              0 order_amount,
              fi.data_source_type,
              1 item_type,
              sysdate operation_date,
              0 operation_type,
              i.description ,
              i.class_code,
              fi.section_code,
              null person_code,
              null customer_item_no,
              c.company,
              decode(c.country_code,192,100,c.country_code),
              null,
-- ###### ?????????????????????? ###############
--            c0.curr_code,
              i.curr_code,
              i.standard_price
-- 2013/11/06 Y.Hagai ?? SO_DElIVERY ?????
--           from so_details 
           from (select 
                       sodx.so_no so_no ,
                       sodx.item_no item_no ,
                       sodx.origin_code origin_code ,
                       nvl(sodl.DEL_DATE,sodx.ETD) ETD, 
                       sodx.u_price u_price,
                       nvl(sodl.BAL_QTY,sodx.BAL_QTY) bal_qty
                  from so_details sodx,so_delivery sodl
                  where sodx.SO_NO = sodl.SO_NO(+)
                    and sodx.LINE_NO = sodl.SO_LINE_NO(+)
                    and sodx.BAL_QTY > 0
                ) sod,
-- 2013/11/06 Y.Hagai ??
                so_header  soh,
                item         i,
                company      c,
                (select * from company where company_type=0) c0,
                fdac_init   fi
           where sod.so_no = soh.so_no
             and sod.item_no = i.item_no
             and sod.origin_code = i.origin_code
             and sod.bal_qty > 0
             and soh.customer_code = c.company_code
           group by 
               c0.company_code,
              soh.customer_code,
              sod.item_no,
              sod.u_price,
              soh.curr_code,
              fi.data_source_type,
               i.description,
               i.class_code,
              fi.section_code,
               c.company,
               c.country_code,
               i.standard_price,
-- ###### ?????????????????????? ###############
--            c0.curr_code; 
               i.curr_code;

   end ;
end fdac_order_remain_trn_prc;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."FDAC_PGL_LAST_STOCK" 
AS
/******************************************************
      ???????????????
  ????????????????
              ???????????????
            ????FDK K.Matsu
            ????2002/08/29
******************************************************/
  ERR_CODE CHAR(7);
  ERR_MSG VARCHAR2(255);
BEGIN
  DECLARE
	-- ???????
	CURSOR C1 IS
	SELECT * FROM WHINVENTORY WHERE LAST_INVENTORY != 0;
	-- ??????
	CURSOR C2 IS
	SELECT COMPANY_CODE,COMPANY,CURR_CODE,COUNTRY_CODE FROM COMPANY WHERE COMPANY_TYPE = 0;
	-- ?????
	CURSOR C3( P1 in NUMBER ) IS
	SELECT ITEM,STANDARD_PRICE,STOCK_SUBJECT_CODE,CLASS_CODE FROM ITEM WHERE ITEM_NO = P1;
	-- ??????????
	CURSOR C4 IS
	SELECT * FROM FDAC_INIT;
	ROW_STK C1%rowtype;
	ROW_COM C2%rowtype;
	ROW_ITM C3%rowtype;
	ROW_INI C4%rowtype;
	-- ?????
	WK_COMPANY_CODE			FDAC_STOCK_REMAIN_TRN.COMPANY_CODE%type;
	WK_COUNTRY_CODE			FDAC_STOCK_REMAIN_TRN.WH_COUNTRY_CODE%type;
	WK_COMPANY				FDAC_STOCK_REMAIN_TRN.CUSTOMER%type;
	WK_CURR_CODE			FDAC_STOCK_REMAIN_TRN.CURR_CODE%type;
	-- ????
	WK_ITEM					FDAC_STOCK_REMAIN_TRN.ITEM%type;
	WK_ITEM_TYPE			FDAC_STOCK_REMAIN_TRN.ITEM_TYPE%type;
	WK_STANDARD_PRICE		FDAC_STOCK_REMAIN_TRN.TOV%type;
	WK_CLASS_CODE			CLASS.CLASS_CODE%type;
	-- ???
	WK_SYSDATE				DATE   := sysdate;
  BEGIN

	-- ?????????? -----------------------------------------------------
	open C4;
    ROW_INI := null;
	fetch C4 into ROW_INI;
    close C4;
	-- ??????? -----------------------------------------------------------
	open C2;
	fetch C2 into ROW_COM;
	if C2%notfound or C2%notfound is null then
		WK_COMPANY_CODE		:= null;
		WK_COMPANY			:= null;
		WK_CURR_CODE		:= null;
		WK_COUNTRY_CODE		:= null;
	else
		WK_COMPANY_CODE		:= ROW_COM.COMPANY_CODE;
		WK_COMPANY			:= ROW_COM.COMPANY;
		WK_CURR_CODE		:= ROW_COM.CURR_CODE;
		WK_COUNTRY_CODE		:= ROW_COM.COUNTRY_CODE;
	end if;
	close C2;
	-- ??????? -----------------------------------------------------------
	open C1;
	loop
	fetch C1 into ROW_STK;
	exit when C1%notfound or C1%notfound is null;
		-- ?????? -------------------------------------------------------------
		open C3( ROW_STK.ITEM_NO );
		fetch C3 into ROW_ITM;
		if C3%notfound or C3%notfound is null then
			WK_ITEM			:= null;
			WK_STANDARD_PRICE	:= null;
			WK_CLASS_CODE		:= null;
		else
			WK_ITEM			:= ROW_ITM.ITEM;
			WK_STANDARD_PRICE	:= ROW_ITM.STANDARD_PRICE;
			WK_CLASS_CODE		:= ROW_ITM.CLASS_CODE;
		end if;
		-- ?????? -----
		WK_ITEM_TYPE := null;
		if ROW_ITM.STOCK_SUBJECT_CODE in (0) then
			WK_ITEM_TYPE := 6;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (1,2,7) then
			WK_ITEM_TYPE := 3;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (3) then
			WK_ITEM_TYPE := 5;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (4) then
			WK_ITEM_TYPE := 4;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (5) then
			WK_ITEM_TYPE := 0;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (6) then
			WK_ITEM_TYPE := 1;
		else
			WK_ITEM_TYPE := 6;
		end if;
		close C3;
	INSERT INTO FDAC_STOCK_REMAIN_TRN (
		DATA_DATE,				-- ????
		COMPANY_CODE,			-- ?????
		CUSTOMER_CODE,			-- ??????
		ITEM_NO,				-- ????
		WAREHOUSE_CODE,			-- ?????
		ITEM_TYPE,				-- ??????
		CURR_CODE,				-- ?????
		TOV,					-- ????
		STOCK_QTY,				-- ???
		STOCK_AMT,				-- ???
		STOCK_QTY_LAST,			-- ?????
		STOCK_AMT_LAST,			-- ?????
		STOCK_QTY_IN,			-- ?????
		STOCK_AMT_IN,			-- ?????
		STOCK_QTY_OUT,			-- ?????
		STOCK_AMT_OUT,			-- ?????
		STOCK_QTY_IN_DAY,		-- ?????
		STOCK_AMT_IN_DAY,		-- ?????
		STOCK_QTY_OUT_DAY,		-- ?????
		STOCK_AMT_OUT_DAY,		-- ?????
		DATA_SOURCE_TYPE,		-- ???????
		OPERATION_DATE,			-- ????
		OPERATION_TYPE,			-- ????
		ITEM,					-- ??
		SRC_CLASS_CODE,			-- ???????
		SECTION_CODE,			-- ?????
		PERSON_CODE,			-- ??????
		CUSTOMER_ITEM_NO,		-- ????????
		CUSTOMER,				-- ????
		SELL_COUNTRY_CODE,		-- ???????
		SELL_PREFECTURE_CODE,	-- ??????????
		WAREHOUSE,				-- ???
		WH_COUNTRY_CODE,		-- ??????
		WH_PREFECTURE_CODE,		-- ?????????
		WAREHOUSE_TYPE			-- ????
	) VALUES (                          		
		last_day(to_date(ROW_STK.LAST_MONTH||'01','YYYYMMDD')),				-- ????
		WK_COMPANY_CODE,													-- ?????
		NULL,																-- ??????
		ROW_STK.ITEM_NO,													-- ????
		WK_COMPANY_CODE,													-- ?????
		WK_ITEM_TYPE,														-- ??????
		WK_CURR_CODE,														-- ?????
		WK_STANDARD_PRICE,													-- ????
		ROW_STK.LAST_INVENTORY,												-- ???
		ROW_STK.LAST_INVENTORY * WK_STANDARD_PRICE,							-- ???
		ROW_STK.LAST2_INVENTORY,											-- ?????
		ROW_STK.LAST2_INVENTORY * WK_STANDARD_PRICE,						-- ?????
		ROW_STK.RECEIVE2 + ROW_STK.OTHER_RECEIVE2,							-- ?????
		(ROW_STK.RECEIVE2 + ROW_STK.OTHER_RECEIVE2) * WK_STANDARD_PRICE,	-- ?????
		ROW_STK.ISSUE2 + ROW_STK.OTHER_ISSUE2,								-- ?????
		(ROW_STK.ISSUE2 + ROW_STK.OTHER_ISSUE2) * WK_STANDARD_PRICE,		-- ?????
		0,																	-- ?????
		0,																	-- ?????
		0,																	-- ?????
		0,																	-- ?????
		ROW_INI.DATA_SOURCE_TYPE,											-- ???????
		WK_SYSDATE,															-- ????
		0,																	-- ????
		substrb(WK_ITEM, 1, 30),											-- ??
		WK_CLASS_CODE,														-- ???????
		ROW_INI.SECTION_CODE,												-- ?????
		ROW_INI.PERSON_CODE,												-- ??????
		NULL,																-- ????????
		NULL,																-- ????
		NULL,																-- ???????
		NULL,																-- ??????????
		WK_COMPANY,															-- ???
		WK_COUNTRY_CODE,													-- ??????
		NULL,																-- ?????????
		4																	-- ????
	);
	end loop;
	close C1;
	COMMIT;
	END;
END FDAC_PGL_LAST_STOCK;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."FDAC_PGL_LAST2_STOCK" 
AS
/******************************************************
      ???????????????
  ????????????????
              ???????????????
            ????FDK K.Matsu
            ????2002/08/29
******************************************************/
  ERR_CODE CHAR(7);
  ERR_MSG VARCHAR2(255);
BEGIN
  DECLARE
	-- ???????
	CURSOR C1 IS
	SELECT * FROM WHINVENTORY WHERE LAST2_INVENTORY != 0;
	-- ??????
	CURSOR C2 IS
	SELECT COMPANY_CODE,COMPANY,CURR_CODE,COUNTRY_CODE FROM COMPANY WHERE COMPANY_TYPE = 0;
	-- ?????
	CURSOR C3( P1 in NUMBER ) IS
	SELECT ITEM,STANDARD_PRICE,STOCK_SUBJECT_CODE,CLASS_CODE FROM ITEM WHERE ITEM_NO = P1;
	-- ??????????
	CURSOR C4 IS
	SELECT * FROM FDAC_INIT;
	ROW_STK C1%rowtype;
	ROW_COM C2%rowtype;
	ROW_ITM C3%rowtype;
	ROW_INI C4%rowtype;
	-- ?????
	WK_COMPANY_CODE			FDAC_STOCK_REMAIN_TRN.COMPANY_CODE%type;
	WK_COUNTRY_CODE			FDAC_STOCK_REMAIN_TRN.WH_COUNTRY_CODE%type;
	WK_COMPANY				FDAC_STOCK_REMAIN_TRN.CUSTOMER%type;
	WK_CURR_CODE			FDAC_STOCK_REMAIN_TRN.CURR_CODE%type;
	-- ????
	WK_ITEM					FDAC_STOCK_REMAIN_TRN.ITEM%type;
	WK_ITEM_TYPE			FDAC_STOCK_REMAIN_TRN.ITEM_TYPE%type;
	WK_STANDARD_PRICE		FDAC_STOCK_REMAIN_TRN.TOV%type;
	WK_CLASS_CODE			CLASS.CLASS_CODE%type;
	-- ???
	WK_SYSDATE				DATE   := sysdate;
  BEGIN

	-- ?????????? -----------------------------------------------------
	open C4;
    ROW_INI := null;
	fetch C4 into ROW_INI;
    close C4;
	-- ??????? -----------------------------------------------------------
	open C2;
	fetch C2 into ROW_COM;
	if C2%notfound or C2%notfound is null then
		WK_COMPANY_CODE		:= null;
		WK_COMPANY			:= null;
		WK_CURR_CODE		:= null;
		WK_COUNTRY_CODE		:= null;
	else
		WK_COMPANY_CODE		:= ROW_COM.COMPANY_CODE;
		WK_COMPANY			:= ROW_COM.COMPANY;
		WK_CURR_CODE		:= ROW_COM.CURR_CODE;
		WK_COUNTRY_CODE		:= ROW_COM.COUNTRY_CODE;
	end if;
	close C2;
	-- ??????? -----------------------------------------------------------
	open C1;
	loop
	fetch C1 into ROW_STK;
	exit when C1%notfound or C1%notfound is null;
		-- ?????? -------------------------------------------------------------
		open C3( ROW_STK.ITEM_NO );
		fetch C3 into ROW_ITM;
		if C3%notfound or C3%notfound is null then
			WK_ITEM			:= null;
			WK_STANDARD_PRICE	:= null;
			WK_CLASS_CODE		:= null;
		else
			WK_ITEM			:= ROW_ITM.ITEM;
			WK_STANDARD_PRICE	:= ROW_ITM.STANDARD_PRICE;
			WK_CLASS_CODE		:= ROW_ITM.CLASS_CODE;
		end if;
		-- ?????? -----
		WK_ITEM_TYPE := null;
		if ROW_ITM.STOCK_SUBJECT_CODE in (0) then
			WK_ITEM_TYPE := 6;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (1,2,7) then
			WK_ITEM_TYPE := 3;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (3) then
			WK_ITEM_TYPE := 5;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (4) then
			WK_ITEM_TYPE := 4;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (5) then
			WK_ITEM_TYPE := 0;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (6) then
			WK_ITEM_TYPE := 1;
		else
			WK_ITEM_TYPE := 6;
		end if;
		close C3;
	INSERT INTO FDAC_STOCK_REMAIN_TRN (
		DATA_DATE,				-- ????
		COMPANY_CODE,			-- ?????
		CUSTOMER_CODE,			-- ??????
		ITEM_NO,				-- ????
		WAREHOUSE_CODE,			-- ?????
		ITEM_TYPE,				-- ??????
		CURR_CODE,				-- ?????
		TOV,					-- ????
		STOCK_QTY,				-- ???
		STOCK_AMT,				-- ???
		STOCK_QTY_LAST,			-- ?????
		STOCK_AMT_LAST,			-- ?????
		STOCK_QTY_IN,			-- ?????
		STOCK_AMT_IN,			-- ?????
		STOCK_QTY_OUT,			-- ?????
		STOCK_AMT_OUT,			-- ?????
		STOCK_QTY_IN_DAY,		-- ?????
		STOCK_AMT_IN_DAY,		-- ?????
		STOCK_QTY_OUT_DAY,		-- ?????
		STOCK_AMT_OUT_DAY,		-- ?????
		DATA_SOURCE_TYPE,		-- ???????
		OPERATION_DATE,			-- ????
		OPERATION_TYPE,			-- ????
		ITEM,					-- ??
		SRC_CLASS_CODE,			-- ???????
		SECTION_CODE,			-- ?????
		PERSON_CODE,			-- ??????
		CUSTOMER_ITEM_NO,		-- ????????
		CUSTOMER,				-- ????
		SELL_COUNTRY_CODE,		-- ???????
		SELL_PREFECTURE_CODE,	-- ??????????
		WAREHOUSE,				-- ???
		WH_COUNTRY_CODE,		-- ??????
		WH_PREFECTURE_CODE,		-- ?????????
		WAREHOUSE_TYPE			-- ????
	) VALUES (                          		
		last_day(add_months(to_date(ROW_STK.LAST_MONTH||'01','YYYYMMDD'),-1)),	-- ????
		WK_COMPANY_CODE,										-- ?????
		NULL,													-- ??????
		ROW_STK.ITEM_NO,										-- ????
		WK_COMPANY_CODE,										-- ?????
		WK_ITEM_TYPE,											-- ??????
		WK_CURR_CODE,											-- ?????
		WK_STANDARD_PRICE,										-- ????
		ROW_STK.LAST2_INVENTORY,								-- ???
		ROW_STK.LAST2_INVENTORY * WK_STANDARD_PRICE,			-- ???
		0,														-- ?????
		0,														-- ?????
		0,														-- ?????
		0,														-- ?????
		0,														-- ?????
		0,														-- ?????
		0,														-- ?????
		0,														-- ?????
		0,														-- ?????
		0,														-- ?????
		ROW_INI.DATA_SOURCE_TYPE,								-- ???????
		WK_SYSDATE,												-- ????
		0,														-- ????
		substrb(WK_ITEM, 1, 30),								-- ??
		WK_CLASS_CODE,											-- ???????
		ROW_INI.SECTION_CODE,									-- ?????
		ROW_INI.PERSON_CODE,									-- ??????
		NULL,													-- ????????
		NULL,													-- ????
		NULL,													-- ???????
		NULL,													-- ??????????
		WK_COMPANY,												-- ???
		WK_COUNTRY_CODE,										-- ??????
		NULL,													-- ?????????
		4														-- ????
	);
	end loop;
	close C1;
	COMMIT;
	END;
END FDAC_PGL_LAST2_STOCK;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."FDAC_PGL_STOCK" 
AS
/******************************************************
      ???????????????
  ????????????????
              ???????????????
            ????FDK K.Matsu
            ????2002/08/29
******************************************************/
  ERR_CODE CHAR(7);
  ERR_MSG VARCHAR2(255);
BEGIN
  DECLARE
	-- ???????
	CURSOR C1 IS
--2012/04/19??????????
--	SELECT * FROM WHINVENTORY WHERE THIS_INVENTORY != 0;
	SELECT * FROM WHINVENTORY;
	-- ??????
	CURSOR C2 IS
	SELECT COMPANY_CODE,COMPANY,CURR_CODE,COUNTRY_CODE FROM COMPANY WHERE COMPANY_TYPE = 0;
	-- ?????
	CURSOR C3( P1 in NUMBER ) IS
	SELECT ITEM,DESCRIPTION,STANDARD_PRICE,STOCK_SUBJECT_CODE,CLASS_CODE FROM ITEM WHERE ITEM_NO = P1;
	-- ??????????
	CURSOR C4 IS
	SELECT * FROM FDAC_INIT;
	-- ???????????
	CURSOR C5(P1 IN DATE,P2 IN NUMBER,P3 IN NUMBER,P4 IN NUMBER,P5 IN NUMBER,P6 IN NUMBER,P7 IN VARCHAR2) IS
	SELECT STOCK_QTY,STOCK_AMT,STOCK_QTY_LAST,STOCK_AMT_LAST,STOCK_QTY_IN,STOCK_AMT_IN,STOCK_QTY_OUT,STOCK_AMT_OUT
	FROM FDAC_STOCK_REMAIN_TRN WHERE DATA_DATE = P1 AND ITEM_NO = P2 AND WAREHOUSE_CODE = P3 AND ITEM_TYPE = P4 
	AND CURR_CODE = P5 AND SECTION_CODE = P6 AND PERSON_CODE = P7 FOR UPDATE;

	CURSOR C6 IS
	select item_no,this_inventory, last_inventory from WHINVENTORY_INTRANSIT ;


	ROW_STK C1%rowtype;
	ROW_COM C2%rowtype;
	ROW_ITM C3%rowtype;
	ROW_INI C4%rowtype;
	ROW_CHK C5%rowtype;
	ROW_INTRANSIT C6%rowtype;

	-- ?????
	WK_COMPANY_CODE			FDAC_STOCK_REMAIN_TRN.COMPANY_CODE%type;
	WK_COUNTRY_CODE			FDAC_STOCK_REMAIN_TRN.WH_COUNTRY_CODE%type;
	WK_COMPANY				FDAC_STOCK_REMAIN_TRN.CUSTOMER%type;
	WK_CURR_CODE			FDAC_STOCK_REMAIN_TRN.CURR_CODE%type;
	-- ????
	WK_ITEM					FDAC_STOCK_REMAIN_TRN.ITEM%type;
	WK_ITEM_TYPE			FDAC_STOCK_REMAIN_TRN.ITEM_TYPE%type;
	WK_STANDARD_PRICE		FDAC_STOCK_REMAIN_TRN.TOV%type;
	WK_CLASS_CODE			CLASS.CLASS_CODE%type;
	-- ???
	WK_SYSDATE				DATE   := sysdate;
	--????
	WK_INTRANSIT_THIS_QTY 		WHINVENTORY.THIS_INVENTORY%type;
	WK_INTRANSIT_LAST_QTY 		WHINVENTORY.THIS_INVENTORY%type;


  BEGIN
	make_wh_intransit_cl;
	-- ?????????? -----------------------------------------------------
	open C4;
    ROW_INI := null;
	fetch C4 into ROW_INI;
    close C4;
	-- ??????? -----------------------------------------------------------
	open C2;
	fetch C2 into ROW_COM;
	if C2%notfound or C2%notfound is null then
		WK_COMPANY_CODE		:= null;
		WK_COMPANY			:= null;
		WK_CURR_CODE		:= null;
		WK_COUNTRY_CODE		:= null;
	else
		WK_COMPANY_CODE		:= ROW_COM.COMPANY_CODE;
		WK_COMPANY			:= ROW_COM.COMPANY;
		WK_CURR_CODE		:= ROW_COM.CURR_CODE;
		WK_COUNTRY_CODE		:= ROW_COM.COUNTRY_CODE;
	end if;
	close C2;

	-- ??????? -----------------------------------------------------------
	open C1;
	loop
	fetch C1 into ROW_STK;
	exit when C1%notfound or C1%notfound is null;
		-- ?????? -------------------------------------------------------------
		open C3( ROW_STK.ITEM_NO );
		fetch C3 into ROW_ITM;
		if C3%notfound or C3%notfound is null then
			WK_ITEM			:= null;
			WK_STANDARD_PRICE	:= null;
			WK_CLASS_CODE		:= null;
		else
			WK_ITEM			:= ROW_ITM.DESCRIPTION;
			WK_STANDARD_PRICE	:= ROW_ITM.STANDARD_PRICE;
			WK_CLASS_CODE		:= ROW_ITM.CLASS_CODE;
		end if;
		-- ?????? -----
		WK_ITEM_TYPE := null;
		if ROW_ITM.STOCK_SUBJECT_CODE in (0) then
			WK_ITEM_TYPE := 6;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (1,2,7) then
			WK_ITEM_TYPE := 3;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (3) then
			WK_ITEM_TYPE := 8;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (4) then
			WK_ITEM_TYPE := 7;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (5) then
			WK_ITEM_TYPE := 0;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (6) then
			WK_ITEM_TYPE := 1;
		else
			WK_ITEM_TYPE := 6;
		end if;
		close C3;

		-- ???????? -------------------------------------------------------------
		open C5(trunc(WK_SYSDATE),ROW_STK.ITEM_NO,WK_COMPANY_CODE,WK_ITEM_TYPE,WK_CURR_CODE,ROW_INI.SECTION_CODE,ROW_INI.PERSON_CODE);
		fetch C5 into ROW_CHK;
		if C5%notfound or C5%notfound is null then

			INSERT INTO FDAC_STOCK_REMAIN_TRN (
				DATA_DATE,			-- ????
				COMPANY_CODE,			-- ?????
				CUSTOMER_CODE,			-- ??????
				ITEM_NO,			-- ????
				WAREHOUSE_CODE,			-- ?????
				ITEM_TYPE,			-- ??????
				CURR_CODE,			-- ?????
				TOV,				-- ????
				STOCK_QTY,			-- ???
				STOCK_AMT,			-- ???
				STOCK_QTY_LAST,			-- ?????
				STOCK_AMT_LAST,			-- ?????
				STOCK_QTY_IN,			-- ?????
				STOCK_AMT_IN,			-- ?????
				STOCK_QTY_OUT,			-- ?????
				STOCK_AMT_OUT,			-- ?????
				STOCK_QTY_IN_DAY,		-- ?????
				STOCK_AMT_IN_DAY,		-- ?????
				STOCK_QTY_OUT_DAY,		-- ?????
				STOCK_AMT_OUT_DAY,		-- ?????
				DATA_SOURCE_TYPE,		-- ???????
				OPERATION_DATE,			-- ????
				OPERATION_TYPE,			-- ????
				ITEM,				-- ??
				SRC_CLASS_CODE,			-- ???????
				SECTION_CODE,			-- ?????
				PERSON_CODE,			-- ??????
				CUSTOMER_ITEM_NO,		-- ????????
				CUSTOMER,			-- ????
				SELL_COUNTRY_CODE,		-- ???????
				SELL_PREFECTURE_CODE,		-- ??????????
				WAREHOUSE,			-- ???
				WH_COUNTRY_CODE,		-- ??????
				WH_PREFECTURE_CODE,		-- ?????????
				WAREHOUSE_TYPE			-- ????
			) VALUES (
				trunc(WK_SYSDATE),							-- ????
				WK_COMPANY_CODE,							-- ?????
				NULL,									-- ??????
				ROW_STK.ITEM_NO,							-- ????
				WK_COMPANY_CODE,							-- ?????
				WK_ITEM_TYPE,								-- ??????
				WK_CURR_CODE,								-- ?????
				WK_STANDARD_PRICE,							-- ????
				ROW_STK.THIS_INVENTORY,							-- ???
				ROW_STK.THIS_INVENTORY * WK_STANDARD_PRICE,				-- ???
				ROW_STK.LAST_INVENTORY,							-- ?????
				ROW_STK.LAST_INVENTORY * WK_STANDARD_PRICE,				-- ?????
				ROW_STK.RECEIVE1 + ROW_STK.OTHER_RECEIVE1,				-- ?????
				(ROW_STK.RECEIVE1 + ROW_STK.OTHER_RECEIVE1) * WK_STANDARD_PRICE,	-- ?????
				ROW_STK.ISSUE1 + ROW_STK.OTHER_ISSUE1,					-- ?????
				(ROW_STK.ISSUE1 + ROW_STK.OTHER_ISSUE1) * WK_STANDARD_PRICE,		-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				ROW_INI.DATA_SOURCE_TYPE,						-- ???????
				WK_SYSDATE,								-- ????
				0,									-- ????
				substrb(WK_ITEM, 1, 30),						-- ??
				WK_CLASS_CODE,								-- ???????
				ROW_INI.SECTION_CODE,							-- ?????
				ROW_INI.PERSON_CODE,							-- ??????
				NULL,									-- ????????
				NULL,									-- ????
				NULL,									-- ???????
				NULL,									-- ??????????
				WK_COMPANY,								-- ???
				WK_COUNTRY_CODE,							-- ??????
				NULL,									-- ?????????
				4									-- ????
			);
		else
			UPDATE FDAC_STOCK_REMAIN_TRN set 
				STOCK_QTY	= ROW_CHK.STOCK_QTY + ROW_STK.THIS_INVENTORY,
				STOCK_AMT	= ROW_CHK.STOCK_AMT + ( ROW_STK.THIS_INVENTORY * WK_STANDARD_PRICE ),
				STOCK_QTY_LAST	= ROW_CHK.STOCK_QTY_LAST + ROW_STK.LAST_INVENTORY,
				STOCK_AMT_LAST	= ROW_CHK.STOCK_AMT_LAST + ( ROW_STK.LAST_INVENTORY * WK_STANDARD_PRICE ),
				STOCK_QTY_IN	= ROW_CHK.STOCK_QTY_IN + ROW_STK.RECEIVE1 + ROW_STK.OTHER_RECEIVE1,
				STOCK_AMT_IN	= ROW_CHK.STOCK_AMT_IN + ( (ROW_STK.RECEIVE1 + ROW_STK.OTHER_RECEIVE1) * WK_STANDARD_PRICE ),
				STOCK_QTY_OUT	= ROW_CHK.STOCK_QTY_OUT + ROW_STK.ISSUE1 + ROW_STK.OTHER_ISSUE1,
				STOCK_AMT_OUT	= ROW_CHK.STOCK_AMT_OUT + ( (ROW_STK.ISSUE1 + ROW_STK.OTHER_ISSUE1) * WK_STANDARD_PRICE )
			WHERE CURRENT OF C5;
		end if;
		close C5;
	end loop;
	close C1;

	-- ??????? -----------------------------------------------------------
	open C6;
	loop
	fetch C6 into ROW_INTRANSIT;
	exit when C6%notfound or C6%notfound is null;
		-- ?????? -------------------------------------------------------------
		open C3( ROW_INTRANSIT.ITEM_NO );
		fetch C3 into ROW_ITM;
		if C3%notfound or C3%notfound is null then
			WK_ITEM			:= null;
			WK_STANDARD_PRICE	:= null;
			WK_CLASS_CODE		:= null;
		else
			WK_ITEM			:= ROW_ITM.DESCRIPTION;
			WK_STANDARD_PRICE	:= ROW_ITM.STANDARD_PRICE;
			WK_CLASS_CODE		:= ROW_ITM.CLASS_CODE;
		end if;
		-- ?????? -----
		WK_ITEM_TYPE := null;
		if ROW_ITM.STOCK_SUBJECT_CODE in (0) then
			WK_ITEM_TYPE := 6;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (1,2,7) then
			WK_ITEM_TYPE := 3;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (3) then
			WK_ITEM_TYPE := 8;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (4) then
			WK_ITEM_TYPE := 7;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (5) then
			WK_ITEM_TYPE := 0;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (6) then
			WK_ITEM_TYPE := 1;
		else
			WK_ITEM_TYPE := 6;
		end if;
		close C3;

		-- ???????? -------------------------------------------------------------
		open C5(trunc(WK_SYSDATE),ROW_INTRANSIT.ITEM_NO,WK_COMPANY_CODE,WK_ITEM_TYPE,WK_CURR_CODE,ROW_INI.SECTION_CODE,ROW_INI.PERSON_CODE);
		fetch C5 into ROW_CHK;
		if C5%notfound or C5%notfound is null then

			INSERT INTO FDAC_STOCK_REMAIN_TRN (
				DATA_DATE,			-- ????
				COMPANY_CODE,			-- ?????
				CUSTOMER_CODE,			-- ??????
				ITEM_NO,			-- ????
				WAREHOUSE_CODE,			-- ?????
				ITEM_TYPE,			-- ??????
				CURR_CODE,			-- ?????
				TOV,				-- ????
				STOCK_QTY,			-- ???
				STOCK_AMT,			-- ???
				STOCK_QTY_LAST,			-- ?????
				STOCK_AMT_LAST,			-- ?????
				STOCK_QTY_IN,			-- ?????
				STOCK_AMT_IN,			-- ?????
				STOCK_QTY_OUT,			-- ?????
				STOCK_AMT_OUT,			-- ?????
				STOCK_QTY_IN_DAY,		-- ?????
				STOCK_AMT_IN_DAY,		-- ?????
				STOCK_QTY_OUT_DAY,		-- ?????
				STOCK_AMT_OUT_DAY,		-- ?????
				DATA_SOURCE_TYPE,		-- ???????
				OPERATION_DATE,			-- ????
				OPERATION_TYPE,			-- ????
				ITEM,				-- ??
				SRC_CLASS_CODE,			-- ???????
				SECTION_CODE,			-- ?????
				PERSON_CODE,			-- ??????
				CUSTOMER_ITEM_NO,		-- ????????
				CUSTOMER,			-- ????
				SELL_COUNTRY_CODE,		-- ???????
				SELL_PREFECTURE_CODE,		-- ??????????
				WAREHOUSE,			-- ???
				WH_COUNTRY_CODE,		-- ??????
				WH_PREFECTURE_CODE,		-- ?????????
				WAREHOUSE_TYPE			-- ????
			) VALUES (
				trunc(WK_SYSDATE),							-- ????
				WK_COMPANY_CODE,							-- ?????
				NULL,									-- ??????
				ROW_INTRANSIT.ITEM_NO,							-- ????
				WK_COMPANY_CODE,							-- ?????
				WK_ITEM_TYPE,								-- ??????
				WK_CURR_CODE,								-- ?????
				WK_STANDARD_PRICE,							-- ????
				ROW_INTRANSIT.THIS_INVENTORY,							-- ???
				ROW_INTRANSIT.THIS_INVENTORY * WK_STANDARD_PRICE,				-- ???
				ROW_INTRANSIT.LAST_INVENTORY,							-- ?????
				ROW_INTRANSIT.LAST_INVENTORY * WK_STANDARD_PRICE,				-- ?????
				0,									-- ?????
				0,								-- ?????
				0,								-- ?????
				0,								-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				ROW_INI.DATA_SOURCE_TYPE,						-- ???????
				WK_SYSDATE,								-- ????
				0,									-- ????
				substrb(WK_ITEM, 1, 30),						-- ??
				WK_CLASS_CODE,								-- ???????
				ROW_INI.SECTION_CODE,							-- ?????
				ROW_INI.PERSON_CODE,							-- ??????
				NULL,									-- ????????
				NULL,									-- ????
				NULL,									-- ???????
				NULL,									-- ??????????
				WK_COMPANY,								-- ???
				WK_COUNTRY_CODE,							-- ??????
				NULL,									-- ?????????
				4									-- ????
			);
		else
			UPDATE FDAC_STOCK_REMAIN_TRN set 
				STOCK_QTY	= ROW_CHK.STOCK_QTY + ROW_INTRANSIT.THIS_INVENTORY,
				STOCK_AMT	= ROW_CHK.STOCK_AMT + ( ROW_INTRANSIT.THIS_INVENTORY * WK_STANDARD_PRICE ),
				STOCK_QTY_LAST	= ROW_CHK.STOCK_QTY_LAST + ROW_INTRANSIT.LAST_INVENTORY,
				STOCK_AMT_LAST	= ROW_CHK.STOCK_AMT_LAST + ( ROW_INTRANSIT.LAST_INVENTORY * WK_STANDARD_PRICE )
			WHERE CURRENT OF C5;
		end if;
		close C5;
	end loop;
	close C6;

	-- ??????????? -------------------------------------------------------------
	FDAC_PGL_STOCK_LAST_MONTH;
	COMMIT;
	END;
END FDAC_PGL_STOCK;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."FDAC_PGL_STOCK_BK" 
AS
/******************************************************
      ???????????????
  ????????????????
              ???????????????
            ????FDK K.Matsu
            ????2002/08/29
******************************************************/
  ERR_CODE CHAR(7);
  ERR_MSG VARCHAR2(255);
BEGIN
  DECLARE
	-- ???????
	CURSOR C1 IS
--2012/04/19??????????
--	SELECT * FROM WHINVENTORY WHERE THIS_INVENTORY != 0;
	SELECT * FROM WHINVENTORY;
	-- ??????
	CURSOR C2 IS
	SELECT COMPANY_CODE,COMPANY,CURR_CODE,COUNTRY_CODE FROM COMPANY WHERE COMPANY_TYPE = 0;
	-- ?????
	CURSOR C3( P1 in NUMBER ) IS
	SELECT ITEM,DESCRIPTION,STANDARD_PRICE,STOCK_SUBJECT_CODE,CLASS_CODE FROM ITEM WHERE ITEM_NO = P1;
	-- ??????????
	CURSOR C4 IS
	SELECT * FROM FDAC_INIT;
	-- ???????????
	CURSOR C5(P1 IN DATE,P2 IN NUMBER,P3 IN NUMBER,P4 IN NUMBER,P5 IN NUMBER,P6 IN NUMBER,P7 IN VARCHAR2) IS
	SELECT STOCK_QTY,STOCK_AMT,STOCK_QTY_LAST,STOCK_AMT_LAST,STOCK_QTY_IN,STOCK_AMT_IN,STOCK_QTY_OUT,STOCK_AMT_OUT
	FROM FDAC_STOCK_REMAIN_TRN WHERE DATA_DATE = P1 AND ITEM_NO = P2 AND WAREHOUSE_CODE = P3 AND ITEM_TYPE = P4 
	AND CURR_CODE = P5 AND SECTION_CODE = P6 AND PERSON_CODE = P7 FOR UPDATE;
	ROW_STK C1%rowtype;
	ROW_COM C2%rowtype;
	ROW_ITM C3%rowtype;
	ROW_INI C4%rowtype;
	ROW_CHK C5%rowtype;
	-- ?????
	WK_COMPANY_CODE			FDAC_STOCK_REMAIN_TRN.COMPANY_CODE%type;
	WK_COUNTRY_CODE			FDAC_STOCK_REMAIN_TRN.WH_COUNTRY_CODE%type;
	WK_COMPANY				FDAC_STOCK_REMAIN_TRN.CUSTOMER%type;
	WK_CURR_CODE			FDAC_STOCK_REMAIN_TRN.CURR_CODE%type;
	-- ????
	WK_ITEM					FDAC_STOCK_REMAIN_TRN.ITEM%type;
	WK_ITEM_TYPE			FDAC_STOCK_REMAIN_TRN.ITEM_TYPE%type;
	WK_STANDARD_PRICE		FDAC_STOCK_REMAIN_TRN.TOV%type;
	WK_CLASS_CODE			CLASS.CLASS_CODE%type;
	-- ???
	WK_SYSDATE				DATE   := sysdate;
  BEGIN

	-- ?????????? -----------------------------------------------------
	open C4;
    ROW_INI := null;
	fetch C4 into ROW_INI;
    close C4;
	-- ??????? -----------------------------------------------------------
	open C2;
	fetch C2 into ROW_COM;
	if C2%notfound or C2%notfound is null then
		WK_COMPANY_CODE		:= null;
		WK_COMPANY			:= null;
		WK_CURR_CODE		:= null;
		WK_COUNTRY_CODE		:= null;
	else
		WK_COMPANY_CODE		:= ROW_COM.COMPANY_CODE;
		WK_COMPANY			:= ROW_COM.COMPANY;
		WK_CURR_CODE		:= ROW_COM.CURR_CODE;
		WK_COUNTRY_CODE		:= ROW_COM.COUNTRY_CODE;
	end if;
	close C2;
	-- ??????? -----------------------------------------------------------
	open C1;
	loop
	fetch C1 into ROW_STK;
	exit when C1%notfound or C1%notfound is null;
		-- ?????? -------------------------------------------------------------
		open C3( ROW_STK.ITEM_NO );
		fetch C3 into ROW_ITM;
		if C3%notfound or C3%notfound is null then
			WK_ITEM			:= null;
			WK_STANDARD_PRICE	:= null;
			WK_CLASS_CODE		:= null;
		else
			WK_ITEM			:= ROW_ITM.DESCRIPTION;
			WK_STANDARD_PRICE	:= ROW_ITM.STANDARD_PRICE;
			WK_CLASS_CODE		:= ROW_ITM.CLASS_CODE;
		end if;
		-- ?????? -----
		WK_ITEM_TYPE := null;
		if ROW_ITM.STOCK_SUBJECT_CODE in (0) then
			WK_ITEM_TYPE := 6;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (1,2,7) then
			WK_ITEM_TYPE := 3;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (3) then
			WK_ITEM_TYPE := 8;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (4) then
			WK_ITEM_TYPE := 7;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (5) then
			WK_ITEM_TYPE := 0;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (6) then
			WK_ITEM_TYPE := 1;
		else
			WK_ITEM_TYPE := 6;
		end if;
		close C3;

		-- ???????? -------------------------------------------------------------
		open C5(trunc(WK_SYSDATE),ROW_STK.ITEM_NO,WK_COMPANY_CODE,WK_ITEM_TYPE,WK_CURR_CODE,ROW_INI.SECTION_CODE,ROW_INI.PERSON_CODE);
		fetch C5 into ROW_CHK;
		if C5%notfound or C5%notfound is null then

			INSERT INTO FDAC_STOCK_REMAIN_TRN (
				DATA_DATE,				-- ????
				COMPANY_CODE,			-- ?????
				CUSTOMER_CODE,			-- ??????
				ITEM_NO,				-- ????
				WAREHOUSE_CODE,			-- ?????
				ITEM_TYPE,				-- ??????
				CURR_CODE,				-- ?????
				TOV,					-- ????
				STOCK_QTY,				-- ???
				STOCK_AMT,				-- ???
				STOCK_QTY_LAST,			-- ?????
				STOCK_AMT_LAST,			-- ?????
				STOCK_QTY_IN,			-- ?????
				STOCK_AMT_IN,			-- ?????
				STOCK_QTY_OUT,			-- ?????
				STOCK_AMT_OUT,			-- ?????
				STOCK_QTY_IN_DAY,		-- ?????
				STOCK_AMT_IN_DAY,		-- ?????
				STOCK_QTY_OUT_DAY,		-- ?????
				STOCK_AMT_OUT_DAY,		-- ?????
				DATA_SOURCE_TYPE,		-- ???????
				OPERATION_DATE,			-- ????
				OPERATION_TYPE,			-- ????
				ITEM,					-- ??
				SRC_CLASS_CODE,			-- ???????
				SECTION_CODE,			-- ?????
				PERSON_CODE,			-- ??????
				CUSTOMER_ITEM_NO,		-- ????????
				CUSTOMER,				-- ????
				SELL_COUNTRY_CODE,		-- ???????
				SELL_PREFECTURE_CODE,	-- ??????????
				WAREHOUSE,				-- ???
				WH_COUNTRY_CODE,		-- ??????
				WH_PREFECTURE_CODE,		-- ?????????
				WAREHOUSE_TYPE			-- ????
			) VALUES (
				trunc(WK_SYSDATE),													-- ????
				WK_COMPANY_CODE,													-- ?????
				NULL,																-- ??????
				ROW_STK.ITEM_NO,													-- ????
				WK_COMPANY_CODE,													-- ?????
				WK_ITEM_TYPE,														-- ??????
				WK_CURR_CODE,														-- ?????
				WK_STANDARD_PRICE,													-- ????
				ROW_STK.THIS_INVENTORY,												-- ???
				ROW_STK.THIS_INVENTORY * WK_STANDARD_PRICE,							-- ???
				ROW_STK.LAST_INVENTORY,												-- ?????
				ROW_STK.LAST_INVENTORY * WK_STANDARD_PRICE,							-- ?????
				ROW_STK.RECEIVE1 + ROW_STK.OTHER_RECEIVE1,							-- ?????
				(ROW_STK.RECEIVE1 + ROW_STK.OTHER_RECEIVE1) * WK_STANDARD_PRICE,	-- ?????
				ROW_STK.ISSUE1 + ROW_STK.OTHER_ISSUE1,								-- ?????
				(ROW_STK.ISSUE1 + ROW_STK.OTHER_ISSUE1) * WK_STANDARD_PRICE,		-- ?????
				0,																	-- ?????
				0,																	-- ?????
				0,																	-- ?????
				0,																	-- ?????
				ROW_INI.DATA_SOURCE_TYPE,											-- ???????
				WK_SYSDATE,															-- ????
				0,																	-- ????
				substrb(WK_ITEM, 1, 30),											-- ??
				WK_CLASS_CODE,														-- ???????
				ROW_INI.SECTION_CODE,												-- ?????
				ROW_INI.PERSON_CODE,												-- ??????
				NULL,																-- ????????
				NULL,																-- ????
				NULL,																-- ???????
				NULL,																-- ??????????
				WK_COMPANY,															-- ???
				WK_COUNTRY_CODE,													-- ??????
				NULL,																-- ?????????
				4																	-- ????
			);
		else
			UPDATE FDAC_STOCK_REMAIN_TRN set 
				STOCK_QTY	= ROW_CHK.STOCK_QTY + ROW_STK.THIS_INVENTORY,
				STOCK_AMT	= ROW_CHK.STOCK_AMT + ( ROW_STK.THIS_INVENTORY * WK_STANDARD_PRICE ),
				STOCK_QTY_LAST	= ROW_CHK.STOCK_QTY_LAST + ROW_STK.LAST_INVENTORY,
				STOCK_AMT_LAST	= ROW_CHK.STOCK_AMT_LAST + ( ROW_STK.LAST_INVENTORY * WK_STANDARD_PRICE ),
				STOCK_QTY_IN	= ROW_CHK.STOCK_QTY_IN + ROW_STK.RECEIVE1 + ROW_STK.OTHER_RECEIVE1,
				STOCK_AMT_IN	= ROW_CHK.STOCK_AMT_IN + ( (ROW_STK.RECEIVE1 + ROW_STK.OTHER_RECEIVE1) * WK_STANDARD_PRICE ),
				STOCK_QTY_OUT	= ROW_CHK.STOCK_QTY_OUT + ROW_STK.ISSUE1 + ROW_STK.OTHER_ISSUE1,
				STOCK_AMT_OUT	= ROW_CHK.STOCK_AMT_OUT + ( (ROW_STK.ISSUE1 + ROW_STK.OTHER_ISSUE1) * WK_STANDARD_PRICE )
			WHERE CURRENT OF C5;
		end if;
		close C5;
	end loop;
	close C1;
	-- ??????????? -------------------------------------------------------------
	FDAC_PGL_STOCK_LAST_MONTH_bk;
	COMMIT;
	END;
END FDAC_PGL_STOCK_bk;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."FDAC_PGL_STOCK_LAST_MONTH" 
AS
/******************************************************
      ???????????????
  ????????????????
              ?????????????????
            ????Y.HAGAI
            ????2011/10/26
******************************************************/
  ERR_CODE CHAR(7);
  ERR_MSG VARCHAR2(255);
BEGIN
  DECLARE
	-- ???????
	CURSOR C1 IS
--	SELECT * FROM WHINVENTORY WHERE LAST_INVENTORY != 0;
--2014/10/14 Y.Hagai ??
--	SELECT * FROM WHINVENTORY;
	select  ITEM_NO,  THIS_MONTH, LAST_MONTH,
		sum(RECEIVE1) RECEIVE1, sum(OTHER_RECEIVE1) OTHER_RECEIVE1, sum(ISSUE1) ISSUE1, sum(OTHER_ISSUE1) OTHER_ISSUE1, sum(STOCKTAKING_ADJUST1) STOCKTAKING_ADJUST1, 
		sum(THIS_INVENTORY) THIS_INVENTORY,  sum(RECEIVE2) RECEIVE2, sum(OTHER_RECEIVE2) OTHER_RECEIVE2, sum(ISSUE2) ISSUE2, 
		sum(OTHER_ISSUE2) OTHER_ISSUE2, sum(STOCKTAKING_ADJUST2) STOCKTAKING_ADJUST2, sum(LAST_INVENTORY) LAST_INVENTORY, sum(LAST2_INVENTORY) LAST2_INVENTORY
	 from WHINVENTORY
	group by ITEM_NO,  THIS_MONTH,LAST_MONTH
	order by ITEM_NO,  THIS_MONTH;
	-- ??????
	CURSOR C2 IS
	SELECT COMPANY_CODE,COMPANY,CURR_CODE,COUNTRY_CODE FROM COMPANY WHERE COMPANY_TYPE = 0;
	-- ?????
	CURSOR C3( P1 in NUMBER ) IS
	SELECT ITEM,DESCRIPTION,STANDARD_PRICE,LAST_TERM_PRICE,STOCK_SUBJECT_CODE,CLASS_CODE FROM ITEM WHERE ITEM_NO = P1;
	-- ??????????
	CURSOR C4 IS
	SELECT * FROM FDAC_INIT;
	-- ???????????
	CURSOR C5(P1 IN DATE,P2 IN NUMBER,P3 IN NUMBER,P4 IN NUMBER,P5 IN NUMBER,P6 IN NUMBER,P7 IN VARCHAR2) IS
	SELECT STOCK_QTY,STOCK_AMT,STOCK_QTY_LAST,STOCK_AMT_LAST,STOCK_QTY_IN,STOCK_AMT_IN,STOCK_QTY_OUT,STOCK_AMT_OUT
	FROM FDAC_STOCK_REMAIN_TRN WHERE DATA_DATE = P1 AND ITEM_NO = P2 AND WAREHOUSE_CODE = P3 AND ITEM_TYPE = P4 
	AND CURR_CODE = P5 AND SECTION_CODE = P6 AND PERSON_CODE = P7 AND OPERATION_TYPE = '1' FOR UPDATE;

	CURSOR C6 IS
	select item_no,THIS_MONTH,this_inventory, LAST_MONTH,last_inventory from WHINVENTORY_INTRANSIT ;


	ROW_STK C1%rowtype;
	ROW_COM C2%rowtype;
	ROW_ITM C3%rowtype;
	ROW_INI C4%rowtype;
	ROW_CHK C5%rowtype;
	ROW_INTRANSIT C6%rowtype;

	-- ?????
	WK_COMPANY_CODE			FDAC_STOCK_REMAIN_TRN.COMPANY_CODE%type;
	WK_COUNTRY_CODE			FDAC_STOCK_REMAIN_TRN.WH_COUNTRY_CODE%type;
	WK_COMPANY			FDAC_STOCK_REMAIN_TRN.CUSTOMER%type;
	WK_CURR_CODE			FDAC_STOCK_REMAIN_TRN.CURR_CODE%type;
	-- ????
	WK_ITEM				FDAC_STOCK_REMAIN_TRN.ITEM%type;
	WK_ITEM_TYPE			FDAC_STOCK_REMAIN_TRN.ITEM_TYPE%type;
	WK_STANDARD_PRICE		FDAC_STOCK_REMAIN_TRN.TOV%type;
	WK_CLASS_CODE			CLASS.CLASS_CODE%type;
	-- ???
	WK_SYSDATE			DATE   := sysdate;
	--????
	WK_INTRANSIT_THIS_QTY 		WHINVENTORY.THIS_INVENTORY%type;
	WK_INTRANSIT_LAST_QTY 		WHINVENTORY.THIS_INVENTORY%type;

  BEGIN
        -- ??????????????----------------------------------------------
	delete from FDAC_STOCK_REMAIN_TRN
	  where OPERATION_TYPE = '1';

	-- ?????????? -----------------------------------------------------
	open C4;
    ROW_INI := null;
	fetch C4 into ROW_INI;
    close C4;
	-- ??????? -----------------------------------------------------------
	open C2;
	fetch C2 into ROW_COM;
	if C2%notfound or C2%notfound is null then
		WK_COMPANY_CODE		:= null;
		WK_COMPANY		:= null;
		WK_CURR_CODE		:= null;
		WK_COUNTRY_CODE		:= null;
	else
		WK_COMPANY_CODE		:= ROW_COM.COMPANY_CODE;
		WK_COMPANY		:= ROW_COM.COMPANY;
		WK_CURR_CODE		:= ROW_COM.CURR_CODE;
		WK_COUNTRY_CODE		:= ROW_COM.COUNTRY_CODE;
	end if;
	close C2;
	-- ??????? -----------------------------------------------------------
	open C1;
	loop
	fetch C1 into ROW_STK;
	exit when C1%notfound or C1%notfound is null;
		-- ?????? -------------------------------------------------------------
		open C3( ROW_STK.ITEM_NO );
		fetch C3 into ROW_ITM;
		if C3%notfound or C3%notfound is null then
			WK_ITEM			:= null;
			WK_STANDARD_PRICE	:= null;
			WK_CLASS_CODE		:= null;
		else
			WK_ITEM			:= ROW_ITM.DESCRIPTION;
			if     to_number(substrb(ROW_STK.THIS_MONTH,5,2)) in (4,10) then
				WK_STANDARD_PRICE	:= ROW_ITM.LAST_TERM_PRICE;
				WK_STANDARD_PRICE	:= ROW_ITM.STANDARD_PRICE;
			else
				WK_STANDARD_PRICE	:= ROW_ITM.STANDARD_PRICE;
			end if;
			WK_CLASS_CODE		:= ROW_ITM.CLASS_CODE;
		end if;
		-- ?????? -----
		WK_ITEM_TYPE := null;
		if ROW_ITM.STOCK_SUBJECT_CODE in (0) then
			WK_ITEM_TYPE := 6;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (1,2,7) then
			WK_ITEM_TYPE := 3;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (3) then
			WK_ITEM_TYPE := 5;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (4) then
			WK_ITEM_TYPE := 4;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (5) then
			WK_ITEM_TYPE := 0;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (6) then
			WK_ITEM_TYPE := 1;
		else
			WK_ITEM_TYPE := 6;
		end if;
		close C3;

		-- ???????? -------------------------------------------------------------
		open C5(trunc(WK_SYSDATE),ROW_STK.ITEM_NO,WK_COMPANY_CODE,WK_ITEM_TYPE,WK_CURR_CODE,ROW_INI.SECTION_CODE,ROW_INI.PERSON_CODE);
		fetch C5 into ROW_CHK;
		if C5%notfound or C5%notfound is null then

			INSERT INTO FDAC_STOCK_REMAIN_TRN (
				DATA_DATE,			-- ????
				COMPANY_CODE,			-- ?????
				CUSTOMER_CODE,			-- ??????
				ITEM_NO,			-- ????
				WAREHOUSE_CODE,			-- ?????
				ITEM_TYPE,			-- ??????
				CURR_CODE,			-- ?????
				TOV,				-- ????
				STOCK_QTY,			-- ???
				STOCK_AMT,			-- ???
				STOCK_QTY_LAST,			-- ?????
				STOCK_AMT_LAST,			-- ?????
				STOCK_QTY_IN,			-- ?????
				STOCK_AMT_IN,			-- ?????
				STOCK_QTY_OUT,			-- ?????
				STOCK_AMT_OUT,			-- ?????
				STOCK_QTY_IN_DAY,		-- ?????
				STOCK_AMT_IN_DAY,		-- ?????
				STOCK_QTY_OUT_DAY,		-- ?????
				STOCK_AMT_OUT_DAY,		-- ?????
				DATA_SOURCE_TYPE,		-- ???????
				OPERATION_DATE,			-- ????
				OPERATION_TYPE,			-- ????
				ITEM,				-- ??
				SRC_CLASS_CODE,			-- ???????
				SECTION_CODE,			-- ?????
				PERSON_CODE,			-- ??????
				CUSTOMER_ITEM_NO,		-- ????????
				CUSTOMER,			-- ????
				SELL_COUNTRY_CODE,		-- ???????
				SELL_PREFECTURE_CODE,		-- ??????????
				WAREHOUSE,			-- ???
				WH_COUNTRY_CODE,		-- ??????
				WH_PREFECTURE_CODE,		-- ?????????
				WAREHOUSE_TYPE			-- ????
			) VALUES (
				trunc(last_day(to_date(to_char(ROW_STK.LAST_MONTH,'fm099999') || '01','RRRRMMDD'))),		-- ????
				WK_COMPANY_CODE,							-- ?????
				NULL,									-- ??????
				ROW_STK.ITEM_NO,							-- ????
				WK_COMPANY_CODE,							-- ?????
				WK_ITEM_TYPE,								-- ??????
				WK_CURR_CODE,								-- ?????
				WK_STANDARD_PRICE,							-- ????
				ROW_STK.LAST_INVENTORY,							-- ???
				ROW_STK.LAST_INVENTORY * WK_STANDARD_PRICE,				-- ???
				ROW_STK.LAST2_INVENTORY,							-- ?????
				ROW_STK.LAST2_INVENTORY * WK_STANDARD_PRICE,				-- ?????
				ROW_STK.RECEIVE2 + ROW_STK.OTHER_RECEIVE2,				-- ?????
				(ROW_STK.RECEIVE2 + ROW_STK.OTHER_RECEIVE2) * WK_STANDARD_PRICE,	-- ?????
				ROW_STK.ISSUE2 + ROW_STK.OTHER_ISSUE2,					-- ?????
				(ROW_STK.ISSUE2 + ROW_STK.OTHER_ISSUE2) * WK_STANDARD_PRICE,		-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				ROW_INI.DATA_SOURCE_TYPE,						-- ???????
				WK_SYSDATE,								-- ????
				1,									-- ????
				substrb(WK_ITEM, 1, 30),						-- ??
				WK_CLASS_CODE,								-- ???????
				ROW_INI.SECTION_CODE,							-- ?????
				ROW_INI.PERSON_CODE,							-- ??????
				NULL,									-- ????????
				NULL,									-- ????
				NULL,									-- ???????
				NULL,									-- ??????????
				WK_COMPANY,								-- ???
				WK_COUNTRY_CODE,							-- ??????
				NULL,									-- ?????????
				4									-- ????
			);
		else
			UPDATE FDAC_STOCK_REMAIN_TRN set 
				STOCK_QTY	= ROW_CHK.STOCK_QTY + ROW_STK.LAST_INVENTORY,
				STOCK_AMT	= ROW_CHK.STOCK_AMT + ( ROW_STK.LAST_INVENTORY * WK_STANDARD_PRICE ),
				STOCK_QTY_LAST	= ROW_CHK.STOCK_QTY_LAST + ROW_STK.LAST2_INVENTORY,
				STOCK_AMT_LAST	= ROW_CHK.STOCK_AMT_LAST + ( ROW_STK.LAST2_INVENTORY * WK_STANDARD_PRICE ),
				STOCK_QTY_IN	= ROW_CHK.STOCK_QTY_IN + ROW_STK.RECEIVE2 + ROW_STK.OTHER_RECEIVE2,
				STOCK_AMT_IN	= ROW_CHK.STOCK_AMT_IN + ( (ROW_STK.RECEIVE2 + ROW_STK.OTHER_RECEIVE2) * WK_STANDARD_PRICE ),
				STOCK_QTY_OUT	= ROW_CHK.STOCK_QTY_OUT + ROW_STK.ISSUE2 + ROW_STK.OTHER_ISSUE2,
				STOCK_AMT_OUT	= ROW_CHK.STOCK_AMT_OUT + ( (ROW_STK.ISSUE2 + ROW_STK.OTHER_ISSUE2) * WK_STANDARD_PRICE )
			WHERE CURRENT OF C5;
		end if;
		close C5;
	end loop;
	close C1;

	-- ??????? -----------------------------------------------------------
	open C6;
	loop
	fetch C6 into ROW_INTRANSIT;
	exit when C6%notfound or C6%notfound is null;
		-- ?????? -------------------------------------------------------------
		open C3( ROW_INTRANSIT.ITEM_NO );
		fetch C3 into ROW_ITM;
		if C3%notfound or C3%notfound is null then
			WK_ITEM			:= null;
			WK_STANDARD_PRICE	:= null;
			WK_CLASS_CODE		:= null;
		else
			WK_ITEM			:= ROW_ITM.DESCRIPTION;
			if     to_number(substrb(ROW_INTRANSIT.THIS_MONTH,5,2)) in (4,10) then
				WK_STANDARD_PRICE	:= ROW_ITM.LAST_TERM_PRICE;
				WK_STANDARD_PRICE	:= ROW_ITM.STANDARD_PRICE;
			else
				WK_STANDARD_PRICE	:= ROW_ITM.STANDARD_PRICE;
			end if;
			WK_CLASS_CODE		:= ROW_ITM.CLASS_CODE;
		end if;
		-- ?????? -----
		WK_ITEM_TYPE := null;
		if ROW_ITM.STOCK_SUBJECT_CODE in (0) then
			WK_ITEM_TYPE := 6;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (1,2,7) then
			WK_ITEM_TYPE := 3;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (3) then
			WK_ITEM_TYPE := 5;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (4) then
			WK_ITEM_TYPE := 4;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (5) then
			WK_ITEM_TYPE := 0;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (6) then
			WK_ITEM_TYPE := 1;
		else
			WK_ITEM_TYPE := 6;
		end if;
		close C3;

		-- ???????? -------------------------------------------------------------
		open C5(trunc(last_day(to_date(to_char(ROW_INTRANSIT.LAST_MONTH,'fm099999') || '01','RRRRMMDD'))),ROW_INTRANSIT.ITEM_NO ,WK_COMPANY_CODE,WK_ITEM_TYPE,WK_CURR_CODE,ROW_INI.SECTION_CODE,ROW_INI.PERSON_CODE);
		fetch C5 into ROW_CHK;
		if C5%notfound or C5%notfound is null then

			INSERT INTO FDAC_STOCK_REMAIN_TRN (
				DATA_DATE,			-- ????
				COMPANY_CODE,			-- ?????
				CUSTOMER_CODE,			-- ??????
				ITEM_NO,			-- ????
				WAREHOUSE_CODE,			-- ?????
				ITEM_TYPE,			-- ??????
				CURR_CODE,			-- ?????
				TOV,				-- ????
				STOCK_QTY,			-- ???
				STOCK_AMT,			-- ???
				STOCK_QTY_LAST,			-- ?????
				STOCK_AMT_LAST,			-- ?????
				STOCK_QTY_IN,			-- ?????
				STOCK_AMT_IN,			-- ?????
				STOCK_QTY_OUT,			-- ?????
				STOCK_AMT_OUT,			-- ?????
				STOCK_QTY_IN_DAY,		-- ?????
				STOCK_AMT_IN_DAY,		-- ?????
				STOCK_QTY_OUT_DAY,		-- ?????
				STOCK_AMT_OUT_DAY,		-- ?????
				DATA_SOURCE_TYPE,		-- ???????
				OPERATION_DATE,			-- ????
				OPERATION_TYPE,			-- ????
				ITEM,				-- ??
				SRC_CLASS_CODE,			-- ???????
				SECTION_CODE,			-- ?????
				PERSON_CODE,			-- ??????
				CUSTOMER_ITEM_NO,		-- ????????
				CUSTOMER,			-- ????
				SELL_COUNTRY_CODE,		-- ???????
				SELL_PREFECTURE_CODE,		-- ??????????
				WAREHOUSE,			-- ???
				WH_COUNTRY_CODE,		-- ??????
				WH_PREFECTURE_CODE,		-- ?????????
				WAREHOUSE_TYPE			-- ????
			) VALUES (
				trunc(last_day(to_date(to_char(ROW_INTRANSIT.LAST_MONTH,'fm099999') || '01','RRRRMMDD'))),		-- ????
				WK_COMPANY_CODE,							-- ?????
				NULL,									-- ??????
				ROW_INTRANSIT.ITEM_NO,							-- ????
				WK_COMPANY_CODE,							-- ?????
				WK_ITEM_TYPE,								-- ??????
				WK_CURR_CODE,								-- ?????
				WK_STANDARD_PRICE,							-- ????
				ROW_INTRANSIT.LAST_INVENTORY,						-- ???
				ROW_INTRANSIT.LAST_INVENTORY * WK_STANDARD_PRICE,			-- ???
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				ROW_INI.DATA_SOURCE_TYPE,						-- ???????
				WK_SYSDATE,								-- ????
				1,									-- ????
				substrb(WK_ITEM, 1, 30),						-- ??
				WK_CLASS_CODE,								-- ???????
				ROW_INI.SECTION_CODE,							-- ?????
				ROW_INI.PERSON_CODE,							-- ??????
				NULL,									-- ????????
				NULL,									-- ????
				NULL,									-- ???????
				NULL,									-- ??????????
				WK_COMPANY,								-- ???
				WK_COUNTRY_CODE,							-- ??????
				NULL,									-- ?????????
				4									-- ????
			);
		else
			UPDATE FDAC_STOCK_REMAIN_TRN set 
				STOCK_QTY	= ROW_CHK.STOCK_QTY + ROW_INTRANSIT.LAST_INVENTORY,
				STOCK_AMT	= ROW_CHK.STOCK_AMT + ( ROW_INTRANSIT.LAST_INVENTORY * WK_STANDARD_PRICE )
			WHERE CURRENT OF C5;
		end if;
		close C5;
	end loop;
	close C6;

--	COMMIT;
	END;
END FDAC_PGL_STOCK_LAST_MONTH;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."FDAC_PGL_STOCK_LAST_MONTH_BK" 
AS
/******************************************************
      ???????????????
  ????????????????
              ?????????????????
            ????Y.HAGAI
            ????2011/10/26
******************************************************/
  ERR_CODE CHAR(7);
  ERR_MSG VARCHAR2(255);
BEGIN
  DECLARE
	-- ???????
	CURSOR C1 IS
--	SELECT * FROM WHINVENTORY WHERE LAST_INVENTORY != 0;
--2014/10/14 Y.Hagai ??
--	SELECT * FROM WHINVENTORY;
	select  ITEM_NO,  THIS_MONTH, LAST_MONTH,
		sum(RECEIVE1) RECEIVE1, sum(OTHER_RECEIVE1) OTHER_RECEIVE1, sum(ISSUE1) ISSUE1, sum(OTHER_ISSUE1) OTHER_ISSUE1, sum(STOCKTAKING_ADJUST1) STOCKTAKING_ADJUST1, 
		sum(THIS_INVENTORY) THIS_INVENTORY,  sum(RECEIVE2) RECEIVE2, sum(OTHER_RECEIVE2) OTHER_RECEIVE2, sum(ISSUE2) ISSUE2, 
		sum(OTHER_ISSUE2) OTHER_ISSUE2, sum(STOCKTAKING_ADJUST2) STOCKTAKING_ADJUST2, sum(LAST_INVENTORY) LAST_INVENTORY, sum(LAST2_INVENTORY) LAST2_INVENTORY
	 from WHINVENTORY
	group by ITEM_NO,  THIS_MONTH,LAST_MONTH
	order by ITEM_NO,  THIS_MONTH;
	-- ??????
	CURSOR C2 IS
	SELECT COMPANY_CODE,COMPANY,CURR_CODE,COUNTRY_CODE FROM COMPANY WHERE COMPANY_TYPE = 0;
	-- ?????
	CURSOR C3( P1 in NUMBER ) IS
	SELECT ITEM,DESCRIPTION,STANDARD_PRICE,LAST_TERM_PRICE,STOCK_SUBJECT_CODE,CLASS_CODE FROM ITEM WHERE ITEM_NO = P1;
	-- ??????????
	CURSOR C4 IS
	SELECT * FROM FDAC_INIT;
	-- ???????????
	CURSOR C5(P1 IN DATE,P2 IN NUMBER,P3 IN NUMBER,P4 IN NUMBER,P5 IN NUMBER,P6 IN NUMBER,P7 IN VARCHAR2) IS
	SELECT STOCK_QTY,STOCK_AMT,STOCK_QTY_LAST,STOCK_AMT_LAST,STOCK_QTY_IN,STOCK_AMT_IN,STOCK_QTY_OUT,STOCK_AMT_OUT
	FROM FDAC_STOCK_REMAIN_TRN WHERE DATA_DATE = P1 AND ITEM_NO = P2 AND WAREHOUSE_CODE = P3 AND ITEM_TYPE = P4 
	AND CURR_CODE = P5 AND SECTION_CODE = P6 AND PERSON_CODE = P7 AND OPERATION_TYPE = '1' FOR UPDATE;
	ROW_STK C1%rowtype;
	ROW_COM C2%rowtype;
	ROW_ITM C3%rowtype;
	ROW_INI C4%rowtype;
	ROW_CHK C5%rowtype;
	-- ?????
	WK_COMPANY_CODE			FDAC_STOCK_REMAIN_TRN.COMPANY_CODE%type;
	WK_COUNTRY_CODE			FDAC_STOCK_REMAIN_TRN.WH_COUNTRY_CODE%type;
	WK_COMPANY			FDAC_STOCK_REMAIN_TRN.CUSTOMER%type;
	WK_CURR_CODE			FDAC_STOCK_REMAIN_TRN.CURR_CODE%type;
	-- ????
	WK_ITEM				FDAC_STOCK_REMAIN_TRN.ITEM%type;
	WK_ITEM_TYPE			FDAC_STOCK_REMAIN_TRN.ITEM_TYPE%type;
	WK_STANDARD_PRICE		FDAC_STOCK_REMAIN_TRN.TOV%type;
	WK_CLASS_CODE			CLASS.CLASS_CODE%type;
	-- ???
	WK_SYSDATE			DATE   := sysdate;
  BEGIN
        -- ??????????????----------------------------------------------
	delete from FDAC_STOCK_REMAIN_TRN
	  where OPERATION_TYPE = '1';

	-- ?????????? -----------------------------------------------------
	open C4;
    ROW_INI := null;
	fetch C4 into ROW_INI;
    close C4;
	-- ??????? -----------------------------------------------------------
	open C2;
	fetch C2 into ROW_COM;
	if C2%notfound or C2%notfound is null then
		WK_COMPANY_CODE		:= null;
		WK_COMPANY		:= null;
		WK_CURR_CODE		:= null;
		WK_COUNTRY_CODE		:= null;
	else
		WK_COMPANY_CODE		:= ROW_COM.COMPANY_CODE;
		WK_COMPANY		:= ROW_COM.COMPANY;
		WK_CURR_CODE		:= ROW_COM.CURR_CODE;
		WK_COUNTRY_CODE		:= ROW_COM.COUNTRY_CODE;
	end if;
	close C2;
	-- ??????? -----------------------------------------------------------
	open C1;
	loop
	fetch C1 into ROW_STK;
	exit when C1%notfound or C1%notfound is null;
		-- ?????? -------------------------------------------------------------
		open C3( ROW_STK.ITEM_NO );
		fetch C3 into ROW_ITM;
		if C3%notfound or C3%notfound is null then
			WK_ITEM			:= null;
			WK_STANDARD_PRICE	:= null;
			WK_CLASS_CODE		:= null;
		else
			WK_ITEM			:= ROW_ITM.DESCRIPTION;
			if     to_number(substrb(ROW_STK.THIS_MONTH,5,2)) in (4,10) then
				WK_STANDARD_PRICE	:= ROW_ITM.LAST_TERM_PRICE;
				WK_STANDARD_PRICE	:= ROW_ITM.STANDARD_PRICE;
			else
				WK_STANDARD_PRICE	:= ROW_ITM.STANDARD_PRICE;
			end if;
			WK_CLASS_CODE		:= ROW_ITM.CLASS_CODE;
		end if;
		-- ?????? -----
		WK_ITEM_TYPE := null;
		if ROW_ITM.STOCK_SUBJECT_CODE in (0) then
			WK_ITEM_TYPE := 6;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (1,2,7) then
			WK_ITEM_TYPE := 3;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (3) then
			WK_ITEM_TYPE := 5;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (4) then
			WK_ITEM_TYPE := 4;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (5) then
			WK_ITEM_TYPE := 0;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (6) then
			WK_ITEM_TYPE := 1;
		else
			WK_ITEM_TYPE := 6;
		end if;
		close C3;

		-- ???????? -------------------------------------------------------------
		open C5(trunc(WK_SYSDATE),ROW_STK.ITEM_NO,WK_COMPANY_CODE,WK_ITEM_TYPE,WK_CURR_CODE,ROW_INI.SECTION_CODE,ROW_INI.PERSON_CODE);
		fetch C5 into ROW_CHK;
		if C5%notfound or C5%notfound is null then

			INSERT INTO FDAC_STOCK_REMAIN_TRN (
				DATA_DATE,			-- ????
				COMPANY_CODE,			-- ?????
				CUSTOMER_CODE,			-- ??????
				ITEM_NO,			-- ????
				WAREHOUSE_CODE,			-- ?????
				ITEM_TYPE,			-- ??????
				CURR_CODE,			-- ?????
				TOV,				-- ????
				STOCK_QTY,			-- ???
				STOCK_AMT,			-- ???
				STOCK_QTY_LAST,			-- ?????
				STOCK_AMT_LAST,			-- ?????
				STOCK_QTY_IN,			-- ?????
				STOCK_AMT_IN,			-- ?????
				STOCK_QTY_OUT,			-- ?????
				STOCK_AMT_OUT,			-- ?????
				STOCK_QTY_IN_DAY,		-- ?????
				STOCK_AMT_IN_DAY,		-- ?????
				STOCK_QTY_OUT_DAY,		-- ?????
				STOCK_AMT_OUT_DAY,		-- ?????
				DATA_SOURCE_TYPE,		-- ???????
				OPERATION_DATE,			-- ????
				OPERATION_TYPE,			-- ????
				ITEM,				-- ??
				SRC_CLASS_CODE,			-- ???????
				SECTION_CODE,			-- ?????
				PERSON_CODE,			-- ??????
				CUSTOMER_ITEM_NO,		-- ????????
				CUSTOMER,			-- ????
				SELL_COUNTRY_CODE,		-- ???????
				SELL_PREFECTURE_CODE,		-- ??????????
				WAREHOUSE,			-- ???
				WH_COUNTRY_CODE,		-- ??????
				WH_PREFECTURE_CODE,		-- ?????????
				WAREHOUSE_TYPE			-- ????
			) VALUES (
				trunc(last_day(to_date(to_char(ROW_STK.LAST_MONTH,'fm099999') || '01','RRRRMMDD'))),		-- ????
				WK_COMPANY_CODE,							-- ?????
				NULL,									-- ??????
				ROW_STK.ITEM_NO,							-- ????
				WK_COMPANY_CODE,							-- ?????
				WK_ITEM_TYPE,								-- ??????
				WK_CURR_CODE,								-- ?????
				WK_STANDARD_PRICE,							-- ????
				ROW_STK.LAST_INVENTORY,							-- ???
				ROW_STK.LAST_INVENTORY * WK_STANDARD_PRICE,				-- ???
				ROW_STK.LAST2_INVENTORY,							-- ?????
				ROW_STK.LAST2_INVENTORY * WK_STANDARD_PRICE,				-- ?????
				ROW_STK.RECEIVE2 + ROW_STK.OTHER_RECEIVE2,				-- ?????
				(ROW_STK.RECEIVE2 + ROW_STK.OTHER_RECEIVE2) * WK_STANDARD_PRICE,	-- ?????
				ROW_STK.ISSUE2 + ROW_STK.OTHER_ISSUE2,					-- ?????
				(ROW_STK.ISSUE2 + ROW_STK.OTHER_ISSUE2) * WK_STANDARD_PRICE,		-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				ROW_INI.DATA_SOURCE_TYPE,						-- ???????
				WK_SYSDATE,								-- ????
				1,									-- ????
				substrb(WK_ITEM, 1, 30),						-- ??
				WK_CLASS_CODE,								-- ???????
				ROW_INI.SECTION_CODE,							-- ?????
				ROW_INI.PERSON_CODE,							-- ??????
				NULL,									-- ????????
				NULL,									-- ????
				NULL,									-- ???????
				NULL,									-- ??????????
				WK_COMPANY,								-- ???
				WK_COUNTRY_CODE,							-- ??????
				NULL,									-- ?????????
				4									-- ????
			);
		else
			UPDATE FDAC_STOCK_REMAIN_TRN set 
				STOCK_QTY	= ROW_CHK.STOCK_QTY + ROW_STK.LAST_INVENTORY,
				STOCK_AMT	= ROW_CHK.STOCK_AMT + ( ROW_STK.LAST_INVENTORY * WK_STANDARD_PRICE ),
				STOCK_QTY_LAST	= ROW_CHK.STOCK_QTY_LAST + ROW_STK.LAST2_INVENTORY,
				STOCK_AMT_LAST	= ROW_CHK.STOCK_AMT_LAST + ( ROW_STK.LAST2_INVENTORY * WK_STANDARD_PRICE ),
				STOCK_QTY_IN	= ROW_CHK.STOCK_QTY_IN + ROW_STK.RECEIVE2 + ROW_STK.OTHER_RECEIVE2,
				STOCK_AMT_IN	= ROW_CHK.STOCK_AMT_IN + ( (ROW_STK.RECEIVE2 + ROW_STK.OTHER_RECEIVE2) * WK_STANDARD_PRICE ),
				STOCK_QTY_OUT	= ROW_CHK.STOCK_QTY_OUT + ROW_STK.ISSUE2 + ROW_STK.OTHER_ISSUE2,
				STOCK_AMT_OUT	= ROW_CHK.STOCK_AMT_OUT + ( (ROW_STK.ISSUE2 + ROW_STK.OTHER_ISSUE2) * WK_STANDARD_PRICE )
			WHERE CURRENT OF C5;
		end if;
		close C5;
	end loop;
	close C1;
--	COMMIT;
	END;
END FDAC_PGL_STOCK_LAST_MONTH_bk;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."FDAC_PGL_STOCK_LAST_MONTH_NEW" 
AS
/******************************************************
      ???????????????
  ????????????????
              ?????????????????
            ????Y.HAGAI
            ????2011/10/26
******************************************************/
  ERR_CODE CHAR(7);
  ERR_MSG VARCHAR2(255);
BEGIN
  DECLARE
	-- ???????
	CURSOR C1 IS
--	SELECT * FROM WHINVENTORY WHERE LAST_INVENTORY != 0;
--2014/10/14 Y.Hagai ??
--	SELECT * FROM WHINVENTORY;
	select  ITEM_NO,  THIS_MONTH, LAST_MONTH,
		sum(RECEIVE1) RECEIVE1, sum(OTHER_RECEIVE1) OTHER_RECEIVE1, sum(ISSUE1) ISSUE1, sum(OTHER_ISSUE1) OTHER_ISSUE1, sum(STOCKTAKING_ADJUST1) STOCKTAKING_ADJUST1, 
		sum(THIS_INVENTORY) THIS_INVENTORY,  sum(RECEIVE2) RECEIVE2, sum(OTHER_RECEIVE2) OTHER_RECEIVE2, sum(ISSUE2) ISSUE2, 
		sum(OTHER_ISSUE2) OTHER_ISSUE2, sum(STOCKTAKING_ADJUST2) STOCKTAKING_ADJUST2, sum(LAST_INVENTORY) LAST_INVENTORY, sum(LAST2_INVENTORY) LAST2_INVENTORY
	 from WHINVENTORY
	group by ITEM_NO,  THIS_MONTH,LAST_MONTH
	order by ITEM_NO,  THIS_MONTH;
	-- ??????
	CURSOR C2 IS
	SELECT COMPANY_CODE,COMPANY,CURR_CODE,COUNTRY_CODE FROM COMPANY WHERE COMPANY_TYPE = 0;
	-- ?????
	CURSOR C3( P1 in NUMBER ) IS
	SELECT ITEM,DESCRIPTION,STANDARD_PRICE,LAST_TERM_PRICE,STOCK_SUBJECT_CODE,CLASS_CODE FROM ITEM WHERE ITEM_NO = P1;
	-- ??????????
	CURSOR C4 IS
	SELECT * FROM FDAC_INIT;
	-- ???????????
	CURSOR C5(P1 IN DATE,P2 IN NUMBER,P3 IN NUMBER,P4 IN NUMBER,P5 IN NUMBER,P6 IN NUMBER,P7 IN VARCHAR2) IS
	SELECT STOCK_QTY,STOCK_AMT,STOCK_QTY_LAST,STOCK_AMT_LAST,STOCK_QTY_IN,STOCK_AMT_IN,STOCK_QTY_OUT,STOCK_AMT_OUT
	FROM FDAC_STOCK_REMAIN_TRN_hagai WHERE DATA_DATE = P1 AND ITEM_NO = P2 AND WAREHOUSE_CODE = P3 AND ITEM_TYPE = P4 
	AND CURR_CODE = P5 AND SECTION_CODE = P6 AND PERSON_CODE = P7 AND OPERATION_TYPE = '1' FOR UPDATE;

	CURSOR C6 IS
	select item_no,THIS_MONTH,this_inventory, LAST_MONTH,last_inventory from WHINVENTORY_INTRANSIT ;


	ROW_STK C1%rowtype;
	ROW_COM C2%rowtype;
	ROW_ITM C3%rowtype;
	ROW_INI C4%rowtype;
	ROW_CHK C5%rowtype;
	ROW_INTRANSIT C6%rowtype;

	-- ?????
	WK_COMPANY_CODE			FDAC_STOCK_REMAIN_TRN_hagai.COMPANY_CODE%type;
	WK_COUNTRY_CODE			FDAC_STOCK_REMAIN_TRN_hagai.WH_COUNTRY_CODE%type;
	WK_COMPANY			FDAC_STOCK_REMAIN_TRN_hagai.CUSTOMER%type;
	WK_CURR_CODE			FDAC_STOCK_REMAIN_TRN_hagai.CURR_CODE%type;
	-- ????
	WK_ITEM				FDAC_STOCK_REMAIN_TRN_hagai.ITEM%type;
	WK_ITEM_TYPE			FDAC_STOCK_REMAIN_TRN_hagai.ITEM_TYPE%type;
	WK_STANDARD_PRICE		FDAC_STOCK_REMAIN_TRN_hagai.TOV%type;
	WK_CLASS_CODE			CLASS.CLASS_CODE%type;
	-- ???
	WK_SYSDATE			DATE   := sysdate;
	--????
	WK_INTRANSIT_THIS_QTY 		WHINVENTORY.THIS_INVENTORY%type;
	WK_INTRANSIT_LAST_QTY 		WHINVENTORY.THIS_INVENTORY%type;

  BEGIN
        -- ??????????????----------------------------------------------
	delete from FDAC_STOCK_REMAIN_TRN_hagai
	  where OPERATION_TYPE = '1';

	-- ?????????? -----------------------------------------------------
	open C4;
    ROW_INI := null;
	fetch C4 into ROW_INI;
    close C4;
	-- ??????? -----------------------------------------------------------
	open C2;
	fetch C2 into ROW_COM;
	if C2%notfound or C2%notfound is null then
		WK_COMPANY_CODE		:= null;
		WK_COMPANY		:= null;
		WK_CURR_CODE		:= null;
		WK_COUNTRY_CODE		:= null;
	else
		WK_COMPANY_CODE		:= ROW_COM.COMPANY_CODE;
		WK_COMPANY		:= ROW_COM.COMPANY;
		WK_CURR_CODE		:= ROW_COM.CURR_CODE;
		WK_COUNTRY_CODE		:= ROW_COM.COUNTRY_CODE;
	end if;
	close C2;
	-- ??????? -----------------------------------------------------------
	open C1;
	loop
	fetch C1 into ROW_STK;
	exit when C1%notfound or C1%notfound is null;
		-- ?????? -------------------------------------------------------------
		open C3( ROW_STK.ITEM_NO );
		fetch C3 into ROW_ITM;
		if C3%notfound or C3%notfound is null then
			WK_ITEM			:= null;
			WK_STANDARD_PRICE	:= null;
			WK_CLASS_CODE		:= null;
		else
			WK_ITEM			:= ROW_ITM.DESCRIPTION;
			if     to_number(substrb(ROW_STK.THIS_MONTH,5,2)) in (4,10) then
				WK_STANDARD_PRICE	:= ROW_ITM.LAST_TERM_PRICE;
				WK_STANDARD_PRICE	:= ROW_ITM.STANDARD_PRICE;
			else
				WK_STANDARD_PRICE	:= ROW_ITM.STANDARD_PRICE;
			end if;
			WK_CLASS_CODE		:= ROW_ITM.CLASS_CODE;
		end if;
		-- ?????? -----
		WK_ITEM_TYPE := null;
		if ROW_ITM.STOCK_SUBJECT_CODE in (0) then
			WK_ITEM_TYPE := 6;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (1,2,7) then
			WK_ITEM_TYPE := 3;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (3) then
			WK_ITEM_TYPE := 5;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (4) then
			WK_ITEM_TYPE := 4;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (5) then
			WK_ITEM_TYPE := 0;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (6) then
			WK_ITEM_TYPE := 1;
		else
			WK_ITEM_TYPE := 6;
		end if;
		close C3;

		-- ???????? -------------------------------------------------------------
		open C5(trunc(WK_SYSDATE),ROW_STK.ITEM_NO,WK_COMPANY_CODE,WK_ITEM_TYPE,WK_CURR_CODE,ROW_INI.SECTION_CODE,ROW_INI.PERSON_CODE);
		fetch C5 into ROW_CHK;
		if C5%notfound or C5%notfound is null then

			INSERT INTO FDAC_STOCK_REMAIN_TRN_hagai (
				DATA_DATE,			-- ????
				COMPANY_CODE,			-- ?????
				CUSTOMER_CODE,			-- ??????
				ITEM_NO,			-- ????
				WAREHOUSE_CODE,			-- ?????
				ITEM_TYPE,			-- ??????
				CURR_CODE,			-- ?????
				TOV,				-- ????
				STOCK_QTY,			-- ???
				STOCK_AMT,			-- ???
				STOCK_QTY_LAST,			-- ?????
				STOCK_AMT_LAST,			-- ?????
				STOCK_QTY_IN,			-- ?????
				STOCK_AMT_IN,			-- ?????
				STOCK_QTY_OUT,			-- ?????
				STOCK_AMT_OUT,			-- ?????
				STOCK_QTY_IN_DAY,		-- ?????
				STOCK_AMT_IN_DAY,		-- ?????
				STOCK_QTY_OUT_DAY,		-- ?????
				STOCK_AMT_OUT_DAY,		-- ?????
				DATA_SOURCE_TYPE,		-- ???????
				OPERATION_DATE,			-- ????
				OPERATION_TYPE,			-- ????
				ITEM,				-- ??
				SRC_CLASS_CODE,			-- ???????
				SECTION_CODE,			-- ?????
				PERSON_CODE,			-- ??????
				CUSTOMER_ITEM_NO,		-- ????????
				CUSTOMER,			-- ????
				SELL_COUNTRY_CODE,		-- ???????
				SELL_PREFECTURE_CODE,		-- ??????????
				WAREHOUSE,			-- ???
				WH_COUNTRY_CODE,		-- ??????
				WH_PREFECTURE_CODE,		-- ?????????
				WAREHOUSE_TYPE			-- ????
			) VALUES (
				trunc(last_day(to_date(to_char(ROW_STK.LAST_MONTH,'fm099999') || '01','RRRRMMDD'))),		-- ????
				WK_COMPANY_CODE,							-- ?????
				NULL,									-- ??????
				ROW_STK.ITEM_NO,							-- ????
				WK_COMPANY_CODE,							-- ?????
				WK_ITEM_TYPE,								-- ??????
				WK_CURR_CODE,								-- ?????
				WK_STANDARD_PRICE,							-- ????
				ROW_STK.LAST_INVENTORY,							-- ???
				ROW_STK.LAST_INVENTORY * WK_STANDARD_PRICE,				-- ???
				ROW_STK.LAST2_INVENTORY,							-- ?????
				ROW_STK.LAST2_INVENTORY * WK_STANDARD_PRICE,				-- ?????
				ROW_STK.RECEIVE2 + ROW_STK.OTHER_RECEIVE2,				-- ?????
				(ROW_STK.RECEIVE2 + ROW_STK.OTHER_RECEIVE2) * WK_STANDARD_PRICE,	-- ?????
				ROW_STK.ISSUE2 + ROW_STK.OTHER_ISSUE2,					-- ?????
				(ROW_STK.ISSUE2 + ROW_STK.OTHER_ISSUE2) * WK_STANDARD_PRICE,		-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				ROW_INI.DATA_SOURCE_TYPE,						-- ???????
				WK_SYSDATE,								-- ????
				1,									-- ????
				substrb(WK_ITEM, 1, 30),						-- ??
				WK_CLASS_CODE,								-- ???????
				ROW_INI.SECTION_CODE,							-- ?????
				ROW_INI.PERSON_CODE,							-- ??????
				NULL,									-- ????????
				NULL,									-- ????
				NULL,									-- ???????
				NULL,									-- ??????????
				WK_COMPANY,								-- ???
				WK_COUNTRY_CODE,							-- ??????
				NULL,									-- ?????????
				4									-- ????
			);
		else
			UPDATE FDAC_STOCK_REMAIN_TRN_hagai set 
				STOCK_QTY	= ROW_CHK.STOCK_QTY + ROW_STK.LAST_INVENTORY,
				STOCK_AMT	= ROW_CHK.STOCK_AMT + ( ROW_STK.LAST_INVENTORY * WK_STANDARD_PRICE ),
				STOCK_QTY_LAST	= ROW_CHK.STOCK_QTY_LAST + ROW_STK.LAST2_INVENTORY,
				STOCK_AMT_LAST	= ROW_CHK.STOCK_AMT_LAST + ( ROW_STK.LAST2_INVENTORY * WK_STANDARD_PRICE ),
				STOCK_QTY_IN	= ROW_CHK.STOCK_QTY_IN + ROW_STK.RECEIVE2 + ROW_STK.OTHER_RECEIVE2,
				STOCK_AMT_IN	= ROW_CHK.STOCK_AMT_IN + ( (ROW_STK.RECEIVE2 + ROW_STK.OTHER_RECEIVE2) * WK_STANDARD_PRICE ),
				STOCK_QTY_OUT	= ROW_CHK.STOCK_QTY_OUT + ROW_STK.ISSUE2 + ROW_STK.OTHER_ISSUE2,
				STOCK_AMT_OUT	= ROW_CHK.STOCK_AMT_OUT + ( (ROW_STK.ISSUE2 + ROW_STK.OTHER_ISSUE2) * WK_STANDARD_PRICE )
			WHERE CURRENT OF C5;
		end if;
		close C5;
	end loop;
	close C1;

	-- ??????? -----------------------------------------------------------
	open C6;
	loop
	fetch C6 into ROW_INTRANSIT;
	exit when C6%notfound or C6%notfound is null;
		-- ?????? -------------------------------------------------------------
		open C3( ROW_INTRANSIT.ITEM_NO );
		fetch C3 into ROW_ITM;
		if C3%notfound or C3%notfound is null then
			WK_ITEM			:= null;
			WK_STANDARD_PRICE	:= null;
			WK_CLASS_CODE		:= null;
		else
			WK_ITEM			:= ROW_ITM.DESCRIPTION;
			if     to_number(substrb(ROW_INTRANSIT.THIS_MONTH,5,2)) in (4,10) then
				WK_STANDARD_PRICE	:= ROW_ITM.LAST_TERM_PRICE;
				WK_STANDARD_PRICE	:= ROW_ITM.STANDARD_PRICE;
			else
				WK_STANDARD_PRICE	:= ROW_ITM.STANDARD_PRICE;
			end if;
			WK_CLASS_CODE		:= ROW_ITM.CLASS_CODE;
		end if;
		-- ?????? -----
		WK_ITEM_TYPE := null;
		if ROW_ITM.STOCK_SUBJECT_CODE in (0) then
			WK_ITEM_TYPE := 6;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (1,2,7) then
			WK_ITEM_TYPE := 3;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (3) then
			WK_ITEM_TYPE := 5;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (4) then
			WK_ITEM_TYPE := 4;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (5) then
			WK_ITEM_TYPE := 0;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (6) then
			WK_ITEM_TYPE := 1;
		else
			WK_ITEM_TYPE := 6;
		end if;
		close C3;

		-- ???????? -------------------------------------------------------------
		open C5(trunc(last_day(to_date(to_char(ROW_INTRANSIT.LAST_MONTH,'fm099999') || '01','RRRRMMDD'))),ROW_INTRANSIT.ITEM_NO ,WK_COMPANY_CODE,WK_ITEM_TYPE,WK_CURR_CODE,ROW_INI.SECTION_CODE,ROW_INI.PERSON_CODE);
		fetch C5 into ROW_CHK;
		if C5%notfound or C5%notfound is null then

			INSERT INTO FDAC_STOCK_REMAIN_TRN_hagai (
				DATA_DATE,			-- ????
				COMPANY_CODE,			-- ?????
				CUSTOMER_CODE,			-- ??????
				ITEM_NO,			-- ????
				WAREHOUSE_CODE,			-- ?????
				ITEM_TYPE,			-- ??????
				CURR_CODE,			-- ?????
				TOV,				-- ????
				STOCK_QTY,			-- ???
				STOCK_AMT,			-- ???
				STOCK_QTY_LAST,			-- ?????
				STOCK_AMT_LAST,			-- ?????
				STOCK_QTY_IN,			-- ?????
				STOCK_AMT_IN,			-- ?????
				STOCK_QTY_OUT,			-- ?????
				STOCK_AMT_OUT,			-- ?????
				STOCK_QTY_IN_DAY,		-- ?????
				STOCK_AMT_IN_DAY,		-- ?????
				STOCK_QTY_OUT_DAY,		-- ?????
				STOCK_AMT_OUT_DAY,		-- ?????
				DATA_SOURCE_TYPE,		-- ???????
				OPERATION_DATE,			-- ????
				OPERATION_TYPE,			-- ????
				ITEM,				-- ??
				SRC_CLASS_CODE,			-- ???????
				SECTION_CODE,			-- ?????
				PERSON_CODE,			-- ??????
				CUSTOMER_ITEM_NO,		-- ????????
				CUSTOMER,			-- ????
				SELL_COUNTRY_CODE,		-- ???????
				SELL_PREFECTURE_CODE,		-- ??????????
				WAREHOUSE,			-- ???
				WH_COUNTRY_CODE,		-- ??????
				WH_PREFECTURE_CODE,		-- ?????????
				WAREHOUSE_TYPE			-- ????
			) VALUES (
				trunc(last_day(to_date(to_char(ROW_INTRANSIT.LAST_MONTH,'fm099999') || '01','RRRRMMDD'))),		-- ????
				WK_COMPANY_CODE,							-- ?????
				NULL,									-- ??????
				ROW_INTRANSIT.ITEM_NO,							-- ????
				WK_COMPANY_CODE,							-- ?????
				WK_ITEM_TYPE,								-- ??????
				WK_CURR_CODE,								-- ?????
				WK_STANDARD_PRICE,							-- ????
				ROW_INTRANSIT.LAST_INVENTORY,						-- ???
				ROW_INTRANSIT.LAST_INVENTORY * WK_STANDARD_PRICE,			-- ???
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				ROW_INI.DATA_SOURCE_TYPE,						-- ???????
				WK_SYSDATE,								-- ????
				1,									-- ????
				substrb(WK_ITEM, 1, 30),						-- ??
				WK_CLASS_CODE,								-- ???????
				ROW_INI.SECTION_CODE,							-- ?????
				ROW_INI.PERSON_CODE,							-- ??????
				NULL,									-- ????????
				NULL,									-- ????
				NULL,									-- ???????
				NULL,									-- ??????????
				WK_COMPANY,								-- ???
				WK_COUNTRY_CODE,							-- ??????
				NULL,									-- ?????????
				4									-- ????
			);
		else
			UPDATE FDAC_STOCK_REMAIN_TRN_hagai set 
				STOCK_QTY	= ROW_CHK.STOCK_QTY + ROW_INTRANSIT.LAST_INVENTORY,
				STOCK_AMT	= ROW_CHK.STOCK_AMT + ( ROW_INTRANSIT.LAST_INVENTORY * WK_STANDARD_PRICE )
			WHERE CURRENT OF C5;
		end if;
		close C5;
	end loop;
	close C6;

--	COMMIT;
	END;
END FDAC_PGL_STOCK_LAST_MONTH_NEW;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."FDAC_PGL_STOCK_NEW" 
AS
/******************************************************
      ???????????????
  ????????????????
              ???????????????
            ????FDK K.Matsu
            ????2002/08/29
******************************************************/
  ERR_CODE CHAR(7);
  ERR_MSG VARCHAR2(255);
BEGIN
  DECLARE
	-- ???????
	CURSOR C1 IS
--2012/04/19??????????
--	SELECT * FROM WHINVENTORY WHERE THIS_INVENTORY != 0;
	SELECT * FROM WHINVENTORY;
	-- ??????
	CURSOR C2 IS
	SELECT COMPANY_CODE,COMPANY,CURR_CODE,COUNTRY_CODE FROM COMPANY WHERE COMPANY_TYPE = 0;
	-- ?????
	CURSOR C3( P1 in NUMBER ) IS
	SELECT ITEM,DESCRIPTION,STANDARD_PRICE,STOCK_SUBJECT_CODE,CLASS_CODE FROM ITEM WHERE ITEM_NO = P1;
	-- ??????????
	CURSOR C4 IS
	SELECT * FROM FDAC_INIT;
	-- ???????????
	CURSOR C5(P1 IN DATE,P2 IN NUMBER,P3 IN NUMBER,P4 IN NUMBER,P5 IN NUMBER,P6 IN NUMBER,P7 IN VARCHAR2) IS
	SELECT STOCK_QTY,STOCK_AMT,STOCK_QTY_LAST,STOCK_AMT_LAST,STOCK_QTY_IN,STOCK_AMT_IN,STOCK_QTY_OUT,STOCK_AMT_OUT
	FROM FDAC_STOCK_REMAIN_TRN_hagai WHERE DATA_DATE = P1 AND ITEM_NO = P2 AND WAREHOUSE_CODE = P3 AND ITEM_TYPE = P4 
	AND CURR_CODE = P5 AND SECTION_CODE = P6 AND PERSON_CODE = P7 FOR UPDATE;

	CURSOR C6 IS
	select item_no,this_inventory, last_inventory from WHINVENTORY_INTRANSIT ;


	ROW_STK C1%rowtype;
	ROW_COM C2%rowtype;
	ROW_ITM C3%rowtype;
	ROW_INI C4%rowtype;
	ROW_CHK C5%rowtype;
	ROW_INTRANSIT C6%rowtype;

	-- ?????
	WK_COMPANY_CODE			FDAC_STOCK_REMAIN_TRN_hagai.COMPANY_CODE%type;
	WK_COUNTRY_CODE			FDAC_STOCK_REMAIN_TRN_hagai.WH_COUNTRY_CODE%type;
	WK_COMPANY				FDAC_STOCK_REMAIN_TRN_hagai.CUSTOMER%type;
	WK_CURR_CODE			FDAC_STOCK_REMAIN_TRN_hagai.CURR_CODE%type;
	-- ????
	WK_ITEM					FDAC_STOCK_REMAIN_TRN_hagai.ITEM%type;
	WK_ITEM_TYPE			FDAC_STOCK_REMAIN_TRN_hagai.ITEM_TYPE%type;
	WK_STANDARD_PRICE		FDAC_STOCK_REMAIN_TRN_hagai.TOV%type;
	WK_CLASS_CODE			CLASS.CLASS_CODE%type;
	-- ???
	WK_SYSDATE				DATE   := sysdate;
	--????
	WK_INTRANSIT_THIS_QTY 		WHINVENTORY.THIS_INVENTORY%type;
	WK_INTRANSIT_LAST_QTY 		WHINVENTORY.THIS_INVENTORY%type;


  BEGIN
	make_wh_intransit_cl;
	-- ?????????? -----------------------------------------------------
	open C4;
    ROW_INI := null;
	fetch C4 into ROW_INI;
    close C4;
	-- ??????? -----------------------------------------------------------
	open C2;
	fetch C2 into ROW_COM;
	if C2%notfound or C2%notfound is null then
		WK_COMPANY_CODE		:= null;
		WK_COMPANY			:= null;
		WK_CURR_CODE		:= null;
		WK_COUNTRY_CODE		:= null;
	else
		WK_COMPANY_CODE		:= ROW_COM.COMPANY_CODE;
		WK_COMPANY			:= ROW_COM.COMPANY;
		WK_CURR_CODE		:= ROW_COM.CURR_CODE;
		WK_COUNTRY_CODE		:= ROW_COM.COUNTRY_CODE;
	end if;
	close C2;

	-- ??????? -----------------------------------------------------------
	open C1;
	loop
	fetch C1 into ROW_STK;
	exit when C1%notfound or C1%notfound is null;
		-- ?????? -------------------------------------------------------------
		open C3( ROW_STK.ITEM_NO );
		fetch C3 into ROW_ITM;
		if C3%notfound or C3%notfound is null then
			WK_ITEM			:= null;
			WK_STANDARD_PRICE	:= null;
			WK_CLASS_CODE		:= null;
		else
			WK_ITEM			:= ROW_ITM.DESCRIPTION;
			WK_STANDARD_PRICE	:= ROW_ITM.STANDARD_PRICE;
			WK_CLASS_CODE		:= ROW_ITM.CLASS_CODE;
		end if;
		-- ?????? -----
		WK_ITEM_TYPE := null;
		if ROW_ITM.STOCK_SUBJECT_CODE in (0) then
			WK_ITEM_TYPE := 6;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (1,2,7) then
			WK_ITEM_TYPE := 3;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (3) then
			WK_ITEM_TYPE := 8;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (4) then
			WK_ITEM_TYPE := 7;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (5) then
			WK_ITEM_TYPE := 0;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (6) then
			WK_ITEM_TYPE := 1;
		else
			WK_ITEM_TYPE := 6;
		end if;
		close C3;

		-- ???????? -------------------------------------------------------------
		open C5(trunc(WK_SYSDATE),ROW_STK.ITEM_NO,WK_COMPANY_CODE,WK_ITEM_TYPE,WK_CURR_CODE,ROW_INI.SECTION_CODE,ROW_INI.PERSON_CODE);
		fetch C5 into ROW_CHK;
		if C5%notfound or C5%notfound is null then

			INSERT INTO FDAC_STOCK_REMAIN_TRN_hagai (
				DATA_DATE,			-- ????
				COMPANY_CODE,			-- ?????
				CUSTOMER_CODE,			-- ??????
				ITEM_NO,			-- ????
				WAREHOUSE_CODE,			-- ?????
				ITEM_TYPE,			-- ??????
				CURR_CODE,			-- ?????
				TOV,				-- ????
				STOCK_QTY,			-- ???
				STOCK_AMT,			-- ???
				STOCK_QTY_LAST,			-- ?????
				STOCK_AMT_LAST,			-- ?????
				STOCK_QTY_IN,			-- ?????
				STOCK_AMT_IN,			-- ?????
				STOCK_QTY_OUT,			-- ?????
				STOCK_AMT_OUT,			-- ?????
				STOCK_QTY_IN_DAY,		-- ?????
				STOCK_AMT_IN_DAY,		-- ?????
				STOCK_QTY_OUT_DAY,		-- ?????
				STOCK_AMT_OUT_DAY,		-- ?????
				DATA_SOURCE_TYPE,		-- ???????
				OPERATION_DATE,			-- ????
				OPERATION_TYPE,			-- ????
				ITEM,				-- ??
				SRC_CLASS_CODE,			-- ???????
				SECTION_CODE,			-- ?????
				PERSON_CODE,			-- ??????
				CUSTOMER_ITEM_NO,		-- ????????
				CUSTOMER,			-- ????
				SELL_COUNTRY_CODE,		-- ???????
				SELL_PREFECTURE_CODE,		-- ??????????
				WAREHOUSE,			-- ???
				WH_COUNTRY_CODE,		-- ??????
				WH_PREFECTURE_CODE,		-- ?????????
				WAREHOUSE_TYPE			-- ????
			) VALUES (
				trunc(WK_SYSDATE),							-- ????
				WK_COMPANY_CODE,							-- ?????
				NULL,									-- ??????
				ROW_STK.ITEM_NO,							-- ????
				WK_COMPANY_CODE,							-- ?????
				WK_ITEM_TYPE,								-- ??????
				WK_CURR_CODE,								-- ?????
				WK_STANDARD_PRICE,							-- ????
				ROW_STK.THIS_INVENTORY,							-- ???
				ROW_STK.THIS_INVENTORY * WK_STANDARD_PRICE,				-- ???
				ROW_STK.LAST_INVENTORY,							-- ?????
				ROW_STK.LAST_INVENTORY * WK_STANDARD_PRICE,				-- ?????
				ROW_STK.RECEIVE1 + ROW_STK.OTHER_RECEIVE1,				-- ?????
				(ROW_STK.RECEIVE1 + ROW_STK.OTHER_RECEIVE1) * WK_STANDARD_PRICE,	-- ?????
				ROW_STK.ISSUE1 + ROW_STK.OTHER_ISSUE1,					-- ?????
				(ROW_STK.ISSUE1 + ROW_STK.OTHER_ISSUE1) * WK_STANDARD_PRICE,		-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				ROW_INI.DATA_SOURCE_TYPE,						-- ???????
				WK_SYSDATE,								-- ????
				0,									-- ????
				substrb(WK_ITEM, 1, 30),						-- ??
				WK_CLASS_CODE,								-- ???????
				ROW_INI.SECTION_CODE,							-- ?????
				ROW_INI.PERSON_CODE,							-- ??????
				NULL,									-- ????????
				NULL,									-- ????
				NULL,									-- ???????
				NULL,									-- ??????????
				WK_COMPANY,								-- ???
				WK_COUNTRY_CODE,							-- ??????
				NULL,									-- ?????????
				4									-- ????
			);
		else
			UPDATE FDAC_STOCK_REMAIN_TRN_hagai set 
				STOCK_QTY	= ROW_CHK.STOCK_QTY + ROW_STK.THIS_INVENTORY,
				STOCK_AMT	= ROW_CHK.STOCK_AMT + ( ROW_STK.THIS_INVENTORY * WK_STANDARD_PRICE ),
				STOCK_QTY_LAST	= ROW_CHK.STOCK_QTY_LAST + ROW_STK.LAST_INVENTORY,
				STOCK_AMT_LAST	= ROW_CHK.STOCK_AMT_LAST + ( ROW_STK.LAST_INVENTORY * WK_STANDARD_PRICE ),
				STOCK_QTY_IN	= ROW_CHK.STOCK_QTY_IN + ROW_STK.RECEIVE1 + ROW_STK.OTHER_RECEIVE1,
				STOCK_AMT_IN	= ROW_CHK.STOCK_AMT_IN + ( (ROW_STK.RECEIVE1 + ROW_STK.OTHER_RECEIVE1) * WK_STANDARD_PRICE ),
				STOCK_QTY_OUT	= ROW_CHK.STOCK_QTY_OUT + ROW_STK.ISSUE1 + ROW_STK.OTHER_ISSUE1,
				STOCK_AMT_OUT	= ROW_CHK.STOCK_AMT_OUT + ( (ROW_STK.ISSUE1 + ROW_STK.OTHER_ISSUE1) * WK_STANDARD_PRICE )
			WHERE CURRENT OF C5;
		end if;
		close C5;
	end loop;
	close C1;

	-- ??????? -----------------------------------------------------------
	open C6;
	loop
	fetch C6 into ROW_INTRANSIT;
	exit when C6%notfound or C6%notfound is null;
		-- ?????? -------------------------------------------------------------
		open C3( ROW_INTRANSIT.ITEM_NO );
		fetch C3 into ROW_ITM;
		if C3%notfound or C3%notfound is null then
			WK_ITEM			:= null;
			WK_STANDARD_PRICE	:= null;
			WK_CLASS_CODE		:= null;
		else
			WK_ITEM			:= ROW_ITM.DESCRIPTION;
			WK_STANDARD_PRICE	:= ROW_ITM.STANDARD_PRICE;
			WK_CLASS_CODE		:= ROW_ITM.CLASS_CODE;
		end if;
		-- ?????? -----
		WK_ITEM_TYPE := null;
		if ROW_ITM.STOCK_SUBJECT_CODE in (0) then
			WK_ITEM_TYPE := 6;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (1,2,7) then
			WK_ITEM_TYPE := 3;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (3) then
			WK_ITEM_TYPE := 8;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (4) then
			WK_ITEM_TYPE := 7;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (5) then
			WK_ITEM_TYPE := 0;
		elsif ROW_ITM.STOCK_SUBJECT_CODE in (6) then
			WK_ITEM_TYPE := 1;
		else
			WK_ITEM_TYPE := 6;
		end if;
		close C3;

		-- ???????? -------------------------------------------------------------
		open C5(trunc(WK_SYSDATE),ROW_INTRANSIT.ITEM_NO,WK_COMPANY_CODE,WK_ITEM_TYPE,WK_CURR_CODE,ROW_INI.SECTION_CODE,ROW_INI.PERSON_CODE);
		fetch C5 into ROW_CHK;
		if C5%notfound or C5%notfound is null then

			INSERT INTO FDAC_STOCK_REMAIN_TRN_hagai (
				DATA_DATE,			-- ????
				COMPANY_CODE,			-- ?????
				CUSTOMER_CODE,			-- ??????
				ITEM_NO,			-- ????
				WAREHOUSE_CODE,			-- ?????
				ITEM_TYPE,			-- ??????
				CURR_CODE,			-- ?????
				TOV,				-- ????
				STOCK_QTY,			-- ???
				STOCK_AMT,			-- ???
				STOCK_QTY_LAST,			-- ?????
				STOCK_AMT_LAST,			-- ?????
				STOCK_QTY_IN,			-- ?????
				STOCK_AMT_IN,			-- ?????
				STOCK_QTY_OUT,			-- ?????
				STOCK_AMT_OUT,			-- ?????
				STOCK_QTY_IN_DAY,		-- ?????
				STOCK_AMT_IN_DAY,		-- ?????
				STOCK_QTY_OUT_DAY,		-- ?????
				STOCK_AMT_OUT_DAY,		-- ?????
				DATA_SOURCE_TYPE,		-- ???????
				OPERATION_DATE,			-- ????
				OPERATION_TYPE,			-- ????
				ITEM,				-- ??
				SRC_CLASS_CODE,			-- ???????
				SECTION_CODE,			-- ?????
				PERSON_CODE,			-- ??????
				CUSTOMER_ITEM_NO,		-- ????????
				CUSTOMER,			-- ????
				SELL_COUNTRY_CODE,		-- ???????
				SELL_PREFECTURE_CODE,		-- ??????????
				WAREHOUSE,			-- ???
				WH_COUNTRY_CODE,		-- ??????
				WH_PREFECTURE_CODE,		-- ?????????
				WAREHOUSE_TYPE			-- ????
			) VALUES (
				trunc(WK_SYSDATE),							-- ????
				WK_COMPANY_CODE,							-- ?????
				NULL,									-- ??????
				ROW_INTRANSIT.ITEM_NO,							-- ????
				WK_COMPANY_CODE,							-- ?????
				WK_ITEM_TYPE,								-- ??????
				WK_CURR_CODE,								-- ?????
				WK_STANDARD_PRICE,							-- ????
				ROW_INTRANSIT.THIS_INVENTORY,							-- ???
				ROW_INTRANSIT.THIS_INVENTORY * WK_STANDARD_PRICE,				-- ???
				ROW_INTRANSIT.LAST_INVENTORY,							-- ?????
				ROW_INTRANSIT.LAST_INVENTORY * WK_STANDARD_PRICE,				-- ?????
				0,									-- ?????
				0,								-- ?????
				0,								-- ?????
				0,								-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				0,									-- ?????
				ROW_INI.DATA_SOURCE_TYPE,						-- ???????
				WK_SYSDATE,								-- ????
				0,									-- ????
				substrb(WK_ITEM, 1, 30),						-- ??
				WK_CLASS_CODE,								-- ???????
				ROW_INI.SECTION_CODE,							-- ?????
				ROW_INI.PERSON_CODE,							-- ??????
				NULL,									-- ????????
				NULL,									-- ????
				NULL,									-- ???????
				NULL,									-- ??????????
				WK_COMPANY,								-- ???
				WK_COUNTRY_CODE,							-- ??????
				NULL,									-- ?????????
				4									-- ????
			);
		else
			UPDATE FDAC_STOCK_REMAIN_TRN_hagai set 
				STOCK_QTY	= ROW_CHK.STOCK_QTY + ROW_INTRANSIT.THIS_INVENTORY,
				STOCK_AMT	= ROW_CHK.STOCK_AMT + ( ROW_INTRANSIT.THIS_INVENTORY * WK_STANDARD_PRICE ),
				STOCK_QTY_LAST	= ROW_CHK.STOCK_QTY_LAST + ROW_INTRANSIT.LAST_INVENTORY,
				STOCK_AMT_LAST	= ROW_CHK.STOCK_AMT_LAST + ( ROW_INTRANSIT.LAST_INVENTORY * WK_STANDARD_PRICE )
			WHERE CURRENT OF C5;
		end if;
		close C5;
	end loop;
	close C6;

	-- ??????????? -------------------------------------------------------------
	FDAC_PGL_STOCK_LAST_MONTH_NEW;
	COMMIT;
	END;
END FDAC_PGL_STOCK_NEW;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."FDAC_PSALES_BUDGET" 
AS
/******************************************************
      ???????????????
  ????????????????
              ???????????????
            ????FDK K.Matsu
            ????2002/10/22
******************************************************/
BEGIN
  BEGIN
	--??????????????????
           insert into FDAC_SALES_TRN(
		DATA_TYPE,
		COMPANY_CODE,
		CUSTOMER_CODE,
		ITEM_NO,
		DATA_DATE,
		QUANTITY,
		SP,
		SP_CURR_CODE,
		SALES_AMOUNT,
		COST,
		COST_CURR_CODE,
		COST_AMOUNT,
		ITEM_TYPE,
		REBATE,
		DATA_SOURCE_TYPE,
		CONSUMPTION_TAX,
		NEW_SP,
		LAST_SP,
		CHECK_NO,
		INVOICE_NO,
		OPERATION_DATE,
		SHIPTO_CODE,
		INFO_TYPE,
		ORDER_DATE,
		CUSTOMER_PO_DATE,
		CUSTOMER_PO_NO,
		CUSTOMER_LINE_NO,
		ORDER_TYPE,
		WAREHOUSE_CODE,
		OPERATION_TYPE,
		ITEM,
		SRC_CLASS_CODE,
		SECTION_CODE,
		PERSON_CODE,
		CUSTOMER_ITEM_NO,
		CUSTOMER,
		SELL_COUNTRY_CODE,
		SELL_PREFECTURE_CODE,
		WAREHOUSE,
		WH_COUNTRY_CODE,
		WH_PREFECTURE_CODE,
		WAREHOUSE_TYPE,
		SHIPTO,
		SHIP_COUNTRY_CODE,
		SHIP_PREFECTURE_CODE,
		SHIPTO_TYPE,
		HISTORY_DATE
           )
           select
		110,
		c0.COMPANY_CODE,
		b.CUSTOMER_CODE,
		b.ITEM_NO,
		TRUNC(b.SALES_DATE),
		b.QTY,
		b.SP,
		b.CURR_CODE,
		b.QTY * b.SP,
		b.COST,
		b.COST_CURR_CODE,
		b.QTY * b.COST,
		0,	-- ??????????????????
		0,	-- ?????
		f.DATA_SOURCE_TYPE,
		0,	-- ???
		0,	-- ???
		0,	-- ???
		NULL,	-- ????
		NULL,	-- ???????
		sysdate,
		NULL,	-- ??????
		1,	-- ?????????
		NULL,	-- ??????
		NULL,	-- ??????
		NULL,	-- ??????
		NULL,	-- ???????
		NULL,	-- ?????
		NULL,	-- ?????
		1,	-- ??????????
		i.DESCRIPTION,
		i.CLASS_CODE,
		f.SECTION_CODE,
		b.PERSON_CODE,
		NULL,	-- ????????
		c.COMPANY,
		decode(c.COUNTRY_CODE,192,100,c.COUNTRY_CODE),
		NULL,	-- ???????
		NULL,	-- ???
		NULL,	-- ??????
		NULL,	-- ?????????
		NULL,	-- ????
		NULL,	-- ????
		NULL,	-- ???????
		NULL,	-- ??????????
		NULL,	-- ?????
		NULL	-- ??????
	FROM BUDGET b,BUDGET_ITEM i,COMPANY c,FDAC_INIT f,ACCOUNT_MONTH a,
		(SELECT * FROM COMPANY WHERE COMPANY_TYPE = 0) c0
	WHERE to_char(b.SALES_DATE,'YYYYMM') >= to_char(a.AC_YEAR,'YYYYMM')
	  AND b.ITEM_NO = i.ITEM_NO
	  AND b.CUSTOMER_CODE = c.COMPANY_CODE;
  END;
END FDAC_PSALES_BUDGET;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."FDAC_PSALES_PLAN" 
AS
/******************************************************
      ???????????????
  ????????????????
              ???????????????
            ????FDK K.Matsu
            ????2002/10/22
******************************************************/
BEGIN
  DECLARE
	-- ???
	WK_SYSDATE				DATE   := sysdate;
  BEGIN
	--??????????????????
           insert into FDAC_SALES_TRN(
		DATA_TYPE,
		COMPANY_CODE,
		CUSTOMER_CODE,
		ITEM_NO,
		DATA_DATE,
		QUANTITY,
		SP,
		SP_CURR_CODE,
		SALES_AMOUNT,
		COST,
		COST_CURR_CODE,
		COST_AMOUNT,
		ITEM_TYPE,
		REBATE,
		DATA_SOURCE_TYPE,
		CONSUMPTION_TAX,
		NEW_SP,
		LAST_SP,
		CHECK_NO,
		INVOICE_NO,
		OPERATION_DATE,
		SHIPTO_CODE,
		INFO_TYPE,
		ORDER_DATE,
		CUSTOMER_PO_DATE,
		CUSTOMER_PO_NO,
		CUSTOMER_LINE_NO,
		ORDER_TYPE,
		WAREHOUSE_CODE,
		OPERATION_TYPE,
		ITEM,
		SRC_CLASS_CODE,
		SECTION_CODE,
		PERSON_CODE,
		CUSTOMER_ITEM_NO,
		CUSTOMER,
		SELL_COUNTRY_CODE,
		SELL_PREFECTURE_CODE,
		WAREHOUSE,
		WH_COUNTRY_CODE,
		WH_PREFECTURE_CODE,
		WAREHOUSE_TYPE,
		SHIPTO,
		SHIP_COUNTRY_CODE,
		SHIP_PREFECTURE_CODE,
		SHIPTO_TYPE,
		HISTORY_DATE
           )
           select
		110,
		c0.COMPANY_CODE,
		p.CUSTOMER_CODE,
		p.ITEM_NO,
		TRUNC(p.DATA_DATE),
		p.QTY,
		p.SP,
		p.CURR_CODE,
		p.QTY * p.SP,
		p.COST,
		p.COST_CURR_CODE,
		p.QTY * p.COST,
		0,	-- ??????????????????
		0,	-- ?????
		f.DATA_SOURCE_TYPE,
		0,	-- ???
		0,	-- ???
		0,	-- ???
		NULL,	-- ????
		NULL,	-- ???????
		sysdate,
		NULL,	-- ??????
		2,	-- ?????????
		NULL,	-- ??????
		NULL,	-- ??????
		NULL,	-- ??????
		NULL,	-- ???????
		NULL,	-- ?????
		NULL,	-- ?????
		1,	-- ??????????
		i.DESCRIPTION,
		i.CLASS_CODE,
		f.SECTION_CODE,
		p.PERSON_CODE,
		NULL,	-- ????????
		c.COMPANY,
		decode(c.COUNTRY_CODE,192,100,c.COUNTRY_CODE),
		NULL,	-- ???????
		NULL,	-- ???
		NULL,	-- ??????
		NULL,	-- ?????????
		NULL,	-- ????
		NULL,	-- ????
		NULL,	-- ???????
		NULL,	-- ??????????
		NULL,	-- ?????
		TRUNC(WK_SYSDATE)	-- ??????
	FROM SALES_PLAN p,ITEM i,COMPANY c,FDAC_INIT f,ACCOUNT_MONTH a,
		(SELECT * FROM COMPANY WHERE COMPANY_TYPE = 0) c0
	WHERE to_char(p.DATA_DATE,'YYYYMM') >= to_char(a.AC_MONTH,'YYYYMM')
	  AND p.ITEM_NO = i.ITEM_NO
	  AND p.CUSTOMER_CODE = c.COMPANY_CODE;
  END;
END FDAC_PSALES_PLAN;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."FDAC_REQUIRE_TRN_PRC" 
as
begin
 declare

    WK_REC  FDAC_REQUIRE_TRN%rowtype ;

    BAL_REC BALANCE%rowtype ;
    COM_REC COMPANY%rowtype ;
    COM2_REC COMPANY%rowtype ;
    ITM_REC ITEM%rowtype ;
    PSN_REC PERSON%rowtype ;
    ACM_REC ACCOUNT_MONTH%rowtype ;
    INI_REC FDAC_INIT%rowtype ;

   /* BALANCE */
    cursor C_BAL
    is
     select b.*
     from balance b,
          item i
     where b.item_no = i.item_no
       and nvl(i.stock_subject_code,0) < '5'
       and b.demand_type is not null
       and b.allocate_qty > 0
     order by b.item_no;

   /* INIT FILE for FDAC */
    cursor C_INI
    is
     select * from fdac_init
      ;

   /* MY COMPANY */
    cursor C_MYCOM
    is
     select * from company
     where company_type = 0 ;

   /* COMPANY MASTER */
    cursor C_COM(PARAM1 in number)
    is
     select * from company
     where company_code = PARAM1 ;

   /* ITEM MASTER */
    cursor C_ITM(PARAM1 in number)
    is
    select * from item
    where item_no = PARAM1 ;

   /* ACCOUNT MONTH */
    cursor C_ACM
    is
     select * from account_month
     ;

 begin

     /* ?? */
    delete from fdac_require_trn;

    /* ?????????? */
    open C_INI ;
        COM_REC := null ;
        fetch C_INI into INI_REC;
    close C_INI ;

    /* ????????????? */
    open C_MYCOM ;
        COM_REC := null ;
        fetch C_MYCOM into COM_REC;
    close C_MYCOM ;

    /* ??????? */
    open C_ACM ;
        ACM_REC := null ;
        fetch C_ACM into ACM_REC;
    close C_ACM ;

    /* ???? */
    open C_BAL;
        BAL_REC := null ;
        loop
            fetch C_BAL into BAL_REC;
            exit when C_BAL%notfound ;

                /* ITEM MASTER?? */
                 open C_ITM(BAL_REC.ITEM_NO);
                     ITM_REC := null ;
                     fetch C_ITM into ITM_REC ;
                 close C_ITM ;

                /* COMPANY MASTER?? */
                 open C_COM(to_number(BAL_REC.ALLOCATE_ST));
                     COM2_REC := null ;
                     fetch C_COM into COM2_REC ;
                 close C_COM ;

                 WK_REC := null;

                 WK_REC.COMPANY_CODE          := COM_REC.COMPANY_CODE;
                 WK_REC.CUSTOMER_CODE         := to_number(BAL_REC.ALLOCATE_ST);
                 WK_REC.ITEM_NO               := BAL_REC.ITEM_NO;
                 WK_REC.DELIVERY_DATE         := BAL_REC.DEMAND_DATE;
                 WK_REC.QUANTITY              := BAL_REC.ALLOCATE_QTY;
                 WK_REC.COST                  := ITM_REC.STANDARD_PRICE;
                 WK_REC.COST_CURR_CODE        := ITM_REC.CURR_CODE;
                 WK_REC.COST_AMOUNT           := round(ITM_REC.STANDARD_PRICE * BAL_REC.ALLOCATE_QTY,2);
                 WK_REC.ITEM_TYPE             := 3;
                 WK_REC.DATA_SOURCE_TYPE      := INI_REC.DATA_SOURCE_TYPE;
                 WK_REC.OPERATION_DATE        := sysdate;
                 WK_REC.OPERATION_TYPE        := 1;
                 WK_REC.ITEM                  := ITM_REC.ITEM;
                 WK_REC.SRC_CLASS_CODE        := ITM_REC.CLASS_CODE;
                 WK_REC.SECTION_CODE          := ITM_REC.SECTION_CODE;
                 WK_REC.PERSON_CODE           := INI_REC.PERSON_CODE;
                 WK_REC.CUSTOMER              := COM2_REC.COMPANY;
                 WK_REC.SELL_COUNTRY_CODE     := COM2_REC.COUNTRY_CODE;
                 WK_REC.SELL_PREFECTURE_CODE  := NULL;
                 WK_REC.ACCOUNT_MONTH         := to_char(ACM_REC.AC_MONTH,'YYYYMM');

                /* ??????????? */
                 insert into fdac_require_trn(
                    COMPANY_CODE               ,CUSTOMER_CODE               ,ITEM_NO                     ,DELIVERY_DATE               ,
                    QUANTITY                   ,COST                        ,COST_CURR_CODE              ,COST_AMOUNT                 ,
                    ITEM_TYPE                  ,DATA_SOURCE_TYPE            ,OPERATION_DATE              ,OPERATION_TYPE              ,
                    ITEM                       ,SRC_CLASS_CODE              ,SECTION_CODE                ,PERSON_CODE                 ,
                    CUSTOMER                   ,SELL_COUNTRY_CODE           ,SELL_PREFECTURE_CODE        ,ACCOUNT_MONTH
                 ) values (
                    WK_REC.COMPANY_CODE        ,WK_REC.CUSTOMER_CODE        ,WK_REC.ITEM_NO              ,WK_REC.DELIVERY_DATE        ,
                    WK_REC.QUANTITY            ,WK_REC.COST                 ,WK_REC.COST_CURR_CODE       ,WK_REC.COST_AMOUNT          ,
                    WK_REC.ITEM_TYPE           ,WK_REC.DATA_SOURCE_TYPE     ,WK_REC.OPERATION_DATE       ,WK_REC.OPERATION_TYPE       ,
                    WK_REC.ITEM                ,WK_REC.SRC_CLASS_CODE       ,WK_REC.SECTION_CODE         ,WK_REC.PERSON_CODE          ,
                    WK_REC.CUSTOMER            ,WK_REC.SELL_COUNTRY_CODE    ,WK_REC.SELL_PREFECTURE_CODE ,WK_REC.ACCOUNT_MONTH
                 ) ;


        end loop;
    close C_BAL;
   end;
end FDAC_REQUIRE_TRN_PRC;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."FDAC_SALES_TRN_DO_PRC" (
    V_DO_NO      in varchar2,
    V_SIGN       in varchar2,   /* P:Plus,M:Minus  */
    v_bl_date in date
)
is
begin
 declare

    WK_REC  FDAC_SALES_TRN%rowtype ;

    COM_REC COMPANY%rowtype ;
    CUS_REC COMPANY%rowtype ;
    ITM_REC ITEM%rowtype ;
    DOS_REC DO_SO%rowtype ;
    DOH_REC DO_HEADER%rowtype ;
    SOH_REC SO_HEADER%rowtype ;
    PSN_REC PERSON%rowtype ;
    INI_REC FDAC_INIT%rowtype ;
   
    /* DO SO */
    cursor C_DOS(PARAM1 in varchar2)
    is
     select * from do_so
     where do_no = PARAM1
       and item_no is not null
       and u_price <> 0
     order by line_no 
     ;

  
   /* DO HEADER */
    cursor C_DOH(PARAM1 in varchar2)
    is
     select * from do_header 
     where do_no = PARAM1 ;

   /* SO HEADER */
    cursor C_SOH(PARAM1 in varchar2)
    is
     select * from SO_HEADER 
     where SO_NO = PARAM1 ;
   
   /* INIT FILE for FDAC */
    cursor C_INI
    is
     select * from fdac_init 
      ;
   
   /* MY COMPANY */
    cursor C_MYCOM
    is
     select * from company 
     where company_type = 0 ;

   /* COMPANY MASTER */
    cursor C_COM(PARAM1 in number)
    is
     select * from company 
     where company_code = PARAM1 ;

   /* ITEM MASTER */
    cursor C_ITM(PARAM1 in number)
    is
    select * from item 
    where item_no = PARAM1 ;

   /* PERSON MASTER */
    cursor C_PSN(PARAM1 in varchar2)
    is
    select * from person 
    where person_code = PARAM1 ;

 begin

    /* ?????????? */
    open C_INI ;
        COM_REC := null ;
        fetch C_INI into INI_REC;
    close C_INI ;

    /* ????????????? */
    open C_MYCOM ;
        COM_REC := null ;
        fetch C_MYCOM into COM_REC;
    close C_MYCOM ;
    

    /* HEADER??  */
    open C_DOH(V_DO_NO) ;
        DOH_REC := null ;
        fetch C_DOH into DOH_REC;
    close C_DOH ;
    
    /* ????  */
    open C_COM(DOH_REC.CUSTOMER_CODE) ;
        CUS_REC := null ;
        fetch C_COM into CUS_REC;
    close C_COM ;

   
    /* ???? */
    open C_DOS(V_DO_NO);
        DOS_REC := null ;
        loop
            fetch C_DOS into DOS_REC;
            exit when C_DOS%notfound ;
  
                /* ITEM MASTER?? */
                 open C_ITM(DOS_REC.ITEM_NO);
                     ITM_REC := null ;
                     fetch C_ITM into ITM_REC ;
                 close C_ITM ;

                /* SO HEADER ?? */
                 open C_SOH(DOS_REC.SO_NO);
                     SOH_REC := null ;
                     fetch C_SOH into SOH_REC ;
                 close C_SOH ;

                /* PERSON MASTER?? */
                 open C_PSN(SOH_REC.PERSON_CODE);
                     PSN_REC := null ;
                     fetch C_PSN into PSN_REC ;
                 close C_PSN ;

                 
                
                 If CUS_REC.COUNTRY_CODE =192 Then
                    WK_REC.SELL_COUNTRY_CODE := 0 ;
                 Else
                    WK_REC.SELL_COUNTRY_CODE := CUS_REC.COUNTRY_CODE ;
                 End If ;

                 If V_SIGN = 'P' Then
                      WK_REC.DATA_TYPE := 110 ;
                      WK_REC.QUANTITY := DOS_REC.SO_QTY ;
                      WK_REC.SP := nvl(DOS_REC.U_PRICE,0) ;
                      WK_REC.SALES_AMOUNT := ROUND(DOS_REC.SO_QTY * nvl(DOS_REC.U_PRICE,0),2) ;
                      WK_REC.CONSUMPTION_TAX :=  ROUND(ROUND(DOS_REC.SO_QTY * DOS_REC.U_PRICE,2) * nvl(DOH_REC.GST_RATE,0) / 100,2) ;
                      WK_REC.COST := ITM_REC.STANDARD_PRICE ;
                      WK_REC.COST_AMOUNT :=  ROUND(ITM_REC.STANDARD_PRICE * DOS_REC.SO_QTY,2) ;

                      WK_REC.SP_CURR_CODE   := DOH_REC.CURR_CODE ;
                      WK_REC.COST_CURR_CODE := ITM_REC.CURR_CODE ;
                 Else
                      WK_REC.DATA_TYPE := 120 ;
                      WK_REC.QUANTITY := DOS_REC.SO_QTY * -1 ;
                      WK_REC.SP := nvl(DOS_REC.U_PRICE,0) ;
                      WK_REC.SALES_AMOUNT := ROUND(DOS_REC.SO_QTY *nvl(DOS_REC.U_PRICE,0) * -1,2) ;
                      WK_REC.CONSUMPTION_TAX :=  ROUND(ROUND(DOS_REC.SO_QTY * DOS_REC.U_PRICE * -1,2) * nvl(DOH_REC.GST_RATE,0) / 100,2) ;
                      WK_REC.COST := ITM_REC.STANDARD_PRICE * -1 ;
                      WK_REC.COST_AMOUNT := ROUND(ITM_REC.STANDARD_PRICE * DOS_REC.SO_QTY * -1,2) ;

                      WK_REC.SP_CURR_CODE   := DOH_REC.CURR_CODE ;
                      WK_REC.COST_CURR_CODE := ITM_REC.CURR_CODE ;
                 End If ;

                /* ??????????? */
                 insert into fdac_sales_trn(
                    DATA_TYPE                  , COMPANY_CODE               , CUSTOMER_CODE              , ITEM_NO                    ,
                    DATA_DATE                  , QUANTITY                   , SP                         , SP_CURR_CODE               ,
                    SALES_AMOUNT               , COST                       , COST_CURR_CODE             , COST_AMOUNT                ,
                    ITEM_TYPE                  , REBATE                     , DATA_SOURCE_TYPE           , CONSUMPTION_TAX            ,
                    NEW_SP                     , LAST_SP                    , CHECK_NO                   , INVOICE_NO                 ,
                    OPERATION_DATE             , SHIPTO_CODE                , INFO_TYPE                  ,
                    ORDER_DATE                 , CUSTOMER_PO_DATE           , CUSTOMER_PO_NO             , CUSTOMER_LINE_NO           ,
                    ORDER_TYPE                 , WAREHOUSE_CODE             , OPERATION_TYPE             , ITEM                       ,
                    SRC_CLASS_CODE             , SECTION_CODE               , PERSON_CODE                , CUSTOMER_ITEM_NO           ,
                    CUSTOMER                   , SELL_COUNTRY_CODE          , SELL_PREFECTURE_CODE       , WAREHOUSE                  ,
                    WH_COUNTRY_CODE            , WH_PREFECTURE_CODE         , WAREHOUSE_TYPE             , SHIPTO                     ,
                    SHIP_COUNTRY_CODE          , SHIP_PREFECTURE_CODE       , SHIPTO_TYPE                , HISTORY_DATE
                 ) values ( 
                    WK_REC.DATA_TYPE           , COM_REC.COMPANY_CODE       , DOH_REC.CUSTOMER_CODE      , DOS_REC.ITEM_NO            ,
                    v_bl_date                  , WK_REC.QUANTITY            , WK_REC.SP                  , WK_REC.SP_CURR_CODE        ,
                    WK_REC.SALES_AMOUNT        , WK_REC.COST                , WK_REC.COST_CURR_CODE      , WK_REC.COST_AMOUNT         ,
                    1                          , 0                          , INI_REC.DATA_SOURCE_TYPE   , WK_REC.CONSUMPTION_TAX     ,
                    0                          , 0                          , substr(DOH_REC.DO_NO || to_char(DOS_REC.LINE_NO,'fm099'),1,23) , substr(DOH_REC.INV_NO,1,23),
                    SYSDATE                    , null                       , 0                          ,
                    SOH_REC.SO_DATE            , SOH_REC.SO_DATE            , DOS_REC.CUSTOMER_PO_NO     , DOS_REC.SO_LINE_NO         ,
                    'U'                        , null                       , 0                          , ITM_REC.DESCRIPTION        ,
                    ITM_REC.CLASS_CODE         , INI_REC.SECTION_CODE       , INI_REC.PERSON_CODE        , DOS_REC.CUSTOMER_PART_NO   ,
                    substr(CUS_REC.COMPANY,1,40),WK_REC.SELL_COUNTRY_CODE   , null                       , null                       ,
                    null                       , null                       , null                       , null                       ,
                    null                       , null                       , null                       , null
                 ) ;

                /* ????????????? 20131203 Y.Hagai */
                 insert into fdac_sales_trn_ruiseki(
                    DATA_TYPE                  , COMPANY_CODE               , CUSTOMER_CODE              , ITEM_NO                    ,
                    DATA_DATE                  , QUANTITY                   , SP                         , SP_CURR_CODE               ,
                    SALES_AMOUNT               , COST                       , COST_CURR_CODE             , COST_AMOUNT                ,
                    ITEM_TYPE                  , REBATE                     , DATA_SOURCE_TYPE           , CONSUMPTION_TAX            ,
                    NEW_SP                     , LAST_SP                    , CHECK_NO                   , INVOICE_NO                 ,
                    OPERATION_DATE             , SHIPTO_CODE                , INFO_TYPE                  ,
                    ORDER_DATE                 , CUSTOMER_PO_DATE           , CUSTOMER_PO_NO             , CUSTOMER_LINE_NO           ,
                    ORDER_TYPE                 , WAREHOUSE_CODE             , OPERATION_TYPE             , ITEM                       ,
                    SRC_CLASS_CODE             , SECTION_CODE               , PERSON_CODE                , CUSTOMER_ITEM_NO           ,
                    CUSTOMER                   , SELL_COUNTRY_CODE          , SELL_PREFECTURE_CODE       , WAREHOUSE                  ,
                    WH_COUNTRY_CODE            , WH_PREFECTURE_CODE         , WAREHOUSE_TYPE             , SHIPTO                     ,
                    SHIP_COUNTRY_CODE          , SHIP_PREFECTURE_CODE       , SHIPTO_TYPE                , HISTORY_DATE
                 ) values ( 
                    WK_REC.DATA_TYPE           , COM_REC.COMPANY_CODE       , DOH_REC.CUSTOMER_CODE      , DOS_REC.ITEM_NO            ,
                    v_bl_date                  , WK_REC.QUANTITY            , WK_REC.SP                  , WK_REC.SP_CURR_CODE        ,
                    WK_REC.SALES_AMOUNT        , WK_REC.COST                , WK_REC.COST_CURR_CODE      , WK_REC.COST_AMOUNT         ,
                    1                          , 0                          , INI_REC.DATA_SOURCE_TYPE   , WK_REC.CONSUMPTION_TAX     ,
                    0                          , 0                          , substr(DOH_REC.DO_NO || to_char(DOS_REC.LINE_NO,'fm099'),1,23) , substr(DOH_REC.INV_NO,1,23),
                    SYSDATE                    , null                       , 0                          ,
                    SOH_REC.SO_DATE            , SOH_REC.SO_DATE            , DOS_REC.CUSTOMER_PO_NO     , DOS_REC.SO_LINE_NO         ,
                    'U'                        , null                       , 0                          , ITM_REC.DESCRIPTION        ,
                    ITM_REC.CLASS_CODE         , INI_REC.SECTION_CODE       , INI_REC.PERSON_CODE        , DOS_REC.CUSTOMER_PART_NO   ,
                    substr(CUS_REC.COMPANY,1,40),WK_REC.SELL_COUNTRY_CODE   , null                       , null                       ,
                    null                       , null                       , null                       , null                       ,
                    null                       , null                       , null                       , sysdate
                 ) ;

                  
        end loop;
    close C_DOS;

--2013.12.03 Y.Hagai ????
    delete from FDAC_SALES_TRN_WK; 
    insert into FDAC_SALES_TRN_WK  select distinct * from FDAC_SALES_TRN;

    delete from FDAC_SALES_TRN;
    insert into FDAC_SALES_TRN  select * from FDAC_SALES_TRN_WK;

   end;
end FDAC_SALES_TRN_DO_PRC;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."FDAC_SALES_TRN_DO_PRC_20141009" (
    V_DO_NO      in varchar2,
    V_SIGN       in varchar2,   /* P:Plus,M:Minus  */
    v_bl_date in date
)
is
begin
 declare

    WK_REC  FDAC_SALES_TRN%rowtype ;

    COM_REC COMPANY%rowtype ;
    CUS_REC COMPANY%rowtype ;
    ITM_REC ITEM%rowtype ;
    DOS_REC DO_SO%rowtype ;
    DOH_REC DO_HEADER%rowtype ;
    SOH_REC SO_HEADER%rowtype ;
    PSN_REC PERSON%rowtype ;
    INI_REC FDAC_INIT%rowtype ;
   
    /* DO SO */
    cursor C_DOS(PARAM1 in varchar2)
    is
     select * from do_so
     where do_no = PARAM1
       and item_no is not null
       and u_price <> 0
     order by line_no 
     ;

  
   /* DO HEADER */
    cursor C_DOH(PARAM1 in varchar2)
    is
     select * from do_header 
     where do_no = PARAM1 ;

   /* SO HEADER */
    cursor C_SOH(PARAM1 in varchar2)
    is
     select * from SO_HEADER 
     where SO_NO = PARAM1 ;
   
   /* INIT FILE for FDAC */
    cursor C_INI
    is
     select * from fdac_init 
      ;
   
   /* MY COMPANY */
    cursor C_MYCOM
    is
     select * from company 
     where company_type = 0 ;

   /* COMPANY MASTER */
    cursor C_COM(PARAM1 in number)
    is
     select * from company 
     where company_code = PARAM1 ;

   /* ITEM MASTER */
    cursor C_ITM(PARAM1 in number)
    is
    select * from item 
    where item_no = PARAM1 ;

   /* PERSON MASTER */
    cursor C_PSN(PARAM1 in varchar2)
    is
    select * from person 
    where person_code = PARAM1 ;

 begin

    /* ?????????? */
    open C_INI ;
        COM_REC := null ;
        fetch C_INI into INI_REC;
    close C_INI ;

    /* ????????????? */
    open C_MYCOM ;
        COM_REC := null ;
        fetch C_MYCOM into COM_REC;
    close C_MYCOM ;
    

    /* HEADER??  */
    open C_DOH(V_DO_NO) ;
        DOH_REC := null ;
        fetch C_DOH into DOH_REC;
    close C_DOH ;
    
    /* ????  */
    open C_COM(DOH_REC.CUSTOMER_CODE) ;
        CUS_REC := null ;
        fetch C_COM into CUS_REC;
    close C_COM ;

   
    /* ???? */
    open C_DOS(V_DO_NO);
        DOS_REC := null ;
        loop
            fetch C_DOS into DOS_REC;
            exit when C_DOS%notfound ;
  
                /* ITEM MASTER?? */
                 open C_ITM(DOS_REC.ITEM_NO);
                     ITM_REC := null ;
                     fetch C_ITM into ITM_REC ;
                 close C_ITM ;

                /* SO HEADER ?? */
                 open C_SOH(DOS_REC.SO_NO);
                     SOH_REC := null ;
                     fetch C_SOH into SOH_REC ;
                 close C_SOH ;

                /* PERSON MASTER?? */
                 open C_PSN(SOH_REC.PERSON_CODE);
                     PSN_REC := null ;
                     fetch C_PSN into PSN_REC ;
                 close C_PSN ;

                 
                
                 If CUS_REC.COUNTRY_CODE =192 Then
                    WK_REC.SELL_COUNTRY_CODE := 0 ;
                 Else
                    WK_REC.SELL_COUNTRY_CODE := CUS_REC.COUNTRY_CODE ;
                 End If ;

                 If V_SIGN = 'P' Then
                      WK_REC.DATA_TYPE := 110 ;
                      WK_REC.QUANTITY := DOS_REC.SO_QTY ;
                      WK_REC.SP := nvl(DOS_REC.U_PRICE,0) ;
                      WK_REC.SALES_AMOUNT := ROUND(DOS_REC.SO_QTY * nvl(DOS_REC.U_PRICE,0),2) ;
                      WK_REC.CONSUMPTION_TAX :=  ROUND(ROUND(DOS_REC.SO_QTY * DOS_REC.U_PRICE,2) * nvl(DOH_REC.GST_RATE,0) / 100,2) ;
                      WK_REC.COST := ITM_REC.STANDARD_PRICE ;
                      WK_REC.COST_AMOUNT :=  ROUND(ITM_REC.STANDARD_PRICE * DOS_REC.SO_QTY,2) ;

                      WK_REC.SP_CURR_CODE   := DOH_REC.CURR_CODE ;
                      WK_REC.COST_CURR_CODE := ITM_REC.CURR_CODE ;
                 Else
                      WK_REC.DATA_TYPE := 120 ;
                      WK_REC.QUANTITY := DOS_REC.SO_QTY * -1 ;
                      WK_REC.SP := nvl(DOS_REC.U_PRICE,0) ;
                      WK_REC.SALES_AMOUNT := ROUND(DOS_REC.SO_QTY *nvl(DOS_REC.U_PRICE,0) * -1,2) ;
                      WK_REC.CONSUMPTION_TAX :=  ROUND(ROUND(DOS_REC.SO_QTY * DOS_REC.U_PRICE * -1,2) * nvl(DOH_REC.GST_RATE,0) / 100,2) ;
                      WK_REC.COST := ITM_REC.STANDARD_PRICE * -1 ;
                      WK_REC.COST_AMOUNT := ROUND(ITM_REC.STANDARD_PRICE * DOS_REC.SO_QTY * -1,2) ;

                      WK_REC.SP_CURR_CODE   := DOH_REC.CURR_CODE ;
                      WK_REC.COST_CURR_CODE := ITM_REC.CURR_CODE ;
                 End If ;

                /* ??????????? */
                 insert into fdac_sales_trn(
                    DATA_TYPE                  , COMPANY_CODE               , CUSTOMER_CODE              , ITEM_NO                    ,
                    DATA_DATE                  , QUANTITY                   , SP                         , SP_CURR_CODE               ,
                    SALES_AMOUNT               , COST                       , COST_CURR_CODE             , COST_AMOUNT                ,
                    ITEM_TYPE                  , REBATE                     , DATA_SOURCE_TYPE           , CONSUMPTION_TAX            ,
                    NEW_SP                     , LAST_SP                    , CHECK_NO                   , INVOICE_NO                 ,
                    OPERATION_DATE             , SHIPTO_CODE                , INFO_TYPE                  ,
                    ORDER_DATE                 , CUSTOMER_PO_DATE           , CUSTOMER_PO_NO             , CUSTOMER_LINE_NO           ,
                    ORDER_TYPE                 , WAREHOUSE_CODE             , OPERATION_TYPE             , ITEM                       ,
                    SRC_CLASS_CODE             , SECTION_CODE               , PERSON_CODE                , CUSTOMER_ITEM_NO           ,
                    CUSTOMER                   , SELL_COUNTRY_CODE          , SELL_PREFECTURE_CODE       , WAREHOUSE                  ,
                    WH_COUNTRY_CODE            , WH_PREFECTURE_CODE         , WAREHOUSE_TYPE             , SHIPTO                     ,
                    SHIP_COUNTRY_CODE          , SHIP_PREFECTURE_CODE       , SHIPTO_TYPE                , HISTORY_DATE
                 ) values ( 
                    WK_REC.DATA_TYPE           , COM_REC.COMPANY_CODE       , DOH_REC.CUSTOMER_CODE      , DOS_REC.ITEM_NO            ,
                    v_bl_date                  , WK_REC.QUANTITY            , WK_REC.SP                  , WK_REC.SP_CURR_CODE        ,
                    WK_REC.SALES_AMOUNT        , WK_REC.COST                , WK_REC.COST_CURR_CODE      , WK_REC.COST_AMOUNT         ,
                    1                          , 0                          , INI_REC.DATA_SOURCE_TYPE   , WK_REC.CONSUMPTION_TAX     ,
                    0                          , 0                          , substr(DOH_REC.DO_NO,1,23) , substr(DOH_REC.INV_NO,1,23),
                    SYSDATE                    , null                       , 0                          ,
                    SOH_REC.SO_DATE            , SOH_REC.SO_DATE            , DOS_REC.CUSTOMER_PO_NO     , DOS_REC.SO_LINE_NO         ,
                    'U'                        , null                       , 0                          , ITM_REC.DESCRIPTION        ,
                    ITM_REC.CLASS_CODE         , INI_REC.SECTION_CODE       , INI_REC.PERSON_CODE        , DOS_REC.CUSTOMER_PART_NO   ,
                    substr(CUS_REC.COMPANY,1,40),WK_REC.SELL_COUNTRY_CODE   , null                       , null                       ,
                    null                       , null                       , null                       , null                       ,
                    null                       , null                       , null                       , null
                 ) ;

                /* ????????????? 20131203 Y.Hagai */
                 insert into fdac_sales_trn_ruiseki(
                    DATA_TYPE                  , COMPANY_CODE               , CUSTOMER_CODE              , ITEM_NO                    ,
                    DATA_DATE                  , QUANTITY                   , SP                         , SP_CURR_CODE               ,
                    SALES_AMOUNT               , COST                       , COST_CURR_CODE             , COST_AMOUNT                ,
                    ITEM_TYPE                  , REBATE                     , DATA_SOURCE_TYPE           , CONSUMPTION_TAX            ,
                    NEW_SP                     , LAST_SP                    , CHECK_NO                   , INVOICE_NO                 ,
                    OPERATION_DATE             , SHIPTO_CODE                , INFO_TYPE                  ,
                    ORDER_DATE                 , CUSTOMER_PO_DATE           , CUSTOMER_PO_NO             , CUSTOMER_LINE_NO           ,
                    ORDER_TYPE                 , WAREHOUSE_CODE             , OPERATION_TYPE             , ITEM                       ,
                    SRC_CLASS_CODE             , SECTION_CODE               , PERSON_CODE                , CUSTOMER_ITEM_NO           ,
                    CUSTOMER                   , SELL_COUNTRY_CODE          , SELL_PREFECTURE_CODE       , WAREHOUSE                  ,
                    WH_COUNTRY_CODE            , WH_PREFECTURE_CODE         , WAREHOUSE_TYPE             , SHIPTO                     ,
                    SHIP_COUNTRY_CODE          , SHIP_PREFECTURE_CODE       , SHIPTO_TYPE                , HISTORY_DATE
                 ) values ( 
                    WK_REC.DATA_TYPE           , COM_REC.COMPANY_CODE       , DOH_REC.CUSTOMER_CODE      , DOS_REC.ITEM_NO            ,
                    v_bl_date                  , WK_REC.QUANTITY            , WK_REC.SP                  , WK_REC.SP_CURR_CODE        ,
                    WK_REC.SALES_AMOUNT        , WK_REC.COST                , WK_REC.COST_CURR_CODE      , WK_REC.COST_AMOUNT         ,
                    1                          , 0                          , INI_REC.DATA_SOURCE_TYPE   , WK_REC.CONSUMPTION_TAX     ,
                    0                          , 0                          , substr(DOH_REC.DO_NO,1,23) , substr(DOH_REC.INV_NO,1,23),
                    SYSDATE                    , null                       , 0                          ,
                    SOH_REC.SO_DATE            , SOH_REC.SO_DATE            , DOS_REC.CUSTOMER_PO_NO     , DOS_REC.SO_LINE_NO         ,
                    'U'                        , null                       , 0                          , ITM_REC.DESCRIPTION        ,
                    ITM_REC.CLASS_CODE         , INI_REC.SECTION_CODE       , INI_REC.PERSON_CODE        , DOS_REC.CUSTOMER_PART_NO   ,
                    substr(CUS_REC.COMPANY,1,40),WK_REC.SELL_COUNTRY_CODE   , null                       , null                       ,
                    null                       , null                       , null                       , null                       ,
                    null                       , null                       , null                       , sysdate
                 ) ;

                  
        end loop;
    close C_DOS;

--2013.12.03 Y.Hagai ????
    delete from FDAC_SALES_TRN_WK; 
    insert into FDAC_SALES_TRN_WK  select distinct * from FDAC_SALES_TRN;

    delete from FDAC_SALES_TRN;
    insert into FDAC_SALES_TRN  select * from FDAC_SALES_TRN_WK;

   end;
end FDAC_SALES_TRN_DO_PRC_20141009;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."GLOSS_ISSUE_ENTRY" (para_section_code in number,
                                  para_issue_order_no in varchar2,
                                  para_slip_date in date,
                                  para_check_flag out number) as
begin
declare
w_item_no            issue.item_no%type; --issue
w_unit_stock         issue.unit_stock%type;
w_remainder_qty      issue.remainder_qty%type;
w_item_name          issue.item_name%type;
w_item_description   issue.item_description%type;
w_station_code       issue.station_code%type;
w_cost_subject_code  issue.cost_subject_code%type;
w_cost_process_code  issue.cost_process_code%type;
w_slip_type          issue.slip_type%type;
w_stock_subject_code issue.stock_subject_code%type;
w_item_code          item.item_code%type;
w_standard_price     item.standard_price%type;
w_suppliers_price    item.suppliers_price%type;
w_today date; --operation_date
w_slip_month number(6); --from para_slip_date
cursor issue1 is
 select t1.item_no, t1.unit_stock, t1.remainder_qty,
        t1.item_name, t1.item_description, t1.station_code,
        t1.cost_subject_code, t1.cost_process_code, t1.slip_type,
        t1.stock_subject_code, t2.item_code, t2.standard_price,
        t2.suppliers_price
   from issue t1, item t2
  where t1.issue_policy = 'D' and
        t1.issue_finish_flg is null and
        t1.section_code = para_section_code and
        t1.issue_order_no = para_issue_order_no and
        t1.item_no = t2.item_no
    for update of t1.operation_date, t1.issue_qty, t1.remainder_qty,
                  t1.issue_finish_flg;
begin
para_check_flag := 0;
w_today := sysdate;
w_slip_month := to_number(
  substr(to_char(para_slip_date,'yyyy/mm/dd'),1,4)||
  substr(to_char(para_slip_date,'yyyy/mm/dd'),6,2), '999999');
open issue1;
loop
 fetch issue1 into
  w_item_no, w_unit_stock, w_remainder_qty,
  w_item_name, w_item_description, w_station_code,
  w_cost_subject_code, w_cost_process_code, w_slip_type,
  w_stock_subject_code, w_item_code, w_standard_price,
  w_suppliers_price;
 exit when issue1%notfound or issue1%notfound is null;
 porder.whinventory_set(w_item_no, para_slip_date, w_remainder_qty, 3,
                             para_check_flag, para_section_code); --whinventory
 if para_check_flag < 0 then
  para_check_flag := 1;
  goto data_error;
 end if;
 porder.pcinventory_set(w_item_no, para_slip_date, w_remainder_qty, '1',
                             para_check_flag, para_section_code, w_station_code); --pcinventory
 if para_check_flag < 0 then
  para_check_flag := 1;
  goto data_error;
 end if;
 insert into transaction( --add to transaction
  operation_date, section_code, item_no,
  item_code, item_name, item_description,
  stock_subject_code, accounting_month, slip_date,
  slip_type, slip_no, slip_quantity,
  standard_price, standard_amount, suppliers_price,
  company_code, cost_process_code, cost_subject_code,
  product_lot_number, unit_stock)
 values(
  w_today, para_section_code, w_item_no,
  w_item_code, w_item_name, w_item_description,
  w_stock_subject_code, w_slip_month, para_slip_date,
  w_slip_type, para_issue_order_no, w_remainder_qty,
  w_standard_price, w_standard_price * w_remainder_qty, w_suppliers_price,
  w_station_code, w_cost_process_code, w_cost_subject_code,
  para_issue_order_no, w_unit_stock);
 update issue set --issue update
  operation_date = w_today,
  issue_qty = w_remainder_qty,
  remainder_qty = 0,
  issue_finish_flg = 'F'
  where current of issue1;
end loop;
<<data_error>>
null;
if para_check_flag = 1 then
 null;
-- rollback;
end if;
if issue1%isopen then
 close issue1;
end if;
--commit;
end;
end gloss_issue_entry;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."GLOSS_ISSUE_MAKE" (para_section_code in number,
                                           para_valid in varchar2,
                                           para_check_flag out number) as
begin
declare
w_seq number; --seq
w_release_date date; --today
w_this_month number(6); --today's month
w_slip_type varchar2(2); --set type
w_allocate_st1 balance.allocate_st%type; --for allocate_st change check
w_issue_order_no issue.issue_order_no%type;
w_allocate_st balance.allocate_st%type; --balance
w_item_no      balance.item_no%type;
w_allocate_qty balance.allocate_qty%type;
w_supply_type  company.supply_type%type; --company
w_company_type company.company_type%type;
w_curr_code    company.curr_code%type;
w_this_inventory     whinventory.this_inventory%type; --wh_item
w_issue_lot          item.issue_lot%type;
w_item_flag          item.item_flag%type;
w_item               item.item%type;
w_description        item.description%type;
w_cost_subject_code  item.cost_subject_code%type;
w_cost_process_code  item.cost_process_code%type;
w_stock_subject_code item.stock_subject_code%type;
w_unit_stock         item.unit_stock%type;
w_this_no    gloss_no.this_no%type; --gloss_no1
w_short_name section.short_name%type;
cursor balance1 is
 select t1.allocate_st, t1.item_no, sum(t1.allocate_qty)
   from balance t1, item t2
  where t1.section_code = para_section_code and
        t1.allocate_status = 'A' and
        t1.demand_type = 'S' and
        t1.supply_type = 'Z' and
        t1.item_no = t2.item_no and
        t2.issue_policy = 'D'
  group by t1.section_code, t1.allocate_st, t1.item_no;
cursor company1 is
 select supply_type, company_type, curr_code
   from company
  where company_code = w_allocate_st;
cursor wh_item is
 select t1.this_inventory, nvl(t2.issue_lot,0), t2.item_flag,
        t2.item, t2.description, t2.cost_subject_code,
        t2.cost_process_code, t2.stock_subject_code, t2.unit_stock
   from whinventory t1, item t2
  where t1.section_code = para_section_code and
        t1.item_no = w_item_no and
        t1.this_inventory > 0 and
        t1.section_code = t2.section_code and
        t1.item_no = t2.item_no;
cursor gloss_no1 is
 select t1.this_no, t2.short_name
   from gloss_no t1, section t2
  where t1.section_code = para_section_code and
        t1.month_no = w_this_month and
        t2.section_code = para_section_code;
cursor section1 is
 select short_name
   from section
  where section_code = para_section_code;
begin
w_release_date := sysdate;
w_this_month := to_number(substr(to_char(w_release_date,'yyyy/mm/dd'),1,4) ||
                          substr(to_char(w_release_date,'yyyy/mm/dd'),6,2),'999999');
para_check_flag := 0;
w_allocate_st1 := 1;
if para_valid = 'N' then
 open balance1;
 loop
  fetch balance1 into w_allocate_st, w_item_no, w_allocate_qty;
  exit when balance1%notfound or balance1%notfound is null;
  if w_allocate_st <> w_allocate_st1 then
   update issue set  --old gloss issue data cancel
    issue_finish_flg = 'F'
    where issue_policy = 'D' and
          section_code = para_section_code and
          station_code = w_allocate_st and
          remainder_qty > 0;
   w_seq := 1;
   w_this_no := 1; --no init
   open gloss_no1; --no get
   fetch gloss_no1 into w_this_no, w_short_name;
   if gloss_no1%notfound or gloss_no1%notfound is null then
    close gloss_no1;
    insert into gloss_no(
     operation_date, section_code, month_no, this_no)
    values(
     w_release_date, para_section_code, w_this_month, w_this_no);
    open section1;
    fetch section1 into w_short_name;
    if section1%notfound or section1%notfound is null then
     para_check_flag := 1;
     goto check_error;
    end if;
    close section1;
   end if;
   if gloss_no1%isopen then
    close gloss_no1;
   end if;
   w_issue_order_no := w_short_name || substr(to_char(w_this_month,'000000'),6,2) ||
                       'G'|| substr(to_char(w_this_no,'0000'),2,4); --issue_order_no make
   w_this_no := w_this_no + 1;
   update gloss_no set --gloss_no update
    this_no = w_this_no
    where section_code = para_section_code and
          month_no = w_this_month;
  end if;
  open company1;
  fetch company1 into w_supply_type, w_company_type, w_curr_code;
  if company1%notfound or company1%notfound is null then
   para_check_flag := 1;
   goto check_error;
  end if;
  if w_company_type = 5 then
   w_slip_type := '21';
  elsif w_company_type = 4 then
   if w_supply_type = 'Y' then
    w_slip_type := '31';
   else
    w_slip_type := '32';
   end if;
  else
   goto next;
  end if;
  close company1;
  open wh_item;
  fetch wh_item into w_this_inventory, w_issue_lot, w_item_flag,
                     w_item, w_description, w_cost_subject_code,
                     w_cost_process_code, w_stock_subject_code, w_unit_stock;
  if wh_item%notfound or wh_item%notfound is null then
   para_check_flag := 1;
   goto check_error;
  else
   if w_issue_lot <=0 then
    w_issue_lot := 1;
   end if;
   if w_this_inventory <= w_allocate_qty then
    w_allocate_qty := w_this_inventory;
   else
    if mod(w_allocate_qty, w_issue_lot) = 0 then
     null;
    else
     w_allocate_qty := trunc(w_allocate_qty / w_issue_lot,0);
     w_allocate_qty := w_issue_lot * (w_allocate_qty + 1);
     if w_this_inventory < w_allocate_qty then
      w_allocate_qty := w_this_inventory;
     end if;
    end if;
   end if;
  end if;
  close wh_item;
  insert into issue ( --issue add
   operation_date, section_code, issue_order_no,
   item_no, issue_req_qty, remainder_qty,
   item_flag, item_name, item_description,
   issue_policy, station_code, cost_subject_code,
   cost_process_code, slip_type, stock_subject_code,
   order_create_date, seq, unit_stock)
  values (
   w_release_date, para_section_code, w_issue_order_no,
   w_item_no, w_allocate_qty, w_allocate_qty,
   w_item_flag, w_item, w_description,
   'D', w_allocate_st, w_cost_subject_code,
   w_cost_process_code, w_slip_type, w_stock_subject_code,
   w_release_date, w_seq, w_unit_stock);
  w_allocate_st1 := w_allocate_st;
  w_seq := w_seq + 1;
 <<NEXT>>
 null;
 end loop;
end if;
--commit;
<<check_error>>
null;
if para_check_flag = 1 then
 null;
-- rollback;
end if;
if balance1%isopen then
 close balance1;
end if;
if company1%isopen then
 close company1;
end if;
if wh_item%isopen then
 close wh_item;
end if;
if section1%isopen then
 close section1;
end if;
end;
end gloss_issue_make;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."HAGAI3" 
as
begin
   declare
   W_MONTH  number(6):=201410 ;

   w_check  number(6):=0 ;

   v_date  date ;
   begin
   wipinventory_slide (W_MONTH,sysdate,w_check);

   end;

end hagai3;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."INT_CHG" (para_num in number,
                                    para_dec in number,    
                                    para_out out number) as
begin
declare
begin
  select round(para_num,para_dec) into para_out from dual;
end;
end int_chg;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ITEMNOCHANGE" (befor_Item_no in number,
										 after_Item_no in number,
										 RTN_param in out number)
AS
BEGIN
	DECLARE


	cursor C(ck_item in number)
	is
	SELECT *
	  FROM ITEM
	 WHERE ITEM_NO=ck_item ;

	wk_loop		number(3) := 0 ;
	/* ???????? */
	C_REC			C%ROWTYPE := null;


	begin
	--??????
	RTN_param := 0 ;

		wk_loop := 0 ;

		open C(befor_Item_no);
		loop
	    fetch C into C_REC;
		          exit when C%notfound or C%notfound is null;
			wk_loop := 1 ;
		end loop;
		close C;
		--????ITEM_NO???????
		if wk_loop = 0 then
			RTN_param := -1 ;
			return ;
		end if;

		wk_loop := 0 ;
		open C(after_Item_no);
		loop
	    fetch C into C_REC;
		          exit when C%notfound or C%notfound is null;
			wk_loop := 1 ;
		end loop;
		close C;

		--????ITEM_NO?????????
		if wk_loop = 1 then
			RTN_param := -2 ;
			return ;
		end if;

	/* ?? */

	-- ITEM MASTER
		UPDATE ITEM SET ITEM_NO=after_Item_no
				  where ITEM_NO=befor_Item_no;

	-- STRUCTURE
		UPDATE STRUCTURE SET UPPER_ITEM_NO=after_Item_no
					   where UPPER_ITEM_NO=befor_Item_no;

		UPDATE STRUCTURE SET LOWER_ITEM_NO=after_Item_no
					   where LOWER_ITEM_NO=befor_Item_no;

	-- LEVELD
		UPDATE LEVELD SET LEVEL_CONT_KEY=after_Item_no
					where LEVEL_CONT_KEY=befor_Item_no;

		UPDATE LEVELD SET ITEM_NO=after_Item_no
					where ITEM_NO=befor_Item_no;

/* ?????*/
EXCEPTION
	 when OTHERS THEN
          ROLLBACK;

   end;

END ItemNoChange;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."KIT_ISSUE_ENTRY" (para_section_code in number,
                                  para_issue_order_no in varchar2,
                                  para_slip_date in date,
                                  para_check_flag out number) as
begin
declare
w_item_no            issue.item_no%type; --issue
w_unit_stock         issue.unit_stock%type;
w_remainder_qty      issue.remainder_qty%type;
w_item_name          issue.item_name%type;
w_item_description   issue.item_description%type;
w_station_code       issue.station_code%type;
w_cost_subject_code  issue.cost_subject_code%type;
w_cost_process_code  issue.cost_process_code%type;
w_slip_type          issue.slip_type%type;
w_stock_subject_code issue.stock_subject_code%type;
w_item_code          item.item_code%type;
w_standard_price     item.standard_price%type;
w_suppliers_price    item.suppliers_price%type;
w_today date; --operation_date
w_slip_month number(6); --from para_slip_date
cursor issue1 is
 select t1.item_no, t1.unit_stock, t1.remainder_qty,
        t1.item_name, t1.item_description, t1.station_code,
        t1.cost_subject_code, t1.cost_process_code, t1.slip_type,
        t1.stock_subject_code, t2.item_code, t2.standard_price,
        t2.suppliers_price
   from issue t1, item t2
  where t1.issue_policy = 'A' and
        t1.issue_finish_flg is null and
        t1.section_code = para_section_code and
        t1.issue_order_no = para_issue_order_no and
        t1.item_no = t2.item_no
    for update of t1.operation_date, t1.issue_qty, t1.remainder_qty,
                  t1.issue_finish_flg;
begin
para_check_flag := 0;
w_today := sysdate;
w_slip_month := to_number(
  substr(to_char(para_slip_date,'yyyy/mm/dd'),1,4)||
  substr(to_char(para_slip_date,'yyyy/mm/dd'),6,2), '999999');
open issue1;
loop
 fetch issue1 into
  w_item_no, w_unit_stock, w_remainder_qty,
  w_item_name, w_item_description, w_station_code,
  w_cost_subject_code, w_cost_process_code, w_slip_type,
  w_stock_subject_code, w_item_code, w_standard_price,
  w_suppliers_price;
 exit when issue1%notfound or issue1%notfound is null;
 porder.whinventory_set(w_item_no, para_slip_date, w_remainder_qty, '3',
                             para_check_flag, para_section_code); --whinventory
 if para_check_flag < 0 then
  para_check_flag := 1;
  goto data_error;
 end if;
 insert into transaction( --add to transaction
  operation_date, section_code, item_no,
  item_code, item_name, item_description,
  stock_subject_code, accounting_month, slip_date,
  slip_type, slip_no, slip_quantity,
  standard_price, standard_amount, suppliers_price,
  company_code, cost_process_code, cost_subject_code,
  product_lot_number, unit_stock)
 values(
  w_today, para_section_code, w_item_no,
  w_item_code, w_item_name, w_item_description,
  w_stock_subject_code, w_slip_month, para_slip_date,
  w_slip_type, para_issue_order_no, w_remainder_qty,
  w_standard_price, w_standard_price * w_remainder_qty, w_suppliers_price,
  w_station_code, w_cost_process_code, w_cost_subject_code,
  para_issue_order_no, w_unit_stock);
 update issue set --issue update
  operation_date = w_today,
  issue_qty = w_remainder_qty,
  remainder_qty = 0,
  issue_finish_flg = 'F'
  where current of issue1;
end loop;
<<data_error>>
null;
if para_check_flag = 1 then
 null;
-- rollback;
end if;
if issue1%isopen then
 close issue1;
end if;
--commit;
end;
end kit_issue_entry;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."KIT_ISSUE_MAKE" (para_section_code in number,
                                           para_product_lot_number in varchar2,
                                           para_check_flag out number) as
begin
declare
 w_release_date date; --today
 w_seq number; --seq
 w_slip_type varchar2(2); --slip type
 w_issue_qty number(11,3); --caluculated quantity
 seek_str_item_no number; --item_no or bm_item_no
 w_product_lot_number product_plan.product_lot_number%type; --plan work
 w_item_no            product_plan.item_no%type;
 w_bm_item_no         product_plan.bm_item_no%type;
 w_level_no           product_plan.level_no%type;
 w_station_code       product_plan.station_code%type;
 w_product_quantity   product_plan.product_quantity%type;
 w_material_req_date  product_plan.material_req_date%type;
 w_issue_req_date     product_plan.issue_req_date%type;
 w_product_req_date   product_plan.product_req_date%type;
 w_remainder_qty      product_plan.remainder_quantity%type;
 w_kuraire_date       product_plan.kuraire_date%type;
 w_finish_item        item.item%type;
 w_manufact_fail_rate number;
 w_finish_description item.description%type;
 w_company_type company.company_type%type; --company work
 w_supply_type  company.supply_type%type;
 w_lower_item_no structure.lower_item_no%type;  --structure work
 w_quantity      structure.quantity%type;
 w_quantity_base structure.quantity_base%type;
 w_failure_rate  number;
 w_row_item           item.item%type;  --item work
 w_item_flag          item.item_flag%type;
 w_description        item.description%type;
 w_stock_subject_code item.stock_subject_code%type;
 w_cost_subject_code  item.cost_subject_code%type;
 w_cost_process_code  item.cost_process_code%type;
 w_unit_stock         item.unit_stock%type;
 w_issue_lot          item.issue_lot%type;
 w_unit_stock_rate    item.unit_stock_rate%type;
 w_unit_engineer_rate item.unit_engineer_rate%type;
 cursor plan1 is --product_plan
  select t1.product_lot_number, t1.item_no, t1.bm_item_no,
         t1.level_no, t1.station_code, t1.product_quantity,
         t1.material_req_date, t1.issue_req_date, t1.product_req_date,
         t1.remainder_quantity, t1.kuraire_date, t2.item,
         (1 + nvl(t2.manufact_fail_rate, 0 ) / 100), t2.description
    from product_plan t1, item t2
   where t1.section_code = para_section_code and
         t1.progress_status = 'A' and
         t1.product_lot_number = para_product_lot_number and
         t1.item_no = t2.item_no
     for update of progress_status, release_date;
 cursor company1 is --company
  select company_type, supply_type
    from company
   where company_code = w_station_code;
 cursor structure1 is --structure
  select lower_item_no, quantity, quantity_base,
         (1 + nvl(failure_rate, 0 ) / 100)
    from structure
   where upper_item_no = seek_str_item_no and
         level_no = w_level_no;
 cursor item1 is --item
  select item, item_flag, description,
         stock_subject_code, cost_subject_code, cost_process_code,
         unit_stock, nvl(issue_lot, 0), nvl(unit_stock_rate, 0),
         nvl(unit_engineer_rate, 0 )
    from item
   where item_no = w_lower_item_no and
         section_code = para_section_code and
         issue_policy = 'A';
begin
w_release_date := sysdate;
para_check_flag := 0;
open plan1;
loop
 fetch plan1 into
   w_product_lot_number, w_item_no, w_bm_item_no,
   w_level_no, w_station_code,  w_product_quantity,
   w_material_req_date, w_issue_req_date, w_product_req_date,
   w_remainder_qty, w_kuraire_date, w_finish_item,
   w_manufact_fail_rate, w_finish_description;
 exit when plan1%notfound or plan1%notfound is null;
 --delete from issue with product_lot_number
 delete from issue where product_lot_number = w_product_lot_number;
 --seek structure
 if w_item_no = w_bm_item_no then
  seek_str_item_no := w_item_no;
 else
  seek_str_item_no := w_bm_item_no;
 end if;
 w_seq := 1;
 open structure1;
 loop
  fetch structure1 into
   w_lower_item_no, w_quantity, w_quantity_base,
   w_failure_rate;
  exit when structure1%notfound or structure1%notfound is null;
  --seek data of lower item
  open item1;
  fetch item1 into
   w_row_item, w_item_flag, w_description,
   w_stock_subject_code, w_cost_subject_code, w_cost_process_code,
   w_unit_stock, w_issue_lot, w_unit_stock_rate, w_unit_engineer_rate;
  if item1%notfound or item1%notfound is null then
   null;
  else
   --slip_type set
   w_slip_type := ' ';
   open company1;
   fetch company1 into
    w_company_type, w_supply_type;
   if company1%notfound or company1%notfound is null then
    null;
   else
    if w_company_type = 5 then --????
     w_slip_type := '21';
    end if;
    if w_company_type = 4 then --??
     if w_supply_type = 'Y' then
      w_slip_type := '31';
     else
      w_slip_type := '41';
     end if;
    end if;
    if w_slip_type <> ' ' then
     --issue qty calculation
      if w_unit_engineer_rate <> w_unit_stock_rate then --??????
       if w_unit_engineer_rate = 0 then
        w_unit_engineer_rate := 1;
       end if;
       if w_unit_stock_rate = 0 then
        w_unit_stock_rate := 1;
       end if;
       w_quantity := round(w_quantity * w_unit_stock_rate /
                            w_unit_engineer_rate, 6);
      end if;
      w_issue_qty := w_remainder_qty * w_manufact_fail_rate
                     * w_quantity / w_quantity_base * w_failure_rate;
     --data insert to issue
      insert into issue (
       operation_date, section_code, issue_order_no,
       item_no, finish_goods_no, finish_goods_name,
       finish_goods_spec, product_lot_number, product_quantity,
       material_req_date, issue_req_date, product_req_date,
       issue_req_qty, remainder_qty, item_flag,
       item_name, item_description, issue_policy,
       station_code, cost_subject_code, cost_process_code,
       slip_type, stock_subject_code, order_create_date,
       level_no, seq, unit_stock,
       issue_lot, req_qty, kuraire_date)
      values (
       w_release_date, para_section_code, w_product_lot_number,
       w_lower_item_no, w_item_no, w_finish_item,
       w_finish_description, w_product_lot_number, w_remainder_qty,
       w_material_req_date, w_issue_req_date, w_product_req_date,
       w_issue_qty, w_issue_qty, w_item_flag,
       w_row_item, w_description, 'A',
       w_station_code, w_cost_subject_code, w_cost_process_code,
       w_slip_type, w_stock_subject_code, w_release_date,
       w_level_no, w_seq, w_unit_stock,
       w_issue_lot, w_issue_qty, w_kuraire_date);
     w_seq := w_seq + 1;
    end if;
   end if;
   close company1;
  end if;
  close item1;
 end loop;
 close structure1;
 update product_plan set
        progress_status = 'C',
        release_date = w_release_date,
        operation_date = w_release_date
  where current of plan1;
end loop;
close plan1;
--commit;
exception
 when others then
  para_check_flag := 1;
  --rollback;
  if plan1%isopen then
   close plan1;
  end if;
  if company1%isopen then
   close company1;
  end if;
  if structure1%isopen then
   close structure1;
  end if;
  if item1%isopen then
   close item1;
  end if;
end;
end kit_issue_make;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."LEVELDOWN" (PARAM_Item_no in number,RTN_param in out number)
AS
BEGIN
	DECLARE


	WK_level_next	number(2) := null;

	cursor C2
	is
	SELECT l.LEVEL_CONT_KEY,l.LEVEL_NO,l.ITEM_NO
	  FROM LEVELD l,ITEM i
	 WHERE i.ITEM_NO=PARAM_Item_no
       AND i.ITEM_NO=l.ITEM_NO
     ORDER BY LEVEL_NO DESC;


	/* ???????? */
	C2_REC			C2%ROWTYPE := null;


	begin
	--??????
	RTN_param := 0 ;


		/* LEVELD */
		WK_level_next := null;

		open C2();
		loop
	    fetch C2 into C2_REC;
		          exit when C2%notfound or C2%notfound is null;

			if WK_level_next is null then
				WK_level_next := C2_REC.LEVEL_NO;
				DELETE LEVELD WHERE LEVEL_CONT_KEY=C2_REC.LEVEL_CONT_KEY
				                AND ITEM_NO=C2_REC.ITEM_NO
				                AND LEVEL_NO=C2_REC.LEVEL_NO;
			end if;

		end loop;
		close C2;

		--????????????????
		if WK_level_next is null then
			RTN_param := -2 ;
			return ;
		end if;



		/* STRUCTURE DELETE*/
			DELETE STRUCTURE WHERE UPPER_ITEM_NO=C2_REC.ITEM_NO
			                   AND LEVEL_NO=WK_level_next;


/* ?????
EXCEPTION
	 when OTHERS THEN
          ROLLBACK;
*/
   end;

END LevelDown;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."LEVELUP" (PARAM_Item_no in number,RTN_param in out number)
AS
BEGIN
	DECLARE

	cursor C1
	is
	SELECT * FROM STRUCTURE
	where UPPER_ITEM_NO=PARAM_Item_no
      and LEVEL_NO in (select max(level_no) from STRUCTURE where UPPER_ITEM_NO=PARAM_Item_no);

	/* ???????? */
	C1_REC			C1%ROWTYPE := null;

	WK_level_next	number(2) := null;


	cursor C2
	is
	SELECT l.LEVEL_CONT_KEY,l.LEVEL_NO,l.ITEM_NO
	  FROM LEVELD l,ITEM i
	 WHERE i.LEVEL_CONT_KEY=l.LEVEL_CONT_KEY
       AND i.ITEM_NO=l.ITEM_NO
       AND i.ITEM_NO=PARAM_Item_no
     ORDER BY LEVEL_NO DESC;

	/* ???????? */
	C2_REC			C2%ROWTYPE := null;


	begin
	--??????
	RTN_param := 0 ;

		/* STRUCTURE */
		open C1();
		loop
	    fetch C1 into C1_REC;
		          exit when C1%notfound or C1%notfound is null;

			if WK_level_next is null then
				WK_level_next := C1_REC.LEVEL_NO + 1;
			end if;



			INSERT INTO STRUCTURE(OPERATION_DATE,UPPER_ITEM_NO,LOWER_ITEM_NO,
								  LEVEL_NO,REVISION,LINE_NO,REFERENCE_NUMBER,
								  QUANTITY,QUANTITY_BASE,FAILURE_RATE,
								  USER_SUPPLY_FLAG,SUBCON_SUPPLY_FLAG)
						   VALUES(sysdate,
								  C1_REC.UPPER_ITEM_NO,
								  C1_REC.LOWER_ITEM_NO,
								  WK_level_next,
								  C1_REC.REVISION,
								  C1_REC.LINE_NO,
								  C1_REC.REFERENCE_NUMBER,
								  C1_REC.QUANTITY,
								  C1_REC.QUANTITY_BASE,
								  C1_REC.FAILURE_RATE,
								  C1_REC.USER_SUPPLY_FLAG,
								  C1_REC.SUBCON_SUPPLY_FLAG);

		end loop;
		close C1;

		--????????????????
		if WK_level_next is null then
			RTN_param := -1 ;
			return ;
		end if;


		/* LEVELD */

		WK_level_next := null;

		open C2();
		loop
	    fetch C2 into C2_REC;
		          exit when C2%notfound or C2%notfound is null;

			if WK_level_next is null then
				WK_level_next := C2_REC.LEVEL_NO + 1;

				INSERT INTO LEVELD(OPERATION_DATE,LEVEL_CONT_KEY,
								   LEVEL_NO,ITEM_NO)
						    VALUES(sysdate,
								   C2_REC.LEVEL_CONT_KEY,
								   WK_level_next,
								   C2_REC.ITEM_NO);

			end if;

		end loop;
		close C2;

		--????????????????
		if WK_level_next is null then
			RTN_param := -2 ;
			return ;
		end if;


/* ?????
EXCEPTION
	 when OTHERS THEN
          ROLLBACK;
*/
   end;

END Levelup;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."MAKE_AP3_CL" 
as
/*************************************************************************
  ?????      ?P-GLOSAS
  ???????  ?????????????????????
  ??????    ?MAKE_AP3_CL
  ????        ?2009/11/30
  ???          ?FDK Y.hagai

***************************************************************************/
begin
   declare

/* AP3_CL?????? */
	cursor C1 
	is
	SELECT  a.CUSTOMER_CODE                              ,
		a.CUSTOMER                                   ,
		a.BL_NO                                      ,
		a.CURRENT_CURR_CODE                          ,
		a.CURRENT_CURR_MARK                          ,
		a.CURRENT_RATE                               ,
		a.LAST_CURR_MARK                             ,
		a.LAST_RATE                                  ,
		a.LAST_AMT_O                                 ,
		a.LAST_AMT_L                                 ,
		a.PURCHASE_CURR_MARK                         ,
		a.PURCHASE_RATE                              ,
		a.PURCHASE_AMT_O                             ,
		a.PURCHASE_AMT_L                             ,
		a.PAYMENT_CURR_MARK                          ,
		a.PAYMENT_RATE                               ,
		a.PAYMENT_AMT_O                              ,
		a.PAYMENT_AMT_L                              ,
		a.THIS_AMT_O                                 ,
		a.THIS_AMT_L                                 ,
		a.REALIZE                                    ,
		a.UNREALIZE                                  ,
		b.CLASS_1
	FROM AP2_CL a,
		(SELECT x.CUSTOMER_CODE,
		 	x.BL_NO
		 FROM ACCOUNT_PAYABLE x
		where x.TYPE = 1
		group by x.CUSTOMER_CODE,x.BL_NO) p,
		(select gh.INV_NO, cl.CLASS_1 from gr_header gh,gr_details gd,item i,class cl
		 where gh.GR_NO = gd.GR_NO
		  and gd.ITEM_NO = i.ITEM_NO(+)
		  and i.CLASS_CODE = cl.CLASS_CODE(+)
		 group by  gh.INV_NO, cl.CLASS_1) b
	WHERE (a.LAST_AMT_O != 0
		or a.PURCHASE_AMT_O != 0
		or a.PAYMENT_AMT_O != 0
		or a.THIS_AMT_O != 0)
		AND a.BL_NO = p.BL_NO(+)
		AND a.CUSTOMER_CODE = p.CUSTOMER_CODE(+)
		and a.BL_NO = b.INV_NO
		ORDER BY a.CUSTOMER,a.CURRENT_CURR_CODE ,a.BL_NO,b.CLASS_1;
	c1_rec  c1%rowtype;

/* LR,CR????? */

    cursor C2(para1 in  varchar2)
    is
    select inv_no, count(*) class_chk from 
	(select gh.INV_NO, cl.CLASS_1 from gr_header gh,gr_details gd,item i,class cl
		where gh.GR_NO = gd.GR_NO
		 and gd.ITEM_NO = i.ITEM_NO(+)
		 and gh.inv_no = para1
		 and i.CLASS_CODE = cl.CLASS_CODE(+)
		group by  gh.INV_NO, cl.CLASS_1)
		group by inv_no;
    C2_REC         C2%rowtype;

/* AP3_CL?????? */
	cursor C3
	is
	SELECT * from  AP3_CL a
	 order by CUSTOMER,CURRENT_CURR_CODE, BL_NO,CLASS_1
	for update;
    C3_REC         C3%rowtype;

/* AP3_CL?LAST_AMT????? */
	cursor C4
	is
	SELECT * from  AP3_CL a
	WHERE class_LAST_AMT_O is null
	 order by CUSTOMER,CURRENT_CURR_CODE, BL_NO,CLASS_1
	for update;
    C4_REC         C4%rowtype;


/* LR,CR????? */
    cursor C5(para1 in  varchar2,para2 in varchar2)
    is
		select INV_NO,CLASS_1, class_amt_o from 
		(SELECT INV_NO,CLASS_1, SUM(CLASS_AMT_O) class_amt_o FROM (
			  select distinct gh.inv_no,cl.CLASS_1,sum(round(gd.QTY * gd.U_PRICE,2) ) class_amt_o from gr_header gh, gr_details gd,item i,class cl,ACCOUNT_MONTH ac
				where gh.GR_NO = gd.GR_NO(+)
				  and gh.inv_no = para1
				  and  gd.ITEM_NO = i.ITEM_NO(+)
				  and i.CLASS_CODE = cl.CLASS_CODE(+)
				  and to_char(gh.GR_DATE, 'yyyymm') < to_char(decode(op_flag,1,ac.AC_MONTH,add_months(ac.AC_MONTH,-1)),'yyyymm')
				group by gh.inv_no,cl.CLASS_1
			  UNION ALL
			  select distinct pd.inv_no,cl.CLASS_1,sum(round(pd.QTY * pd.U_prICE  * -1,2)) class_amt_o from pr_header ph, pr_details pd,item i,class cl,ACCOUNT_MONTH ac
			   where ph.pr_NO = pd.pr_NO(+)
				 and  pd.ITEM_NO = i.ITEM_NO(+)
				 and  pd.inv_no = para1
				 and i.CLASS_CODE = cl.CLASS_CODE(+)
				  and to_char(ph.PR_DATE, 'yyyymm') < to_char(decode(op_flag,1,ac.AC_MONTH,add_months(ac.AC_MONTH,-1)),'yyyymm')
			   group by pd.inv_no,cl.CLASS_1)
		GROUP BY INV_NO,CLASS_1 ) 
		where CLASS_1 = para2;
    C5_REC         C5%rowtype;

/* AP3_CL?PURCHASE_AMT????? */
	cursor C6
	is
	SELECT * from  AP3_CL a
	WHERE class_purchase_AMT_O is null
	 order by CUSTOMER,CURRENT_CURR_CODE, BL_NO,CLASS_1
	for update;
    C6_REC         C6%rowtype;


/* LR,CR????? */
    cursor C7(para1 in  varchar2,para2 in varchar2)
    is
		select INV_NO,CLASS_1, class_amt_o from 
		(SELECT INV_NO,CLASS_1, SUM(CLASS_AMT_O) class_amt_o FROM (
			  select distinct gh.inv_no,cl.CLASS_1,sum(round(gd.QTY * gd.U_PRICE,2) ) class_amt_o from gr_header gh, gr_details gd,item i,class cl,ACCOUNT_MONTH ac
				where gh.GR_NO = gd.GR_NO(+)
				  and gh.inv_no = para1
				  and  gd.ITEM_NO = i.ITEM_NO(+)
				  and i.CLASS_CODE = cl.CLASS_CODE(+)
				group by gh.inv_no,cl.CLASS_1
			  UNION ALL
			  select distinct pd.inv_no,cl.CLASS_1,sum(round(pd.QTY * pd.U_prICE  * -1,2)) class_amt_o from pr_header ph, pr_details pd,item i,class cl,ACCOUNT_MONTH ac
			   where ph.pr_NO = pd.pr_NO(+)
				 and  pd.ITEM_NO = i.ITEM_NO(+)
				 and  pd.inv_no = para1
				 and i.CLASS_CODE = cl.CLASS_CODE(+)
			   group by pd.inv_no,cl.CLASS_1)
		GROUP BY INV_NO,CLASS_1 ) 
		where CLASS_1 = para2;
    C7_REC         C7%rowtype;

/* AP3_CL?PAYMENT_AMT????? */
	cursor C8
	is
	SELECT * from  AP3_CL a
	WHERE class_payment_AMT_O is null
	 order by CUSTOMER,CURRENT_CURR_CODE, BL_NO,CLASS_1
	for update;
    C8_REC         C8%rowtype;


/* LR,CR????? */
    cursor C9(para1 in  varchar2,para2 in varchar2)
    is
		select INV_NO,CLASS_1, class_amt_o from 
		(SELECT INV_NO,CLASS_1, SUM(CLASS_AMT_O) class_amt_o FROM (
			  select distinct gh.inv_no,cl.CLASS_1,sum(round(gd.QTY * gd.U_PRICE,2) ) class_amt_o from gr_header gh, gr_details gd,item i,class cl,ACCOUNT_MONTH ac
				where gh.GR_NO = gd.GR_NO(+)
				  and gh.inv_no = para1
				  and  gd.ITEM_NO = i.ITEM_NO(+)
				  and i.CLASS_CODE = cl.CLASS_CODE(+)
				group by gh.inv_no,cl.CLASS_1
			  UNION ALL
			  select distinct pd.inv_no,cl.CLASS_1,sum(round(pd.QTY * pd.U_prICE  * -1,2)) class_amt_o from pr_header ph, pr_details pd,item i,class cl,ACCOUNT_MONTH ac
			   where ph.pr_NO = pd.pr_NO(+)
				 and  pd.ITEM_NO = i.ITEM_NO(+)
				 and  pd.inv_no = para1
				 and i.CLASS_CODE = cl.CLASS_CODE(+)
			   group by pd.inv_no,cl.CLASS_1)
		GROUP BY INV_NO,CLASS_1 ) 
		where CLASS_1 = para2;
    C9_REC         C9%rowtype;

/* AP3_CL?THIS_AMT????? */
	cursor C10
	is
	SELECT * from  AP3_CL a
	WHERE class_THIS_AMT_O is null
	 order by CUSTOMER,CURRENT_CURR_CODE, BL_NO,CLASS_1
	for update;
    C10_REC         C10%rowtype;


/* LR,CR????? */
    cursor C11(para1 in  varchar2,para2 in varchar2)
    is
		select INV_NO,CLASS_1, class_amt_o from 
		(SELECT INV_NO,CLASS_1, SUM(CLASS_AMT_O) class_amt_o FROM (
			  select distinct gh.inv_no,cl.CLASS_1,sum(round(gd.QTY * gd.U_PRICE,2) ) class_amt_o from gr_header gh, gr_details gd,item i,class cl,ACCOUNT_MONTH ac
				where gh.GR_NO = gd.GR_NO(+)
				  and gh.inv_no = para1
				  and  gd.ITEM_NO = i.ITEM_NO(+)
				  and i.CLASS_CODE = cl.CLASS_CODE(+)
				group by gh.inv_no,cl.CLASS_1
			  UNION ALL
			  select distinct pd.inv_no,cl.CLASS_1,sum(round(pd.QTY * pd.U_prICE  * -1,2)) class_amt_o from pr_header ph, pr_details pd,item i,class cl,ACCOUNT_MONTH ac
			   where ph.pr_NO = pd.pr_NO(+)
				 and  pd.ITEM_NO = i.ITEM_NO(+)
				 and  pd.inv_no = para1
				 and i.CLASS_CODE = cl.CLASS_CODE(+)
			   group by pd.inv_no,cl.CLASS_1)
		GROUP BY INV_NO,CLASS_1 ) 
		where CLASS_1 = para2;
    C11_REC         C11%rowtype;

/* AP3_CL?THIS_AMT????? */
	cursor C12
	is
	SELECT * from  AP3_CL a
	 order by CUSTOMER,CURRENT_CURR_CODE, BL_NO,CLASS_1
	for update;
    C12_REC         C12%rowtype;

    wk_REALIZE		NUMBER(20,6) :=  0;
    wk_UNREALIZE	NUMBER(20,6) :=  0;
    wk_REALIZE0		NUMBER(20,6) :=  0;
    wk_UNREALIZE0	NUMBER(20,6) :=  0;
    wk_REALIZE1		NUMBER(20,6) :=  0;
    wk_UNREALIZE1	NUMBER(20,6) :=  0;

/****************************************************
  ?????
*****************************************************/
  begin

    /* AP3_CL??? */
	delete from ap3_cl;
 	open C1;
	loop
      fetch C1 into c1_rec ;
		exit when C1%notfound or C1%notfound is null;
			insert into AP3_CL 
				(CUSTOMER_CODE,
				 CUSTOMER,
				 CURRENT_CURR_CODE,
				 CURRENT_CURR_MARK,
				 CURRENT_RATE,
				 BL_NO,
				 LAST_CURR_MARK,
				 LAST_RATE,
				 LAST_AMT_O, 
				 LAST_AMT_L,
				 PURCHASE_CURR_MARK, 
				 PURCHASE_RATE,
				 PURCHASE_AMT_O,
				 PURCHASE_AMT_L, 
				 PAYMENT_CURR_MARK,
				 PAYMENT_RATE,
				 PAYMENT_AMT_O, 
				 PAYMENT_AMT_L,
				 THIS_AMT_O, 
				 THIS_AMT_L,
				 REALIZE,
				 UNREALIZE, 
				 CLASS_1
				)
			values
				(c1_rec.CUSTOMER_CODE,
				 c1_rec.CUSTOMER,
				 c1_rec.CURRENT_CURR_CODE,
				 c1_rec.CURRENT_CURR_MARK,
				 c1_rec.CURRENT_RATE,
				 c1_rec.BL_NO,
				 c1_rec.LAST_CURR_MARK,
				 c1_rec.LAST_RATE,
				 c1_rec.LAST_AMT_O, 
				 c1_rec.LAST_AMT_L,
				 c1_rec.PURCHASE_CURR_MARK, 
				 c1_rec.PURCHASE_RATE,
				 c1_rec.PURCHASE_AMT_O,
				 c1_rec.PURCHASE_AMT_L, 
				 c1_rec.PAYMENT_CURR_MARK,
				 c1_rec.PAYMENT_RATE,
				 c1_rec.PAYMENT_AMT_O, 
				 c1_rec.PAYMENT_AMT_L,
				 c1_rec.THIS_AMT_O, 
				 c1_rec.THIS_AMT_L,
				 c1_rec.REALIZE,
				 c1_rec.UNREALIZE, 
				 c1_rec.class_1);

	<<LOOP_END>>
	  null;
	end loop;
	close C1;


 	open C3;
	loop
      fetch C3 into c3_rec ;
		exit when C3%notfound or C3%notfound is null;

		open C2(c3_rec.bl_no);
			fetch C2 into c2_rec ;
			if C2%notfound or C2%notfound is null then
				 update  ap3_cl set 
				 	class_LAST_AMT_O		=			 c3_rec.LAST_AMT_O, 
				 	class_LAST_AMT_L		=			 c3_rec.LAST_AMT_L,
				 	class_PURCHASE_AMT_O	=			 c3_rec.PURCHASE_AMT_O,
				 	class_PURCHASE_AMT_L	= 			 c3_rec.PURCHASE_AMT_L, 
				 	class_PAYMENT_AMT_O		= 			 c3_rec.PAYMENT_AMT_O, 
				 	class_PAYMENT_AMT_L		=			 c3_rec.PAYMENT_AMT_L,
				 	class_THIS_AMT_O		= 			 c3_rec.THIS_AMT_O, 
				 	class_THIS_AMT_L		=			 c3_rec.THIS_AMT_L
					where   current of c3;
					close c2;
				goto loop2_end;
			end if;
			if c2_rec.CLASS_CHK = 1 then
				 update  ap3_cl set
				 	class_LAST_AMT_O		=			 c3_rec.LAST_AMT_O, 
				 	class_LAST_AMT_L		=			 c3_rec.LAST_AMT_L,
				 	class_PURCHASE_AMT_O	=			 c3_rec.PURCHASE_AMT_O,
				 	class_PURCHASE_AMT_L	= 			 c3_rec.PURCHASE_AMT_L, 
				 	class_PAYMENT_AMT_O		= 			 c3_rec.PAYMENT_AMT_O, 
				 	class_PAYMENT_AMT_L		=			 c3_rec.PAYMENT_AMT_L,
				 	class_THIS_AMT_O		= 			 c3_rec.THIS_AMT_O, 
				 	class_THIS_AMT_L		=			 c3_rec.THIS_AMT_L
					where   current of c3;
					close c2;
				goto loop2_end;
	         end if;
		close c2;

	<<LOOP2_END>>
	  null;
	end loop;
	close C3;

 	open C4;
	loop
      fetch C4 into c4_rec ;
		exit when C4%notfound or C4%notfound is null;

		open C5(c4_rec.bl_no,c4_rec.CLASS_1);
			fetch C5 into c5_rec ;
			if C5%notfound or C5%notfound is null then
				close c5;
				if  c4_rec.LAST_AMT_O = 0 and  c4_rec.class_LAST_AMT_O is null then  
						 update  ap3_cl set 
						 	class_LAST_AMT_O		=			 0 
						where   current of c4;
				end if;
				if  c4_rec.LAST_AMT_L = 0 and  c4_rec.class_LAST_AMT_L  is null then  
						 update  ap3_cl set 
						 	class_LAST_AMT_L		=			 0 
						where   current of c4;
				end if;
				goto loop3_end;
			end if;
			update  ap3_cl set
				class_LAST_AMT_O		=			 c5_rec.CLASS_AMT_O, 
				class_LAST_AMT_L		=			 round(c5_rec.CLASS_AMT_O * c4_rec.last_RATE,2)
				where   current of c4;
		close c5;

	<<LOOP3_END>>
	  null;
	end loop;
	close C4;

 	open C6;
	loop
      fetch C6 into c6_rec ;
		exit when C6%notfound or C6%notfound is null;

		open C7(c6_rec.bl_no,c6_rec.CLASS_1);
			fetch C7 into c7_rec ;
			if C7%notfound or C7%notfound is null then
				close c7;
				goto loop4_end;
			end if;
			if  c6_rec.purchase_AMT_O = 0 and  c6_rec.class_purchase_AMT_O is null then  
					 update  ap3_cl set 
					 	class_purchase_AMT_O		=			 0 
					where   current of c6;
			end if;
			if  c6_rec.purchase_AMT_L = 0 and  c6_rec.class_purchase_AMT_L  is null then  
					 update  ap3_cl set 
					 	class_purchase_AMT_L		=			 0 
					where   current of c6;
				end if;
			if c6_rec.purchase_AMT_O  <> 0 then
				update  ap3_cl set
					class_purchase_AMT_O		=			 c7_rec.CLASS_AMT_O, 
					class_purchase_AMT_L		=			 round(c7_rec.CLASS_AMT_O * c6_rec.purchase_RATE,2)
					where   current of c6;
			end if;
		close c7;

	<<LOOP4_END>>
	  null;
	end loop;
	close C6;

 	open C8;
	loop
      fetch C8 into c8_rec ;
		exit when C8%notfound or C8%notfound is null;

		open C9(c8_rec.bl_no,c8_rec.CLASS_1);
			fetch C9 into c9_rec ;
			if C9%notfound or C9%notfound is null then
				close c9;
				if  c8_rec.PAYMENT_AMT_O = 0 and  c8_rec.class_PAYMENT_AMT_O is null then  
						 update  ap3_cl set 
						 	class_PAYMENT_AMT_O		=			 0 
						where   current of c8;
				end if;
				if  c8_rec.PAYMENT_AMT_L = 0 and  c8_rec.class_PAYMENT_AMT_L  is null then  
						 update  ap3_cl set 
						 	class_PAYMENT_AMT_L		=			 0 
						where   current of c8;
				end if;
				goto loop5_end;
			end if;
			if  c8_rec.PAYMENT_AMT_O = 0 and  c8_rec.class_PAYMENT_AMT_O is null then  
					 update  ap3_cl set 
					 	class_PAYMENT_AMT_O		=			 0 
					where   current of c8;
			end if;
			if  c8_rec.PAYMENT_AMT_L = 0 and  c8_rec.class_PAYMENT_AMT_L  is null then  
					 update  ap3_cl set 
					 	class_PAYMENT_AMT_L		=			 0 
					where   current of c8;
				end if;
			if c8_rec.PAYMENT_AMT_O  <> 0 then
				update  ap3_cl set
			 		class_payment_AMT_O		=			 c9_rec.CLASS_AMT_O, 
			 		class_payment_AMT_L		=			 round(c9_rec.CLASS_AMT_O * c8_rec.payment_RATE,2)
					where   current of c8;
			end if;
		close c9;

	<<LOOP5_END>>
	  null;
	end loop;
	close C8;

 	open C10;
	loop
      fetch C10 into C10_rec ;
		exit when C10%notfound or C10%notfound is null;

		open C11(C10_rec.bl_no,C10_rec.CLASS_1);
			fetch C11 into C11_rec ;
			if C11%notfound or C11%notfound is null then
				close C11;
				if  C10_rec.THIS_AMT_O = 0 and  C10_rec.class_THIS_AMT_O is null then  
						 update  ap3_cl set 
						 	class_THIS_AMT_O		=			 0 
						where   current of C10;
				end if;
				if  C10_rec.THIS_AMT_L = 0 and  C10_rec.class_THIS_AMT_L  is null then  
						 update  ap3_cl set 
						 	class_THIS_AMT_L		=			 0 
						where   current of C10;
				end if;
				goto loop6_end;
			end if;
			if  C10_rec.THIS_AMT_O = 0 and  C10_rec.class_THIS_AMT_O is null then  
					 update  ap3_cl set 
					 	class_THIS_AMT_O		=			 0 
					where   current of C10;
			end if;
			if  C10_rec.THIS_AMT_L = 0 and  C10_rec.class_THIS_AMT_L  is null then  
					 update  ap3_cl set 
					 	class_THIS_AMT_L		=			 0 
					where   current of C10;
				end if;
			if C10_rec.THIS_AMT_O  <> 0 then
				update  ap3_cl set
			 		class_THIS_AMT_O		=			 C11_rec.CLASS_AMT_O, 
			 		class_THIS_AMT_L		=			 round(C11_rec.CLASS_AMT_O * C10_rec.CURRENT_RATE,2)
					where   current of C10;
			end if;
		close C11;

	<<LOOP6_END>>
	  null;
	end loop;
	close C10;

 	open C12;
	loop
      fetch C12 into C12_rec ;
		exit when C12%notfound or C12%notfound is null;

		wk_REALIZE0 := round((nvl(C12_REC.CLASS_PAYMENT_AMT_O,0) * nvl(C12_REC.LAST_RATE,0)) - (nvl(C12_REC.CLASS_PAYMENT_AMT_O,0) * nvl(C12_REC.PAYMENT_RATE,0)),2);
		wk_REALIZE1 := round((nvl(C12_REC.CLASS_PAYMENT_AMT_O,0) * nvl(C12_REC.PURCHASE_RATE,0)) - (nvl(C12_REC.CLASS_PAYMENT_AMT_O,0) * nvl(C12_REC.PAYMENT_RATE,0)),2);
		wk_UNREALIZE0 := round((nvl(nvl(C12_REC.CLASS_LAST_AMT_O,0) + nvl(C12_REC.CLASS_PURCHASE_AMT_O,0) - nvl(C12_REC.CLASS_PAYMENT_AMT_O,0),0) * nvl(C12_REC.LAST_RATE,0)) - (nvl(nvl(C12_REC.CLASS_LAST_AMT_O,0) + nvl(C12_REC.CLASS_PURCHASE_AMT_O,0) - nvl(C12_REC.CLASS_PAYMENT_AMT_O,0),0) * nvl(C12_REC.CURRENT_RATE,0)),2);
		wk_UNREALIZE1 := round((nvl(nvl(C12_REC.CLASS_LAST_AMT_O,0) + nvl(C12_REC.CLASS_PURCHASE_AMT_O,0) - nvl(C12_REC.CLASS_PAYMENT_AMT_O,0),0) * nvl(C12_REC.PURCHASE_RATE,0)) - (nvl(nvl(C12_REC.CLASS_LAST_AMT_O,0) + nvl(C12_REC.CLASS_PURCHASE_AMT_O,0) - nvl(C12_REC.CLASS_PAYMENT_AMT_O,0),0) * nvl(C12_REC.CURRENT_RATE,0)),2);

		if C12_REC.CLASS_PURCHASE_AMT_O = 0 then
			wk_REALIZE     := wk_REALIZE0;
			wk_UNREALIZE   := wk_UNREALIZE0;
		else
				if C12_REC.CLASS_LAST_AMT_O <> 0 then
					wk_REALIZE     := wk_REALIZE0;
				else
					wk_REALIZE     := wk_REALIZE1;
				end if;
				wk_UNREALIZE   := wk_UNREALIZE1;
		end if;

		update  AP3_CL
		   set   CLASS_REALIZE          = wk_REALIZE,
				 CLASS_UNREALIZE        = wk_UNREALIZE
		 where  current of C12;

	<<LOOP7_END>>
	  null;
	end loop;
	close C12;

   end;

end  make_ap3_cl;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."MAKE_AR3_CL" 
as
/*************************************************************************
  ?????      ?P-GLOSAS
  ???????  ?????????????????????
  ??????    ?make_ar3_cl
  ????        ?2009/11/30
  ???          ?FDK Y.hagai

***************************************************************************/
begin
   declare

--AR3_CL??????
	cursor C1 
	is
	SELECT to_char(p.BL_DATE, 'DD/MM/YYYY') BL_DATE  ,
		a.CUSTOMER_CODE                              ,
		a.CUSTOMER                                   ,
		a.BL_NO                                      ,
		a.CURRENT_CURR_CODE                          ,
		a.CURRENT_CURR_MARK                          ,
		a.CURRENT_RATE                               ,
		a.LAST_CURR_MARK                             ,
		a.LAST_RATE                                  ,
		a.LAST_AMT_O                                 ,
		a.LAST_AMT_L                                 ,
		a.SALES_CURR_MARK                            ,
		a.SALES_RATE                                 ,
		a.SALES_AMT_O                                ,
		a.SALES_AMT_L                                ,
		a.RECEIPT_CURR_MARK                          ,
		a.RECEIPT_RATE                               ,
		a.RECEIPT_AMT_O                              ,
		a.RECEIPT_AMT_L                              ,
		a.THIS_AMT_O                                 ,
		a.THIS_AMT_L                                 ,
		a.REALIZE                                    ,
		a.UNREALIZE                                  ,
		b.CLASS_1
	FROM AR2_CL a,
		(SELECT x.BL_NO,
			x.BL_DATE
		 FROM ACCOUNT_RECEIVABLE x
		where x.TYPE = 1) p,
		(select dh.INV_NO, cl.CLASS_1 from DO_HEADER dh,DO_DETAILS dd,item i,class cl
		 where dh.DO_NO = dd.DO_NO
		  and dd.ITEM_NO = i.ITEM_NO(+)
		  and dd.ITEM_NO is not null
		  and i.CLASS_CODE = cl.CLASS_CODE(+)
		 group by  dh.INV_NO, cl.CLASS_1) b
	WHERE (a.LAST_AMT_O != 0
		or a.SALES_AMT_O != 0
		or a.RECEIPT_AMT_O != 0
		or a.THIS_AMT_O != 0)
		AND a.BL_NO = p.BL_NO(+)
		and a.BL_NO = b.INV_NO
		ORDER BY a.CUSTOMER,a.CURRENT_CURR_CODE ,a.BL_NO,b.CLASS_1;
	c1_rec  c1%rowtype;

--LR,CR?????
    cursor C2(para1 in  varchar2)
    is
    select inv_no, count(*) class_chk from 
	(select dh.INV_NO, cl.CLASS_1 from DO_HEADER dh,DO_DETAILS dd,item i,class cl
		where dh.DO_NO = dd.DO_NO
		 and dd.ITEM_NO = i.ITEM_NO(+)
		 and dd.ITEM_NO is not null
		 and dh.inv_no = para1
		 and i.CLASS_CODE = cl.CLASS_CODE(+)
		group by  dh.INV_NO, cl.CLASS_1)
		group by inv_no;
    C2_REC         C2%rowtype;

--AR3_CL??????
	cursor C3
	is
	SELECT * from  AR3_CL a
	 order by CUSTOMER,CURRENT_CURR_CODE, BL_NO,CLASS_1
	for update;
    C3_REC         C3%rowtype;

--AR3_CL?LAST_AMT?????
	cursor C4
	is
	SELECT * from  AR3_CL a
	WHERE class_LAST_AMT_O is null
	 order by CUSTOMER,CURRENT_CURR_CODE, BL_NO,CLASS_1
	for update;
    C4_REC         C4%rowtype;


--LR,CR?????
    cursor C5(para1 in  varchar2,para2 in varchar2)
    is
		select INV_NO,CLASS_1, class_amt_o from 
		(SELECT INV_NO,CLASS_1, SUM(CLASS_AMT_O) class_amt_o FROM (
			  select distinct dh.inv_no,cl.CLASS_1,sum(round(dd.QTY * dd.U_PRICE,2) ) class_amt_o from DO_HEADER dh, DO_DETAILS dd,item i,class cl,ACCOUNT_MONTH ac
				where dh.DO_NO = dd.DO_NO(+)
				  and dh.inv_no = para1
				  and  dd.ITEM_NO = i.ITEM_NO(+)
				  and dd.ITEM_NO is not null
				  and i.CLASS_CODE = cl.CLASS_CODE(+)
				  and to_char(dh.DO_DATE, 'yyyymm') < to_char(decode(op_flag,1,ac.AC_MONTH,add_months(ac.AC_MONTH,-1)),'yyyymm')
				group by dh.inv_no,cl.CLASS_1
			  UNION ALL
			  select distinct sd.inv_no,cl.CLASS_1,sum(round(sd.QTY * sd.U_PRICE  * -1,2)) class_amt_o from SR_HEADER sh, SR_DETAILS sd,item i,class cl,ACCOUNT_MONTH ac
			   where sh.sr_NO = sd.sr_NO(+)
				 and  sd.ITEM_NO = i.ITEM_NO(+)
				 and  sd.inv_no = para1
				 and i.CLASS_CODE = cl.CLASS_CODE(+)
				  and to_char(sh.sr_DATE, 'yyyymm') < to_char(decode(op_flag,1,ac.AC_MONTH,add_months(ac.AC_MONTH,-1)),'yyyymm')
			   group by sd.inv_no,cl.CLASS_1)
		GROUP BY INV_NO,CLASS_1 ) 
		where CLASS_1 = para2;
    C5_REC         C5%rowtype;

--AR3_CL?SALES_AMT?????
	cursor C6
	is
	SELECT * from  AR3_CL a
	WHERE class_SALES_AMT_O is null
	 order by CUSTOMER,CURRENT_CURR_CODE, BL_NO,CLASS_1
	for update;
    C6_REC         C6%rowtype;


--LR,CR?????
    cursor C7(para1 in  varchar2,para2 in varchar2)
    is
		select INV_NO,CLASS_1, class_amt_o from 
		(SELECT INV_NO,CLASS_1, SUM(CLASS_AMT_O) class_amt_o FROM (
			  select distinct dh.inv_no,cl.CLASS_1,sum(round(dd.QTY * dd.U_PRICE,2) ) class_amt_o from DO_HEADER dh, DO_DETAILS dd,item i,class cl,ACCOUNT_MONTH ac
				where dh.DO_NO = dd.DO_NO(+)
				  and dh.inv_no = para1
				  and dd.ITEM_NO = i.ITEM_NO(+)
				  and dd.ITEM_NO is not null
				  and i.CLASS_CODE = cl.CLASS_CODE(+)
				group by dh.inv_no,cl.CLASS_1
			  UNION ALL
			  select distinct sd.inv_no,cl.CLASS_1,sum(round(sd.QTY * sd.U_PRICE  * -1,2)) class_amt_o from SR_HEADER sh, SR_DETAILS sd,item i,class cl,ACCOUNT_MONTH ac
			   where sh.sr_NO = sd.sr_NO(+)
				 and  sd.ITEM_NO = i.ITEM_NO(+)
				 and  sd.inv_no = para1
				 and i.CLASS_CODE = cl.CLASS_CODE(+)
			   group by sd.inv_no,cl.CLASS_1)
		GROUP BY INV_NO,CLASS_1 ) 
		where CLASS_1 = para2;
    C7_REC         C7%rowtype;

--AR3_CL?RECEIPT_AMT?????
	cursor C8
	is
	SELECT * from  AR3_CL a
	WHERE class_RECEIPT_AMT_O is null
	 order by CUSTOMER,CURRENT_CURR_CODE, BL_NO,CLASS_1
	for update;
    C8_REC         C8%rowtype;


--LR,CR?????
    cursor C9(para1 in  varchar2,para2 in varchar2)
    is
		select INV_NO,CLASS_1, class_amt_o from 
		(SELECT INV_NO,CLASS_1, SUM(CLASS_AMT_O) class_amt_o FROM (
			  select distinct dh.inv_no,cl.CLASS_1,sum(round(dd.QTY * dd.U_PRICE,2) ) class_amt_o from DO_HEADER dh, DO_DETAILS dd,item i,class cl,ACCOUNT_MONTH ac
				where dh.DO_NO = dd.DO_NO(+)
				  and dh.inv_no = para1
				  and dd.ITEM_NO = i.ITEM_NO(+)
				  and dd.ITEM_NO is not null
				  and i.CLASS_CODE = cl.CLASS_CODE(+)
				group by dh.inv_no,cl.CLASS_1
			  UNION ALL
			  select distinct sd.inv_no,cl.CLASS_1,sum(round(sd.QTY * sd.U_PRICE  * -1,2)) class_amt_o from SR_HEADER sh, SR_DETAILS sd,item i,class cl,ACCOUNT_MONTH ac
			   where sh.sr_NO = sd.sr_NO(+)
				 and  sd.ITEM_NO = i.ITEM_NO(+)
				 and  sd.inv_no = para1
				 and i.CLASS_CODE = cl.CLASS_CODE(+)
			   group by sd.inv_no,cl.CLASS_1)
		GROUP BY INV_NO,CLASS_1 ) 
		where CLASS_1 = para2;
    C9_REC         C9%rowtype;

--AR3_CL?THIS_AMT?????
	cursor C10
	is
	SELECT * from  AR3_CL a
	WHERE class_THIS_AMT_O is null
	 order by CUSTOMER,CURRENT_CURR_CODE, BL_NO,CLASS_1
	for update;
    C10_REC         C10%rowtype;


--LR,CR?????
    cursor C11(para1 in  varchar2,para2 in varchar2)
    is
		select INV_NO,CLASS_1, class_amt_o from 
		(SELECT INV_NO,CLASS_1, SUM(CLASS_AMT_O) class_amt_o FROM (
			  select distinct dh.inv_no,cl.CLASS_1,sum(round(dd.QTY * dd.U_PRICE,2) ) class_amt_o from DO_HEADER dh, DO_DETAILS dd,item i,class cl,ACCOUNT_MONTH ac
				where dh.DO_NO = dd.DO_NO(+)
				  and dh.inv_no = para1
				  and  dd.ITEM_NO = i.ITEM_NO(+)
				  and dd.ITEM_NO is not null
				  and i.CLASS_CODE = cl.CLASS_CODE(+)
				group by dh.inv_no,cl.CLASS_1
			  UNION ALL
			  select distinct sd.inv_no,cl.CLASS_1,sum(round(sd.QTY * sd.U_PRICE  * -1,2)) class_amt_o from SR_HEADER sh, SR_DETAILS sd,item i,class cl,ACCOUNT_MONTH ac
			   where sh.sr_NO = sd.sr_NO(+)
				 and  sd.ITEM_NO = i.ITEM_NO(+)
				 and  sd.inv_no = para1
				 and i.CLASS_CODE = cl.CLASS_CODE(+)
			   group by sd.inv_no,cl.CLASS_1)
		GROUP BY INV_NO,CLASS_1 ) 
		where CLASS_1 = para2;
    C11_REC         C11%rowtype;

--AR3_CL?THIS_AMT?????
	cursor C12
	is
	SELECT * from  AR3_CL a
	 order by CUSTOMER,CURRENT_CURR_CODE, BL_NO,CLASS_1
	for update;
    C12_REC         C12%rowtype;

    wk_REALIZE		NUMBER(20,6) :=  0;
    wk_UNREALIZE	NUMBER(20,6) :=  0;
    wk_REALIZE0		NUMBER(20,6) :=  0;
    wk_UNREALIZE0	NUMBER(20,6) :=  0;
    wk_REALIZE1		NUMBER(20,6) :=  0;
    wk_UNREALIZE1	NUMBER(20,6) :=  0;

/****************************************************
  ?????
*****************************************************/
  begin

    /* AR3_CL??? */
	delete from AR3_CL;
 	open C1;
	loop
      fetch C1 into c1_rec ;
		exit when C1%notfound or C1%notfound is null;
			insert into AR3_CL 
				(CUSTOMER_CODE,
				 CUSTOMER,
				 CURRENT_CURR_CODE,
				 CURRENT_CURR_MARK,
				 CURRENT_RATE,
				 BL_NO,
				 LAST_CURR_MARK,
				 LAST_RATE,
				 LAST_AMT_O, 
				 LAST_AMT_L,
				 SALES_CURR_MARK, 
				 SALES_RATE,
				 SALES_AMT_O,
				 SALES_AMT_L, 
				 RECEIPT_CURR_MARK,
				 RECEIPT_RATE,
				 RECEIPT_AMT_O, 
				 RECEIPT_AMT_L,
				 THIS_AMT_O, 
				 THIS_AMT_L,
				 REALIZE,
				 UNREALIZE, 
				 CLASS_1
				)
			values
				(c1_rec.CUSTOMER_CODE,
				 c1_rec.CUSTOMER,
				 c1_rec.CURRENT_CURR_CODE,
				 c1_rec.CURRENT_CURR_MARK,
				 c1_rec.CURRENT_RATE,
				 c1_rec.BL_NO,
				 c1_rec.LAST_CURR_MARK,
				 c1_rec.LAST_RATE,
				 c1_rec.LAST_AMT_O, 
				 c1_rec.LAST_AMT_L,
				 c1_rec.SALES_CURR_MARK, 
				 c1_rec.SALES_RATE,
				 c1_rec.SALES_AMT_O,
				 c1_rec.SALES_AMT_L, 
				 c1_rec.RECEIPT_CURR_MARK,
				 c1_rec.RECEIPT_RATE,
				 c1_rec.RECEIPT_AMT_O, 
				 c1_rec.RECEIPT_AMT_L,
				 c1_rec.THIS_AMT_O, 
				 c1_rec.THIS_AMT_L,
				 c1_rec.REALIZE,
				 c1_rec.UNREALIZE, 
				 c1_rec.class_1);

	<<LOOP_END>>
	  null;
	end loop;
	close C1;


 	open C3;
	loop
      fetch C3 into c3_rec ;
		exit when C3%notfound or C3%notfound is null;

		open C2(c3_rec.bl_no);
			fetch C2 into c2_rec ;
			if C2%notfound or C2%notfound is null then
				 update  AR3_CL set 
				 	class_LAST_AMT_O		=			 c3_rec.LAST_AMT_O, 
				 	class_LAST_AMT_L		=			 c3_rec.LAST_AMT_L,
				 	class_SALES_AMT_O		=			 c3_rec.SALES_AMT_O,
				 	class_SALES_AMT_L		= 			 c3_rec.SALES_AMT_L, 
				 	class_RECEIPT_AMT_O		= 			 c3_rec.RECEIPT_AMT_O, 
				 	class_RECEIPT_AMT_L		=			 c3_rec.RECEIPT_AMT_L,
				 	class_THIS_AMT_O		= 			 c3_rec.THIS_AMT_O, 
				 	class_THIS_AMT_L		=			 c3_rec.THIS_AMT_L
					where   current of c3;
					close c2;
				goto loop2_end;
			end if;
			if c2_rec.CLASS_CHK = 1 then
				 update  AR3_CL set
				 	class_LAST_AMT_O		=			 c3_rec.LAST_AMT_O, 
				 	class_LAST_AMT_L		=			 c3_rec.LAST_AMT_L,
				 	class_SALES_AMT_O		=			 c3_rec.SALES_AMT_O,
				 	class_SALES_AMT_L	=	 			 c3_rec.SALES_AMT_L, 
				 	class_RECEIPT_AMT_O		= 			 c3_rec.RECEIPT_AMT_O, 
				 	class_RECEIPT_AMT_L		=			 c3_rec.RECEIPT_AMT_L,
				 	class_THIS_AMT_O		= 			 c3_rec.THIS_AMT_O, 
				 	class_THIS_AMT_L		=			 c3_rec.THIS_AMT_L
					where   current of c3;
					close c2;
				goto loop2_end;
	         end if;
		close c2;

	<<LOOP2_END>>
	  null;
	end loop;
	close C3;

 	open C4;
	loop
      fetch C4 into c4_rec ;
		exit when C4%notfound or C4%notfound is null;

		open C5(c4_rec.bl_no,c4_rec.CLASS_1);
			fetch C5 into c5_rec ;
			if C5%notfound or C5%notfound is null then
/*
				 update  AR3_CL set 
				 	class_LAST_AMT_O		=			 c4_rec.LAST_AMT_O, 
				 	class_LAST_AMT_L		=			 c4_rec.LAST_AMT_L,
				 	class_SALES_AMT_O		=			 c4_rec.SALES_AMT_O,
				 	class_SALES_AMT_L		= 			 c4_rec.SALES_AMT_L, 
				 	class_RECEIPT_AMT_O		= 			 c4_rec.RECEIPT_AMT_O, 
				 	class_RECEIPT_AMT_L		=			 c4_rec.RECEIPT_AMT_L,
				 	class_THIS_AMT_O		= 			 c4_rec.THIS_AMT_O, 
				 	class_THIS_AMT_L		=			 c4_rec.THIS_AMT_L
					where   current of c4;
*/
				close c5;
				if  c4_rec.LAST_AMT_O = 0 and  c4_rec.class_LAST_AMT_O is null then  
						 update  AR3_CL set 
						 	class_LAST_AMT_O		=			 0 
						where   current of c4;
				end if;
				if  c4_rec.LAST_AMT_L = 0 and  c4_rec.class_LAST_AMT_L  is null then  
						 update  AR3_CL set 
						 	class_LAST_AMT_L		=			 0 
						where   current of c4;
				end if;
				goto loop3_end;
			end if;
			update  AR3_CL set
				class_LAST_AMT_O		=			 c5_rec.CLASS_AMT_O, 
				class_LAST_AMT_L		=			 round(c5_rec.CLASS_AMT_O * c4_rec.last_RATE,2)
				where   current of c4;
		close c5;

	<<LOOP3_END>>
	  null;
	end loop;
	close C4;

 	open C6;
	loop
      fetch C6 into c6_rec ;
		exit when C6%notfound or C6%notfound is null;

		open C7(c6_rec.bl_no,c6_rec.CLASS_1);
			fetch C7 into c7_rec ;
			if C7%notfound or C7%notfound is null then
				close c7;
				goto loop4_end;
			end if;
			if  c6_rec.SALES_AMT_O = 0 and  c6_rec.class_SALES_AMT_O is null then  
					 update  AR3_CL set 
					 	class_SALES_AMT_O		=			 0 
					where   current of c6;
			end if;
			if  c6_rec.SALES_AMT_L = 0 and  c6_rec.class_SALES_AMT_L  is null then  
					 update  AR3_CL set 
					 	class_SALES_AMT_L		=			 0 
					where   current of c6;
				end if;
			if c6_rec.SALES_AMT_O  <> 0 then
				update  AR3_CL set
					class_SALES_AMT_O		=			 c7_rec.CLASS_AMT_O, 
					class_SALES_AMT_L		=			 round(c7_rec.CLASS_AMT_O * c6_rec.SALES_RATE,2)
					where   current of c6;
			end if;
		close c7;

	<<LOOP4_END>>
	  null;
	end loop;
	close C6;

 	open C8;
	loop
      fetch C8 into c8_rec ;
		exit when C8%notfound or C8%notfound is null;

		open C9(c8_rec.bl_no,c8_rec.CLASS_1);
			fetch C9 into c9_rec ;
			if C9%notfound or C9%notfound is null then
				close c9;
				if  c8_rec.RECEIPT_AMT_O = 0 and  c8_rec.class_RECEIPT_AMT_O is null then  
						 update  AR3_CL set 
						 	class_RECEIPT_AMT_O		=			 0 
						where   current of c8;
				end if;
				if  c8_rec.RECEIPT_AMT_L = 0 and  c8_rec.class_RECEIPT_AMT_L  is null then  
						 update  AR3_CL set 
						 	class_RECEIPT_AMT_L		=			 0 
						where   current of c8;
				end if;
				goto loop5_end;
			end if;
			if  c8_rec.RECEIPT_AMT_O = 0 and  c8_rec.class_RECEIPT_AMT_O is null then  
					 update  AR3_CL set 
					 	class_RECEIPT_AMT_O		=			 0 
					where   current of c8;
			end if;
			if  c8_rec.RECEIPT_AMT_L = 0 and  c8_rec.class_RECEIPT_AMT_L  is null then  
					 update  AR3_CL set 
					 	class_RECEIPT_AMT_L		=			 0 
					where   current of c8;
				end if;
			if c8_rec.RECEIPT_AMT_O  <> 0 then
				update  AR3_CL set
			 		class_RECEIPT_AMT_O		=			 c9_rec.CLASS_AMT_O, 
			 		class_RECEIPT_AMT_L		=			 round(c9_rec.CLASS_AMT_O * c8_rec.RECEIPT_RATE,2)
					where   current of c8;
			end if;
		close c9;

	<<LOOP5_END>>
	  null;
	end loop;
	close C8;

 	open C10;
	loop
      fetch C10 into C10_rec ;
		exit when C10%notfound or C10%notfound is null;

		open C11(C10_rec.bl_no,C10_rec.CLASS_1);
			fetch C11 into C11_rec ;
			if C11%notfound or C11%notfound is null then
				close C11;
				if  C10_rec.THIS_AMT_O = 0 and  C10_rec.class_THIS_AMT_O is null then  
						 update  AR3_CL set 
						 	class_THIS_AMT_O		=			 0 
						where   current of C10;
				end if;
				if  C10_rec.THIS_AMT_L = 0 and  C10_rec.class_THIS_AMT_L  is null then  
						 update  AR3_CL set 
						 	class_THIS_AMT_L		=			 0 
						where   current of C10;
				end if;
				goto loop6_end;
			end if;
			if  C10_rec.THIS_AMT_O = 0 and  C10_rec.class_THIS_AMT_O is null then  
					 update  AR3_CL set 
					 	class_THIS_AMT_O		=			 0 
					where   current of C10;
			end if;
			if  C10_rec.THIS_AMT_L = 0 and  C10_rec.class_THIS_AMT_L  is null then  
					 update  AR3_CL set 
					 	class_THIS_AMT_L		=			 0 
					where   current of C10;
				end if;
			if C10_rec.THIS_AMT_O  <> 0 then
				update  AR3_CL set
			 		class_THIS_AMT_O		=			 C11_rec.CLASS_AMT_O, 
			 		class_THIS_AMT_L		=			 round(C11_rec.CLASS_AMT_O * C10_rec.CURRENT_RATE,2)
					where   current of C10;
			end if;
		close C11;

	<<LOOP6_END>>
	  null;
	end loop;
	close C10;

 	open C12;
	loop
      fetch C12 into C12_rec ;
		exit when C12%notfound or C12%notfound is null;

		wk_REALIZE0 := round((nvl(C12_REC.CLASS_RECEIPT_AMT_O,0) * nvl(C12_REC.LAST_RATE,0)) - (nvl(C12_REC.CLASS_RECEIPT_AMT_O,0) * nvl(C12_REC.RECEIPT_RATE,0)),2);
		wk_REALIZE1 := round((nvl(C12_REC.CLASS_RECEIPT_AMT_O,0) * nvl(C12_REC.SALES_RATE,0)) - (nvl(C12_REC.CLASS_RECEIPT_AMT_O,0) * nvl(C12_REC.RECEIPT_RATE,0)),2);
		wk_UNREALIZE0 := round((nvl(nvl(C12_REC.CLASS_LAST_AMT_O,0) + nvl(C12_REC.CLASS_SALES_AMT_O,0) - nvl(C12_REC.CLASS_RECEIPT_AMT_O,0),0) * nvl(C12_REC.LAST_RATE,0)) - (nvl(nvl(C12_REC.CLASS_LAST_AMT_O,0) + nvl(C12_REC.CLASS_SALES_AMT_O,0) - nvl(C12_REC.CLASS_RECEIPT_AMT_O,0),0) * nvl(C12_REC.CURRENT_RATE,0)),2);
		wk_UNREALIZE1 := round((nvl(nvl(C12_REC.CLASS_LAST_AMT_O,0) + nvl(C12_REC.CLASS_SALES_AMT_O,0) - nvl(C12_REC.CLASS_RECEIPT_AMT_O,0),0) * nvl(C12_REC.SALES_RATE,0)) - (nvl(nvl(C12_REC.CLASS_LAST_AMT_O,0) + nvl(C12_REC.CLASS_SALES_AMT_O,0) - nvl(C12_REC.CLASS_RECEIPT_AMT_O,0),0) * nvl(C12_REC.CURRENT_RATE,0)),2);
--		if C12_REC.CLASS_SALES_AMT_O = 0 then
--			/*  REALIZE = ????????? - ????????? */
--			WK_REALIZE0   :=   round((nvl(C12_REC.RECEIPT_AMT_O,0) * nvl(C12_REC.LAST_RATE,0))
--							- (nvl(C12_REC.RECEIPT_AMT_O,0) * nvl(C12_REC.RECEIPT_RATE,0)),2);
--
--			/*  UNREALIZE = ??? - ?????????? - ??? - ?????????? */
--			WK_UNREALIZE0 :=   round((nvl(0 + nvl(C12_REC.SALES_AMT_O,0) - nvl(C12_REC.RECEIPT_AMT_O,0),0) * nvl(C12_REC.LAST_RATE,0))
--							- (nvl(0 + nvl(C12_REC.SALES_AMT_O,0) - nvl(C12_REC.RECEIPT_AMT_O,0),0) * nvl(C12_REC.current_rate,0)),2);
--		end if;
/*
		if C12_REC.CLASS_SALES_AMT_O = 0 then
			wk_REALIZE   :=   round(0
							  - (nvl(C12_REC.CLASS_RECEIPT_AMT_O,0) * nvl(C12_REC.RECEIPT_RATE,0)),2);

			wk_UNREALIZE :=   round((nvl(0 + nvl(C12_REC.CLASS_SALES_AMT_O,0) - nvl(C12_REC.RECEIPT_AMT_O,0),0) * 0)
							  - (nvl(0 + nvl(C12_REC.CLASS_SALES_AMT_O,0) - nvl(C12_REC.RECEIPT_AMT_O,0),0) * nvl(C12_REC.CURRENT_RATE,0)),2);
		Else
			wk_REALIZE   :=   round((nvl(C12_REC.CLASS_RECEIPT_AMT_O,0) * nvl(C12_REC.RECEIPT_RATE,0))
							  - (nvl(C12_REC.CLASS_RECEIPT_AMT_O,0) * nvl(C12_REC.RECEIPT_RATE,0)),2);

			 wk_UNREALIZE :=   round((nvl(0 + nvl(C12_REC.CLASS_SALES_AMT_O,0) - nvl(C12_REC.RECEIPT_AMT_O,0),0) * nvl(C12_REC.SALES_RATE,0))
							  - (nvl(0 + nvl(C12_REC.CLASS_SALES_AMT_O,0) - nvl(C12_REC.RECEIPT_AMT_O,0),0) * nvl(C12_REC.CURRENT_RATE,0)),2);
		End if;
*/
		if C12_REC.CLASS_SALES_AMT_O = 0 then
			wk_REALIZE     := wk_REALIZE0;
			wk_UNREALIZE   := wk_UNREALIZE0;
			if C12_REC.CLASS_LAST_AMT_O = 0 then
				wk_REALIZE     := C12_REC.REALIZE;
				wk_UNREALIZE   := C12_REC.UNREALIZE;
			end if;
		else
				if C12_REC.CLASS_LAST_AMT_O <> 0 then
					wk_REALIZE     := wk_REALIZE0;
				else
					wk_REALIZE     := wk_REALIZE1;
				end if;
				wk_UNREALIZE   := wk_UNREALIZE1;
		end if;

		update  AR3_CL
		   set   CLASS_REALIZE          = wk_REALIZE,
				 CLASS_UNREALIZE        = wk_UNREALIZE
		 where  current of C12;

	<<LOOP7_END>>
	  null;
	end loop;
	close C12;

   end;

end  make_ar3_cl;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."MAKE_COMMON_CUSTOMER" 
/****************************************************************
  SALES FORECAST? GROUP_CUSTOMER ?????COMMON_CUSTOMER
  ???
  ???          ?2012/09/04
  ???          ?Y.Hagai
*****************************************************************/
as
begin
  declare
     cursor C1 is 
       select ITEM_NO, CUSTOMER_CODE_ORG, CUSTOMER_ORG,OPERATION_DATE
         from COMMON_CUSTOMER_TRN@MARUKI_BS
        union all
       select ITEM_NO, CUSTOMER_CODE_ORG, CUSTOMER_ORG,OPERATION_DATE
         from COMMON_CUSTOMER_TRN
       order by ITEM_NO, CUSTOMER_CODE_ORG;

     C1_REC			C1%ROWTYPE := null;

     cursor C2(PARAM1 in number, PARAM2 in number) is
       SELECT *
        FROM COMMON_CUSTOMER
       WHERE ITEM_NO = PARAM1
         AND  CUSTOMER_CODE_ORG = PARAM2
         FOR UPDATE;

     C2_REC			C2%ROWTYPE := null;

  begin
      open C1 ;
        loop
        fetch C1 into C1_REC ;
        exit when C1%notfound or C1%notfound is null;
           open C2(C1_REC.ITEM_NO,C1_REC.CUSTOMER_CODE_ORG) ;
             fetch C2 into C2_REC ;
             if C2%notfound or C2%notfound is null then
                insert into  COMMON_CUSTOMER (
                                    ITEM_NO,
                                    CUSTOMER_CODE_ORG,
                                    CUSTOMER_ORG,
                                    REG_DATE
                             ) values (
                                    C1_REC.ITEM_NO,
                                    C1_REC.CUSTOMER_CODE_ORG,
                                    C1_REC.CUSTOMER_ORG,
                                    C1_REC.OPERATION_DATE
                             );
              end if;
          close C2;

       <<LOOPEND>>
           null ;
        end loop ;
      close C1 ;
 

  end ;

end MAKE_COMMON_CUSTOMER ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."MAKE_COMMON_CUSTOMER_TRN" 
/****************************************************************
  SALES FORECAST? GROUP_CUSTOMER ?????COMMON_CUSTOMER_TRN
  ???
  ???          ?2012/08/24
  ???          ?Y.Hagai
*****************************************************************/
as
begin
  declare
     cursor C1 is 
     select item_no,
            customer_code,
            customer ,
            sum(amt_l) amt_l
      from sales
     where ac_month  >= (select add_months(ac_month, -6)
                                         from account_month
                                       )
       and item_no in (select distinct item_no
                         from group_customer
                         where group_customer = 'COMMON'
                       )
     group by item_no, customer_code, customer
     order by item_no, amt_l desc, customer;

     C1_REC			C1%ROWTYPE := null;


    bk_item_no			common_customer_trn.item_no%type		:=  0;
    bk_customer_code		common_customer_trn.CUSTOMER_CODE_ORG%type	:=  null;
    bk_customer			common_customer_trn.customer_org%type		:=  null;
    wk_ct			number(6) :=  0;
    out_flg			varchar2(1) :=  'N';


  begin
      delete from common_customer_trn;
      open C1 ;
        loop
        fetch C1 into C1_REC ;
        exit when C1%notfound or C1%notfound is null;

            /* ??item_no???????????? */
            if  bk_item_no = c1_rec.item_no then

                /* ??item_no???????? */
                if  wk_ct < 3 then 
                    insert into common_customer_trn (
                                item_no,
                                customer_code_org,
                                customer_org,
                                operation_date
                                               ) values (
                                bk_item_no,
                                bk_customer_code,
                                bk_customer,
                                sysdate);
                    wk_ct :=  wk_ct + 1;
                    bk_item_no		:= c1_rec.item_no;
                    bk_customer_code	:= c1_rec.customer_code;
                    bk_customer		:= c1_rec.customer;
                    out_flg		:= 'Y';
               end if;
             else 
                 if out_flg = 'Y' then
                    insert into common_customer_trn (
                                item_no,
                                customer_code_org,
                                customer_org,
                                operation_date
                                               ) values (
                                bk_item_no,
                                bk_customer_code,
                                bk_customer,
                                sysdate);
                    wk_ct :=  wk_ct + 1;
                    out_flg		:= 'N';
                 end if;
                 WK_CT :=  0;
                 bk_item_no		:= c1_rec.item_no;
                 bk_customer_code	:= c1_rec.customer_code;
                 bk_customer		:= c1_rec.customer;
 
             end if;
       <<LOOPEND>>
           null ;
        end loop ;
      close C1 ;
 

  end ;

end MAKE_COMMON_CUSTOMER_TRN ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."MAKE_DL_GRADE_ITEM" 
/****************************************************************
  ITEM????GRADE_CODE,CUSTOMER_TYPE,PACKAGE_TYPE?????
  ???          ?2017/04/25
  ???          ?Y.Hagai
*****************************************************************/
as
begin
  declare
     cursor C1 is 
       select i.ITEM_NO,i.ITEM,i.DESCRIPTION,i.CLASS_CODE,i.GRADE_CODE,c.CLASS_1,c.CLASS_2
         from ITEM i,class c
        where stock_subject_code in (5)
          and delete_type is null
          and i.CLASS_CODE = c.CLASS_CODE(+)
          and c.CLASS_1 = 'LR'
       order by ITEM_NO;


     C1_REC			C1%ROWTYPE := null;

     cursor C2 (PARA in number) is 
		select PARA as ITEM_NO
		     , level as HIER
		     , case when level < lead(level) over(order by rownum) then 0 else 1 end as IS_LEAF
		     , replace(sys_connect_by_path(x.REFERENCE_NUMBER, ':'), ':') as SORT_KEY
		     , x.UPPER_ITEM_NO, x.LEVEL_NO, x.LINE_NO, x.REFERENCE_NUMBER
		     , x.LOWER_ITEM_NO, x.QUANTITY, x.QUANTITY_BASE, x.FAILURE_RATE
		     , x.USER_SUPPLY_FLAG, x.SUBCON_SUPPLY_FLAG
		     , x.ITEM_TYPE2, x.DESCRIPTION, x.ITEM, x.CATALOG_NO
		     , x.DRAWING_NO, x.DRAWING_REV, x.DRAWING_NO_REV
		     , x.ORDER_POLICY, x.ISSUE_POLICY, x.UNIT_ENGINEERING, x.UNIT_STOCK
		     , x.UNIT_ENGINEER_RATE, x.UNIT_STOCK_RATE, x.MANUFACT_FAIL_RATE
		     , x.SUPPLIER_CODE, x.INSPECTION_FLAG, x.ITEM_FLAG
		     , x.MANUFACT_LEADTIME, x.CAT_RECORD_FLAG
		  from (
				select a.*
				     , c.ITEM_TYPE2, c.DESCRIPTION, c.ITEM, c.CATALOG_NO, c.DRAWING_NO, c.DRAWING_REV
				     , rpad(c.DRAWING_NO, 20, ' ') || nvl(c.DRAWING_REV, ' ') as DRAWING_NO_REV
				     , c.ORDER_POLICY, c.ISSUE_POLICY, c.UNIT_ENGINEERING, c.UNIT_STOCK
				     , nvl(c.MANUFACT_FAIL_RATE, 0) as MANUFACT_FAIL_RATE
				     , nvl(c.UNIT_ENGINEER_RATE, 1) as UNIT_ENGINEER_RATE
				     , nvl(c.UNIT_STOCK_RATE,    1) as UNIT_STOCK_RATE
				     , nvl(c.MANUFACT_LEADTIME,  0) as MANUFACT_LEADTIME
				     , c.SUPPLIER_CODE, c.MAK, null as SHIPTO_CODE, null as BUYER_CODE
				     , null as INSPECTION_FLAG, c.ITEM_FLAG, ' ' as CAT_RECORD_FLAG
				  from STRUCTURE a
				  join ITEM c
				    on c.ITEM_NO = a.LOWER_ITEM_NO
				 where a.LEVEL_NO = nvl((select max(LEVEL_NO) from LEVELD b
										  where b.ITEM_NO = a.UPPER_ITEM_NO), a.LEVEL_NO)
				   and c.ITEM LIKE '%LABEL%'
				   and (c.ITEM_NO NOT LIKE '6%' AND  c.ITEM_NO NOT LIKE '5%')
		       ) x
		where x.LOWER_ITEM_NO  NOT LIKE '7%'
		start with x.UPPER_ITEM_NO = PARA
		connect by prior x.LOWER_ITEM_NO = x.UPPER_ITEM_NO;

     C2_REC			C2%ROWTYPE := null;

     cursor C3 is 
       select ITEM_NO
         from DL_GRADE_ITEM 
       order by ITEM_NO
       for update ;

     C3_REC			C3%ROWTYPE := null;

     cursor C4 (PARA in number) is 
       select  distinct s.UPPER_ITEM_NO,s.LOWER_ITEM_NO,i2.ITEM,i2.DESCRIPTION from STRUCTURE s,item i,item i2
          where s.UPPER_ITEM_NO = i.ITEM_NO
            and  s.LOWER_ITEM_NO = i2.ITEM_NO
            and i2.STOCK_SUBJECT_CODE  =4 
            and i.STOCK_SUBJECT_CODE <> 4
            and s.UPPER_ITEM_NO = PARA
            order by s.LOWER_ITEM_NO;

     C4_REC			C4%ROWTYPE := null;

     CT1  NUMBER(10) := 0 ;


  begin
            DBMS_OUTPUT.PUT_LINE('START- ' || to_char(sysdate,'yyyymmddhh24miss') );

  delete from DL_GRADE_ITEM;
     open C1 ;
        loop
        fetch C1 into C1_REC ;
        exit when C1%notfound or C1%notfound is null;

           C2_REC  := NULL;
            CT1 := 0;
           open C2(C1_REC.ITEM_NO) ;
--            DBMS_OUTPUT.PUT_LINE(C1_REC.ITEM_NO || ' ' || to_char(sysdate,'yyyymmddhh24miss') );
 
             fetch C2 into C2_REC ;
            CT1 := CT1 + 1;
            IF CT1 > 10 THEN
              close C2;
              GOTO LOOPEND;
            END IF;
           close C2;

           insert into DL_GRADE_ITEM (ITEM_NO, ITEM, DESCRIPTION, CLASS_CODE,
                                     CLASS_1, CLASS, GRADE_CODE, LOWER_ITEM_NO, LOWER_ITEM, LOWER_DESCRIPTION, REG_DATE) values
                                     (C1_REC.ITEM_NO, C1_REC.ITEM, C1_REC.DESCRIPTION, C1_REC.CLASS_CODE,
                                     C1_REC.CLASS_1, C1_REC.CLASS_2, C1_REC.GRADE_CODE, C2_REC.LOWER_ITEM_NO, C2_REC.ITEM, C2_REC.DESCRIPTION, SYSDATE);
--           commit;

       <<LOOPEND>>
           null ;
        end loop ;
     close C1 ;

     open C3 ;
        loop
        fetch C3 into C3_REC ;
        exit when C3%notfound or C3%notfound is null;

           C4_REC  := NULL;
           open C4(C3_REC.ITEM_NO) ;
                 fetch C4 into C4_REC ;
           close C4;
           update DL_GRADE_ITEM
             set SF_ITEM_NO      = c4_rec.LOWER_ITEM_NO
                ,SF_ITEM         = C4_REC.ITEM
                ,SF_DESCRIPTION  = C4_REC.DESCRIPTION
           where current of C3;

       <<LOOPEND2>>
           null ;
        end loop ;
      close C3 ;


      DBMS_OUTPUT.PUT_LINE('END- ' || to_char(sysdate,'yyyymmddhh24miss') );

  end ;

end make_DL_GRADE_ITEM ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."MAKE_PMPP" 
as
begin
/*************************************************************************
  ?????      ?P-GLOSAS
  ???????  ?PACKAGE MATERIAL PURCHASE PLANNING ???
  ??????    ?MAKE_PMPP
  ????        ?2010/08/25
  ???          ?FDK Y.hagai

***************************************************************************/

   declare
    /*  SO ????? */
    cursor C1
        is
        select h.customer_po_no,d.item_no,d.bal_qty,d.etd from so_header h,so_details d
        where h.so_no = d.so_no
         and d.bal_qty > 0
        order by d.etd,d.reg_date,d.item_no,h.CUSTOMER_PO_NO;

        C1_REC		 		C1%rowtype;

     /*  PACKAGE MATERIAL PURCHASE PLANNING  ???????? */
     cursor C2
      is
       select  *  from pmpp_header;
        C2_REC		 		C2%rowtype;

     /*  PACKAGE MATERIAL PURCHASE PLANNING  ????? */
     cursor C3
      is
       select  h.CUSTOMER_PO_NO,d.*,i.SECTION_CODE  from pmpp_header h,pmpp_details d,item i
         where h.SLIP_NO = d.SLIP_NO
           and d.LOWER_ITEM_NO = i.ITEM_NO(+)
              order by d.LOWER_ITEM_NO,h.SEQ;

        C3_REC		 		C3%rowtype;

     /*  PACKAGE MATERIAL PURCHASE PLANNING  ??????? */
     cursor C4 (para1 in varchar2,para2 in number)
      is
       select  *  from pmpp_details 
         where SLIP_NO = para1
           and LINE_NO = para2
           for update;

        C4_REC		 		C4%rowtype;

     /*  WHINVENTORY ????? */
    cursor C5(PARAM1 in number,PARAM2 in number) is
     select this_inventory
     from whinventory
     where item_no = PARAM1
       and section_code = PARAM2;

        C5_REC		 		C5%rowtype;

     /*  PRF ????????? */
     cursor C6(PARAM1 in VARCHAR2,param2 in number)
      is
       select  h.PRF_NO,d.ITEM_NO,sum(d.QTY) qty ,max(d.REQUIRE_DATE) REQUIRE_DATE from PRF_HEADER h,PRF_DETAILS d
       where  h.PRF_NO         = d.PRF_NO
         and  h.CUSTOMER_PO_NO = PARAM1
         and  d.ITEM_NO = param2
       group by h.PRF_NO,d.ITEM_NO;

        C6_REC		 		C6%rowtype;

     /*  ?????????? ????? */
     /*  ????????? ?? */
     cursor C2_CNF  
      is
       select * from CONFIGURATION where CONFIG_KEY = 'RUNNING_CHANGE';

      CNF2_REC configuration%rowtype ;

     /*  ??? ????? */
     cursor C_STR(PARAM1 in number,PARAM2 in number)
      is
       select  *  from structure
       where upper_item_no =PARAM1
         and level_no = PARAM2
         and quantity > 0
         and nvl(user_supply_flag,0) not in ('1','2','3')
         and nvl(subcon_supply_flag,0) not in ('3','4') ;

       STR_REC   structure%rowtype ;

     /*  ITEM ????? */
     cursor C_ITM(PARAM1 in number)
      is
       select  *  from item
       where item_no =PARAM1;

       UITM_REC  item%rowtype ;
       LITM_REC  item%rowtype ;

     /*  RUNNINNGCHANGE ????? */
     cursor C_RNC(PARAM1 in number,PARAM2 in number)
      is
       select  *  from runningchange
       where item_no = PARAM1
         and NEW_ITEM_NO = PARAM2
         and VALID_FLAG  = '1' ;

       RNC_REC  runningchange%rowtype ;

        wk_item_no       number(8) ;
        bk_item_no       number(8) ;

        bk2_customer_po_no  prf_header.CUSTOMER_PO_NO%type	:= '0'  ;
        bk2_item_no         prf_details.ITEM_NO%type 		:= 0 ;

        wk_header_cnt                   number(10)		:= 0 ;
        wk_detail_cnt                   number(10)		:= 0 ;
        wk_inventory_qty		pmpp_details.inventory_qty%type		:= 0;
        wk_remain_qty			pmpp_details.remain_qty%type		:= 0;
        wk_prf_qty			pmpp_details.prf_qty%type		:= 0;
        wk_deliverd_qty			pmpp_details.deliverd_qty%type		:= 0;


   begin
        delete from PMPP_HEADER;
        delete from PMPP_DETAILS;

 /* ?????2?? */
    open C2_CNF ;
        CNF2_REC := null ;
        fetch C2_CNF into CNF2_REC ;
    close C2_CNF ;

        open C1;
        loop
          fetch C1 into C1_REC;
          exit when C1%notfound or C1%notfound is null;

          wk_header_cnt := wk_header_cnt + 1;

          /* ?????????????? */
          insert into PMPP_HEADER(SLIP_NO,
                                  CUSTOMER_PO_NO,
                                  UPPER_ITEM_NO,
                                  UPPER_QTY,
                                  ETD,
                                  SEQ,
                                  REG_DATE)
                      VALUES     (to_char(sysdate,'yyyymmdd')||to_char(wk_header_cnt,'fm0999999990'),
                                  c1_rec.CUSTOMER_PO_NO,
                                  c1_rec.ITEM_NO,
                                  c1_rec.BAL_QTY,
                                  c1_rec.ETD,
                                  wk_header_cnt,
                                  sysdate);

        <<LOOP_END>>
          null;
        end loop;
        close C1;

  /* PMPP_HEADER ?? PMPP_DETAILS ???  */
    open C2;
    loop
      fetch C2 into C2_REC ;
          exit when C2%notfound or C2%notfound is null;

         /* ????? */
           open C_ITM(C2_REC.UPPER_ITEM_NO) ;
               UITM_REC := null ;
               fetch C_ITM into UITM_REC ;
           close C_ITM ;
           if  UITM_REC.ITEM_NO is null then
               goto END_LOOP2 ;
           End If ;

          wk_detail_cnt := 0;

         /* ??????? */
            open C_STR (C2_REC.UPPER_ITEM_NO,NVL(C2_REC.UPPER_LEVEL_NO,0)) ;
            loop
                 fetch C_STR into STR_REC ;
                 exit when C_STR%notfound or C_STR%notfound is null;

                       wk_detail_cnt := wk_detail_cnt + 1;

                      /* ????? */
                        open C_ITM(STR_REC.LOWER_ITEM_NO) ;
                            LITM_REC := null ;
                            fetch C_ITM into LITM_REC ;
                        close C_ITM ;
                        if  LITM_REC.ITEM_NO is null then
                            goto END_LOOP_STR ;
                        End If ;

                     /* ??????? */
                      If STR_REC.QUANTITY_BASE = 0 or STR_REC.QUANTITY_BASE is null Then
                          STR_REC.QUANTITY_BASE := 1 ;
                      End If ;

                      /*
                         2007/07/19 Y.Hagai ????????
                         ?????????????????????????????
                      */

                       wk_item_no := LITM_REC.ITEM_NO;

                       If CNF2_REC.CONFIG_FLAG = 1 Then
                          open C_RNC(C2_REC.UPPER_ITEM_NO,LITM_REC.ITEM_NO) ;
                               RNC_REC := null ;
                               fetch C_RNC into RNC_REC ;
                          close C_RNC;
                          if  RNC_REC.OLD_ITEM_NO is not null then
                               wk_item_no := RNC_REC.OLD_ITEM_NO;
                          End If ;
                       End If ;
--?????????
                     str_rec.QUANTITY := 1;

                      insert into PMPP_DETAILS(
                         SLIP_NO ,
                         LINE_NO   ,
                         LOWER_ITEM_NO,
                         STRC_QTY,
                         STRC_QTY_BASE,
                         FAILURE_RATE,
                         DEMAND_QTY,
                         DEMAND_DATE
                      ) values (
                        C2_REC.SLIP_NO,
                        wk_detail_cnt,
                        wk_item_no ,
                        str_rec.QUANTITY,
                        str_rec.QUANTITY_BASE,
                        str_rec.FAILURE_RATE,
                        decode(TRUNC(trunc(C2_REC.UPPER_QTY / (str_rec.QUANTITY_BASE /  str_rec.QUANTITY) + 0.9)
                        + (C2_REC.UPPER_QTY / (str_rec.QUANTITY_BASE /  str_rec.QUANTITY) * str_rec.FAILURE_RATE / 100) + 0.9),0,1,
                          TRUNC(trunc(C2_REC.UPPER_QTY / (str_rec.QUANTITY_BASE /  str_rec.QUANTITY) + 0.9)
                        + (C2_REC.UPPER_QTY / (str_rec.QUANTITY_BASE /  str_rec.QUANTITY) * str_rec.FAILURE_RATE / 100) + 0.9)),
                        c2_rec.ETD                      ) ;
              <<END_LOOP_STR>>
               null ;
            end loop ;
            close C_STR ;

        <<END_LOOP2>>
            null ;
    end loop;
    close C2;

  /* ?????????  */
    open C3;
    loop
      fetch C3 into C3_REC ;
         exit when C3%notfound ;

            /* PRF   */
            if (bk2_customer_po_no <> C3_REC.CUSTOMER_PO_NO) OR  (BK2_ITEM_NO <> C3_REC.LOWER_ITEM_NO) then
                open C6(C3_REC.customer_po_no,C3_rec.LOWER_ITEM_NO) ;
                  C6_REC := null ;
                  fetch C6 into C6_REC ;
                    if  C6%notfound or C6%notfound is null then
                        wk_prf_qty  := 0;
                    else
                        wk_prf_qty  := C6_REC.QTY ;
                    end if;
                close C6;
             else
                wk_prf_qty          := 0 ;
                C6_rec.REQUIRE_DATE := null ;
                C6_rec.PRF_NO       := null ;
             end if;

         /* ?????????  */
         if bk_item_no <> C3_REC.LOWER_ITEM_NO then
            open C5 (C3_REC.LOWER_ITEM_NO,C3_REC.SECTION_CODE);
              C5_REC := null ;
              fetch C5 into C5_REC ;
            close C5 ;

            open C4(C3_REC.SLIP_NO,C3_rec.LINE_NO) ;
              fetch C4 into C4_REC ;
                if  C4%notfound or C4%notfound is null then
                   wk_inventory_qty  := 0;
                 else
                   wk_inventory_qty  :=  nvl(C5_REC.THIS_INVENTORY,0);
                end if;
                wk_remain_qty        :=  wk_inventory_qty - C3_REC.DEMAND_QTY;
                wk_deliverd_qty      :=  wk_remain_qty + wk_prf_qty;

                update pmpp_details
                   set  INVENTORY_QTY   = wk_inventory_qty,
                        REMAIN_QTY      = wk_remain_qty,
                        PRF_QTY         = wk_prf_qty,
                        DELIVERD_QTY    = wk_deliverd_qty,
                        PRF_NO          = C6_rec.PRF_NO,
                        PRF_REQUEST_DATE = C6_rec.REQUIRE_DATE,
                        reg_date         = sysdate
                 where current of C4;
            close C4 ;
            wk_inventory_qty := wk_deliverd_qty;
          else
           /* ?????  */
            open C4(C3_REC.SLIP_NO,C3_rec.LINE_NO) ;
              fetch C4 into C4_REC ;

                wk_remain_qty        :=  wk_inventory_qty - C3_REC.DEMAND_QTY;
                wk_deliverd_qty      :=  wk_remain_qty + wk_prf_qty;

                update pmpp_details
                   set  INVENTORY_QTY    = wk_inventory_qty,
                        REMAIN_QTY       = wk_remain_qty,
                        PRF_QTY          = wk_prf_qty,
                        DELIVERD_QTY     = wk_deliverd_qty,
                        PRF_NO           = C6_rec.PRF_NO,
                        PRF_REQUEST_DATE = C6_rec.REQUIRE_DATE,
                        reg_date         = sysdate
                 where current of C4;
                 wk_inventory_qty := wk_deliverd_qty;
            close C4 ;
          end if;

          bk_item_no         := C3_REC.LOWER_ITEM_NO;
          bk2_customer_po_no := C3_REC.CUSTOMER_PO_NO;
          bk2_item_no        := C3_REC.LOWER_ITEM_NO;
          <<END_LOOP3>>
            null ;
    end loop;
    close C3;



   end;
end make_PMPP;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."MAKE_PMPP2" 
as
begin
/*************************************************************************
  ?????      ?P-GLOSAS
  ???????  ?PACKAGE MATERIAL PURCHASE PLANNING ????MPR????
  ??????    ?MAKE_PMPP2
  ????        ?2010/08/26
  ???          ?FDK Y.hagai

***************************************************************************/

   declare
    /*  SO ????? */
    cursor C1
        is
        select  pp1.WO_NO,
                pp1.ITEM_NO,
                pp1.PRODUCT_QUANTITY,
                pp2.KURAIRE_DATE
        from (select WO_NO,
                        ITEM_NO,
                        sum(PRODUCT_QUANTITY) PRODUCT_QUANTITY
                from PRODUCT_PLAN p
                group by WO_NO, ITEM_NO) pp1,
                (select WO_NO,
                        ITEM_NO,
                        min(KURAIRE_DATE) KURAIRE_DATE
                from PRODUCT_PLAN p
                group by WO_NO, ITEM_NO) pp2
        where pp1.WO_NO = pp2.WO_NO(+)
        and pp1.ITEM_NO = pp2.ITEM_NO(+);

        C1_REC		 		C1%rowtype;

     /*  PACKAGE MATERIAL PURCHASE PLANNING  ???????? */
     cursor C2
      is
       select  *  from pmpp_header;
        C2_REC		 		C2%rowtype;

     /*  PACKAGE MATERIAL PURCHASE PLANNING  ????? */
     cursor C3
      is
       select  h.CUSTOMER_PO_NO,d.*,i.SECTION_CODE  from pmpp_header h,pmpp_details d,item i
         where h.SLIP_NO = d.SLIP_NO
           and d.LOWER_ITEM_NO = i.ITEM_NO(+)
              order by d.LOWER_ITEM_NO,h.SEQ;

        C3_REC		 		C3%rowtype;

     /*  PACKAGE MATERIAL PURCHASE PLANNING  ??????? */
     cursor C4 (para1 in varchar2,para2 in number)
      is
       select  *  from pmpp_details 
         where SLIP_NO = para1
           and LINE_NO = para2
           for update;

        C4_REC		 		C4%rowtype;

     /*  WHINVENTORY ????? */
    cursor C5(PARAM1 in number,PARAM2 in number) is
     select this_inventory
     from whinventory
     where item_no = PARAM1
       and section_code = PARAM2;

        C5_REC		 		C5%rowtype;

     /*  PRF ????????? */
     cursor C6(PARAM1 in VARCHAR2,param2 in number)
      is
       select  h.PRF_NO,d.ITEM_NO,sum(d.QTY) qty ,max(d.REQUIRE_DATE) REQUIRE_DATE from PRF_HEADER h,PRF_DETAILS d
       where  h.PRF_NO         = d.PRF_NO
         and  h.CUSTOMER_PO_NO = PARAM1
         and  d.ITEM_NO = param2
       group by h.PRF_NO,d.ITEM_NO;

        C6_REC		 		C6%rowtype;

     /*  ?????????? ????? */
     /*  ????????? ?? */
     cursor C2_CNF  
      is
       select * from CONFIGURATION where CONFIG_KEY = 'RUNNING_CHANGE';

      CNF2_REC configuration%rowtype ;

     /*  ??? ????? */
     cursor C_STR(PARAM1 in number,PARAM2 in number)
      is
       select  *  from structure
       where upper_item_no =PARAM1
         and level_no = PARAM2
         and quantity > 0
         and nvl(user_supply_flag,0) not in ('1','2','3')
         and nvl(subcon_supply_flag,0) not in ('3','4') ;

       STR_REC   structure%rowtype ;

     /*  ITEM ????? ??????????? */
     cursor C_ITM(PARAM1 in number)
      is
       select  *  from item
       where item_no = PARAM1
         and stock_subject_code not in ('1');

       UITM_REC  item%rowtype ;
       LITM_REC  item%rowtype ;

     /*  RUNNINNGCHANGE ????? */
     cursor C_RNC(PARAM1 in number,PARAM2 in number)
      is
       select  *  from runningchange
       where item_no = PARAM1
         and NEW_ITEM_NO = PARAM2
         and VALID_FLAG  = '1' ;

       RNC_REC  runningchange%rowtype ;

        wk_item_no       number(8) ;
        bk_item_no       number(8) ;

        bk2_customer_po_no  prf_header.CUSTOMER_PO_NO%type	:= '0'  ;
        bk2_item_no         prf_details.ITEM_NO%type 		:= 0 ;

        wk_header_cnt                   number(10)		:= 0 ;
        wk_detail_cnt                   number(10)		:= 0 ;
        wk_priority_seq                 number(10)		:= 0 ;            -- ??low_item_no???????????

        wk_inventory_qty		pmpp_details.inventory_qty%type		:= 0;
        wk_remain_qty			pmpp_details.remain_qty%type		:= 0;
        wk_prf_qty			pmpp_details.prf_qty%type		:= 0;
        wk_deliverd_qty			pmpp_details.deliverd_qty%type		:= 0;


   begin
        delete from PMPP_HEADER;
        delete from PMPP_DETAILS;

 /* ?????2?? */
    open C2_CNF ;
        CNF2_REC := null ;
        fetch C2_CNF into CNF2_REC ;
    close C2_CNF ;

        open C1;
        loop
          fetch C1 into C1_REC;
          exit when C1%notfound or C1%notfound is null;

          wk_header_cnt := wk_header_cnt + 1;

          /* ?????????????? */
          insert into PMPP_HEADER(SLIP_NO,
                                  CUSTOMER_PO_NO,
                                  UPPER_ITEM_NO,
                                  UPPER_QTY,
                                  ETD,
                                  SEQ,
                                  REG_DATE)
                      VALUES     (to_char(sysdate,'yyyymmdd')||to_char(wk_header_cnt,'fm0999999990'),
                                  c1_rec.WO_NO,
                                  c1_rec.ITEM_NO,
                                  c1_rec.PRODUCT_QUANTITY,
                                  c1_rec.KURAIRE_DATE,
                                  wk_header_cnt,
                                  sysdate);

        <<LOOP_END>>
          null;
        end loop;
        close C1;

  /* PMPP_HEADER ?? PMPP_DETAILS ???  */
    open C2;
    loop
      fetch C2 into C2_REC ;
          exit when C2%notfound or C2%notfound is null;

         /* ????? */
           open C_ITM(C2_REC.UPPER_ITEM_NO) ;
               UITM_REC := null ;
               fetch C_ITM into UITM_REC ;
           close C_ITM ;
           if  UITM_REC.ITEM_NO is null then
               goto END_LOOP2 ;
           End If ;

          wk_detail_cnt := 0;

         /* ??????? */
            open C_STR (C2_REC.UPPER_ITEM_NO,NVL(C2_REC.UPPER_LEVEL_NO,0)) ;
            loop
                 fetch C_STR into STR_REC ;
                 exit when C_STR%notfound or C_STR%notfound is null;


                      /* ????? */
                        open C_ITM(STR_REC.LOWER_ITEM_NO) ;
                            LITM_REC := null ;
                            fetch C_ITM into LITM_REC ;
                        close C_ITM ;
                        if  LITM_REC.ITEM_NO is null then
                            goto END_LOOP_STR ;
                        End If ;

                       wk_detail_cnt := wk_detail_cnt + 1;

                     /* ??????? */
                      If STR_REC.QUANTITY_BASE = 0 or STR_REC.QUANTITY_BASE is null Then
                          STR_REC.QUANTITY_BASE := 1 ;
                      End If ;

                      /*
                         2007/07/19 Y.Hagai ????????
                         ?????????????????????????????
                      */

                       wk_item_no := LITM_REC.ITEM_NO;

                       If CNF2_REC.CONFIG_FLAG = 1 Then
                          open C_RNC(C2_REC.UPPER_ITEM_NO,LITM_REC.ITEM_NO) ;
                               RNC_REC := null ;
                               fetch C_RNC into RNC_REC ;
                          close C_RNC;
                          if  RNC_REC.OLD_ITEM_NO is not null then
                               wk_item_no := RNC_REC.OLD_ITEM_NO;
                          End If ;
                       End If ;

                     --??????????????????????????
                     str_rec.QUANTITY := 1;

                      insert into PMPP_DETAILS(
                         SLIP_NO ,
                         LINE_NO   ,
                         LOWER_ITEM_NO,
                         STRC_QTY,
                         STRC_QTY_BASE,
                         FAILURE_RATE,
                         DEMAND_QTY,
                         DEMAND_DATE
                      ) values (
                        C2_REC.SLIP_NO,
                        wk_detail_cnt,
                        wk_item_no ,
                        str_rec.QUANTITY,
                        str_rec.QUANTITY_BASE,
                        str_rec.FAILURE_RATE,
                        decode(TRUNC(trunc(C2_REC.UPPER_QTY / (str_rec.QUANTITY_BASE /  str_rec.QUANTITY) + 0.999999) 
                            + (C2_REC.UPPER_QTY / (str_rec.QUANTITY_BASE /  str_rec.QUANTITY) * str_rec.FAILURE_RATE / 100) + 0.999999),
                               0,
                               1,
                               TRUNC(trunc(C2_REC.UPPER_QTY / (str_rec.QUANTITY_BASE /  str_rec.QUANTITY) + 0.999999)
                            + (C2_REC.UPPER_QTY / (str_rec.QUANTITY_BASE /  str_rec.QUANTITY) * str_rec.FAILURE_RATE / 100) + 0.999999)),
                        c2_rec.ETD                      ) ;
              <<END_LOOP_STR>>
               null ;
            end loop ;
            close C_STR ;

        <<END_LOOP2>>
            null ;
    end loop;
    close C2;

  /* ?????????  */
    open C3;
    loop
      fetch C3 into C3_REC ;
         exit when C3%notfound ;

            /* PRF   */
            if (bk2_customer_po_no <> C3_REC.CUSTOMER_PO_NO) OR  (BK2_ITEM_NO <> C3_REC.LOWER_ITEM_NO) then
                open C6(C3_REC.CUSTOMER_PO_NO,C3_rec.LOWER_ITEM_NO) ;
                  C6_REC := null ;
                  fetch C6 into C6_REC ;
                    if  C6%notfound or C6%notfound is null then
                        wk_prf_qty  := 0;
                    else
                        wk_prf_qty  := C6_REC.QTY ;
                    end if;
                close C6;
             else
                wk_prf_qty          := 0 ;
                C6_rec.REQUIRE_DATE := null ;
                C6_rec.PRF_NO       := null ;
             end if;

         /* ?????????  */
         if bk_item_no <> C3_REC.LOWER_ITEM_NO then

            wk_priority_seq  :=  1;  -- ???low_item_no??priority_seq??????????

            open C5 (C3_REC.LOWER_ITEM_NO,C3_REC.SECTION_CODE);
              C5_REC := null ;
              fetch C5 into C5_REC ;
            close C5 ;

            open C4(C3_REC.SLIP_NO,C3_rec.LINE_NO) ;
              fetch C4 into C4_REC ;
                if  C4%notfound or C4%notfound is null then
                   wk_inventory_qty  := 0;
                 else
                   wk_inventory_qty  :=  nvl(C5_REC.THIS_INVENTORY,0);
                end if;
                wk_remain_qty        :=  wk_inventory_qty - C3_REC.DEMAND_QTY;
                wk_deliverd_qty      :=  wk_remain_qty + wk_prf_qty;

                update pmpp_details
                   set  INVENTORY_QTY   = wk_inventory_qty,
                        REMAIN_QTY      = wk_remain_qty,
                        PRF_QTY         = wk_prf_qty,
                        DELIVERD_QTY    = wk_deliverd_qty,
                        PRF_NO          = C6_rec.PRF_NO,
                        PRF_REQUEST_DATE = C6_rec.REQUIRE_DATE,
                        reg_date         = sysdate,
                        priority_seq    = wk_priority_seq
                 where current of C4;
            close C4 ;
            wk_inventory_qty := wk_deliverd_qty;
          else

            wk_priority_seq  :=  wk_priority_seq + 1;  -- ??low_item_no??priority_seq???????????

           /* ?????  */
            open C4(C3_REC.SLIP_NO,C3_rec.LINE_NO) ;
              fetch C4 into C4_REC ;

                wk_remain_qty        :=  wk_inventory_qty - C3_REC.DEMAND_QTY;
                wk_deliverd_qty      :=  wk_remain_qty + wk_prf_qty;

                update pmpp_details
                   set  INVENTORY_QTY    = wk_inventory_qty,
                        REMAIN_QTY       = wk_remain_qty,
                        PRF_QTY          = wk_prf_qty,
                        DELIVERD_QTY     = wk_deliverd_qty,
                        PRF_NO           = C6_rec.PRF_NO,
                        PRF_REQUEST_DATE = C6_rec.REQUIRE_DATE,
                        reg_date         = sysdate,
                        priority_seq    = wk_priority_seq
                 where current of C4;
                 wk_inventory_qty := wk_deliverd_qty;
            close C4 ;
          end if;

          bk_item_no         := C3_REC.LOWER_ITEM_NO;
          bk2_customer_po_no := C3_REC.CUSTOMER_PO_NO;
          bk2_item_no        := C3_REC.LOWER_ITEM_NO;
          <<END_LOOP3>>
            null ;
    end loop;
    close C3;



   end;
end make_PMPP2;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."MAKE_PP3_UP_WK" 
as
begin
/*************************************************************************
  ?????      ?P-GLOSAS
  ???????  ?????????????????????
  ??????    ?MAKE_pp3_up_wk
  ????        ?2010/07/12
  ???          ?FDK Y.hagai

***************************************************************************/

   declare
	cursor C1
	is
	select SEQ, SHEET_NAME, SHEET_ROW, PRODUCT_LINE, PRODUCT_LINE_NO from pp3_up_wk
	 order by SEQ
	 for update;

	cursor C2
	is
	select SEQ, SHEET_NAME, SHEET_ROW, PRODUCT_LINE, PRODUCT_LINE_NO from pp3_up_wk
	 order by SEQ,PRODUCT_LINE_NO
	 for update;


	C1_REC		 			C1%rowtype;
	C2_REC		 			C2%rowtype;

	wk_product_line_no		pp3_up_wk.product_line_no%TYPE		:= 0 ;
	sheet_row_bk			pp3_up_wk.sheet_row%type			:= 0 ;
	wk_product_line			pp3_up_wk.product_line%TYPE		:= null ;
	sheet_name_bk			pp3_up_wk.sheet_name%type			:= null ;
	product_line_no_bk		pp3_up_wk.product_line_no%type		:= 0 ;


   begin

	open C1;
	loop
	  fetch C1 into C1_REC;
	  exit when C1%notfound or C1%notfound is null;
		if C1_REC.PRODUCT_LINE_NO is null then 

			/* ??????????????????????? line_no?????????? */
			if sheet_row_bk <>  C1_REC.sheet_row then
				wk_product_line_no := wk_product_line_no + 1;

			/* ???????????????????????? line_no?null?????line_no?????? */
			elsif (sheet_row_bk =  C1_REC.sheet_row) and C1_REC.PRODUCT_LINE_NO is null then
				wk_product_line_no := wk_product_line_no;

			/*  */
			else
				wk_product_line_no := C1_REC.PRODUCT_LINE_NO;
			end if;
		else 
				wk_product_line_no := C1_REC.PRODUCT_LINE_NO;
		end if;
		if C1_REC.PRODUCT_LINE_NO is null then
			update pp3_up_wk
			   set PRODUCT_LINE_NO = wk_product_line_no
			where current of C1;
		end if;

--???????
		sheet_row_bk := C1_REC.sheet_row;
	<<LOOP_END>>
	  null;
	end loop;
	close C1;

	open C2;
	loop
	  fetch C2 into C2_REC;
	  exit when C2%notfound or C2%notfound is null;
		if C2_REC.PRODUCT_LINE_NO = 1 then 
			wk_product_line	:= null;
		end if;
		if C2_REC.PRODUCT_LINE is not null then 
			wk_product_line	:= C2_REC.PRODUCT_LINE;
		end if;

		if C2_REC.PRODUCT_LINE is null then 
			if sheet_name_bk =   C2_REC.sheet_name then
				if C2_REC.product_line_no >= product_line_no_bk   then
					update pp3_up_wk
				   set PRODUCT_LINE = wk_product_line
					where current of C2;
				end if;
			end if;
		end if;
--???????
			sheet_name_bk      := C2_REC.sheet_name;
			product_line_no_bk := C2_REC.product_line_no;
	<<LOOP2_END>>
	  null;
	end loop;
	close C2;
   end;
end make_pp3_up_wk;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."MAKE_SCHEDULED_DELETION_ITEM" 
as
begin
   declare
        cursor c1(para in date)
        is
        select item_no, schedule_date, physical_delete_date, reg_date,chk_item_physical_delete(item_no) ok_flag from scheduled_deletion_item
         where  physical_delete_date is null
           and  schedule_date  = para
        order by item_no
        for update;
        c1_rec c1%rowtype := null;

        cursor c2(para in number)
        is
        select delete_type  from item
         where  item_no = para;
        c2_rec c2%rowtype := null;

        cursor c3
        is
        select i.item_no  from item i, scheduled_deletion_item sdi
         where  i.item_no = sdi.item_no(+)
           and  sdi.physical_delete_date is null
           and  sdi.item_no is null
           and  i.delete_type is not null;
        c3_rec c3%rowtype := null;

        cursor c4(para in date)
        is
        select item_no, schedule_date, physical_delete_date, reg_date  from scheduled_deletion_item
         where  physical_delete_date is null
           and  schedule_date  = para
        order by item_no
        for update;
        c4_rec c4%rowtype := null;

        cursor c5(para in number)
        is
        select 
              upto_date,
              reg_date,
              delete_type,
              item_no,
              item_code,
              item,
              item_flag,
              origin_code,
              description,
              class_code,
              uom_q,
              uom_w,
              uom_l,
              supplier_code,
              external_unit_number,
              standard_price,
              next_term_price,
              suppliers_price,
              curr_code,
              weight,
              stock_subject_code,
              cost_subject_code,
              cost_process_code,
              manufact_leadtime,
              purchase_leadtime,
              adjustment_leadtime,
              reorder_point,
              llc_code,
              level_cont_key,
              drawing_no,
              drawing_rev,
              applicable_model,
              catalog_no,
              issue_policy,
              section_code,
              manufact_fail_rate,
              maker_flag,
              unit_stock,
              unit_stock_rate,
              issue_lot,
              safety_stock,
              order_policy,
              mak,
              unit_engineering,
              unit_engineer_rate,
              item_type1,
              item_type2,
              last_term_price,
              item_remark1,
              stock_issue_flag,
              receive_date,
              issue_date,
              package_unit_number,
              unit_package,
              unit_price_o,
              unit_price_rate,
              unit_curr_code,
              upto_person_code,
              customer_item_no,
              is_sony
          from item
         where  delete_type is not null
           and  item_no  = para
        for update;
        c5_rec c5%rowtype := null;

        wk_this_month  date := null;
        wk_last_month  date := null;

   begin
-- ??????

        select  ac_month,add_months(ac_month,-1) into  wk_this_month ,wk_last_month from  account_month;

        open c1(wk_last_month);
        loop
                fetch c1 into c1_rec;
                exit when c1%notfound or c1%notfound is null;

                open c2(c1_rec.item_no);
                    fetch c2 into c2_rec;
                    if c2%notfound or c2%notfound is null then
                        c2_rec.delete_type  :=  null;
                    end if;
                close c2;

                if c2_rec.delete_type is null or c1_rec.OK_FLAG <> 0 then
                        delete from scheduled_deletion_item
                         where current of c1;
                end if;
        <<loop_end>>
          null;
        end loop;

        close c1;

        open c3;
        loop
                fetch c3 into c3_rec;
                exit when c3%notfound or c3%notfound is null;

                insert into scheduled_deletion_item (
                                                      item_no,
                                                      schedule_date,
                                                      reg_date
                                        ) values  (
                                                      c3_rec.item_no,
                                                      wk_this_month,
                                                      sysdate
                                        );
        <<loop_end2>>
          null;
        end loop;
        close c3;

        open c4(wk_last_month);
        loop
                fetch c4 into c4_rec;
                exit when c4%notfound or c4%notfound is null;
                open c5(c4_rec.item_no);
                    fetch c5 into c5_rec;
                    if c5%notfound or c5%notfound is null then
                        null;
                    else
                        insert into delete_item (
                                        upto_date,
                                        reg_date,
                                        delete_type,
                                        item_no,
                                        item_code,
                                        item,
                                        item_flag,
                                        origin_code,
                                        description,
                                        class_code,
                                        uom_q,
                                        uom_w,
                                        uom_l,
                                        supplier_code,
                                        external_unit_number,
                                        standard_price,
                                        next_term_price,
                                        suppliers_price,
                                        curr_code,
                                        weight,
                                        stock_subject_code,
                                        cost_subject_code,
                                        cost_process_code,
                                        manufact_leadtime,
                                        purchase_leadtime,
                                        adjustment_leadtime,
                                        reorder_point,
                                        llc_code,
                                        level_cont_key,
                                        drawing_no,
                                        drawing_rev,
                                        applicable_model,
                                        catalog_no,
                                        issue_policy,
                                        section_code,
                                        manufact_fail_rate,
                                        maker_flag,
                                        unit_stock,
                                        unit_stock_rate,
                                        issue_lot,
                                        safety_stock,
                                        order_policy,
                                        mak,
                                        unit_engineering,
                                        unit_engineer_rate,
                                        item_type1,
                                        item_type2,
                                        last_term_price,
                                        item_remark1,
                                        stock_issue_flag,
                                        receive_date,
                                        issue_date,
                                        package_unit_number,
                                        unit_package,
                                        unit_price_o,
                                        unit_price_rate,
                                        unit_curr_code,
                                        upto_person_code,
                                        customer_item_no,
                                        is_sony,
                                        delete_date
                              ) values (
                                        c5_rec.upto_date,
                                        c5_rec.reg_date,
                                        c5_rec.delete_type,
                                        c5_rec.item_no,
                                        c5_rec.item_code,
                                        c5_rec.item,
                                        c5_rec.item_flag,
                                        c5_rec.origin_code,
                                        c5_rec.description,
                                        c5_rec.class_code,
                                        c5_rec.uom_q,
                                        c5_rec.uom_w,
                                        c5_rec.uom_l,
                                        c5_rec.supplier_code,
                                        c5_rec.external_unit_number,
                                        c5_rec.standard_price,
                                        c5_rec.next_term_price,
                                        c5_rec.suppliers_price,
                                        c5_rec.curr_code,
                                        c5_rec.weight,
                                        c5_rec.stock_subject_code,
                                        c5_rec.cost_subject_code,
                                        c5_rec.cost_process_code,
                                        c5_rec.manufact_leadtime,
                                        c5_rec.purchase_leadtime,
                                        c5_rec.adjustment_leadtime,
                                        c5_rec.reorder_point,
                                        c5_rec.llc_code,
                                        c5_rec.level_cont_key,
                                        c5_rec.drawing_no,
                                        c5_rec.drawing_rev,
                                        c5_rec.applicable_model,
                                        c5_rec.catalog_no,
                                        c5_rec.issue_policy,
                                        c5_rec.section_code,
                                        c5_rec.manufact_fail_rate,
                                        c5_rec.maker_flag,
                                        c5_rec.unit_stock,
                                        c5_rec.unit_stock_rate,
                                        c5_rec.issue_lot,
                                        c5_rec.safety_stock,
                                        c5_rec.order_policy,
                                        c5_rec.mak,
                                        c5_rec.unit_engineering,
                                        c5_rec.unit_engineer_rate,
                                        c5_rec.item_type1,
                                        c5_rec.item_type2,
                                        c5_rec.last_term_price,
                                        c5_rec.item_remark1,
                                        c5_rec.stock_issue_flag,
                                        c5_rec.receive_date,
                                        c5_rec.issue_date,
                                        c5_rec.package_unit_number,
                                        c5_rec.unit_package,
                                        c5_rec.unit_price_o,
                                        c5_rec.unit_price_rate,
                                        c5_rec.unit_curr_code,
                                        c5_rec.upto_person_code,
                                        c5_rec.customer_item_no,
                                        c5_rec.is_sony,
                                        sysdate
                                     );

                        delete from item
                         where current of c5;
                     end if;

               close c5;
               update scheduled_deletion_item
                  set PHYSICAL_DELETE_DATE = wk_last_month
                where current of c4;
 
        <<loop_end>>
          null;
        end loop;

        close c4;

   end;

end make_scheduled_deletion_item;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."MAKE_SCRAP_MATERIAL2" (
   v_item_no in number,              -- ????
   v_qty     in number,              -- ??
   v_slip_date in date ,              -- ????
   v_ret_no in out number

)
/*
2014/11/12 Y.HAGAI 
*/
is
begin
  declare

	cursor C0(PARA in number)
	is
	select  SECTION_CODE,
		item_no  ,
		ITEM,
		ITEM_CODE,
		DESCRIPTION,
		STOCK_SUBJECT_CODE,
		UNIT_STOCK,
		STANDARD_PRICE,
		COST_SUBJECT_CODE,
		COST_PROCESS_CODE
	  from item 
	where item_no = to_number('9' || to_char(PARA, 'FM0999999'));
        C0_REC C0%rowtype := null;


  begin
    v_ret_no := 0 ;  --???????

      open C0(v_item_no) ;
            fetch C0 into C0_REC ;
      close C0 ;
       --SO?????????????
       IF C0_REC.ITEM_NO is null or C0_REC.ITEM_NO is null Then
          v_ret_no :=-3 ;
          goto ERROR ;
       End If ;

             -- ?????
           insert into transaction(
                               operation_date     ,
                               section_code       ,
                               item_no            ,
                               item_code          ,
                               item_name          ,
                               item_description   ,
                               stock_subject_code ,
                               accounting_month   ,
                               slip_date          ,
                               slip_type          ,
                               slip_no            ,
                               slip_quantity      ,
                               slip_price         ,
                               slip_amount        ,
                               curr_code          ,
                               standard_price     ,
                               standard_amount    ,
                               suppliers_price    ,
                               company_code       ,
                               order_number       ,
                               line_no            ,
                               cost_process_code  ,
                               cost_subject_code  ,
                               product_lot_number ,
                               purchase_quantity  ,
                               purchase_price     ,
                               purchase_amount    ,
                               purchase_unit      ,
                               unit_stock         ,
                               ex_rate            
            ) VALUES (
                                sysdate, 
                                c0_rec.section_code, 
                                c0_rec.item_no, 
                                c0_rec.item_code, 
                                c0_rec.item, 
                                c0_rec.description, 
                                c0_rec.stock_subject_code, 
                                to_number(to_char(v_slip_date,'yyyymm')), 
                                v_slip_date, 
                                '05', 
                                'NG' || '-' || to_number(to_char(v_slip_date,'yyyymmdd')) || '-' || c0_rec.item_no, 
                                v_qty, 
                                c0_rec.standard_price, 
                                round(c0_rec.standard_price  * v_qty,6), 
                                1, 
                                c0_rec.standard_price, 
                                round(c0_rec.standard_price  * v_qty,8), 
                                null, 
                                100001, 
                                null, 
                                null, 
                                c0_rec.cost_process_code, 
                                c0_rec.cost_subject_code, 
                                null, 
                                null, 
                                null, 
                                null, 
                                null, 
                                c0_rec.unit_stock,   
                                1    
            ) ;

         whinventory_set(c0_rec.item_no,
                            v_slip_date,
                            v_qty, 
                            2,
                            v_ret_no,
                            c0_rec.section_code) ;

--?????
    <<ERROR>>
       null ;
  end ;
end make_scrap_material2 ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."MAKE_SO_DELIVERY_BAL" 
/****************************************************************
  ????? SO_DELIVERY ? BAL_QTY??
  ???          ?2013/11/06
  ???          ?Y.Hagai
*****************************************************************/
as
begin
  declare
     cursor C1 is 
       select DISTINCT D.SO_NO,D.LINE_NO,D.QTY - D.BAL_QTY  AS DEL_QTY
         from SO_DETAILS D,SO_DELIVERY DEL
        where  D.SO_NO = DEL.SO_NO
          and  D.LINE_NO = DEL.SO_LINE_NO(+)
          and  DEL.SO_NO is not null
       order by D.SO_NO, D.LINE_NO;

     C1_REC			C1%ROWTYPE := null;

     cursor C2(PARAM1 in varchar2, PARAM2 in number) is
       select SO_NO, SO_LINE_NO, DEL_LINE_NO, DEL_DATE, QTY, BAL_QTY
        from SO_DELIVERY
       where  SO_NO      = PARAM1
         and  SO_LINE_NO = PARAM2
        order by DEL_DATE 
        for update;


     C2_REC			C2%ROWTYPE := null;
     WK_DEL_QTY 		SO_DETAILS.DEL_QTY%TYPE := 0;

  begin
      open C1 ;
        loop
        fetch C1 into C1_REC ;


        /*  1????????? */
        WK_DEL_QTY := C1_REC.DEL_QTY;

        exit when C1%notfound or C1%notfound is null;

           /* BAL_QTY?DEL_QTY????*/   
           update SO_DELIVERY
              set bal_qty = qty,
                  del_qty = 0
            where so_no = C1_REC.SO_NO
              and so_line_no = C1_REC.LINE_NO;

           open C2(C1_REC.SO_NO,C1_REC.LINE_NO) ;
             loop
             fetch C2 into C2_REC ;
             if C2%notfound or C2%notfound is null then
                goto LOOPEND;
             else
                if WK_DEL_QTY <= 0 then
                    goto LOOPEND;
                end if;
                if WK_DEL_QTY < C2_REC.QTY then
                    update  SO_DELIVERY
                      set  BAL_QTY = BAL_QTY - WK_DEL_QTY,
                           DEL_QTY =  WK_DEL_QTY
                     where current of C2;
                    WK_DEL_QTY := WK_DEL_QTY - C2_REC.QTY;

                elsif WK_DEL_QTY >=  C2_REC.QTY then 
                    update  SO_DELIVERY
                      set  BAL_QTY = 0,
                           DEL_QTY = C2_REC.QTY
                     where current of C2;
                    WK_DEL_QTY := WK_DEL_QTY - C2_REC.QTY;
                end if;
             end if;
            end loop ;
       <<LOOPEND>>
          close C2;
           null ;
        end loop ;
      close C1 ;
 

  end ;

end MAKE_SO_DELIVERY_BAL ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."MAKE_WH_INTRANSIT_CL" 
as
/*************************************************************************
  ?????      ?P-GLOSAS
  ???????  ?????????
  ??????    ?make_wh_intransit_cl
  ????        ?2015/4/7
  ???          ?FDK Y.hagai

***************************************************************************/
begin
   declare

/****************************************************
  ?????
*****************************************************/
  begin

    /* AR3_CL??? */
	delete from WHINVENTORY_INTRANSIT;

        insert into WHINVENTORY_INTRANSIT(
	OPERATION_DATE	,
	SECTION_CODE	,
	ITEM_NO		,
--	LOCATION	,
	THIS_MONTH	,
	THIS_INVENTORY	,
	LAST_MONTH	,
	LAST_INVENTORY	)
	 select sysdate,100,nvl(item_no,item_no2) item_no,w.this_month,nvl(this_inventory,0) this_inventory,w.last_month,nvl(last_inventory ,0) last_inventory  from (
		select * from (
		  -- ????????DO_HEADER?BL_DATE???????????BL_DATE??????????
		 select
		  dod.THIS_MONTH,
		  dod.item_no,
		  sum(dod.qty) this_inventory 
		 from do_header doh,
		      company  c, 
		      currency cu,  

		       --???????????
		      ( select  d.do_no, d.line_no, d.qty, d.amt_o, 
		                itm.* ,wh.THIS_MONTH
		        from    do_details d, 
		                indication idc, 
		                (select distinct this_month  from whinventory)  wh,  
		                ( select i.item_no, i.description, i.item, u.unit 
		                  from   item i, 
		                         unit u 
		                  where  i.uom_q = u.unit_code (+) 
		                 ) itm 
		        where   d.answer_no1 = idc.answer_no 
		          and   to_char(idc.ex_factory,'yyyymm')  =   to_char(wh.this_month) 
		          and   d.item_no    = itm.item_no (+) 
		          and   idc.COMMIT_DATE is not null
		      ) dod 
		 where doh.do_no         = dod.do_no 
		   and doh.customer_code = c.company_code (+) 
		   and doh.curr_code     = cu.curr_code (+) 
		   and (to_char(doh.do_date,'yyyymm') <>   to_char(doh.bl_date,'yyyymm')  or doh.bl_date is null)
		group by   dod.THIS_MONTH,  dod.item_no
		) a1,

		  -- ??????????DO_HEADER?BL_DATE?????????
		(
		 select
		  dod.last_MONTH,
		  dod.item_no item_no2,
		  sum(dod.qty) last_inventory  
		 from do_header doh,
		      company  c, 
		      currency cu,  


		       --???????????
		      ( select  d.do_no, d.line_no, d.qty, d.amt_o, 
		                itm.*,wh.LAST_MONTH 
		        from    do_details d, 
		                indication idc, 
		                (select distinct last_month  from whinventory)  wh,  
		                ( select i.item_no, i.description, i.item, u.unit 
		                  from   item i, 
		                         unit u 
		                  where  i.uom_q = u.unit_code (+) 
		                 ) itm 
		        where   d.answer_no1 = idc.answer_no 
		          and   to_char(idc.ex_factory,'yyyymm')  =   to_char(wh.last_month) 
		          and   d.item_no    = itm.item_no (+) 
		      ) dod 
		 where doh.do_no         = dod.do_no 
		   and doh.customer_code = c.company_code (+) 
		   and doh.curr_code     = cu.curr_code (+) 
		   and to_char(doh.do_date,'yyyymm') <>   to_char(doh.bl_date,'yyyymm') 
		group by    dod.last_MONTH,  dod.item_no
		) b1
		where a1.ITEM_NO = b1.ITEM_NO2(+)
--
		union all
		select * from (
		 select
		  dod.THIS_MONTH,
		  dod.item_no,
		  sum(dod.qty) this_inventory  
		 from do_header doh,
		      company  c, 
		      currency cu,  

		       --????????????????????
		      ( select  d.do_no, d.line_no, d.qty, d.amt_o, 
		                itm.* ,wh.THIS_MONTH
		        from    do_details d, 
		                indication idc, 
		                (select distinct this_month  from whinventory)  wh,  
		                ( select i.item_no, i.description, i.item, u.unit 
		                  from   item i, 
		                         unit u 
		                  where  i.uom_q = u.unit_code (+) 
		                 ) itm 
		        where   d.answer_no1 = idc.answer_no 
		          and   to_char(idc.ex_factory,'yyyymm')  =   to_char(wh.this_month) 
		          and   d.item_no    = itm.item_no (+) 
		      ) dod 
		 where doh.do_no         = dod.do_no 
		   and doh.customer_code = c.company_code (+) 
		   and doh.curr_code     = cu.curr_code (+) 
		   and (to_char(doh.do_date,'yyyymm') <>   to_char(doh.bl_date,'yyyymm')  or doh.bl_date is null)
		group by   dod.THIS_MONTH,  dod.item_no
		) a2,


		(
		 select
		  dod.last_MONTH,
		  dod.item_no item_no2,
		  sum(dod.qty) last_inventory 
		 from do_header doh,
		      company  c, 
		      currency cu,  

		       --???????????
		      ( select  d.do_no, d.line_no, d.qty, d.amt_o, 
		                itm.*,wh.LAST_MONTH 
		        from    do_details d, 
		                indication idc, 
		                (select distinct last_month  from whinventory)  wh,  
		                ( select i.item_no, i.description, i.item, u.unit 
		                  from   item i, 
		                         unit u 
		                  where  i.uom_q = u.unit_code (+) 
		                 ) itm 
		        where   d.answer_no1 = idc.answer_no 
		          and   to_char(idc.ex_factory,'yyyymm')  =   to_char(wh.last_month) 
		          and   d.item_no    = itm.item_no (+) 
		      ) dod 
		 where doh.do_no         = dod.do_no 
		   and doh.customer_code = c.company_code (+) 
		   and doh.curr_code     = cu.curr_code (+) 
		   and to_char(doh.do_date,'yyyymm') <>   to_char(doh.bl_date,'yyyymm') 
		group by    dod.last_MONTH,  dod.item_no
		) b2
		where a2.ITEM_NO(+) = b2.ITEM_NO2
		 and a2.ITEM_NO is null
		), (select distinct THIS_MONTH,  LAST_MONTH    from WHINVENTORY) w ;

   end;

end  make_wh_intransit_cl;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."NECESSARY_MAKE" as
begin
 declare
  cursor safety1 is --????????????
   select item_no, safety_stock
     from item
    where item_no
       in (select distinct item_no
             from balance_fi)
      and stock_subject_code in ('0', '1', '2')
      and safety_stock > 0;
  w_item_no      item.item_no%type;
  w_safety_stock item.safety_stock%type;
  cursor safety2 (para1 in number) is --???????????????
   select sum(b.allocate_qty), b.allocate_st, i.unit_stock,
          i.stock_subject_code, i.section_code
     from balance_fi b, item i
    where b.item_no = para1
      and rtrim(b.supply_type) in ('Z', 'R')
      and b.item_no = i.item_no
    group by b.allocate_st, i.unit_stock, i.stock_subject_code,
             i.section_code;
  w_zaiko_chuzan       balance_fi.allocate_qty%type;
  w_area               balance_fi.allocate_st%type;
  w_unit_stock         item.unit_stock%type;
  w_stock_subject_code item.stock_subject_code%type;
  w_section_code       item.section_code%type;
  cursor require is --MRP???????
   select b.section_code, b.item_no, b.allocate_st,
          sum(b.allocate_qty), b.demand_date, i.unit_stock,
          i.stock_subject_code
     from balance_fi b, item i
    where rtrim(b.supply_type) is null
      and b.item_no = i.item_no
      and i.stock_subject_code in ('0', '1', '2')
      and i.order_policy in ('1', '2')
    group by b.section_code, b.item_no, b.allocate_st,
             b.demand_date, i.unit_stock, i.stock_subject_code;
  w_section_code_r       balance_fi.section_code%type;
  w_item_no_r            balance_fi.item_no%type;
  w_allocate_st_r        balance_fi.allocate_st%type;
  w_allocate_qty_r       balance_fi.allocate_qty%type;
  w_demand_date_r        balance_fi.demand_date%type;
  w_unit_stock_r         item.unit_stock%type;
  w_stock_subject_code_r item.stock_subject_code%type;
  cursor itemmaker1 (para1 in number) is --????????
   select supplier_code, nvl(purchase_leadtime, 0), minimum_order_lot,
          split_order_lot, estimate_price
     from itemmaker
    where item_no = para1
    order by alter_procedure;
  w_supplier_code     itemmaker.supplier_code%type;
  w_purchase_leadtime itemmaker.purchase_leadtime%type;
  w_minimum_order_lot itemmaker.minimum_order_lot%type;
  w_split_order_lot   itemmaker.split_order_lot%type;
  w_estimate_price    itemmaker.estimate_price%type;
  cursor supplier (para1 in varchar2) is --??????
   select company
     from company
    where company_code = para1;
  w_supplier_name company.company%type;
  cursor item1 (para1 in number) is --???????
   select item, description
     from item
    where item_no = para1;
  w_item_name        item.item%type;
  w_item_description item.description%type;
  w_safety_add     balance_fi.allocate_qty%type; --work start
  w_count          number(10) := 0;
  w_count_safe     number(10) := 0;
  w_flg            varchar2(1) := null;
  w_req_date       date;
 begin --main loutine start
  w_count := 0;
  w_count_safe := 0;
  delete from necessary;
  open safety1; --balance_fi?????????zero?????
  loop
   fetch safety1 into
    w_item_no, w_safety_stock;
   exit when safety1%notfound or safety1%notfound is null;
   open safety2(w_item_no); --????????-?????????????
   loop
    fetch safety2 into
     w_zaiko_chuzan, w_area, w_unit_stock,
     w_stock_subject_code, w_section_code;
    exit when safety2%notfound or safety2%notfound is null;
    w_safety_add := w_zaiko_chuzan - w_safety_stock;
    if w_safety_add < 0 then
     z99a03100pp(w_safety_add, w_safety_add); --?????????????
     open itemmaker1(w_item_no); --????????????
     fetch itemmaker1 into
      w_supplier_code, w_purchase_leadtime, w_minimum_order_lot,
      w_split_order_lot, w_estimate_price;
     if itemmaker1%notfound or itemmaker1%notfound is null then
      w_supplier_code := null;
      w_purchase_leadtime := 0;
      w_minimum_order_lot := 0;
      w_split_order_lot := 0;
      w_estimate_price := 0;
     end if;
     close itemmaker1;
     if w_supplier_code is not null then
      open supplier(w_supplier_code); --??????
      fetch supplier into
       w_supplier_name;
      if supplier%notfound or supplier%notfound is null then
       w_supplier_name := null;
      end if;
      close supplier;
     end if;
     open item1(w_item_no); --???????
     fetch item1 into
      w_item_name, w_item_description;
     if item1%notfound or item1%notfound is null then
      w_item_name := null;
      w_item_description := null;
     end if;
     close item1;
     w_count := w_count + 1;
     w_count_safe := w_count_safe + 1;
     insert into necessary
          (operation_date, seq, section_code,
           item_no, item, description,
           unit_stock, stock_subject_code, supplier_code,
           supplier, purchase_qty, purchase_reqdate,
           delivery_date, estimate_price, purchase_leadtime,
           minimum_order_lot, split_order_lot, progress_status)
     values
          (sysdate, w_count, w_section_code,
           w_item_no, w_item_name, w_item_description,
           w_unit_stock, w_stock_subject_code, w_supplier_code,
           w_supplier_name, w_safety_add * -1, sysdate,
           sysdate, w_estimate_price, w_purchase_leadtime,
           w_minimum_order_lot, w_split_order_lot, 'A');
    end if;
   end loop;
   close safety2;
  end loop;
  close safety1;
  open require; --mrp?????????????????
  loop
   fetch require into
    w_section_code_r, w_item_no_r, w_allocate_st_r,
    w_allocate_qty_r, w_demand_date_r, w_unit_stock_r,
    w_stock_subject_code_r;
   exit when require%notfound or require%notfound is null;
   z99a03100pp(w_allocate_qty_r, w_allocate_qty_r); --?????????????
   open itemmaker1(w_item_no_r); --????????????
   fetch itemmaker1 into
    w_supplier_code, w_purchase_leadtime, w_minimum_order_lot,
    w_split_order_lot, w_estimate_price;
   if itemmaker1%notfound or itemmaker1%notfound is null then
    w_supplier_code := null;
    w_purchase_leadtime := 0;
    w_minimum_order_lot := 0;
    w_split_order_lot := 0;
    w_estimate_price := 0;
   end if;
   close itemmaker1;
   if w_supplier_code is not null then
    open supplier(w_supplier_code); --??????
    fetch supplier into
     w_supplier_name;
    if supplier%notfound or supplier%notfound is null then
     w_supplier_name := null;
    end if;
    close supplier;
   end if;
   --????????????????????????
   w_req_date := porder.add_work_date(w_demand_date_r, (w_purchase_leadtime + 7) * -1);
--DBMS_OUTPUT.PUT_LINE('w_req_date-'||to_char(w_req_date,'yyyymmdd'));
--DBMS_OUTPUT.PUT_LINE('w_demand_date_r-'||to_char(w_demand_date_r,'yyyymmdd'));
--DBMS_OUTPUT.PUT_LINE('w_purchase_leadtime-'||w_purchase_leadtime);
--dbms_output.put_line(w_count);
--dbms_output.put_line(w_req_date);
--   if w_req_date <= sysdate or w_purchase_leadtime = 0 then
    open item1(w_item_no_r); --???????
    fetch item1 into
     w_item_name, w_item_description;
    if item1%notfound or item1%notfound is null then
     w_item_name := null;
     w_item_description := null;
    end if;
    close item1;
    w_count := w_count + 1;
    insert into necessary
         (operation_date, seq, section_code,
          item_no, item, description,
          unit_stock, stock_subject_code, supplier_code,
          supplier, purchase_qty, purchase_reqdate,
          delivery_date, estimate_price, purchase_leadtime,
          minimum_order_lot, split_order_lot, progress_status)
    values
         (sysdate, w_count, w_section_code_r,
          w_item_no_r, w_item_name, w_item_description,
          w_unit_stock_r, w_stock_subject_code_r, w_supplier_code,
          w_supplier_name, w_allocate_qty_r, w_req_date,
          w_demand_date_r, w_estimate_price, w_purchase_leadtime,
          w_minimum_order_lot, w_split_order_lot, 'A');
--   end if;
  end loop;
  close require;
 end;
end necessary_make;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."NECESSARY_MAKE_TEST" as
begin
 declare
  cursor safety1 is --????????????
   select item_no, safety_stock
     from item
    where item_no
       in (select distinct item_no
             from balance)
      and stock_subject_code in ('0', '1', '2')
      and safety_stock > 0;
  w_item_no      item.item_no%type;
  w_safety_stock item.safety_stock%type;
  cursor safety2 (para1 in number) is --???????????????
   select sum(b.allocate_qty), b.allocate_st, i.unit_stock,
          i.stock_subject_code, i.section_code
     from balance b, item i
    where b.item_no = para1
      and rtrim(b.supply_type) in ('Z', 'R')
      and b.item_no = i.item_no
    group by b.allocate_st, i.unit_stock, i.stock_subject_code,
             i.section_code;
  w_zaiko_chuzan       balance.allocate_qty%type;
  w_area               balance.allocate_st%type;
  w_unit_stock         item.unit_stock%type;
  w_stock_subject_code item.stock_subject_code%type;
  w_section_code       item.section_code%type;
  cursor require is --MRP???????
   select b.section_code, b.item_no, b.allocate_st,
          sum(b.allocate_qty), b.demand_date, i.unit_stock,
          i.stock_subject_code
     from balance b, item i
    where rtrim(b.supply_type) is null
      and b.item_no = i.item_no
      and i.stock_subject_code in ('0', '1', '2')
      and i.order_policy in ('1', '2')
      and i.ITEM_NO = 6511002
    group by b.section_code, b.item_no, b.allocate_st,
             b.demand_date, i.unit_stock, i.stock_subject_code;
  w_section_code_r       balance.section_code%type;
  w_item_no_r            balance.item_no%type;
  w_allocate_st_r        balance.allocate_st%type;
  w_allocate_qty_r       balance.allocate_qty%type;
  w_demand_date_r        balance.demand_date%type;
  w_unit_stock_r         item.unit_stock%type;
  w_stock_subject_code_r item.stock_subject_code%type;
  cursor itemmaker1 (para1 in number) is --????????
   select supplier_code, nvl(purchase_leadtime, 0), minimum_order_lot,
          split_order_lot, estimate_price
     from itemmaker
    where item_no = para1
    order by alter_procedure;
  w_supplier_code     itemmaker.supplier_code%type;
  w_purchase_leadtime itemmaker.purchase_leadtime%type;
  w_minimum_order_lot itemmaker.minimum_order_lot%type;
  w_split_order_lot   itemmaker.split_order_lot%type;
  w_estimate_price    itemmaker.estimate_price%type;
  cursor supplier (para1 in varchar2) is --??????
   select company
     from company
    where company_code = para1;
  w_supplier_name company.company%type;
  cursor item1 (para1 in number) is --???????
   select item, description
     from item
    where item_no = para1;
  w_item_name        item.item%type;
  w_item_description item.description%type;
  w_safety_add     balance.allocate_qty%type; --work start
  w_count          number(10) := 0;
  w_count_safe     number(10) := 0;
  w_flg            varchar2(1) := null;
  w_req_date       date;
 begin --main loutine start
  w_count := 0;
  w_count_safe := 0;
  delete from necessary;
  open safety1; --balance?????????zero?????
  loop
   fetch safety1 into
    w_item_no, w_safety_stock;
   exit when safety1%notfound or safety1%notfound is null;
   open safety2(w_item_no); --????????-?????????????
   loop
    fetch safety2 into
     w_zaiko_chuzan, w_area, w_unit_stock,
     w_stock_subject_code, w_section_code;
    exit when safety2%notfound or safety2%notfound is null;
    w_safety_add := w_zaiko_chuzan - w_safety_stock;
    if w_safety_add < 0 then
     z99a03100pp(w_safety_add, w_safety_add); --?????????????
     open itemmaker1(w_item_no); --????????????
     fetch itemmaker1 into
      w_supplier_code, w_purchase_leadtime, w_minimum_order_lot,
      w_split_order_lot, w_estimate_price;
     if itemmaker1%notfound or itemmaker1%notfound is null then
      w_supplier_code := null;
      w_purchase_leadtime := 0;
      w_minimum_order_lot := 0;
      w_split_order_lot := 0;
      w_estimate_price := 0;
     end if;
     close itemmaker1;
     if w_supplier_code is not null then
      open supplier(w_supplier_code); --??????
      fetch supplier into
       w_supplier_name;
      if supplier%notfound or supplier%notfound is null then
       w_supplier_name := null;
      end if;
      close supplier;
     end if;
     open item1(w_item_no); --???????
     fetch item1 into
      w_item_name, w_item_description;
     if item1%notfound or item1%notfound is null then
      w_item_name := null;
      w_item_description := null;
     end if;
     close item1;
     w_count := w_count + 1;
     w_count_safe := w_count_safe + 1;
     insert into necessary
          (operation_date, seq, section_code,
           item_no, item, description,
           unit_stock, stock_subject_code, supplier_code,
           supplier, purchase_qty, purchase_reqdate,
           delivery_date, estimate_price, purchase_leadtime,
           minimum_order_lot, split_order_lot, progress_status)
     values
          (sysdate, w_count, w_section_code,
           w_item_no, w_item_name, w_item_description,
           w_unit_stock, w_stock_subject_code, w_supplier_code,
           w_supplier_name, w_safety_add * -1, sysdate,
           sysdate, w_estimate_price, w_purchase_leadtime,
           w_minimum_order_lot, w_split_order_lot, 'A');
    end if;
   end loop;
   close safety2;
  end loop;
  close safety1;
  open require; --mrp?????????????????
  loop
   fetch require into
    w_section_code_r, w_item_no_r, w_allocate_st_r,
    w_allocate_qty_r, w_demand_date_r, w_unit_stock_r,
    w_stock_subject_code_r;
   exit when require%notfound or require%notfound is null;
   z99a03100pp(w_allocate_qty_r, w_allocate_qty_r); --?????????????
   open itemmaker1(w_item_no_r); --????????????
   fetch itemmaker1 into
    w_supplier_code, w_purchase_leadtime, w_minimum_order_lot,
    w_split_order_lot, w_estimate_price;
   if itemmaker1%notfound or itemmaker1%notfound is null then
    w_supplier_code := null;
    w_purchase_leadtime := 0;
    w_minimum_order_lot := 0;
    w_split_order_lot := 0;
    w_estimate_price := 0;
   end if;
   close itemmaker1;
   if w_supplier_code is not null then
    open supplier(w_supplier_code); --??????
    fetch supplier into
     w_supplier_name;
    if supplier%notfound or supplier%notfound is null then
     w_supplier_name := null;
    end if;
    close supplier;
   end if;
   --????????????????????????
   w_req_date := porder.add_work_date(w_demand_date_r, (w_purchase_leadtime + 7) * -1);
DBMS_OUTPUT.PUT_LINE('w_req_date-'||to_char(w_req_date,'yyyymmdd'));
DBMS_OUTPUT.PUT_LINE('w_demand_date_r-'||to_char(w_demand_date_r,'yyyymmdd'));
DBMS_OUTPUT.PUT_LINE('w_purchase_leadtime-'||w_purchase_leadtime);
--dbms_output.put_line(w_count);
--dbms_output.put_line(w_req_date);
   if w_req_date <= sysdate or w_purchase_leadtime = 0 then
    open item1(w_item_no_r); --???????
    fetch item1 into
     w_item_name, w_item_description;
    if item1%notfound or item1%notfound is null then
     w_item_name := null;
     w_item_description := null;
    end if;
    close item1;
    w_count := w_count + 1;
    insert into necessary
         (operation_date, seq, section_code,
          item_no, item, description,
          unit_stock, stock_subject_code, supplier_code,
          supplier, purchase_qty, purchase_reqdate,
          delivery_date, estimate_price, purchase_leadtime,
          minimum_order_lot, split_order_lot, progress_status)
    values
         (sysdate, w_count, w_section_code_r,
          w_item_no_r, w_item_name, w_item_description,
          w_unit_stock_r, w_stock_subject_code_r, w_supplier_code,
          w_supplier_name, w_allocate_qty_r, w_req_date,
          w_demand_date_r, w_estimate_price, w_purchase_leadtime,
          w_minimum_order_lot, w_split_order_lot, 'A');
   end if;
  end loop;
  close require;
 end;
end necessary_make_test;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."NEW_WIPINVENTORY_SET" (
    v_item_no   in number,             -- ???? (?????????? -1)
    v_slip_date in date,               -- ?? ????????????????? -2?
    v_slip_qty  in number,             -- ??
    v_table_position in varchar2,      -- 1:??,2:???,3:??,4:???,9:??(*??*)
                                       -- ??????SLIP_QTY?????????(???Adjust???)??????????
    v_ret_no    in out number,         -- ???????????????
    v_sec_code  in number,             -- ????? (????????? -5)
    v_st_code  in number              -- ????? (????????? -7)

)
is
begin
  declare
   WHI_REC NEW_WIPINVENTORY%rowtype ;
   ITM_REC item%rowtype ;

   v_date  date ;
   v_sabun  NEW_WIPINVENTORY.stocktaking_adjust1%TYPE   :=0 ;

   v_section_code        NEW_WIPINVENTORY.section_code%TYPE          :=v_sec_code ;
   v_station_code        NEW_WIPINVENTORY.station_code%TYPE          :=v_st_code ;
   v_receive1            NEW_WIPINVENTORY.receive1%TYPE              :=0 ;
   v_other_receive1      NEW_WIPINVENTORY.other_receive1%TYPE        :=0 ;
   v_issue1              NEW_WIPINVENTORY.issue1%TYPE                :=0 ;
   v_other_issue1        NEW_WIPINVENTORY.other_issue1%TYPE          :=0 ;
   v_stocktaking_adjust1 NEW_WIPINVENTORY.stocktaking_adjust1%TYPE   :=0 ;
   v_this_inventory      NEW_WIPINVENTORY.this_inventory%TYPE        :=0 ;
   v_receive2            NEW_WIPINVENTORY.receive2%TYPE              :=0 ;
   v_other_receive2      NEW_WIPINVENTORY.other_receive2%TYPE        :=0 ;
   v_issue2              NEW_WIPINVENTORY.issue2%TYPE                :=0 ;
   v_other_issue2        NEW_WIPINVENTORY.other_issue2%TYPE          :=0 ;
   v_stocktaking_adjust2 NEW_WIPINVENTORY.stocktaking_adjust2%TYPE   :=0 ;
   v_last_inventory      NEW_WIPINVENTORY.last_inventory%TYPE        :=0 ;

    cursor C1 is
     select *
     from NEW_WIPINVENTORY
     where item_no = v_item_no
       and section_code = v_sec_code
       and station_code = v_st_code
     for update ;

    cursor C2 is
     select nvl(to_date(max(this_month),'yyyymm'),trunc(sysdate))
     from NEW_WIPINVENTORY  ;

    cursor C3 is
     select *
     from item
     where item_no = v_item_no ;

  begin
      v_ret_no := 0 ;

      /* ??????*/
      open C3 ;
         fetch C3 into ITM_REC ;
      close C3 ;
      If ITM_REC.item_no is null Then
          v_ret_no := -1 ;
          goto LAST ;
      End If ;

      /* ?????? */
      If v_section_code is null Then
           v_ret_no := -5 ;
           goto LAST ;
      End If ;

      /* ???????? */
      If v_station_code is null Then
           v_ret_no := -7 ;
           goto LAST ;
      End If ;

      /* ????????*/
      open C2 ;
         fetch C2 into v_date ;
      close C2 ;
      /* ????????*/
      If  trunc(v_slip_date,'mm') != trunc(v_date,'mm') and  trunc(v_slip_date,'mm') != trunc(add_months(v_date,-1),'mm') Then
          v_ret_no := -2 ;
          goto LAST ;
      End If ;


      /* ?????? */
      open C1 ;
          fetch C1 into WHI_REC;

          If to_char(v_slip_date,'yyyymm') = to_char(v_date,'yyyymm') Then                    --???
               If    v_table_position = 1 Then  v_receive1            := v_slip_qty ; v_this_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 2 Then  v_other_receive1      := v_slip_qty ; v_this_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 3 Then  v_issue1              := v_slip_qty ; v_this_inventory := -v_slip_qty ;
               ElsIf v_table_position = 4 Then  v_other_issue1        := v_slip_qty ; v_this_inventory := -v_slip_qty ;
               ElsIf v_table_position = 9 Then
                        v_sabun  := v_slip_qty - nvl(WHI_REC.this_inventory,0) ;
                        v_stocktaking_adjust1 := v_sabun ; v_this_inventory := v_sabun ;
               End If ;
          ElsIf to_char(v_slip_date,'yyyymm') = to_char(add_months(v_date,-1),'yyyymm') Then  --???
               If    v_table_position = 1 Then  v_receive2            := v_slip_qty ; v_this_inventory :=  v_slip_qty ; v_last_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 2 Then  v_other_receive2      := v_slip_qty ; v_this_inventory :=  v_slip_qty ; v_last_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 3 Then  v_issue2              := v_slip_qty ; v_this_inventory := -v_slip_qty ; v_last_inventory := -v_slip_qty ;
               ElsIf v_table_position = 4 Then  v_other_issue2        := v_slip_qty ; v_this_inventory := -v_slip_qty ; v_last_inventory := -v_slip_qty ;
               ElsIf v_table_position = 9 Then
                        v_sabun  := v_slip_qty - nvl(WHI_REC.last_inventory,0) ;
                        v_stocktaking_adjust2 := v_sabun ; v_this_inventory := v_sabun  ; v_last_inventory :=  v_sabun ;
               End If ;
          Else
             v_ret_no := -9 ;
          End If ;

          If C1%notfound Then
             -- ?????
            insert into NEW_WIPINVENTORY(
               operation_date,
               section_code,
               item_no,
               location,
               this_month,
               receive1,
               other_receive1,
               issue1,
               other_issue1,
               stocktaking_adjust1,
               this_inventory,
               last_month,
               receive2,
               other_receive2,
               issue2,
               other_issue2,
               stocktaking_adjust2,
               last_inventory,
               last2_inventory,
               station_code
            ) VALUES (
               sysdate,
               V_section_code,
               v_item_no,
               null,
               to_char(v_date,'yyyymm'),
               nvl(v_receive1,0),
               nvl(v_other_receive1,0),
               nvl(v_issue1,0),
               nvl(v_other_issue1,0),
               nvl(v_stocktaking_adjust1,0),
               nvl(v_this_inventory,0),
               to_char(add_months(v_date,-1),'yyyymm'),
               nvl(v_receive2,0),
               nvl(v_other_receive2,0),
               nvl(v_issue2,0),
               nvl(v_other_issue2,0),
               nvl(v_stocktaking_adjust2,0),
               nvl(v_last_inventory,0),
               0,
               v_station_code
            ) ;
          Else
             -- ???
            update NEW_WIPINVENTORY set
               operation_date        = sysdate,
               receive1              = receive1            + nvl(v_receive1           ,0),
               other_receive1        = other_receive1      + nvl(v_other_receive1     ,0),
               issue1                = issue1              + nvl(v_issue1             ,0),
               other_issue1          = other_issue1        + nvl(v_other_issue1       ,0),
               stocktaking_adjust1   = stocktaking_adjust1 + nvl(v_stocktaking_adjust1,0),
               this_inventory        = this_inventory      + nvl(v_this_inventory     ,0),
               receive2              = receive2            + nvl(v_receive2           ,0),
               other_receive2        = other_receive2      + nvl(v_other_receive2     ,0),
               issue2                = issue2              + nvl(v_issue2             ,0),
               other_issue2          = other_issue2        + nvl(v_other_issue2       ,0),
               stocktaking_adjust2   = stocktaking_adjust2 + nvl(v_stocktaking_adjust2,0),
               last_inventory        = last_inventory      + nvl(v_last_inventory     ,0)
            where item_no = v_item_no
              and section_code = v_section_code
              and nvl(station_code,0) = nvl(v_station_code,0)
            ;


          End If ;
      close C1 ;

 <<LAST>>
   null ;

  end ;
end NEW_WIPINVENTORY_SET ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."NEW_WIPINVENTORY_SLIDE" (para_pc in number, para_today in date,
                            para_check_flag out number) is
begin
declare
       cursor pc is --new_wipinventory fetch
             select this_month, receive1, other_receive1,
                    issue1, other_issue1, stocktaking_adjust1,
                    this_inventory, last_month, receive2,
                    other_receive2, issue2, other_issue2,
                    stocktaking_adjust2, last_inventory, last2_inventory
               from new_wipinventory
               for update of
                    this_month, receive1, other_receive1,
                    issue1, other_issue1, stocktaking_adjust1,
                    this_inventory, last_month, receive2,
                    other_receive2, issue2, other_issue2,
                    stocktaking_adjust2, last_inventory, last2_inventory,
                    operation_date;
       w_this_month          new_wipinventory.this_month%type; --variable start
       w_receive1            new_wipinventory.receive1%type;
       w_other_receive1      new_wipinventory.other_receive1%type;
       w_issue1              new_wipinventory.issue1%type;
       w_other_issue1        new_wipinventory.other_issue1%type;
       w_stocktaking_adjust1 new_wipinventory.stocktaking_adjust1%type;
       w_this_inventory      new_wipinventory.this_inventory%type;
       w_last_month          new_wipinventory.last_month%type;
       w_receive2            new_wipinventory.receive2%type;
       w_other_receive2      new_wipinventory.other_receive2%type;
       w_issue2              new_wipinventory.issue2%type;
       w_other_issue2        new_wipinventory.other_issue2%type;
       w_stocktaking_adjust2 new_wipinventory.stocktaking_adjust2%type;
       w_last_inventory      new_wipinventory.last_inventory%type;
       w_last2_inventory     new_wipinventory.last2_inventory%type;
       w_operation_date      whinventory.operation_date%type; --variable end
     begin
     para_check_flag := 0;
     open pc;
     loop
         fetch pc into
                    w_this_month, w_receive1, w_other_receive1,
                    w_issue1, w_other_issue1, w_stocktaking_adjust1,
                    w_this_inventory, w_last_month, w_receive2,
                    w_other_receive2, w_issue2, w_other_issue2,
                    w_stocktaking_adjust2, w_last_inventory, w_last2_inventory;
         exit when pc%notfound or pc%notfound is null;
         if w_this_month <> para_pc then --month changed?
           w_last2_inventory := w_last_inventory; --value slide start
           w_last_month := w_this_month;
           w_receive2 := w_receive1;
           w_other_receive2 := w_other_receive1;
           w_issue2 := w_issue1;
           w_other_issue2 := w_other_issue1;
           w_stocktaking_adjust2 := w_stocktaking_adjust1;
           w_last_inventory := w_this_inventory;
           w_this_month := para_pc;
           w_receive1 := 0;
           w_other_receive1 := 0;
           w_issue1 := 0;
           w_other_issue1 := 0;
           w_stocktaking_adjust1 := 0;
           w_this_inventory := w_this_inventory;
           w_operation_date := para_today;
           if (w_receive2 = 0 or w_receive2 is null) and
              (w_other_receive2 = 0 or w_other_receive2 is null) and
              (w_issue2 = 0 or w_issue2 is null) and
              (w_other_issue2 = 0 or w_other_issue2 is null) and
              (w_stocktaking_adjust2 = 0 or w_stocktaking_adjust2 is null) and
              (w_last_inventory = 0 or w_last_inventory is null) and
              (w_last2_inventory = 0 or w_last2_inventory is null) then
             delete from new_wipinventory
              where current of pc; --delete no_move_data for two monthes
           else
             update new_wipinventory
                set operation_date = w_operation_date,
                    this_month = w_this_month,
                    receive1 = w_receive1,
                    other_receive1 = w_other_receive1,
                    issue1 = w_issue1,
                    other_issue1 = w_other_issue1,
                    stocktaking_adjust1 = w_stocktaking_adjust1,
                    this_inventory = w_this_inventory,
                    last_month = w_last_month,
                    receive2 = w_receive2,
                    other_receive2 = w_other_receive2,
                    issue2 = w_issue2,
                    other_issue2 = w_other_issue2,
                    stocktaking_adjust2 = w_stocktaking_adjust2,
                    last_inventory = w_last_inventory,
                    last2_inventory = w_last2_inventory
              where current of pc; --slide update
           end if;
         end if;
     end loop;
     exception
      when others then
       null;
       para_check_flag := 1;
       if pc%isopen then
        close pc;
       end if;
     close pc;
     end;
end new_wipinventory_slide;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."NEW_WIPPHYSICAL_SET" (V_MONTH in date)
is
begin
  declare
   ITM_REC         item%rowtype ;
   LITM_REC        item%rowtype ;
   PHY_REC         wipphysical%rowtype ;
   STR_REC         structure%rowtype ;
   CNF_REC         configuration%rowtype ;
   SBSTR_REC       substructure%rowtype ;
   PC_THIS_MONTH   cspinventory.this_month%type;

    WK_QTY         PCPHYSICAL_WK.PHYSICAL_QUANTITY%type;

   v_ret_no  number ;
   v_level_no  number(2);
   v_LEVEL_CONT_KEY number(2);

   CT1  number(5);
   CT2  number(5);
   CT3  number(5);
   STRUCTURE_CALC_WK_COUNTER  NUMBER(5);
   

    cursor C1(PARAM1 in number) is
     select *
     from WIPPHYSICAL where STOCK_TAKING_MONTH = PARAM1 and ITEM_NO is not null
     ;

    /* CONFIGURATION ?? */
    cursor C2  is
     select * from CONFIGURATION where CONFIG_KEY = 'FL_WIP_INVENTORY';

    cursor C3(PARAM1 in number) is
     select *
     from item where item_no = PARAM1 ;


    /* ???????? */
    cursor C4(PARAM1 in varchar2) is
     select *
     from substructure  where rtrim(in_process_code) = rtrim(PARAM1) ;

    /* ?????? */
/*********
    cursor C5(PARAM1 in number,PARAM2 in varchar2,PARAM3 in number) is
     select *
     from structure where upper_item_no = PARAM1
                      and rtrim(reference_number) = rtrim(PARAM2)
                      and level_no   =  PARAM3;
***********/
    cursor C5(PARAM1 in number,PARAM2 in number) is
     select *
     from structure where upper_item_no = PARAM1
                      and level_no   =  PARAM2;

    /* ????? */
    cursor C6(PARAM1 in number) is
     select max(level_no)
     from leveld where LEVEL_CONT_KEY = PARAM1;

    /* ????????? */
    cursor C7 is
     select p.item_no,p.section_code,p.station_code,p.this_month,
            sum(p.physical_quantity) physical_quantity
     from  CSPPHYSICAL_wk p
     group by p.item_no,p.section_code,p.station_code,p.this_month
     ;
     C7_REC			C7%ROWTYPE := null;

    /* ?????????? */
    cursor C8 is
     select p.item_no,p.section_code,p.station_code,p.this_month,
            sum(p.physical_quantity) physical_quantity
     from  WIPPHYSICAL_wk p
     group by p.item_no,p.section_code,p.station_code,p.this_month
     ;
     C8_REC			C8%ROWTYPE := null;

     cursor C9 is
     select max(this_month) this_month
      from CSPINVENTORY  ;

     C9_REC			C9%ROWTYPE := null;

    /* ????????????????????????????? */
    cursor C10 is
     select *
     from STRUCTURE_CALC_WK 
     for update;
     C10_REC			C10%ROWTYPE := null;

    /* ?????? */
    cursor C11(PARAM1 in number) is
		select PARAM1 as ITEM_NO
		     , level as HIER
		     , case when level < lead(level) over(order by rownum) then 0 else 1 end as IS_LEAF
		     , replace(sys_connect_by_path(x.REFERENCE_NUMBER, ':'), ':') as SORT_KEY
		     , x.UPPER_ITEM_NO, x.LEVEL_NO, x.LINE_NO, x.REFERENCE_NUMBER
		     , x.LOWER_ITEM_NO, x.QUANTITY, x.QUANTITY_BASE, x.FAILURE_RATE
		     , x.USER_SUPPLY_FLAG, x.SUBCON_SUPPLY_FLAG
		     , x.ITEM_TYPE2, x.DESCRIPTION, x.ITEM, x.CATALOG_NO
		     , x.DRAWING_NO, x.DRAWING_REV, x.DRAWING_NO_REV
		     , x.ORDER_POLICY, x.ISSUE_POLICY, x.UNIT_ENGINEERING, x.UNIT_STOCK
		     , x.UNIT_ENGINEER_RATE, x.UNIT_STOCK_RATE, x.MANUFACT_FAIL_RATE
		     , x.SUPPLIER_CODE, x.INSPECTION_FLAG, x.ITEM_FLAG
		     , x.MANUFACT_LEADTIME, x.CAT_RECORD_FLAG,x.STOCK_SUBJECT_CODE
		  from (
				select a.*
				     , c.ITEM_TYPE2, c.DESCRIPTION, c.ITEM, c.CATALOG_NO, c.DRAWING_NO, c.DRAWING_REV
				     , rpad(c.DRAWING_NO, 20, ' ') || nvl(c.DRAWING_REV, ' ') as DRAWING_NO_REV
				     , c.ORDER_POLICY, c.ISSUE_POLICY, c.UNIT_ENGINEERING, c.UNIT_STOCK
				     , nvl(c.MANUFACT_FAIL_RATE, 0) as MANUFACT_FAIL_RATE
				     , nvl(c.UNIT_ENGINEER_RATE, 1) as UNIT_ENGINEER_RATE
				     , nvl(c.UNIT_STOCK_RATE,    1) as UNIT_STOCK_RATE
				     , nvl(c.MANUFACT_LEADTIME,  0) as MANUFACT_LEADTIME
				     , c.SUPPLIER_CODE, c.MAK, null as SHIPTO_CODE, null as BUYER_CODE
				     , null as INSPECTION_FLAG, c.ITEM_FLAG, ' ' as CAT_RECORD_FLAG
				     , c.STOCK_SUBJECT_CODE as STOCK_SUBJECT_CODE
				  from STRUCTURE a
				  join ITEM c
				    on c.ITEM_NO = a.LOWER_ITEM_NO
				 where a.LEVEL_NO = nvl((select max(LEVEL_NO) from LEVELD b
										  where b.ITEM_NO = a.UPPER_ITEM_NO), a.LEVEL_NO)
		       ) x
		start with x.UPPER_ITEM_NO = PARAM1
		connect by prior x.LOWER_ITEM_NO = x.UPPER_ITEM_NO;

     C11_REC			C11%ROWTYPE := null;

    /* ?????????? */
    cursor C12 is
     select p.item_no,p.section_code,p.station_code,p.this_month,
            sum(p.physical_quantity) physical_quantity
     from  PCPHYSICAL_wk p
     group by p.item_no,p.section_code,p.station_code,p.this_month
     ;
     C12_REC			C12%ROWTYPE := null;

    cursor C13(PARAM1 in number) is
     select *
     from LEVELD where item_no = PARAM1 ;

     C13_REC			C13%ROWTYPE := null;


  begin
      v_ret_no := 0 ;

    /* ??????? */
    open C2;
        CNF_REC := null ;
        fetch C2 into CNF_REC ;
    close C2;

    /* CSPINVENTORY???????? */
      open C9 ;
         fetch C9 into C9_REC ;
      close C9 ;
 
      delete from WIPPHYSICAL_wk ;
      delete from PCPHYSICAL_wk ;
      delete from PCINVENTORY ;
      delete from NEW_WIPINVENTORY ;
      delete from CSPINVENTORY ;
      delete from STRUCTURE_CALC_WK ;
      delete from CSPPHYSICAL_WK;

      open C1(to_char(V_month,'yyyymm')) ;
        loop
        fetch C1 into PHY_REC ;
        exit when C1%notfound or C1%notfound is null;

              /* ?????? */
              open C3(PHY_REC.ITEM_NO) ;
                 fetch C3 into ITM_REC ;
              close C3 ;
              If ITM_REC.item_no is null Then
                  v_ret_no := -1 ;
                  goto LOOP_END ;
              End If ;

             /* IN_PROCESS_CODE???????????????????? */
             /* SUBSTRUCTURE???????????? */
              If replace(PHY_REC.IN_PROCESS_CODE,' ','') is not null Then
                  open C4(PHY_REC.IN_PROCESS_CODE) ;
                      loop
                      fetch C4 into SBSTR_REC ;

                      /* SUBSTRUCTURE????????????,????? */
                      If C4%notfound or C4%notfound is null then
                          If C4%rowcount  = 0   then
                              If ITM_REC.STOCK_SUBJECT_CODE < 3 then
                                 insert into pcphysical_wk (
                                     operation_date       ,
                                     section_code         ,
                                     item_no              ,
                                     station_code         ,
                                     this_month           ,
                                     physical_quantity
                                 )values(
                                     sysdate              ,
                                     PHY_REC.section_code ,
                                     PHY_REC.item_no,
                                     PHY_REC.station_code ,
                                     PHY_REC.STOCK_TAKING_MONTH,
                                     PHY_REC.PHYSICAL_QUANTITY
                                 ) ;
                             Else
--DBMS_OUTPUT.PUT_LINE('TEST0-'||PHY_REC.item_no|| '-'|| PHY_REC.PHYSICAL_QUANTITY);
                                 insert into wipphysical_wk (
                                     operation_date       ,
                                     section_code         ,
                                     item_no              ,
                                     station_code         ,
                                     this_month           ,
                                     physical_quantity
                                 )values(
                                     sysdate              ,
                                     PHY_REC.section_code ,
                                     PHY_REC.item_no,
                                     PHY_REC.station_code ,
                                     PHY_REC.STOCK_TAKING_MONTH,
                                     PHY_REC.PHYSICAL_QUANTITY
                                 ) ;
                             End If;
                          End If;
                      goto LOOP_END_C4 ;
                      Else
                           /* ?????? */
                          v_level_no  := 0;
                          open C6(ITM_REC.ITEM_NO) ;
                               fetch C6 into v_level_no ;
                          close C6 ;
                  /* ?????? */
                          V_LEVEL_CONT_KEY  := 0;
                 open C13(PHY_REC.ITEM_NO) ;
                   fetch C13 into c13_REC ;
                      If C13%notfound or C13%notfound is null then
                          V_LEVEL_CONT_KEY  := 1;
                      end if;
                 close C13 ;

--LEVELD????????????,?????
                          If v_level_no is null then
			       If ITM_REC.STOCK_SUBJECT_CODE < 3 then
                                  insert into pcphysical_wk (
                                        operation_date       ,
                                        section_code         ,
                                        item_no              ,
                                        station_code         ,
                                        this_month           ,
                                        physical_quantity
                                   )values(
                                        sysdate              ,
                                        PHY_REC.section_code ,
                                        PHY_REC.item_no,
                                        PHY_REC.station_code ,
                                        PHY_REC.STOCK_TAKING_MONTH,
                                        PHY_REC.PHYSICAL_QUANTITY
                                   ) ;
			       elsIf V_LEVEL_CONT_KEY = 1 then
                                  insert into pcphysical_wk (
                                        operation_date       ,
                                        section_code         ,
                                        item_no              ,
                                        station_code         ,
                                        this_month           ,
                                        physical_quantity
                                   )values(
                                        sysdate              ,
                                        PHY_REC.section_code ,
                                        PHY_REC.item_no,
                                        PHY_REC.station_code ,
                                        PHY_REC.STOCK_TAKING_MONTH,
                                        PHY_REC.PHYSICAL_QUANTITY
                                   ) ;
                               else
--DBMS_OUTPUT.PUT_LINE('TEST1-'||PHY_REC.item_no|| '-'|| PHY_REC.PHYSICAL_QUANTITY);
                                  insert into wipphysical_wk (
                                        operation_date       ,
                                        section_code         ,
                                        item_no              ,
                                        station_code         ,
                                        this_month           ,
                                        physical_quantity
                                   )values(
                                        sysdate              ,
                                        PHY_REC.section_code ,
                                        PHY_REC.item_no,
                                        PHY_REC.station_code ,
                                        PHY_REC.STOCK_TAKING_MONTH,
                                        PHY_REC.PHYSICAL_QUANTITY
                                   ) ;
                                end if;
                          Else
                               /* STRUCTURE????? */
--2016/03/07                               open C5(ITM_REC.ITEM_NO,SBSTR_REC.REFERENCE_NUMBER,v_level_no) ;
                               open C5(ITM_REC.ITEM_NO,v_level_no) ;
                                    loop
                                    fetch C5 into STR_REC ;
                                    exit when C5%notfound or C5%notfound is null;

                                        open C3(STR_REC.LOWER_ITEM_NO) ;
                                             fetch C3 into LITM_REC ;
                                        close C3 ;

					/* STOCK_SUBJECT_CODE < 3 ???????????*/
				        if LITM_REC.STOCK_SUBJECT_CODE < 3 then
                                           insert into cspphysical_wk (
                                                 operation_date       ,
                                                 section_code         ,
                                                 item_no              ,
                                                 station_code         ,
                                                 this_month           ,
                                                 physical_quantity
                                           )values(
                                                 sysdate              ,
                                                 PHY_REC.section_code ,
                                                 STR_REC.lower_item_no,
                                                 PHY_REC.station_code ,
                                                 PHY_REC.STOCK_TAKING_MONTH,
                                                 round(PHY_REC.PHYSICAL_QUANTITY * STR_REC.QUANTITY / nvl(decode(STR_REC.QUANTITY_BASE,0,1,STR_REC.QUANTITY_BASE),1) *  nvl(decode(LITM_REC.UNIT_STOCK_RATE,0,1,LITM_REC.UNIT_STOCK_RATE),1)/ nvl(decode(LITM_REC.UNIT_ENGINEER_RATE,0,1,LITM_REC.UNIT_ENGINEER_RATE),1),6)
                                           ) ;
					else 
--DBMS_OUTPUT.PUT_LINE('TEST2-'||PHY_REC.item_no|| '-'|| PHY_REC.PHYSICAL_QUANTITY);
--DBMS_OUTPUT.PUT_LINE('TEST2-'||STR_REC.lower_item_no|| '-'|| PHY_REC.PHYSICAL_QUANTITY);
                                           insert into wipphysical_wk (
                                                 operation_date       ,
                                                 section_code         ,
                                                 item_no              ,
                                                 station_code         ,
                                                 this_month           ,
                                                 physical_quantity
                                           )values(
                                                 sysdate              ,
                                                 PHY_REC.section_code ,
                                                 STR_REC.lower_item_no,
                                                 PHY_REC.station_code ,
                                                 PHY_REC.STOCK_TAKING_MONTH,
                                                 round(PHY_REC.PHYSICAL_QUANTITY * STR_REC.QUANTITY / nvl(decode(STR_REC.QUANTITY_BASE,0,1,STR_REC.QUANTITY_BASE),1) * nvl(decode(LITM_REC.UNIT_STOCK_RATE,0,1,LITM_REC.UNIT_STOCK_RATE),1) / nvl(decode(LITM_REC.UNIT_ENGINEER_RATE,0,1,LITM_REC.UNIT_ENGINEER_RATE),1),6)
                                           ) ;
                                           /* ????????????????????????????? */
                                           insert into STRUCTURE_CALC_WK (
                                                 operation_date       ,
                                                 section_code         ,
                                                 item_no              ,
                                                 LEVEL_NO             ,
                                                 station_code         ,
                                                 IN_PROCESS_CODE      ,
                                                 SLIP_NUMBER          ,
                                                 STOCK_TAKING_MONTH   ,
                                                 physical_quantity
                                           )values(
                                                 sysdate              ,
                                                 PHY_REC.section_code ,
                                                 STR_REC.lower_item_no,
                                                 v_level_no,
                                                 PHY_REC.station_code ,
                                                 PHY_REC.IN_PROCESS_CODE ,
                                                 PHY_REC.SLIP_NUMBER,
                                                 PHY_REC.STOCK_TAKING_MONTH,
                                                 round(PHY_REC.PHYSICAL_QUANTITY * STR_REC.QUANTITY / nvl(decode(STR_REC.QUANTITY_BASE,0,1,STR_REC.QUANTITY_BASE),1) *  nvl(decode(LITM_REC.UNIT_STOCK_RATE,0,1,LITM_REC.UNIT_STOCK_RATE),1)/ nvl(decode(LITM_REC.UNIT_ENGINEER_RATE,0,1,LITM_REC.UNIT_ENGINEER_RATE),1),6)
                                           ) ;
				       End If;
                                    End loop ;
                               close C5 ;
                          End If ;
                      End If ;
                      end loop ;
                   <<LOOP_END_C4>>
                  close C4 ;
              /* IN_PROCESS_CODE?????????????? */
              Else
                 insert into pcphysical_wk (
                             operation_date       ,
                             section_code         ,
                             item_no              ,
                             station_code         ,
                             this_month           ,
                             physical_quantity
                         )values(
                             sysdate              ,
                             PHY_REC.section_code ,
                             PHY_REC.item_no,
                             PHY_REC.station_code ,
                             PHY_REC.STOCK_TAKING_MONTH,
                             PHY_REC.PHYSICAL_QUANTITY
                         ) ;

              End If ;


              /*?????????*/
--DBMS_OUTPUT.PUT_LINE(PHY_REC.item_no|| '-'|| PHY_REC.PHYSICAL_QUANTITY);
              If PHY_REC.IN_PROCESS_CODE <> '****' then
                 insert into WIPPHYSICAL_wk (
                         operation_date       ,
                         section_code         ,
                         item_no              ,
                         station_code         ,
                         this_month           ,
                         physical_quantity
                         )values(
                          sysdate              ,
                          PHY_REC.section_code ,
                          PHY_REC.item_no      ,
                          PHY_REC.station_code ,
                          PHY_REC.STOCK_TAKING_MONTH,
                          PHY_REC.PHYSICAL_QUANTITY                      ) ;
                 End if;
        <<LOOP_END>>
          null ;
        end loop ;
      close C1 ;

/*******************************************************************/

      CT1 := 0;

<<START_C10>>
      open C10 ;
        loop
        fetch C10 into C10_REC ;
        exit when C10%notfound or C10%notfound is null;
	DBMS_OUTPUT.PUT_LINE(C10_REC.ITEM_NO|| '-'|| C10_REC.PHYSICAL_QUANTITY);

--??????? 1?????
        CT1 := CT1 + 1;
        IF CT1 > 10000 THEN
          goto LOOP_END_C10;
        END IF;


              /* ?????? */
              open C3(C10_REC.ITEM_NO) ;
                 fetch C3 into ITM_REC ;
              close C3 ;
              If ITM_REC.item_no is null Then
                  v_ret_no := -1 ;
                  goto LOOP_END_C10 ;
              End If ;

                           /* ?????? */
                          v_level_no  := 0;
                          open C6(ITM_REC.ITEM_NO) ;
                               fetch C6 into v_level_no ;
                          close C6 ;

                  /* ?????? */
                 V_LEVEL_CONT_KEY  := 0;
                 open C13(C10_REC.ITEM_NO) ;
                   fetch C13 into c13_REC ;
                      If C13%notfound or C13%notfound is null then
                          V_LEVEL_CONT_KEY  := 1;
                      end if;
                 close C13 ;

                          /*--LEVELD????????????,????? */
                          If v_level_no is null then
			      if ITM_REC.STOCK_SUBJECT_CODE < 3 then
                                 insert into cspphysical_wk (
                                        operation_date       ,
                                        section_code         ,
                                        item_no              ,
                                        station_code         ,
                                        this_month           ,
                                        physical_quantity
                                   )values(
                                        sysdate              ,
                                        C10_REC.section_code ,
                                        C10_REC.item_no,
                                        C10_REC.station_code ,
                                        C10_REC.STOCK_TAKING_MONTH,
                                        C10_REC.PHYSICAL_QUANTITY
                                   ) ;
/*************************************************    ??
                              else
DBMS_OUTPUT.PUT_LINE('TEST3-'||C10_REC.item_no|| '-'|| C10_REC.PHYSICAL_QUANTITY);
                                 insert into wipphysical_wk (
                                        operation_date       ,
                                        section_code         ,
                                        item_no              ,
                                        station_code         ,
                                        this_month           ,
                                        physical_quantity
                                   )values(
                                        sysdate              ,
                                        C10_REC.section_code ,
                                        C10_REC.item_no,
                                        C10_REC.station_code ,
                                        C10_REC.STOCK_TAKING_MONTH,
                                        C10_REC.PHYSICAL_QUANTITY
                                   ) ;
**************************************************************  ??  */
			       elsIf V_LEVEL_CONT_KEY = 1 then
                                  insert into pcphysical_wk (
                                        operation_date       ,
                                        section_code         ,
                                        item_no              ,
                                        station_code         ,
                                        this_month           ,
                                        physical_quantity
                                   )values(
                                        sysdate              ,
                                        C10_REC.section_code ,
                                        C10_REC.item_no,
                                        C10_REC.station_code ,
                                        C10_REC.STOCK_TAKING_MONTH,
                                        C10_REC.PHYSICAL_QUANTITY
                                   ) ;
                              End If;
                          Else
                               /* STRUCTURE????? */
                               
                               CT3 := 0;  --????????

                               open C11(ITM_REC.ITEM_NO) ;
                                    loop
                                    fetch C11 into C11_REC ;
                                    exit when C11%notfound or C11%notfound is null;


                                     CT3 := CT3 + 1;
                                     IF CT3 > 10000 THEN --??????? 1?????
                                         goto LOOP_END_C11_C10;
                                     End If;

			           if C11_REC.STOCK_SUBJECT_CODE < 3 then
                                        insert into cspphysical_wk (
                                              operation_date       ,
                                              section_code         ,
                                              item_no              ,
                                              station_code         ,
                                              this_month           ,
                                              physical_quantity
                                        )values(
                                              sysdate              ,
                                              C10_REC.section_code ,
                                              C11_REC.lower_item_no,
                                              C10_REC.station_code ,
                                              C10_REC.STOCK_TAKING_MONTH,
                                              round(C10_REC.PHYSICAL_QUANTITY * C11_REC.QUANTITY / nvl(decode(C11_REC.QUANTITY_BASE,0,1,C11_REC.QUANTITY_BASE),1) * nvl(decode( C11_REC.UNIT_STOCK_RATE,0,1, C11_REC.UNIT_STOCK_RATE),1) / nvl(decode(C11_REC.UNIT_ENGINEER_RATE,0,1,C11_REC.UNIT_ENGINEER_RATE),1),6)
                                        ) ;
				else 
                                        insert into wipphysical_wk (
                                              operation_date       ,
                                              section_code         ,
                                              item_no              ,
                                              station_code         ,
                                              this_month           ,
                                              physical_quantity
                                        )values(
                                              sysdate              ,
                                              C10_REC.section_code ,
                                              C11_REC.lower_item_no,
                                              C10_REC.station_code ,
                                              C10_REC.STOCK_TAKING_MONTH,
                                              round(C10_REC.PHYSICAL_QUANTITY * C11_REC.QUANTITY / nvl(decode(C11_REC.QUANTITY_BASE,0,1,C11_REC.QUANTITY_BASE),1) * nvl(decode(C11_REC.UNIT_STOCK_RATE,0,1,C11_REC.UNIT_STOCK_RATE),1) / nvl(decode(C11_REC.UNIT_ENGINEER_RATE,0,1,C11_REC.UNIT_ENGINEER_RATE),1),6)
                                        ) ;
                                   End if;

                                    end loop ;
                              <<LOOP_END_C11_C10>>
                              close C11 ;
                          End If ;
        <<LOOP_END_C10>>
          null ;
        end loop ;
      close C10 ;

/*******************************************************************/

     if  C9_REC.this_month = PHY_REC.STOCK_TAKING_MONTH then
         /* ????????0???? */
          insert into pcphysical_wk (
                         operation_date       ,
                         section_code         ,
                         item_no              ,
                         station_code         ,
                         this_month           ,
                         physical_quantity
                      )
                 select
                         sysdate              ,
                         section_code         ,
                         item_no              ,
                         station_code         ,
                         this_month           ,
                         0
                from PCINVENTORY ;
     else
      insert into pcphysical_wk (
                     operation_date       ,
                     section_code         ,
                     item_no              ,
                     station_code         ,
                     this_month           ,
                     physical_quantity
                  )
             select
                     sysdate              ,
                     section_code         ,
                     item_no              ,
                     station_code         ,
                     last_month           ,
                     0
            from PCINVENTORY ;
       end if;

       if  C9_REC.this_month = PHY_REC.STOCK_TAKING_MONTH then
         /* ????????0???? */
      insert into WIPPHYSICAL_wk (
                     operation_date       ,
                     section_code         ,
                     item_no              ,
                     station_code         ,
                     this_month           ,
                     physical_quantity
                  )
             select
                     sysdate              ,
                     section_code         ,
                     item_no              ,
                     station_code         ,
                     decode(this_month,C9_REC.this_month,this_month,last_month)           ,
                     0
            from NEW_WIPINVENTORY ;
        else
          insert into WIPPHYSICAL_wk (
                         operation_date       ,
                         section_code         ,
                         item_no              ,
                         station_code         ,
                         this_month           ,
                         physical_quantity
                      )
                 select
                         sysdate              ,
                         section_code         ,
                         item_no              ,
                         station_code         ,
                         decode(this_month,C9_REC.this_month,this_month,last_month)           ,
                         0
                from NEW_WIPINVENTORY ;
          end if;
/* CSPINVENTORY??????? */
      open C7 ;
         loop
            fetch C7 into C7_REC ;
            exit when C7%notfound or C7%notfound is null;
                CSPINVENTORY_SET(
                   C7_REC.ITEM_NO,
                   TO_DATE(C7_REC.THIS_MONTH,'YYYYMM'),
                   C7_REC.PHYSICAL_QUANTITY,
                   9,
                   V_RET_NO,
                   C7_REC.SECTION_CODE,
                   C7_REC.STATION_CODE
                ) ;

         end loop ;
      close C7 ;

/* WIPINVENTORY??????? */
      open C8 ;
         loop
            fetch C8 into C8_REC ;
            exit when C8%notfound or C8%notfound is null;

               /* ??????? (FL????)*/
               if CNF_REC.CONFIG_FLAG = 1 Then
--2016/01/14 Y.Hagai
--                  WIPINVENTORY_set(
                  NEW_WIPINVENTORY_set(
                     C8_REC.ITEM_NO,
                     TO_DATE(C8_REC.THIS_MONTH,'YYYYMM'),
                     C8_REC.PHYSICAL_QUANTITY,
                     9,
                     V_RET_NO,
                     C8_REC.SECTION_CODE,
                     C8_REC.STATION_CODE
                   ) ;
                end if;
         end loop ;
      close C8 ;

/* PCINVENTORY??????? */
      open C12 ;
         loop
            fetch C12 into C12_REC ;
            exit when C12%notfound or C12%notfound is null;

               /* ???????)*/
               if CNF_REC.CONFIG_FLAG = 1 Then
                    PCINVENTORY_set(
                     C12_REC.ITEM_NO,
                     TO_DATE(C12_REC.THIS_MONTH,'YYYYMM'),
                     C12_REC.PHYSICAL_QUANTITY,
                     9,
                     V_RET_NO,
                     C12_REC.SECTION_CODE,
                     C12_REC.STATION_CODE
                   ) ;
                end if;
         end loop ;
      close C12 ;

 <<LAST>>
   null ;
--	DBMS_OUTPUT.PUT_LINE('LAST');

  end ;
end NEW_WIPPHYSICAL_SET ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."P00A902_MAIN" 
/*----------------------------------------------------------------------
  PROCEDURE: LR???? (P00A902_MAIN)
----------------------------------------------------------------------
  2018/04/25  Y.Hagai       ????
----------------------------------------------------------------------*/
is
/*
======================================================================
(C)2014 FDK CORPORATION

?????????????????????? ?????

????    ??????????Commit???????

????
----------------------------------------------------------------------
  Ver    Date        Author          Memo
----------------------------------------------------------------------
  1.0    2014/12/08  NTTk)??       ????
  1.1    2014/12/19  Y.Hagai         ?????
======================================================================
*/

    -- ??????
    wk_sysdate DATE := sysdate;

    -- ??????
    err_code NUMBER(1) := 0;
    ERR_MSG  varchar2(255); --ora????????

    -- ????
    wk_kainen NUMBER(6) := 0;

BEGIN    
--LR????
DBMS_OUTPUT.PUT_LINE('P00A902_MAIN??  ' || to_char(sysdate, 'YYYY/MM/DD hh24:mi:ss'));

    select to_number(to_char(add_months(MAX(ac_month),0),'yyyymm')) into wk_kainen   from SALES;
DBMS_OUTPUT.PUT_LINE('wk_kainen=  ' || wk_kainen);

     PROC_SALES_CHANNELS (wk_kainen); --???????????
     Z99A02951PP (err_code,err_msg );
     DBMS_OUTPUT.PUT_LINE(err_code || '-' || err_msg );

     B40A90101PP (err_code,err_msg  );
     DBMS_OUTPUT.PUT_LINE(err_code || '-' || err_msg );
DBMS_OUTPUT.PUT_LINE('P00A902_MAIN??  ' || to_char(sysdate, 'YYYY/MM/DD hh24:mi:ss'));
    
  -- -----------------------------------------------------------------------------------------------
EXCEPTION
  WHEN OTHERS THEN

    -- ????????
    ROLLBACK;

    -- ?????
    DBMS_OUTPUT.PUT_LINE('ERR_CODE=' || SQLCODE ||', ERR_MSG=' || SQLERRM(SQLCODE) );

END P00A902_MAIN ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."P98A30101PP" (
	p_flg out varchar2,
	p_msg out varchar2)
as
begin
/*--------------------------------------------------------------------
       ????P98A30101PP
         ?????????????????????????????
     ?????P98A30101PP
----------------------------------------------------------------------
   ??????p_ccn
----------------------------------------------------------------------


----------------------------------------------------------------------
       ????2019.02.01 Y.Hagai ????
--------------------------------------------------------------------*/
declare
--????????
	cursor c1
	is
		select a.SEQ
		     , a.PARENT_ITEM_NO
		     , a.TOTAL_LEVEL_NO
		     , a.IP_ADDRESS
		     , a.EMPLOYEE_CODE
		  from P98ECD_PRD a
		 order by
		       a.SEQ
		   for update;
	wk_c1 c1%rowtype;

--??????????
	cursor c2(para1 in number)
	is
		select b.ITEM_NO
		     , b.DESCRIPTION
		     , b.SECTION_CODE
		     , b.STOCK_SUBJECT_CODE
		     , b.MAKER_FLAG
		     , b.DRAWING_REV
		     , b.WEIGHT
		     , b.UOM_W
		     , b.UNIT_STOCK
		     , b.UNIT_STOCK_RATE
		     , b.UNIT_ENGINEER_RATE
		     , c.UOM_KEY
		  from item      b
		     , P98ECD_UNIT_CNV c
		 where b.item_no = para1
		   and b.UNIT_STOCK  = c.UNIT_STOCK(+)
		   and b.CLASS_CODE < 200000;
	wk_c2 c2%rowtype;

--???????
	cursor c3(para1 in number, para2 in number)
	is
		select a.*,b.STOCK_SUBJECT_CODE
		  from leveld a,ITEM b
--		 where a.LEVEL_CONT_KEY = para1
		 where a.ITEM_NO   = para1
		   and a.LEVEL_NO    = para2
		   and a.ITEM_NO = b.ITEM_NO(+);
	wk_c3 c3%rowtype;

--???????
	cursor c4(para1 in number, para2 in number)
	is
		select a.UPPER_ITEM_NO
		     , a.LINE_NO
		     , a.LOWER_ITEM_NO
		     , a.QUANTITY
		     , a.QUANTITY_BASE
		     , a.USER_SUPPLY_FLAG
		     , a.REFERENCE_NUMBER		--???
		     , b.DESCRIPTION
		     , b.SECTION_CODE
		     , b.STOCK_SUBJECT_CODE
		     , b.MAKER_FLAG
		     , b.DRAWING_REV
		     , b.WEIGHT
		     , b.UOM_W
		     , b.UNIT_STOCK
		     , b.UNIT_STOCK_RATE
		     , b.UNIT_ENGINEER_RATE
		     , c.UOM_KEY
		  from STRUCTURE    a
		     , ITEM      b
		     , P98ECD_UNIT_CNV c
		 where a.UPPER_ITEM_NO = para1
		   and a.LEVEL_NO          = para2
		   and a.LOWER_ITEM_NO     = b.ITEM_NO
		   and b.UNIT_STOCK        = c.UNIT_STOCK(+)
		   and b.CLASS_CODE < 200000
		 order by
		       a.REFERENCE_NUMBER
		     , b.ITEM_NO;
	wk_c4 c4%rowtype;

--????????
	cursor c5(para1 in varchar2)
	is
		select a.ITEM_NO
		     , a.DESCRIPTION
		     , a.SECTION_CODE
		     , a.STOCK_SUBJECT_CODE
		     , a.MAKER_FLAG
		     , a.DRAWING_REV
		     , a.WEIGHT
		     , a.UOM_W
		     , a.UNIT_STOCK
		     , a.UNIT_STOCK_RATE
		     , a.UNIT_ENGINEER_RATE
		     , b.UOM_KEY
		  from ITEM      a
		     , P98ECD_UNIT_CNV b
		 where not exists
		       (select * from P98ECD_ITEM c
		         where c.ITEM_NUMBER = para1 || to_char(a.ITEM_NO))
		   and a.UNIT_STOCK = b.UNIT_STOCK(+)
  		   and a.CLASS_CODE < 200000;

	wk_c5 c5%rowtype;

--????
	cursor c6(para1 in varchar2)
	is
		select *
		  from P98ECD_ITEM_BK a
		 where a.ITEM_NUMBER = para1;
	wk_c6 c6%rowtype;

--ITEM??,??????
	cursor c7(para1 in varchar2)
	is
		select a.ITEM,a.DESCRIPTION,a.STOCK_SUBJECT_CODE 
		  from ITEM a
		 where a.ITEM_NO = para1;
	wk_c7 c7%rowtype;
----------------------------------------------------------------------
	ERR_CODE        char(7);
	ERR_MSG         varchar2(255);
----------------------------------------------------------------------
--??????
	wk_ERR_FLG                   varchar2(1);
	wk_CNT                       number(2) := 0;
	wk_ITEM_SEQ                  number(7) := 0;
	wk_BOM_SEQ                   number(7) := 0;
	wk_UPPER_CNT                 number(7) := 0;
	wk_LOWER_CNT                 number(7) := 0;
	wk_ITEM_NM                   P98ECD_ITEM.REMARK2%type;
	wk_ITEM_DESC                 P98ECD_ITEM.ITEM_NAME_DISP%type;
	wk_FLG                       varchar2(1);
	wk_IP_ADDRESS                P98ECD_ITEM.IP_ADDRESS%type;
	wk_EMPLOYEE_CODE             P98ECD_ITEM.EMPLOYEE_CODE%type;
	wk_UPD_FLG                   varchar2(1);
--???????
	wk_ITEM_NUMBER               P98ECD_ITEM.ITEM_NUMBER%type;
	wk_ITEM_SUB_TYPE             P98ECD_ITEM.ITEM_SUB_TYPE%type;
	wk_ECO_ITEM_TYPE             P98ECD_ITEM.ECO_ITEM_TYPE%type;
	wk_COUNT_SUB_STRUCTURE       P98ECD_ITEM.COUNT_SUB_STRUCTURE%type;
	wk_UOM_KEY                   P98ECD_ITEM.UOM_KEY%type;
	wk_MASS                      P98ECD_ITEM.MASS%type;
	wk_ITEM_NAME_DISP            P98ECD_ITEM.ITEM_NAME_DISP%type;
--	wk_ORGANIZATION              P98ECD_ITEM.ORGANIZATION%type;
	wk_REMARK1                   P98ECD_ITEM.REMARK1%type;							--??1??????????
	wk_REMARK2                   P98ECD_ITEM.REMARK2%type;
	wk_REV_USER_COLUMN62         P98ECD_ITEM.REV_USER_COLUMN62%type;
--????????
	wk_UPPER_ITEM_NUMBER         P98ECD_BOM.UPPER_ITEM_NUMBER%type;
	wk_LOWER_ITEM_NUMBER         P98ECD_BOM.LOWER_ITEM_NUMBER%type;
	wk_NUMERATOR                 P98ECD_BOM.NUMERATOR%type;
	wk_DENOMINATOR               P98ECD_BOM.DENOMINATOR%type;
	wk_REL_KEY1                  P98ECD_BOM.REL_KEY1%type;
--??????
	l_CORP_MK                    varchar2(3)                         := 'FI-';
	l_OPERATION_DATE             P98ECD_ITEM.OPERATION_DATE%type     := sysdate;	--????
--???????
	l_ITEM_ASSIST1               P98ECD_ITEM.ITEM_ASSIST1%type       := null;		--??????1
	l_ITEM_ASSIST2               P98ECD_ITEM.ITEM_ASSIST2%type       := null;		--??????1
	l_ITEM_REVISION              P98ECD_ITEM.ITEM_REVISION%type      := null;		--???????
	l_CONTENT_TOTAL_MODE         P98ECD_ITEM.CONTENT_TOTAL_MODE%type := 1;			--????????
	l_SUPPLY_FLAG                P98ECD_ITEM.SUPPLY_FLAG%type        := null;		--?????
	l_ACCEPT_FLAG                P98ECD_ITEM.ACCEPT_FLAG%type        := null;		--?????
	l_UOM_VALUE                  P98ECD_ITEM.UOM_VALUE%type          := null;		--???????
	l_ORGANIZATION               P98ECD_ITEM.ORGANIZATION%type       := null;		--????
	l_PHANTOM_PART_FLAG          P98ECD_ITEM.PHANTOM_PART_FLAG%type  := 1; 			--????
	l_AIS_PART_TYPE              P98ECD_ITEM.AIS_PART_TYPE%type      := 1;			--AIS????
	l_PACKAGING_FLAG             P98ECD_ITEM.PACKAGING_FLAG%type     := 1;			--???
--	l_REMARK1                    P98ECD_ITEM.REMARK1%type            := null;		--??1
	l_REMARK3                    P98ECD_ITEM.REMARK3%type            := null;		--??3
	l_MST_USER_COLUMN1           P98ECD_ITEM.MST_USER_COLUMN1%type   := null;
	l_MST_USER_COLUMN2           P98ECD_ITEM.MST_USER_COLUMN2%type   := null;
	l_MST_USER_COLUMN3           P98ECD_ITEM.MST_USER_COLUMN3%type   := null;
	l_MST_USER_COLUMN4           P98ECD_ITEM.MST_USER_COLUMN4%type   := null;
	l_MST_USER_COLUMN5           P98ECD_ITEM.MST_USER_COLUMN5%type   := null;
	l_MST_USER_COLUMN6           P98ECD_ITEM.MST_USER_COLUMN6%type   := null;
	l_MST_USER_COLUMN7           P98ECD_ITEM.MST_USER_COLUMN7%type   := null;
	l_MST_USER_COLUMN8           P98ECD_ITEM.MST_USER_COLUMN8%type   := null;
	l_MST_USER_COLUMN9           P98ECD_ITEM.MST_USER_COLUMN9%type   := null;
	l_MST_USER_COLUMN10          P98ECD_ITEM.MST_USER_COLUMN10%type  := null;
	l_MST_USER_COLUMN11          P98ECD_ITEM.MST_USER_COLUMN11%type  := null;
	l_MST_USER_COLUMN12          P98ECD_ITEM.MST_USER_COLUMN12%type  := null;
	l_MST_USER_COLUMN13          P98ECD_ITEM.MST_USER_COLUMN13%type  := null;
	l_MST_USER_COLUMN14          P98ECD_ITEM.MST_USER_COLUMN14%type  := null;
	l_MST_USER_COLUMN15          P98ECD_ITEM.MST_USER_COLUMN15%type  := null;
	l_MST_USER_COLUMN16          P98ECD_ITEM.MST_USER_COLUMN16%type  := null;
	l_MST_USER_COLUMN17          P98ECD_ITEM.MST_USER_COLUMN17%type  := null;
	l_MST_USER_COLUMN18          P98ECD_ITEM.MST_USER_COLUMN18%type  := null;
	l_MST_USER_COLUMN19          P98ECD_ITEM.MST_USER_COLUMN19%type  := null;
	l_MST_USER_COLUMN20          P98ECD_ITEM.MST_USER_COLUMN20%type  := null;
	l_MST_USER_COLUMN21          P98ECD_ITEM.MST_USER_COLUMN21%type  := null;
	l_MST_USER_COLUMN22          P98ECD_ITEM.MST_USER_COLUMN22%type  := null;
	l_MST_USER_COLUMN23          P98ECD_ITEM.MST_USER_COLUMN23%type  := null;
	l_MST_USER_COLUMN24          P98ECD_ITEM.MST_USER_COLUMN24%type  := null;
	l_MST_USER_COLUMN25          P98ECD_ITEM.MST_USER_COLUMN25%type  := null;
	l_MST_USER_COLUMN26          P98ECD_ITEM.MST_USER_COLUMN26%type  := null;
	l_REV_USER_COLUMN1           P98ECD_ITEM.REV_USER_COLUMN1%type   := null;
	l_REV_USER_COLUMN2           P98ECD_ITEM.REV_USER_COLUMN2%type   := null;
	l_REV_USER_COLUMN3           P98ECD_ITEM.REV_USER_COLUMN3%type   := null;
	l_REV_USER_COLUMN4           P98ECD_ITEM.REV_USER_COLUMN4%type   := null;
	l_REV_USER_COLUMN5           P98ECD_ITEM.REV_USER_COLUMN5%type   := null;
	l_REV_USER_COLUMN6           P98ECD_ITEM.REV_USER_COLUMN6%type   := null;
	l_REV_USER_COLUMN7           P98ECD_ITEM.REV_USER_COLUMN7%type   := null;
	l_REV_USER_COLUMN8           P98ECD_ITEM.REV_USER_COLUMN8%type   := null;
	l_REV_USER_COLUMN9           P98ECD_ITEM.REV_USER_COLUMN9%type   := null;
	l_REV_USER_COLUMN10          P98ECD_ITEM.REV_USER_COLUMN10%type  := null;
	l_REV_USER_COLUMN11          P98ECD_ITEM.REV_USER_COLUMN11%type  := null;
	l_REV_USER_COLUMN12          P98ECD_ITEM.REV_USER_COLUMN12%type  := null;
	l_REV_USER_COLUMN13          P98ECD_ITEM.REV_USER_COLUMN13%type  := null;
	l_REV_USER_COLUMN14          P98ECD_ITEM.REV_USER_COLUMN14%type  := null;
	l_REV_USER_COLUMN15          P98ECD_ITEM.REV_USER_COLUMN15%type  := null;
	l_REV_USER_COLUMN16          P98ECD_ITEM.REV_USER_COLUMN16%type  := null;
	l_REV_USER_COLUMN17          P98ECD_ITEM.REV_USER_COLUMN17%type  := null;
	l_REV_USER_COLUMN18          P98ECD_ITEM.REV_USER_COLUMN18%type  := null;
	l_REV_USER_COLUMN19          P98ECD_ITEM.REV_USER_COLUMN19%type  := null;
	l_REV_USER_COLUMN20          P98ECD_ITEM.REV_USER_COLUMN20%type  := null;
	l_REV_USER_COLUMN21          P98ECD_ITEM.REV_USER_COLUMN21%type  := null;
	l_REV_USER_COLUMN22          P98ECD_ITEM.REV_USER_COLUMN22%type  := null;
	l_REV_USER_COLUMN23          P98ECD_ITEM.REV_USER_COLUMN23%type  := null;
	l_REV_USER_COLUMN24          P98ECD_ITEM.REV_USER_COLUMN24%type  := null;
	l_REV_USER_COLUMN25          P98ECD_ITEM.REV_USER_COLUMN25%type  := null;
	l_REV_USER_COLUMN26          P98ECD_ITEM.REV_USER_COLUMN26%type  := null;
	l_REV_USER_COLUMN27          P98ECD_ITEM.REV_USER_COLUMN27%type  := null;
	l_REV_USER_COLUMN28          P98ECD_ITEM.REV_USER_COLUMN28%type  := null;
	l_REV_USER_COLUMN29          P98ECD_ITEM.REV_USER_COLUMN29%type  := null;
	l_REV_USER_COLUMN30          P98ECD_ITEM.REV_USER_COLUMN30%type  := null;
	l_REV_USER_COLUMN31          P98ECD_ITEM.REV_USER_COLUMN31%type  := null;
	l_REV_USER_COLUMN32          P98ECD_ITEM.REV_USER_COLUMN32%type  := null;
	l_REV_USER_COLUMN33          P98ECD_ITEM.REV_USER_COLUMN33%type  := null;
	l_REV_USER_COLUMN34          P98ECD_ITEM.REV_USER_COLUMN34%type  := null;
	l_REV_USER_COLUMN35          P98ECD_ITEM.REV_USER_COLUMN35%type  := null;
	l_REV_USER_COLUMN36          P98ECD_ITEM.REV_USER_COLUMN36%type  := null;
	l_REV_USER_COLUMN37          P98ECD_ITEM.REV_USER_COLUMN37%type  := null;
	l_REV_USER_COLUMN38          P98ECD_ITEM.REV_USER_COLUMN38%type  := null;
	l_REV_USER_COLUMN39          P98ECD_ITEM.REV_USER_COLUMN39%type  := null;
	l_REV_USER_COLUMN40          P98ECD_ITEM.REV_USER_COLUMN40%type  := null;
	l_REV_USER_COLUMN41          P98ECD_ITEM.REV_USER_COLUMN41%type  := null;
	l_REV_USER_COLUMN42          P98ECD_ITEM.REV_USER_COLUMN42%type  := null;
	l_REV_USER_COLUMN43          P98ECD_ITEM.REV_USER_COLUMN43%type  := null;
	l_REV_USER_COLUMN44          P98ECD_ITEM.REV_USER_COLUMN44%type  := null;
	l_REV_USER_COLUMN45          P98ECD_ITEM.REV_USER_COLUMN45%type  := null;
	l_REV_USER_COLUMN46          P98ECD_ITEM.REV_USER_COLUMN46%type  := null;
	l_REV_USER_COLUMN47          P98ECD_ITEM.REV_USER_COLUMN47%type  := null;
	l_REV_USER_COLUMN48          P98ECD_ITEM.REV_USER_COLUMN48%type  := null;
	l_REV_USER_COLUMN49          P98ECD_ITEM.REV_USER_COLUMN49%type  := null;
	l_REV_USER_COLUMN50          P98ECD_ITEM.REV_USER_COLUMN50%type  := null;
	l_REV_USER_COLUMN51          P98ECD_ITEM.REV_USER_COLUMN51%type  := null;
	l_REV_USER_COLUMN52          P98ECD_ITEM.REV_USER_COLUMN52%type  := null;
	l_REV_USER_COLUMN53          P98ECD_ITEM.REV_USER_COLUMN53%type  := null;
	l_REV_USER_COLUMN54          P98ECD_ITEM.REV_USER_COLUMN54%type  := null;
	l_REV_USER_COLUMN55          P98ECD_ITEM.REV_USER_COLUMN55%type  := null;
	l_REV_USER_COLUMN56          P98ECD_ITEM.REV_USER_COLUMN56%type  := null;
	l_REV_USER_COLUMN57          P98ECD_ITEM.REV_USER_COLUMN57%type  := null;
	l_REV_USER_COLUMN58          P98ECD_ITEM.REV_USER_COLUMN58%type  := null;
	l_REV_USER_COLUMN59          P98ECD_ITEM.REV_USER_COLUMN59%type  := null;
	l_REV_USER_COLUMN60          P98ECD_ITEM.REV_USER_COLUMN60%type  := null;
	l_REV_USER_COLUMN61          P98ECD_ITEM.REV_USER_COLUMN61%type  := null;
	l_REV_USER_COLUMN63          P98ECD_ITEM.REV_USER_COLUMN63%type  := to_char(sysdate, 'yyyymmdd');
	l_REV_USER_COLUMN64          P98ECD_ITEM.REV_USER_COLUMN64%type  := null;
	l_REV_USER_COLUMN65          P98ECD_ITEM.REV_USER_COLUMN65%type  := null;
	l_REV_USER_COLUMN66          P98ECD_ITEM.REV_USER_COLUMN66%type  := null;
	l_REV_USER_COLUMN67          P98ECD_ITEM.REV_USER_COLUMN67%type  := null;
	l_REV_USER_COLUMN68          P98ECD_ITEM.REV_USER_COLUMN68%type  := null;
	l_REV_USER_COLUMN69          P98ECD_ITEM.REV_USER_COLUMN69%type  := null;
	l_REV_USER_COLUMN70          P98ECD_ITEM.REV_USER_COLUMN70%type  := null;
	l_REV_USER_COLUMN71          P98ECD_ITEM.REV_USER_COLUMN71%type  := null;
	l_REV_USER_COLUMN72          P98ECD_ITEM.REV_USER_COLUMN72%type  := null;
	l_REV_USER_COLUMN73          P98ECD_ITEM.REV_USER_COLUMN73%type  := null;
	l_REV_USER_COLUMN74          P98ECD_ITEM.REV_USER_COLUMN74%type  := null;
	l_REV_USER_COLUMN75          P98ECD_ITEM.REV_USER_COLUMN75%type  := null;
	l_REV_USER_COLUMN76          P98ECD_ITEM.REV_USER_COLUMN76%type  := null;
	l_REV_USER_COLUMN77          P98ECD_ITEM.REV_USER_COLUMN77%type  := null;
	l_REV_USER_COLUMN78          P98ECD_ITEM.REV_USER_COLUMN78%type  := null;
	l_REV_USER_COLUMN79          P98ECD_ITEM.REV_USER_COLUMN79%type  := null;
	l_REV_USER_COLUMN80          P98ECD_ITEM.REV_USER_COLUMN80%type  := null;
	l_REV_USER_COLUMN81          P98ECD_ITEM.REV_USER_COLUMN81%type  := null;
	l_REV_USER_COLUMN82          P98ECD_ITEM.REV_USER_COLUMN82%type  := null;
	l_REV_USER_COLUMN83          P98ECD_ITEM.REV_USER_COLUMN83%type  := null;
	l_REV_USER_COLUMN84          P98ECD_ITEM.REV_USER_COLUMN84%type  := null;
	l_REV_USER_COLUMN85          P98ECD_ITEM.REV_USER_COLUMN85%type  := null;
	l_REV_USER_COLUMN86          P98ECD_ITEM.REV_USER_COLUMN86%type  := null;
	l_REV_USER_COLUMN87          P98ECD_ITEM.REV_USER_COLUMN87%type  := null;
	l_REV_USER_COLUMN88          P98ECD_ITEM.REV_USER_COLUMN88%type  := null;
	l_REV_USER_COLUMN89          P98ECD_ITEM.REV_USER_COLUMN89%type  := null;
	l_REV_USER_COLUMN90          P98ECD_ITEM.REV_USER_COLUMN90%type  := null;
	l_REV_USER_COLUMN91          P98ECD_ITEM.REV_USER_COLUMN91%type  := null;
	l_REV_USER_COLUMN92          P98ECD_ITEM.REV_USER_COLUMN92%type  := null;
	l_REV_USER_COLUMN93          P98ECD_ITEM.REV_USER_COLUMN93%type  := null;
	l_REV_USER_COLUMN94          P98ECD_ITEM.REV_USER_COLUMN94%type  := null;
	l_REV_USER_COLUMN95          P98ECD_ITEM.REV_USER_COLUMN95%type  := null;
	l_REV_USER_COLUMN96          P98ECD_ITEM.REV_USER_COLUMN96%type  := null;
	l_REV_USER_COLUMN97          P98ECD_ITEM.REV_USER_COLUMN97%type  := null;
	l_REV_USER_COLUMN98          P98ECD_ITEM.REV_USER_COLUMN98%type  := null;
	l_REV_USER_COLUMN99          P98ECD_ITEM.REV_USER_COLUMN99%type  := null;
--????????
	l_UPPER_ITEM_ASSIST1         P98ECD_BOM.UPPER_ITEM_ASSIST1%type  := null;
	l_UPPER_ITEM_ASSIST2         P98ECD_BOM.UPPER_ITEM_ASSIST2%type  := null;
	l_LOWER_ITEM_ASSIST1         P98ECD_BOM.LOWER_ITEM_ASSIST1%type  := null;
	l_LOWER_ITEM_ASSIST2         P98ECD_BOM.LOWER_ITEM_ASSIST2%type  := null;
	l_REL_KEY2                   P98ECD_BOM.REL_KEY2%type            := null;
	l_REL_KEY3                   P98ECD_BOM.REL_KEY3%type            := null;
	l_REL_KEY4                   P98ECD_BOM.REL_KEY4%type            := null;
	l_REL_KEYWORD1               P98ECD_BOM.REL_KEYWORD1%type        := null;
	l_REL_KEYWORD2               P98ECD_BOM.REL_KEYWORD2%type        := null;
	l_REL_KEYWORD3               P98ECD_BOM.REL_KEYWORD3%type        := null;
	l_REL_KEYWORD4               P98ECD_BOM.REL_KEYWORD4%type        := null;
	l_REL_KEYWORD5               P98ECD_BOM.REL_KEYWORD5%type        := null;
	l_REL_KEYWORD6               P98ECD_BOM.REL_KEYWORD6%type        := null;
	l_REL_KEYWORD7               P98ECD_BOM.REL_KEYWORD7%type        := null;
	l_REL_KEYWORD8               P98ECD_BOM.REL_KEYWORD8%type        := null;
	l_REL_KEYWORD9               P98ECD_BOM.REL_KEYWORD9%type        := null;
	l_REL_KEYWORD10              P98ECD_BOM.REL_KEYWORD10%type       := null;
	l_REL_KEYWORD11              P98ECD_BOM.REL_KEYWORD11%type       := null;
	l_REL_KEYWORD12              P98ECD_BOM.REL_KEYWORD12%type       := null;
	l_REL_KEYWORD13              P98ECD_BOM.REL_KEYWORD13%type       := null;
	l_REL_KEYWORD14              P98ECD_BOM.REL_KEYWORD14%type       := null;
	l_REL_KEYWORD15              P98ECD_BOM.REL_KEYWORD15%type       := null;
	l_REL_KEYWORD16              P98ECD_BOM.REL_KEYWORD16%type       := null;
	l_REL_KEYWORD17              P98ECD_BOM.REL_KEYWORD17%type       := null;
	l_REL_KEYWORD18              P98ECD_BOM.REL_KEYWORD18%type       := null;
	l_REL_KEYWORD19              P98ECD_BOM.REL_KEYWORD19%type       := null;
	l_REL_KEYWORD20              P98ECD_BOM.REL_KEYWORD20%type       := null;
	l_REL_KEYWORD21              P98ECD_BOM.REL_KEYWORD21%type       := null;
	l_REL_KEYWORD22              P98ECD_BOM.REL_KEYWORD22%type       := null;
	l_REL_KEYWORD23              P98ECD_BOM.REL_KEYWORD23%type       := null;
	l_REL_KEYWORD24              P98ECD_BOM.REL_KEYWORD24%type       := null;
	l_REL_KEYWORD25              P98ECD_BOM.REL_KEYWORD25%type       := null;
----------------------------------------------------------------------
procedure ITEM_INS_RTN
is
begin
	wk_ITEM_SEQ := wk_ITEM_SEQ + 1;
	insert into P98ECD_ITEM(
	            OPERATION_DATE
	          , SEQ
	          , IP_ADDRESS
	          , EMPLOYEE_CODE
	          , ITEM_NUMBER
	          , ITEM_ASSIST1
	          , ITEM_ASSIST2
	          , ITEM_SUB_TYPE
	          , ITEM_REVISION
	          , ECO_ITEM_TYPE
	          , COUNT_SUB_STRUCTURE
	          , CONTENT_TOTAL_MODE
	          , SUPPLY_FLAG
	          , ACCEPT_FLAG
	          , UOM_KEY
	          , UOM_VALUE
	          , MASS
	          , ITEM_NAME_DISP
	          , ORGANIZATION
	          , PHANTOM_PART_FLAG
	          , AIS_PART_TYPE
	          , PACKAGING_FLAG
	          , REMARK1
	          , REMARK2
	          , REMARK3
	          , MST_USER_COLUMN1
	          , MST_USER_COLUMN2
	          , MST_USER_COLUMN3
	          , MST_USER_COLUMN4
	          , MST_USER_COLUMN5
	          , MST_USER_COLUMN6
	          , MST_USER_COLUMN7
	          , MST_USER_COLUMN8
	          , MST_USER_COLUMN9
	          , MST_USER_COLUMN10
	          , MST_USER_COLUMN11
	          , MST_USER_COLUMN12
	          , MST_USER_COLUMN13
	          , MST_USER_COLUMN14
	          , MST_USER_COLUMN15
	          , MST_USER_COLUMN16
	          , MST_USER_COLUMN17
	          , MST_USER_COLUMN18
	          , MST_USER_COLUMN19
	          , MST_USER_COLUMN20
	          , MST_USER_COLUMN21
	          , MST_USER_COLUMN22
	          , MST_USER_COLUMN23
	          , MST_USER_COLUMN24
	          , MST_USER_COLUMN25
	          , MST_USER_COLUMN26
	          , REV_USER_COLUMN1
	          , REV_USER_COLUMN2
	          , REV_USER_COLUMN3
	          , REV_USER_COLUMN4
	          , REV_USER_COLUMN5
	          , REV_USER_COLUMN6
	          , REV_USER_COLUMN7
	          , REV_USER_COLUMN8
	          , REV_USER_COLUMN9
	          , REV_USER_COLUMN10
	          , REV_USER_COLUMN11
	          , REV_USER_COLUMN12
	          , REV_USER_COLUMN13
	          , REV_USER_COLUMN14
	          , REV_USER_COLUMN15
	          , REV_USER_COLUMN16
	          , REV_USER_COLUMN17
	          , REV_USER_COLUMN18
	          , REV_USER_COLUMN19
	          , REV_USER_COLUMN20
	          , REV_USER_COLUMN21
	          , REV_USER_COLUMN22
	          , REV_USER_COLUMN23
	          , REV_USER_COLUMN24
	          , REV_USER_COLUMN25
	          , REV_USER_COLUMN26
	          , REV_USER_COLUMN27
	          , REV_USER_COLUMN28
	          , REV_USER_COLUMN29
	          , REV_USER_COLUMN30
	          , REV_USER_COLUMN31
	          , REV_USER_COLUMN32
	          , REV_USER_COLUMN33
	          , REV_USER_COLUMN34
	          , REV_USER_COLUMN35
	          , REV_USER_COLUMN36
	          , REV_USER_COLUMN37
	          , REV_USER_COLUMN38
	          , REV_USER_COLUMN39
	          , REV_USER_COLUMN40
	          , REV_USER_COLUMN41
	          , REV_USER_COLUMN42
	          , REV_USER_COLUMN43
	          , REV_USER_COLUMN44
	          , REV_USER_COLUMN45
	          , REV_USER_COLUMN46
	          , REV_USER_COLUMN47
	          , REV_USER_COLUMN48
	          , REV_USER_COLUMN49
	          , REV_USER_COLUMN50
	          , REV_USER_COLUMN51
	          , REV_USER_COLUMN52
	          , REV_USER_COLUMN53
	          , REV_USER_COLUMN54
	          , REV_USER_COLUMN55
	          , REV_USER_COLUMN56
	          , REV_USER_COLUMN57
	          , REV_USER_COLUMN58
	          , REV_USER_COLUMN59
	          , REV_USER_COLUMN60
	          , REV_USER_COLUMN61
	          , REV_USER_COLUMN62
	          , REV_USER_COLUMN63
	          , REV_USER_COLUMN64
	          , REV_USER_COLUMN65
	          , REV_USER_COLUMN66
	          , REV_USER_COLUMN67
	          , REV_USER_COLUMN68
	          , REV_USER_COLUMN69
	          , REV_USER_COLUMN70
	          , REV_USER_COLUMN71
	          , REV_USER_COLUMN72
	          , REV_USER_COLUMN73
	          , REV_USER_COLUMN74
	          , REV_USER_COLUMN75
	          , REV_USER_COLUMN76
	          , REV_USER_COLUMN77
	          , REV_USER_COLUMN78
	          , REV_USER_COLUMN79
	          , REV_USER_COLUMN80
	          , REV_USER_COLUMN81
	          , REV_USER_COLUMN82
	          , REV_USER_COLUMN83
	          , REV_USER_COLUMN84
	          , REV_USER_COLUMN85
	          , REV_USER_COLUMN86
	          , REV_USER_COLUMN87
	          , REV_USER_COLUMN88
	          , REV_USER_COLUMN89
	          , REV_USER_COLUMN90
	          , REV_USER_COLUMN91
	          , REV_USER_COLUMN92
	          , REV_USER_COLUMN93
	          , REV_USER_COLUMN94
	          , REV_USER_COLUMN95
	          , REV_USER_COLUMN96
	          , REV_USER_COLUMN97
	          , REV_USER_COLUMN98
	          , REV_USER_COLUMN99
	) values(
	            l_OPERATION_DATE
	          , wk_ITEM_SEQ
	          , wk_IP_ADDRESS
	          , wk_EMPLOYEE_CODE
	          , wk_ITEM_NUMBER
	          , l_ITEM_ASSIST1
	          , l_ITEM_ASSIST2
	          , wk_ITEM_SUB_TYPE
	          , l_ITEM_REVISION
	          , wk_ECO_ITEM_TYPE
	          , wk_COUNT_SUB_STRUCTURE
	          , l_CONTENT_TOTAL_MODE
	          , l_SUPPLY_FLAG
	          , l_ACCEPT_FLAG
	          , wk_UOM_KEY
	          , l_UOM_VALUE
	          , wk_MASS
	          , wk_ITEM_NAME_DISP
--	          , wk_ORGANIZATION
	          , l_ORGANIZATION
	          , l_PHANTOM_PART_FLAG
	          , l_AIS_PART_TYPE
	          , l_PACKAGING_FLAG
	          , wk_REMARK1
	          , wk_REMARK2
	          , l_REMARK3
	          , l_MST_USER_COLUMN1
	          , l_MST_USER_COLUMN2
	          , l_MST_USER_COLUMN3
	          , l_MST_USER_COLUMN4
	          , l_MST_USER_COLUMN5
	          , l_MST_USER_COLUMN6
	          , l_MST_USER_COLUMN7
	          , l_MST_USER_COLUMN8
	          , l_MST_USER_COLUMN9
	          , l_MST_USER_COLUMN10
	          , l_MST_USER_COLUMN11
	          , l_MST_USER_COLUMN12
	          , l_MST_USER_COLUMN13
	          , l_MST_USER_COLUMN14
	          , l_MST_USER_COLUMN15
	          , l_MST_USER_COLUMN16
	          , l_MST_USER_COLUMN17
	          , l_MST_USER_COLUMN18
	          , l_MST_USER_COLUMN19
	          , l_MST_USER_COLUMN20
	          , l_MST_USER_COLUMN21
	          , l_MST_USER_COLUMN22
	          , l_MST_USER_COLUMN23
	          , l_MST_USER_COLUMN24
	          , l_MST_USER_COLUMN25
	          , l_MST_USER_COLUMN26
	          , l_REV_USER_COLUMN1
	          , l_REV_USER_COLUMN2
	          , l_REV_USER_COLUMN3
	          , l_REV_USER_COLUMN4
	          , l_REV_USER_COLUMN5
	          , l_REV_USER_COLUMN6
	          , l_REV_USER_COLUMN7
	          , l_REV_USER_COLUMN8
	          , l_REV_USER_COLUMN9
	          , l_REV_USER_COLUMN10
	          , l_REV_USER_COLUMN11
	          , l_REV_USER_COLUMN12
	          , l_REV_USER_COLUMN13
	          , l_REV_USER_COLUMN14
	          , l_REV_USER_COLUMN15
	          , l_REV_USER_COLUMN16
	          , l_REV_USER_COLUMN17
	          , l_REV_USER_COLUMN18
	          , l_REV_USER_COLUMN19
	          , l_REV_USER_COLUMN20
	          , l_REV_USER_COLUMN21
	          , l_REV_USER_COLUMN22
	          , l_REV_USER_COLUMN23
	          , l_REV_USER_COLUMN24
	          , l_REV_USER_COLUMN25
	          , l_REV_USER_COLUMN26
	          , l_REV_USER_COLUMN27
	          , l_REV_USER_COLUMN28
	          , l_REV_USER_COLUMN29
	          , l_REV_USER_COLUMN30
	          , l_REV_USER_COLUMN31
	          , l_REV_USER_COLUMN32
	          , l_REV_USER_COLUMN33
	          , l_REV_USER_COLUMN34
	          , l_REV_USER_COLUMN35
	          , l_REV_USER_COLUMN36
	          , l_REV_USER_COLUMN37
	          , l_REV_USER_COLUMN38
	          , l_REV_USER_COLUMN39
	          , l_REV_USER_COLUMN40
	          , l_REV_USER_COLUMN41
	          , l_REV_USER_COLUMN42
	          , l_REV_USER_COLUMN43
	          , l_REV_USER_COLUMN44
	          , l_REV_USER_COLUMN45
	          , l_REV_USER_COLUMN46
	          , l_REV_USER_COLUMN47
	          , l_REV_USER_COLUMN48
	          , l_REV_USER_COLUMN49
	          , l_REV_USER_COLUMN50
	          , l_REV_USER_COLUMN51
	          , l_REV_USER_COLUMN52
	          , l_REV_USER_COLUMN53
	          , l_REV_USER_COLUMN54
	          , l_REV_USER_COLUMN55
	          , l_REV_USER_COLUMN56
	          , l_REV_USER_COLUMN57
	          , l_REV_USER_COLUMN58
	          , l_REV_USER_COLUMN59
	          , l_REV_USER_COLUMN60
	          , l_REV_USER_COLUMN61
	          , wk_REV_USER_COLUMN62
	          , l_REV_USER_COLUMN63
	          , l_REV_USER_COLUMN64
	          , l_REV_USER_COLUMN65
	          , l_REV_USER_COLUMN66
	          , l_REV_USER_COLUMN67
	          , l_REV_USER_COLUMN68
	          , l_REV_USER_COLUMN69
	          , l_REV_USER_COLUMN70
	          , l_REV_USER_COLUMN71
	          , l_REV_USER_COLUMN72
	          , l_REV_USER_COLUMN73
	          , l_REV_USER_COLUMN74
	          , l_REV_USER_COLUMN75
	          , l_REV_USER_COLUMN76
	          , l_REV_USER_COLUMN77
	          , l_REV_USER_COLUMN78
	          , l_REV_USER_COLUMN79
	          , l_REV_USER_COLUMN80
	          , l_REV_USER_COLUMN81
	          , l_REV_USER_COLUMN82
	          , l_REV_USER_COLUMN83
	          , l_REV_USER_COLUMN84
	          , l_REV_USER_COLUMN85
	          , l_REV_USER_COLUMN86
	          , l_REV_USER_COLUMN87
	          , l_REV_USER_COLUMN88
	          , l_REV_USER_COLUMN89
	          , l_REV_USER_COLUMN90
	          , l_REV_USER_COLUMN91
	          , l_REV_USER_COLUMN92
	          , l_REV_USER_COLUMN93
	          , l_REV_USER_COLUMN94
	          , l_REV_USER_COLUMN95
	          , l_REV_USER_COLUMN96
	          , l_REV_USER_COLUMN97
	          , l_REV_USER_COLUMN98
	          , l_REV_USER_COLUMN99
	);
end ITEM_INS_RTN;
----------------------------------------------------------------------
----------------------------------------------------------------------
procedure BOM_INS_RTN
is
begin
	wk_BOM_SEQ := wk_BOM_SEQ + 1;
	insert into P98ECD_BOM(
	            OPERATION_DATE
	          , SEQ
	          , IP_ADDRESS
	          , EMPLOYEE_CODE
	          , UPPER_ITEM_NUMBER
	          , UPPER_ITEM_ASSIST1
	          , UPPER_ITEM_ASSIST2
	          , LOWER_ITEM_NUMBER
	          , LOWER_ITEM_ASSIST1
	          , LOWER_ITEM_ASSIST2
	          , NUMERATOR
	          , DENOMINATOR
	          , REL_KEY1
	          , REL_KEY2
	          , REL_KEY3
	          , REL_KEY4
	          , REL_KEYWORD1
	          , REL_KEYWORD2
	          , REL_KEYWORD3
	          , REL_KEYWORD4
	          , REL_KEYWORD5
	          , REL_KEYWORD6
	          , REL_KEYWORD7
	          , REL_KEYWORD8
	          , REL_KEYWORD9
	          , REL_KEYWORD10
	          , REL_KEYWORD11
	          , REL_KEYWORD12
	          , REL_KEYWORD13
	          , REL_KEYWORD14
	          , REL_KEYWORD15
	          , REL_KEYWORD16
	          , REL_KEYWORD17
	          , REL_KEYWORD18
	          , REL_KEYWORD19
	          , REL_KEYWORD20
	          , REL_KEYWORD21
	          , REL_KEYWORD22
	          , REL_KEYWORD23
	          , REL_KEYWORD24
	          , REL_KEYWORD25
	) values (
	            l_OPERATION_DATE
	          , wk_BOM_SEQ
	          , wk_IP_ADDRESS
	          , wk_EMPLOYEE_CODE
	          , wk_UPPER_ITEM_NUMBER
	          , l_UPPER_ITEM_ASSIST1
	          , l_UPPER_ITEM_ASSIST2
	          , wk_LOWER_ITEM_NUMBER
	          , l_LOWER_ITEM_ASSIST1
	          , l_LOWER_ITEM_ASSIST2
	          , wk_NUMERATOR
	          , wk_DENOMINATOR
	          , wk_REL_KEY1
	          , l_REL_KEY2
	          , l_REL_KEY3
	          , l_REL_KEY4
	          , l_REL_KEYWORD1
	          , l_REL_KEYWORD2
	          , l_REL_KEYWORD3
	          , l_REL_KEYWORD4
	          , l_REL_KEYWORD5
	          , l_REL_KEYWORD6
	          , l_REL_KEYWORD7
	          , l_REL_KEYWORD8
	          , l_REL_KEYWORD9
	          , l_REL_KEYWORD10
	          , l_REL_KEYWORD11
	          , l_REL_KEYWORD12
	          , l_REL_KEYWORD13
	          , l_REL_KEYWORD14
	          , l_REL_KEYWORD15
	          , l_REL_KEYWORD16
	          , l_REL_KEYWORD17
	          , l_REL_KEYWORD18
	          , l_REL_KEYWORD19
	          , l_REL_KEYWORD20
	          , l_REL_KEYWORD21
	          , l_REL_KEYWORD22
	          , l_REL_KEYWORD23
	          , l_REL_KEYWORD24
	          , l_REL_KEYWORD25
	);
end BOM_INS_RTN;
----------------------------------------------------------------------
begin
DBMS_OUTPUT.PUT_LINE('start=' || to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'));
--
	delete from P98ECD_PRD;
	delete from P98ECD_ITEM;
	delete from P98ECD_BOM;

--??????????????????????????????
	insert into P98ECD_PRD
	select l_OPERATION_DATE
	     , rownum
	     , w.ITEM_NO
	     , w.LEVEL_NO
	     , w.IP_ADDRESS
	     , w.EMPLOYEE_CODE
	  from (
	        select a.ITEM_NO
	             , max(a.LEVEL_NO) as LEVEL_NO
	             , 'SYS' as IP_ADDRESS
	             , 'SYS' as EMPLOYEE_CODE
	          from LEVELD a
	             , (select distinct
	                       z.UPPER_ITEM_NO
	                  from (select v.UPPER_ITEM_NO
	                          from P91STRUCT_ECD_VIEW v
	                         where not exists
	                               (select * from P91STRUCTURE_ECD x
	                                 where x.UPPER_ITEM_NUMBER  = v.UPPER_ITEM_NO
	                                   and x.LEVEL_NO           = v.LEVEL_NO
	                                   and x.LINE_NO            = v.LINE_NO
	                                   and x.LOWER_ITEM_NUMBER  = v.LOWER_ITEM_NO)
	                         union all
	                        select x.UPPER_ITEM_NUMBER
	                          from P91STRUCTURE_ECD x
	                         where not exists
	                               (select * from P91STRUCT_ECD_VIEW v
	                                 where v.UPPER_ITEM_NO  = x.UPPER_ITEM_NUMBER
	                                   and v.LEVEL_NO           = x.LEVEL_NO
	                                   and v.LINE_NO            = x.LINE_NO
	                                   and v.LOWER_ITEM_NO  = x.LOWER_ITEM_NUMBER)
	                       ) z
	               ) b
	             , ITEM C
	         where a.ITEM_NO = b.UPPER_ITEM_NO
	           and a.ITEM_NO = c.ITEM_NO
	         group by
	               a.ITEM_NO
	         order by
	               a.ITEM_NO) w;
/*
delete from P98ECD_PRD x
 where x.PARENT_ITEM_NO not in (
82998288,
83053818,
90377830,
82995359,
82995333
);
*/
/*
--?????????????????????????????
	insert into P98ECD_PRD
	select l_OPERATION_DATE
	     , rownum
	     , a.ITEM_NUMBER
	     , a.TOTAL_LEVEL_NO
	     , a.IP_ADDRESS
	     , a.EMPLOYEE_CODE
	  from (select x.ITEM_NUMBER
	             , x.TOTAL_LEVEL_NO
	             , x.IP_ADDRESS
	             , x.EMPLOYEE_CODE
	          from P91LEVELD x
	         where x.INVALID_DATE is null
	         order by
	               x.ITEM_NUMBER) a;
*/

--??????
	open c1;
	loop
		fetch c1 into wk_c1;
		exit when c1%notfound or c1%notfound is null;

--???????
		open c2(wk_c1.PARENT_ITEM_NO);
			fetch c2 into wk_c2;
			if c2%notfound or c2%notfound is null then
				wk_ERR_FLG := '1';
			end if;
		close c2;

--??????
		open c3(wk_c1.PARENT_ITEM_NO, wk_c1.TOTAL_LEVEL_NO);
			fetch c3 into wk_c3;
			if c3%notfound or c3%notfound is null then
				wk_ERR_FLG := '1';
			end if;
		close c3;

--?????????
		if wk_ERR_FLG = '1' then
			goto c1_end;
		end if;

----------------------------------------------------------------------
		wk_IP_ADDRESS    := wk_c1.IP_ADDRESS;
		wk_EMPLOYEE_CODE := wk_c1.EMPLOYEE_CODE;
--??????
--		wk_ITEM_NUMBER    := l_CORP_MK || to_char(wk_c3.ITEM_NUMBER);		--????
		wk_ITEM_NUMBER    := l_CORP_MK || lpad(to_char(wk_c3.ITEM_NO), 8, '0');		--????

--?????
		if wk_c3.STOCK_SUBJECT_CODE = '5' then
			wk_ITEM_SUB_TYPE := 1;		--??
		else
--???????????
			select count(*) into wk_UPPER_CNT from STRUCTURE where UPPER_ITEM_NO = wk_c3.ITEM_NO;
			select count(*) into wk_LOWER_CNT from STRUCTURE where LOWER_ITEM_NO = wk_c3.ITEM_NO;

			if wk_UPPER_CNT = 0 and wk_LOWER_CNT = 0 then
				wk_ITEM_SUB_TYPE := 5;		--??
			elsif wk_UPPER_CNT = 0 and wk_LOWER_CNT > 0 then
				wk_ITEM_SUB_TYPE := 5;		--??
			elsif wk_UPPER_CNT > 0 and wk_LOWER_CNT = 0 then
				wk_ITEM_SUB_TYPE := 1;		--??
			elsif wk_UPPER_CNT > 0 and wk_LOWER_CNT > 0 then
				wk_ITEM_SUB_TYPE := 4;		--???
			else
				wk_ITEM_SUB_TYPE := 5;		--??
			end if;
		end if;

--??????
		if wk_ITEM_SUB_TYPE in (1, 4, 5) then		--?????????
			wk_ECO_ITEM_TYPE := '1';
		elsif wk_ITEM_SUB_TYPE = '14' then			--??
			wk_ECO_ITEM_TYPE := '2';
		else
			wk_ECO_ITEM_TYPE := '1';
		end if;

--????????
		if nvl(wk_c2.MAKER_FLAG, ' ') = '1' then		--??
			wk_COUNT_SUB_STRUCTURE := 2;
		elsif nvl(wk_c2.MAKER_FLAG, ' ') = '2' then		--??
			wk_COUNT_SUB_STRUCTURE := 1;
		elsif nvl(wk_c2.MAKER_FLAG, ' ') = '3' then		--??
			wk_COUNT_SUB_STRUCTURE := 2;
		else
			wk_COUNT_SUB_STRUCTURE := 1;
		end if;

--????????
		if wk_c2.UOM_KEY is null then
			wk_UOM_KEY := 100;
		else
			wk_UOM_KEY := wk_c2.UOM_KEY;
		end if;

--??
		if wk_c2.UOM_W = 120 then
			wk_MASS := wk_c2.WEIGHT;
		elsif wk_c2.UOM_W = 30 then
			wk_MASS := wk_c2.WEIGHT * 1000;
		else
			wk_MASS := null;
		end if;

--???????
		wk_FLG := '0';
		open c7(wk_c2.ITEM_NO);
			fetch c7 into wk_c7;
			if c7%notfound or c7%notfound is null then
				wk_FLG := '1';
			else
				wk_ITEM_NM := nvl(wk_c7.DESCRIPTION,wk_c7.ITEM);
			end if;
		close c7;

		if wk_FLG = '0' then
			wk_ITEM_NAME_DISP := nvl(rtrim(wk_ITEM_NM),   '(???)');
			wk_REMARK2        := nvl(rtrim(wk_ITEM_NM), '(???)');
		elsif wk_FLG = '1' then
			wk_ITEM_NAME_DISP := '(???)';
			wk_REMARK2        := '(???)';
		else
			wk_ITEM_NAME_DISP := '(???)';
			wk_REMARK2        := '(???)';
		end if;

--??1
		wk_REMARK1 := wk_c2.SECTION_CODE;

--????
		wk_REV_USER_COLUMN62 := wk_c2.DESCRIPTION;
		wk_REV_USER_COLUMN62 := null;

--?????
		select count(*) into wk_CNT from P98ECD_ITEM where ITEM_NUMBER = wk_ITEM_NUMBER;
		if wk_CNT = 0 then
			ITEM_INS_RTN;
		end if;
----------------------------------------------------------------------
--?????
		open c4(wk_c3.ITEM_NO, wk_c3.LEVEL_NO);
		loop
			fetch c4 into wk_c4;
			exit when c4%notfound or c4%notfound is null;
--?????
--			wk_ITEM_NUMBER    := l_CORP_MK || to_char(wk_c4.LOWER_ITEM_NUMBER);
			wk_ITEM_NUMBER    := l_CORP_MK || lpad(to_char(wk_c4.LOWER_ITEM_NO), 8, '0');

--?????
			if wk_c4.STOCK_SUBJECT_CODE = '5' then
				wk_ITEM_SUB_TYPE := 1;		--??
			else
--???????????
				select count(*) into wk_UPPER_CNT from STRUCTURE where UPPER_ITEM_NO = wk_c4.LOWER_ITEM_NO;
				select count(*) into wk_LOWER_CNT from STRUCTURE where LOWER_ITEM_NO = wk_c4.LOWER_ITEM_NO;
	
				if wk_UPPER_CNT = 0 and wk_LOWER_CNT = 0 then
					wk_ITEM_SUB_TYPE := 5;		--??
				elsif wk_UPPER_CNT = 0 and wk_LOWER_CNT > 0 then
					wk_ITEM_SUB_TYPE := 5;		--??
				elsif wk_UPPER_CNT > 0 and wk_LOWER_CNT = 0 then
					wk_ITEM_SUB_TYPE := 1;		--??
				elsif wk_UPPER_CNT > 0 and wk_LOWER_CNT > 0 then
					wk_ITEM_SUB_TYPE := 4;		--???
				else
					wk_ITEM_SUB_TYPE := 5;		--??
				end if;
			end if;

--??????
			if wk_ITEM_SUB_TYPE in (1, 4, 5) then		--?????????
				wk_ECO_ITEM_TYPE := '1';
			elsif wk_ITEM_SUB_TYPE = '14' then			--??
				wk_ECO_ITEM_TYPE := '2';
			else
				wk_ECO_ITEM_TYPE := '1';
			end if;

--????????
			if nvl(wk_c4.MAKER_FLAG, ' ') = '1' then		--??
				wk_COUNT_SUB_STRUCTURE := 2;
			elsif nvl(wk_c4.MAKER_FLAG, ' ') = '2' then		--??
				wk_COUNT_SUB_STRUCTURE := 1;
			elsif nvl(wk_c4.MAKER_FLAG, ' ') = '3' then		--??
				wk_COUNT_SUB_STRUCTURE := 2;
			else
				wk_COUNT_SUB_STRUCTURE := 1;
			end if;

--????????
		if wk_c4.UOM_KEY is null then
			wk_UOM_KEY := 100;
		else
			wk_UOM_KEY := wk_c4.UOM_KEY;
		end if;

--??
			if wk_c4.UOM_W = 120 then
				wk_MASS := wk_c4.WEIGHT;
			elsif wk_c4.UOM_W = 30 then
				wk_MASS := wk_c4.WEIGHT * 1000;
			else
				wk_MASS := null;
			end if;

--???????
		wk_FLG := '0';
		wk_ITEM_NM := null;
		open c7(wk_c4.LOWER_ITEM_NO);
			fetch c7 into wk_c7;
			if c7%notfound or c7%notfound is null then
				wk_FLG := '1';
			else
				wk_ITEM_NM := nvl(wk_c7.DESCRIPTION,wk_c7.ITEM);
			end if;
		close c7;

		if wk_FLG = '0' then
			wk_ITEM_NAME_DISP := nvl(rtrim(wk_ITEM_NM),   '(???)');
			wk_REMARK2        := nvl(rtrim(wk_ITEM_NM), '(???)');
		elsif wk_FLG = '1' then
			wk_ITEM_NAME_DISP := '(???)';
			wk_REMARK2        := '(???)';
		else
			wk_ITEM_NAME_DISP := '(???)';
			wk_REMARK2        := '(???)';
		end if;

--??1
			wk_REMARK1 := wk_c4.SECTION_CODE;

--????
			wk_REV_USER_COLUMN62 := wk_c4.DESCRIPTION;
--//
			wk_REV_USER_COLUMN62 := null;

--?????
			select count(*) into wk_CNT from P98ECD_ITEM where ITEM_NUMBER = wk_ITEM_NUMBER;
			if wk_CNT = 0 then
				ITEM_INS_RTN;
			end if;
----------------------------------------------------------------------
--??????
--???
--			wk_UPPER_ITEM_NUMBER := l_CORP_MK || to_char(wk_c3.ITEM_NUMBER);
			wk_UPPER_ITEM_NUMBER := l_CORP_MK || lpad(to_char(wk_c3.ITEM_NO), 8, '0');
--???
--			wk_LOWER_ITEM_NUMBER := l_CORP_MK || to_char(wk_c4.LOWER_ITEM_NUMBER);
			wk_LOWER_ITEM_NUMBER := l_CORP_MK || lpad(to_char(wk_c4.LOWER_ITEM_NO), 8, '0');
--?????????
			if wk_c4.QUANTITY >= 1000000 then
				wk_NUMERATOR   := wk_c4.QUANTITY / 100;
				wk_DENOMINATOR := wk_c4.QUANTITY_BASE / 100;
			elsif wk_c4.QUANTITY >= 100000 then
				wk_NUMERATOR   := wk_c4.QUANTITY / 10;
				wk_DENOMINATOR := wk_c4.QUANTITY_BASE / 10;
			else
				wk_NUMERATOR   := wk_c4.QUANTITY;
				wk_DENOMINATOR := wk_c4.QUANTITY_BASE;
			end if;
--?????????
			if wk_c4.QUANTITY - trunc(wk_c4.QUANTITY, 5) > 0 then
				wk_NUMERATOR   := wk_c4.QUANTITY * 100;
				wk_DENOMINATOR := wk_c4.QUANTITY_BASE * 100;
			elsif wk_c4.QUANTITY - trunc(wk_c4.QUANTITY, 4) > 0 then
				wk_NUMERATOR   := wk_c4.QUANTITY * 10;
				wk_DENOMINATOR := wk_c4.QUANTITY_BASE * 10;
			else
				wk_NUMERATOR   := wk_c4.QUANTITY;
				wk_DENOMINATOR := wk_c4.QUANTITY_BASE;
			end if;
--REL??1
			wk_REL_KEY1 := wk_c4.REFERENCE_NUMBER || ' ' || wk_c4.LINE_NO;

--?????
			BOM_INS_RTN;
		end loop;
		close c4;
<<c1_end>>
--??????
		delete from P98ECD_PRD
		 where current of c1;
	end loop;
	close c1;

DBMS_OUTPUT.PUT_LINE('BOM???????' || to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'));

--????????????
	open c5(l_CORP_MK);
	loop
		fetch c5 into wk_c5;
		exit when c5%notfound or c5%notfound is null;

--		wk_ITEM_NUMBER    := l_CORP_MK || to_char(wk_c5.ITEM_NUMBER);		--?????
		wk_ITEM_NUMBER    := l_CORP_MK || lpad(to_char(wk_c5.ITEM_NO), 8, '0');		--?????

--?????
		if wk_c5.STOCK_SUBJECT_CODE = '5' then
			wk_ITEM_SUB_TYPE := 1;		--??
		else

--???????????
			select count(*) into wk_UPPER_CNT from STRUCTURE where UPPER_ITEM_NO = wk_c5.ITEM_NO;
			select count(*) into wk_LOWER_CNT from STRUCTURE where LOWER_ITEM_NO = wk_c5.ITEM_NO;

			if wk_UPPER_CNT = 0 and wk_LOWER_CNT = 0 then
				wk_ITEM_SUB_TYPE := 5;		--??
			elsif wk_UPPER_CNT = 0 and wk_LOWER_CNT > 0 then
				wk_ITEM_SUB_TYPE := 5;		--??
			elsif wk_UPPER_CNT > 0 and wk_LOWER_CNT = 0 then
				wk_ITEM_SUB_TYPE := 1;		--??
			elsif wk_UPPER_CNT > 0 and wk_LOWER_CNT > 0 then
				wk_ITEM_SUB_TYPE := 4;		--???
			else
				wk_ITEM_SUB_TYPE := 5;		--??
			end if;
		end if;

--??????
		if wk_ITEM_SUB_TYPE in (1, 4, 5) then		--?????????
			wk_ECO_ITEM_TYPE := '1';
		elsif wk_ITEM_SUB_TYPE = '14' then			--??
			wk_ECO_ITEM_TYPE := '2';
		else
			wk_ECO_ITEM_TYPE := '1';
		end if;

--????????
		if nvl(wk_c5.MAKER_FLAG, ' ') = '1' then		--??
			wk_COUNT_SUB_STRUCTURE := 2;
		elsif nvl(wk_c5.MAKER_FLAG, ' ') = '2' then		--??
			wk_COUNT_SUB_STRUCTURE := 1;
		elsif nvl(wk_c5.MAKER_FLAG, ' ') = '3' then		--??
			wk_COUNT_SUB_STRUCTURE := 2;
		else
			wk_COUNT_SUB_STRUCTURE := 1;
		end if;
--????????
		if wk_c5.UOM_KEY is null then
			wk_UOM_KEY := 100;
		else
			wk_UOM_KEY := wk_c5.UOM_KEY;
		end if;

--??
		if wk_c5.UOM_W = 120 then
			wk_MASS := wk_c5.WEIGHT;
		elsif wk_c5.UOM_W = 30 then
			wk_MASS := wk_c5.WEIGHT * 1000;
		else
			wk_MASS := null;
		end if;

--???????
		wk_FLG := '0';
		wk_ITEM_NM := null;
		open c7(wk_c5.ITEM_NO);
			fetch c7 into wk_c7;
			if c7%notfound or c7%notfound is null then
				wk_FLG := '1';
			else
				wk_ITEM_NM :=nvl(wk_c7.DESCRIPTION,wk_c7.ITEM);
			end if;
		close c7;

		if wk_FLG = '0' then
			wk_ITEM_NAME_DISP := nvl(rtrim(wk_ITEM_NM),   '(???)');
			wk_REMARK2        := nvl(rtrim(wk_ITEM_NM), '(???)');
		elsif wk_FLG = '1' then
			wk_ITEM_NAME_DISP := '(???)';
			wk_REMARK2        := '(???)';
		else
			wk_ITEM_NAME_DISP := '(???)';
			wk_REMARK2        := '(???)';
		end if;

--??1
		wk_REMARK1 := wk_c5.SECTION_CODE;

--????
		wk_REV_USER_COLUMN62 := wk_c5.DESCRIPTION;
--//
wk_REV_USER_COLUMN62 := null;

--????
		wk_UPD_FLG := 'Y';
		open c6(wk_ITEM_NUMBER);
			fetch c6 into wk_c6;
			if c6%notfound or c6%notfound is null then
				null;
			else
				if nvl(wk_ITEM_SUB_TYPE, -1)       = nvl(wk_c6.ITEM_SUB_TYPE, -1)       and
				   nvl(wk_ECO_ITEM_TYPE, ' ')      = nvl(wk_c6.ECO_ITEM_TYPE, ' ')      and
				   nvl(wk_COUNT_SUB_STRUCTURE, -1) = nvl(wk_c6.COUNT_SUB_STRUCTURE, -1) and
--				   nvl(wk_ACCEPT_FLAG, -1)         = nvl(wk_c6.ACCEPT_FLAG, -1)         and
				   nvl(wk_UOM_KEY, -1)             = nvl(wk_c6.UOM_KEY, -1)             and
				   nvl(wk_MASS, -1)                = nvl(wk_c6.MASS, -1)                and
				   nvl(wk_ITEM_NAME_DISP, ' ')     = nvl(wk_c6.ITEM_NAME_DISP, ' ')     and
--				   nvl(wk_PHANTOM_PART_FLAG, -1)   = nvl(wk_c6.PHANTOM_PART_FLAG, -1)   and
				   nvl(wk_REMARK1, ' ')            = nvl(wk_c6.REMARK1, ' ')            and
				   nvl(wk_REMARK2, ' ')            = nvl(wk_c6.REMARK2, ' ')            and
				   nvl(wk_REV_USER_COLUMN62, ' ')  = nvl(wk_c6.REV_USER_COLUMN62, ' ') then
					wk_UPD_FLG := 'N';
				end if;
			end if;
		close c6;

		if wk_UPD_FLG = 'N' then
			goto c5_end;
		end if;
--????
		ITEM_INS_RTN;
<<c5_end>>
		null;
	end loop;
	close c5;

--P91BOM????????????????????????????
	delete from P91STRUCTURE_ECD;
	insert into P91STRUCTURE_ECD (OPERATION_DATE, UPPER_ITEM_NUMBER, LEVEL_NO, LOWER_ITEM_NUMBER, 
					LINE_NO, REFERENCE_NUMBER, QUANTITY, FAILURE_RATE, USER_SUPPLY_FLAG, 
					SUBCON_SUPPLY_FLAG, QUANTITY_BASE,IP_ADDRESS,EMPLOYEE_CODE) 
			 select OPERATION_DATE, UPPER_ITEM_NO, LEVEL_NO, LOWER_ITEM_NO, 
					LINE_NO, REFERENCE_NUMBER, QUANTITY, FAILURE_RATE, USER_SUPPLY_FLAG, 
					SUBCON_SUPPLY_FLAG, QUANTITY_BASE,'999.999.999.999','SYS' from P91STRUCT_ECD_VIEW;

<<end_proc>>
	p_flg := '0';
	p_msg := null;
null;
DBMS_OUTPUT.PUT_LINE('wk_ITEM_SEQ=' || wk_ITEM_SEQ);
DBMS_OUTPUT.PUT_LINE('wk_BOM_SEQ=' || wk_BOM_SEQ);
DBMS_OUTPUT.PUT_LINE('end=' || to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'));
--commit;
--????
exception
	when others then
		ERR_CODE := SQLCODE;
		ERR_MSG  := SQLERRM( ERR_CODE );
		p_flg := '1';
		p_msg := ERR_MSG;
DBMS_OUTPUT.PUT_LINE(ERR_CODE||'=='||ERR_MSG);
--rollback;
		if c1%isopen then
			close c1;
		end if;
		if c2%isopen then
			close c2;
		end if;
		if c3%isopen then
			close c3;
		end if;
		if c4%isopen then
			close c4;
		end if;
		if c5%isopen then
			close c5;
		end if;
		if c6%isopen then
			close c6;
		end if;
end;
end P98A30101PP;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."P98A30102PP" (
	p_flg out varchar2,
	p_msg out varchar2)
as
begin
/*--------------------------------------------------------------------
       ????P98A30102PP
         ?????????????????????
     ?????P98A30102PP
----------------------------------------------------------------------
   ??????
----------------------------------------------------------------------


----------------------------------------------------------------------
       ????2018.06.18 Y.Kobayashi ????
       ????
--------------------------------------------------------------------*/
declare
--?????????
	cursor c1
	is
		select a.COMPANY_CODE
		     , a.COMPANY
		     , a.ZIP_CODE
		     , a.ADDRESS1
		     , a.ADDRESS2
		     , a.ADDRESS3
		     , a.ADDRESS4
		     , a.TEL_NO
		     , a.FAX_NO
		     , a.ATTN
		     , a.E_MAIL
		  from COMPANY          a
		 where nvl(a.COMPANY_TYPE, 9)  in (2,3)
		   and not exists
		       (select *
		          from P98ECD_SUPPLIER_BK c
		         where c.CD = 'FI-' || a.COMPANY_CODE)
		 order by
		       a.COMPANY_CODE;
	wk_c1 c1%rowtype;


----------------------------------------------------------------------
	ERR_CODE        char(7);
	ERR_MSG         varchar2(255);
----------------------------------------------------------------------
--??
	wk_SEQ                    P98ECD_SUPPLIER.SEQ%type := 0;
	wk_CD                     P98ECD_SUPPLIER.CD%type;
	wk_NAME_JPN               P98ECD_SUPPLIER.NAME_JPN%type;
	wk_NAME_ENG               P98ECD_SUPPLIER.NAME_ENG%type;
	wk_POSTAL_CODE            P98ECD_SUPPLIER.POSTAL_CODE%type;
	wk_ADDRESS1_ENG           P98ECD_SUPPLIER.ADDRESS1_ENG%type;
	wk_ADDRESS2_ENG           P98ECD_SUPPLIER.ADDRESS2_ENG%type;
	wk_TELEPHONE_NUMBER       P98ECD_SUPPLIER.TELEPHONE_NUMBER%type;
	wk_FAX_NUMBER             P98ECD_SUPPLIER.FAX_NUMBER%type;
	wk_PERSON_NAME_ENG        P98ECD_SUPPLIER.PERSON_NAME_ENG%type;
	wk_EMAIL_ADDRESS          P98ECD_SUPPLIER.EMAIL_ADDRESS%type;
--??
	l_OPERATION_DATE          P98ECD_SUPPLIER.OPERATION_DATE%type          := sysdate;
	l_IP_ADDRESS              P98ECD_SUPPLIER.IP_ADDRESS%type              := 'SYS';
	l_EMPLOYEE_CODE           P98ECD_SUPPLIER.EMPLOYEE_CODE%type           := 'SYS';
	l_CLASSIFICATION          P98ECD_SUPPLIER.CLASSIFICATION%type          := 'S';
	l_KUBUN                   P98ECD_SUPPLIER.KUBUN%type                   := 'C';
	l_NAME_KANA               P98ECD_SUPPLIER.NAME_KANA%type               := null;
	l_NAME_ETC                P98ECD_SUPPLIER.NAME_ETC%type                := null;
	l_SHORT_NAME_JPN          P98ECD_SUPPLIER.SHORT_NAME_JPN%type          := null;
	l_SHORT_NAME_KANA         P98ECD_SUPPLIER.SHORT_NAME_KANA%type         := null;
	l_SHORT_NAME_ENG          P98ECD_SUPPLIER.SHORT_NAME_ENG%type          := null;
	l_SHORT_NAME_ETC          P98ECD_SUPPLIER.SHORT_NAME_ETC%type          := null;
	l_ADDRESS1_JPN            P98ECD_SUPPLIER.ADDRESS1_JPN%type            := null;
	l_ADDRESS1_KANA           P98ECD_SUPPLIER.ADDRESS1_KANA%type           := null;
	l_ADDRESS1_ETC            P98ECD_SUPPLIER.ADDRESS1_ETC%type            := null;
	l_ADDRESS2_JPN            P98ECD_SUPPLIER.ADDRESS2_JPN%type            := null;
	l_ADDRESS2_KANA           P98ECD_SUPPLIER.ADDRESS2_KANA%type           := null;
	l_ADDRESS2_ETC            P98ECD_SUPPLIER.ADDRESS2_ETC%type            := null;
	l_POST_NAME_JPN           P98ECD_SUPPLIER.POST_NAME_JPN%type           := null;
	l_POST_NAME_ENG           P98ECD_SUPPLIER.POST_NAME_ENG%type           := null;
	l_POST_NAME_ETC           P98ECD_SUPPLIER.POST_NAME_ETC%type           := null;
	l_PERSON_NAME_JPN         P98ECD_SUPPLIER.PERSON_NAME_JPN%type          := null;
	l_PERSON_NAME_ETC         P98ECD_SUPPLIER.PERSON_NAME_ETC%type         := null;
	l_DUNS_NUMBER             P98ECD_SUPPLIER.DUNS_NUMBER%type             := null;
	l_CONTACT_PERSON_ID       P98ECD_SUPPLIER.CONTACT_PERSON_ID%type       := null;
	l_IMDS_COMPANY_ID         P98ECD_SUPPLIER.IMDS_COMPANY_ID%type         := null;
	l_IMDS_ORG_UNIT_ID        P98ECD_SUPPLIER.IMDS_ORG_UNIT_ID%type        := null;
	l_KEYWORD1                P98ECD_SUPPLIER.KEYWORD1%type                := null;
	l_KEYWORD2                P98ECD_SUPPLIER.KEYWORD2%type                := null;
	l_KEYWORD3                P98ECD_SUPPLIER.KEYWORD3%type                := null;
	l_KEYWORD4                P98ECD_SUPPLIER.KEYWORD4%type                := null;
	l_KEYWORD5                P98ECD_SUPPLIER.KEYWORD5%type                := null;
	l_OPEN_WEB_PASSWORD       P98ECD_SUPPLIER.OPEN_WEB_PASSWORD%type       := null;
	l_OPEN_WEB_LINES_PER_PAGE P98ECD_SUPPLIER.OPEN_WEB_LINES_PER_PAGE%type := null;
	l_OPEN_WEB_EFFECTIVE      P98ECD_SUPPLIER.OPEN_WEB_EFFECTIVE%type      := null;
	l_OPEN_WEB_AGREEMENT      P98ECD_SUPPLIER.OPEN_WEB_AGREEMENT%type      := null;
----------------------------------------------------------------------
procedure SUP_INS_RTN
is
begin
	wk_SEQ := wk_SEQ + 1;

	insert into P98ECD_SUPPLIER(
	            OPERATION_DATE
	          , SEQ
	          , IP_ADDRESS
	          , EMPLOYEE_CODE
	          , CLASSIFICATION
	          , KUBUN
	          , CD
	          , NAME_JPN
	          , NAME_KANA
	          , NAME_ENG
	          , NAME_ETC
	          , SHORT_NAME_JPN
	          , SHORT_NAME_KANA
	          , SHORT_NAME_ENG
	          , SHORT_NAME_ETC
	          , POSTAL_CODE
	          , ADDRESS1_JPN
	          , ADDRESS1_KANA
	          , ADDRESS1_ENG
	          , ADDRESS1_ETC
	          , ADDRESS2_JPN
	          , ADDRESS2_KANA
	          , ADDRESS2_ENG
	          , ADDRESS2_ETC
	          , TELEPHONE_NUMBER
	          , FAX_NUMBER
	          , POST_NAME_JPN
	          , POST_NAME_ENG
	          , POST_NAME_ETC
	          , PERSON_NAME_JPN
	          , PERSON_NAME_ENG
	          , PERSON_NAME_ETC
	          , EMAIL_ADDRESS
	          , DUNS_NUMBER
	          , CONTACT_PERSON_ID
	          , IMDS_COMPANY_ID
	          , IMDS_ORG_UNIT_ID
	          , KEYWORD1
	          , KEYWORD2
	          , KEYWORD3
	          , KEYWORD4
	          , KEYWORD5
	          , OPEN_WEB_PASSWORD
	          , OPEN_WEB_LINES_PER_PAGE
	          , OPEN_WEB_EFFECTIVE
	          , OPEN_WEB_AGREEMENT
	) values (
	            l_OPERATION_DATE
	          , wk_SEQ
	          , l_IP_ADDRESS
	          , l_EMPLOYEE_CODE
	          , l_CLASSIFICATION
	          , l_KUBUN
	          , wk_CD
	          , wk_NAME_JPN
	          , l_NAME_KANA
	          , wk_NAME_ENG
	          , l_NAME_ETC
	          , l_SHORT_NAME_JPN
	          , l_SHORT_NAME_KANA
	          , l_SHORT_NAME_ENG
	          , l_SHORT_NAME_ETC
	          , wk_POSTAL_CODE
	          , l_ADDRESS1_JPN
	          , l_ADDRESS1_KANA
	          , wk_ADDRESS1_ENG
	          , l_ADDRESS1_ETC
	          , l_ADDRESS2_JPN
	          , l_ADDRESS2_KANA
	          , wk_ADDRESS2_ENG
	          , l_ADDRESS2_ETC
	          , wk_TELEPHONE_NUMBER
	          , wk_FAX_NUMBER
	          , l_POST_NAME_JPN
	          , l_POST_NAME_ENG
	          , l_POST_NAME_ETC
	          , l_PERSON_NAME_JPN
	          , wk_PERSON_NAME_ENG
	          , l_PERSON_NAME_ETC
	          , wk_EMAIL_ADDRESS
	          , l_DUNS_NUMBER
	          , l_CONTACT_PERSON_ID
	          , l_IMDS_COMPANY_ID
	          , l_IMDS_ORG_UNIT_ID
	          , l_KEYWORD1
	          , l_KEYWORD2
	          , l_KEYWORD3
	          , l_KEYWORD4
	          , l_KEYWORD5
	          , l_OPEN_WEB_PASSWORD
	          , l_OPEN_WEB_LINES_PER_PAGE
	          , l_OPEN_WEB_EFFECTIVE
	          , l_OPEN_WEB_AGREEMENT
	);
end SUP_INS_RTN;
----------------------------------------------------------------------
begin
DBMS_OUTPUT.PUT_LINE('start=' || to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'));
--
	delete from P98ECD_SUPPLIER;

--??????
	open c1;
	loop
		fetch c1 into wk_c1;
		exit when c1%notfound or c1%notfound is null;

	    wk_CD               := 'FI-' || wk_c1.COMPANY_CODE;
	    wk_NAME_JPN         := wk_c1.COMPANY;
	    wk_NAME_ENG         := wk_c1.COMPANY;
	    wk_POSTAL_CODE      := wk_c1.ZIP_CODE;
	    wk_ADDRESS1_ENG     := rtrim(wk_c1.ADDRESS1) || ' ' || rtrim(wk_c1.ADDRESS2) ;
	    wk_ADDRESS2_ENG     := rtrim(wk_c1.ADDRESS3) || ' ' || rtrim(wk_c1.ADDRESS4) ;
	    wk_TELEPHONE_NUMBER := substrb(wk_c1.TEL_NO,1,20);
	    wk_FAX_NUMBER       := substrb(wk_c1.FAX_NO,1,20);
	    wk_PERSON_NAME_ENG  := substrb(wk_c1.ATTN,1,40);
	    wk_EMAIL_ADDRESS    := substrb(wk_c1.E_MAIL,1,200);

--?????
		SUP_INS_RTN;

	end loop;
	close c1;
<<end_proc>>
	p_flg := '0';
	p_msg := null;
null;
DBMS_OUTPUT.PUT_LINE('end=' || to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'));
--commit;
--????
exception
	when others then
		p_flg := '1';
		ERR_CODE := SQLCODE;
		ERR_MSG  := SQLERRM( ERR_CODE );
DBMS_OUTPUT.PUT_LINE(ERR_CODE||'=='||ERR_MSG);
DBMS_OUTPUT.PUT_LINE(wk_c1.COMPANY_CODE);
--rollback;
		if c1%isopen then
			close c1;
		end if;
	end;
end P98A30102PP;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."P98A30103PP" (
	p_flg out varchar2,
	p_msg out varchar2)
as
begin
/*--------------------------------------------------------------------
       ????P98A30103PP
         ?????????????????????
     ?????P98A30103PP
----------------------------------------------------------------------
   ??????
----------------------------------------------------------------------


----------------------------------------------------------------------
       ????2018.06.22 Y.Kobayashi ????
       ????
--------------------------------------------------------------------*/
declare
----------------------------------------------------------------------
	ERR_CODE        char(7);
	ERR_MSG         varchar2(255);
----------------------------------------------------------------------
begin
DBMS_OUTPUT.PUT_LINE('start=' || to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'));
--
	delete from P98ECD_MAKER;

<<end_proc>>
	p_flg := '0';
	p_msg := null;
null;
DBMS_OUTPUT.PUT_LINE('end=' || to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'));
--commit;
--????
exception
	when others then
		p_flg := '1';
		ERR_CODE := SQLCODE;
		ERR_MSG  := SQLERRM( ERR_CODE );
DBMS_OUTPUT.PUT_LINE(ERR_CODE||'=='||ERR_MSG);
--DBMS_OUTPUT.PUT_LINE(wk_c1.MAK);
--rollback;

end;
end P98A30103PP;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."P98A30104PP" (
	p_flg out varchar2,
	p_msg out varchar2)
as
begin
/*--------------------------------------------------------------------
       ????P98A30104PP
         ??????????????????????????
     ?????P98A30104PP
----------------------------------------------------------------------
   ??????
----------------------------------------------------------------------


----------------------------------------------------------------------
       ????2019.02.01 Y.Hagai ????
--------------------------------------------------------------------*/
declare
--?????????
	cursor c1
	is
		select *
		  from ITEM   a
		 where a.ITEM_NO
		    in (select b.ITEM_NO
		          from ITEMMAKER b)
		 order by
		       a.ITEM_NO;
	wk_c1 c1%rowtype;

--????????
	cursor c2(para1 in number)
	is
		select a.SUPPLIER_CODE
		  from ITEMMAKER      a
		     , COMPANY        b
		 where a.ITEM_NO = para1
		   and a.SUPPLIER_CODE = b.COMPANY_CODE
		 order by
		       a.ALTER_PROCEDURE;
	wk_c2 c2%rowtype;

--?????
	cursor c3(para1 in varchar2)
	is
		select *
		  from P98ECD_PUR_BK a
		 where a.ITEM_NUMBER = para1;
	wk_c3 c3%rowtype;
--????
	cursor c4(para1 in varchar2)
	is
		select *
		  from P98ECD_ITEM_BK a
		 where a.ITEM_NUMBER = para1;
	wk_c4 c4%rowtype;
----------------------------------------------------------------------
	ERR_CODE        char(7);
	ERR_MSG         varchar2(255);
----------------------------------------------------------------------
--??
	wk_SEQ                P98ECD_PUR.SEQ%type := 0;
	wk_UPD_FLG            varchar2(1);
	wk_ITEM_NUMBER        P98ECD_PUR.ITEM_NUMBER%type;
	wk_SUPPLIER_CD        P98ECD_PUR.SUPPLIER_CD%type;
	wk_SURVEY_OBJECT_FLAG P98ECD_PUR.SURVEY_OBJECT_FLAG%type;
--??
	l_OPERATION_DATE      P98ECD_PUR.OPERATION_DATE%type := sysdate;
	l_IP_ADDRESS          P98ECD_PUR.IP_ADDRESS%type     := 'SYS';
	l_EMPLOYEE_CODE       P98ECD_PUR.EMPLOYEE_CODE%type  := 'SYS';
	l_KUBUN               P98ECD_PUR.KUBUN%type          := 'C';
	l_ITEM_ASSIST1        P98ECD_PUR.ITEM_ASSIST1%type   := null;
	l_ITEM_ASSIST2        P98ECD_PUR.ITEM_ASSIST2%type   := null;
	l_MAKER_CD            P98ECD_PUR.MAKER_CD%type       := 'NoMaker';
	l_PRIORITY_ORDER      P98ECD_PUR.PRIORITY_ORDER%type := null;
	l_MAKER_PN            P98ECD_PUR.MAKER_PN%type       := null;
	l_KEYWORD1            P98ECD_PUR.KEYWORD1%type       := null;
	l_KEYWORD2            P98ECD_PUR.KEYWORD2%type       := null;
	l_KEYWORD3            P98ECD_PUR.KEYWORD3%type       := null;
	l_KEYWORD4            P98ECD_PUR.KEYWORD4%type       := null;
	l_KEYWORD5            P98ECD_PUR.KEYWORD5%type       := null;
	l_KEYWORD6            P98ECD_PUR.KEYWORD6%type       := null;
	l_KEYWORD7            P98ECD_PUR.KEYWORD7%type       := null;
	l_KEYWORD8            P98ECD_PUR.KEYWORD8%type       := null;
	l_KEYWORD9            P98ECD_PUR.KEYWORD9%type       := null;
	l_KEYWORD10           P98ECD_PUR.KEYWORD10%type      := null;
	l_KEYWORD11           P98ECD_PUR.KEYWORD11%type      := null;
	l_KEYWORD12           P98ECD_PUR.KEYWORD12%type      := null;
	l_KEYWORD13           P98ECD_PUR.KEYWORD13%type      := null;
	l_KEYWORD14           P98ECD_PUR.KEYWORD14%type      := null;
	l_KEYWORD15           P98ECD_PUR.KEYWORD15%type      := null;
	l_KEYWORD16           P98ECD_PUR.KEYWORD16%type      := null;
	l_KEYWORD17           P98ECD_PUR.KEYWORD17%type      := null;
	l_KEYWORD18           P98ECD_PUR.KEYWORD18%type      := null;
	l_KEYWORD19           P98ECD_PUR.KEYWORD19%type      := null;
	l_KEYWORD20           P98ECD_PUR.KEYWORD20%type      := null;
----------------------------------------------------------------------
procedure PUR_INS_RTN
is
begin
	wk_SEQ := wk_SEQ + 1;
	insert into P98ECD_PUR(
	            OPERATION_DATE
	          , SEQ
	          , IP_ADDRESS
	          , EMPLOYEE_CODE
	          , KUBUN
	          , ITEM_NUMBER
	          , ITEM_ASSIST1
	          , ITEM_ASSIST2
	          , SUPPLIER_CD
	          , MAKER_CD
	          , PRIORITY_ORDER
	          , MAKER_PN
	          , SURVEY_OBJECT_FLAG
	          , KEYWORD1
	          , KEYWORD2
	          , KEYWORD3
	          , KEYWORD4
	          , KEYWORD5
	          , KEYWORD6
	          , KEYWORD7
	          , KEYWORD8
	          , KEYWORD9
	          , KEYWORD10
	          , KEYWORD11
	          , KEYWORD12
	          , KEYWORD13
	          , KEYWORD14
	          , KEYWORD15
	          , KEYWORD16
	          , KEYWORD17
	          , KEYWORD18
	          , KEYWORD19
	          , KEYWORD20
	) values (
	            l_OPERATION_DATE
	          , wk_SEQ
	          , l_IP_ADDRESS
	          , l_EMPLOYEE_CODE
	          , l_KUBUN
	          , wk_ITEM_NUMBER
	          , l_ITEM_ASSIST1
	          , l_ITEM_ASSIST2
	          , wk_SUPPLIER_CD
	          , l_MAKER_CD
	          , l_PRIORITY_ORDER
	          , l_MAKER_PN
	          , wk_SURVEY_OBJECT_FLAG
	          , l_KEYWORD1
	          , l_KEYWORD2
	          , l_KEYWORD3
	          , l_KEYWORD4
	          , l_KEYWORD5
	          , l_KEYWORD6
	          , l_KEYWORD7
	          , l_KEYWORD8
	          , l_KEYWORD9
	          , l_KEYWORD10
	          , l_KEYWORD11
	          , l_KEYWORD12
	          , l_KEYWORD13
	          , l_KEYWORD14
	          , l_KEYWORD15
	          , l_KEYWORD16
	          , l_KEYWORD17
	          , l_KEYWORD18
	          , l_KEYWORD19
	          , l_KEYWORD20
	);
end PUR_INS_RTN;
----------------------------------------------------------------------
begin
DBMS_OUTPUT.PUT_LINE('start=' || to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'));
--
	delete from P98ECD_PUR;

--??????
	open c1;
	loop
		fetch c1 into wk_c1;
		exit when c1%notfound or c1%notfound is null;

--		wk_ITEM_NUMBER := 'DJ-' || wk_c1.ITEM_NUMBER;
		wk_ITEM_NUMBER := 'FI-' || lpad(to_char(wk_c1.ITEM_NO), 8, '0');

--????????
		open c2(wk_c1.ITEM_NO);
			fetch c2 into wk_c2;
			if c2%notfound or c2%notfound is null then
				wk_SUPPLIER_CD := null;
			else
				wk_SUPPLIER_CD := 'FI-' || wk_c2.SUPPLIER_CODE;
			end if;
		close c2;

		if wk_SUPPLIER_CD is null then
			goto c1_end;
		end if;

		wk_UPD_FLG := 'Y';
		open c3(wk_ITEM_NUMBER);
			fetch c3 into wk_c3;
			if c3%notfound or c3%notfound is null then
				null;
			else
--?????????????
				if nvl(wk_SUPPLIER_CD, ' ') = nvl(wk_c3.SUPPLIER_CD, ' ') then
					wk_UPD_FLG := 'N';
				end if;
			end if;
		close c3;

		open c4(wk_ITEM_NUMBER);
			fetch c4 into wk_c4;
			if c4%notfound or c4%notfound is null then
--				wk_UPD_FLG := 'N';
				null;
			else
				if wk_c4.ITEM_SUB_TYPE in (1, 4) then
					wk_SURVEY_OBJECT_FLAG := 1;
				else
					wk_SURVEY_OBJECT_FLAG := 0;
				end if;
			end if;
		close c4;

		if wk_UPD_FLG = 'N' then
			goto c1_end;
		end if;

--?????
		PUR_INS_RTN;
<<c1_end>>
		null;

	end loop;
	close c1;
<<end_proc>>
	p_flg := '0';
	p_msg := null;
null;
DBMS_OUTPUT.PUT_LINE('end=' || to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'));
--commit;
--????
exception
	when others then
		p_flg := '1';
		ERR_CODE := SQLCODE;
		ERR_MSG  := SQLERRM( ERR_CODE );
DBMS_OUTPUT.PUT_LINE(ERR_CODE||'=='||ERR_MSG);
--DBMS_OUTPUT.PUT_LINE(wk_c1.MAK);
--rollback;
		if c1%isopen then
			close c1;
		end if;
		if c2%isopen then
			close c2;
		end if;
		if c3%isopen then
			close c3;
			end if;
		if c4%isopen then
			close c4;
		end if;
end;
end P98A30104PP;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."PACKING_SIZE_CALC" 
/*----------------------------------------------------------------------
  PROCEDURE: ?????? (PACKING_SIZE_CALC)
?
  ????:
      Item_No:      ?????  (IN)
      Qty:          ??        (IN)
      Pieces:       ????    (OUT)
      Carton:       ?????  (OUT)
      Pallet:       ?????  (OUT)
      Net_Weight:   ????    (OUT)
      Gross_Weight: ???      (OUT)
      Mesurement:   ??        (OUT)
----------------------------------------------------------------------
  2016/03/16  H.Suzuki      ????
----------------------------------------------------------------------*/
(
	Item_No			in		number,
	Qty				in		number,
	Pieces			out		number,
	Carton			out		number,
	Pallet			out		number,
	Net_Weight		out		number,
	Gross_Weight	out		number,
	Mesurement		out		number
) as
/*
declare
	Item_No			number(8)		:= 12345678;
	Qty				number(14,3)	:= 1;
	Pieces			number(17,3)	:= null;
	Carton			number(10,0)	:= null;
	Pallet			number(10,0)	:= null;
	Net_Weight		number(32,8)	:= null;
	Gross_Weight	number(32,8)	:= null;
	Mesurement		number(32,8)	:= null;
*/
/*---------- ?? ----------*/
	--????
	start_time		constant date	:= sysdate;
/*---------- ???? ----------*/
	--?????
	cursor csr_item(p_item_no in number) is
		select i.EXTERNAL_UNIT_NUMBER
		     , i.CTN_GROSS_WEIGHT
		     , i.OUTER_BOX_HEIGHT
		     , p.PALLET_UNIT_NUMBER
		     , p.PALLET_CTN_NUMBER
		     , p.PALLET_STEP_CTN_NUMBER
		     , p.PALLET_WEIGHT
		     , p.PALLET_HEIGHT
		     , p.PALLET_DEPTH
		     , p.PALLET_WIDTH
		  from ITEM i
		  left join PACKING_INFORMATION p
		    on p.PI_NO = i.PI_NO
		 where i.ITEM_NO = p_item_no
	;
	r_item			csr_item%rowtype;
/*---------- ?? ----------*/
	p_item_no		number(8)		:= null;
	p_qty			number(14,3)	:= null;
	l_pieces		number(17,3)	:= null;
	l_carton		number(10,0)	:= null;
	l_pallet		number(10,0)	:= null;
	l_grs_weight	number(32,8)	:= null;
	l_net_weight	number(32,8)	:= null;
	l_mesurement	number(32,8)	:= null;
	l_mesure_f		number(32,8)	:= null;
	l_mesure_r		number(32,8)	:= null;
	l_pallet_f		number(10,0)	:= null;
	l_carton_r		number(10,0)	:= null;
	l_step_f		number(10,0)	:= null;
	l_step_r		number(10,0)	:= null;
/*---------- ?? ----------*/
	--????
	procedure process_start is
	begin
		null;
		DBMS_OUTPUT.ENABLE(1000000);
		DBMS_OUTPUT.PUT_LINE('PACKING_SIZE_CALC??  ' || to_char(start_time, 'YYYY/MM/DD hh24:mi:ss'));
	end process_start;
	--????
	procedure process_end is
	begin
		null;
		DBMS_OUTPUT.PUT('PACKING_SIZE_CALC??  ' || to_char(sysdate, 'YYYY/MM/DD hh24:mi:ss'));
		DBMS_OUTPUT.PUT_LINE(' ( spent ' || to_char(trunc((sysdate - start_time) * 86400, 3)) || 'sec )');
	end process_end;
	--??????
	procedure check_point(p_msg in varchar2) is
	begin
		null;
		DBMS_OUTPUT.PUT_LINE(p_msg || ' >> ' || to_char(trunc((sysdate - start_time) * 86400, 3)) || 'sec');
	end check_point;
	--???????
	procedure echo(p_msg in varchar2) is
	begin
		null;
		DBMS_OUTPUT.PUT_LINE(p_msg);
	end echo;
/*---------- ?? ----------*/
	--????
	function roundup(in_num in number, in_digit in number := 0) return number is
		l_value		number;
		l_round		number;
	begin
		l_round := nvl(10 ** in_digit, 1);
		l_value := ceil( abs(in_num) * l_round ) / l_round * sign(in_num);
		return l_value;
	end roundup;
	--????
	function calculate_pieces return number is
	begin
		l_pieces := p_qty;
		return l_pieces;
	end calculate_pieces;
	--?????
	function calculate_carton return number is
		l_value		number;
	begin
		l_value := l_pieces / r_item.EXTERNAL_UNIT_NUMBER;
		l_carton := roundup(l_value);
		return l_carton;
	end calculate_carton;
	--?????
	function calculate_pallet return number is
		l_value		number;
	begin
		l_value := l_pieces / r_item.PALLET_UNIT_NUMBER;
		l_pallet := roundup(l_value);
		return l_pallet;
	end calculate_pallet;
	--????
	function calculate_net_weight return number is
		l_value		number;
	begin
		l_value := l_carton * r_item.CTN_GROSS_WEIGHT;
		l_net_weight := l_value;
		return l_net_weight;
	end calculate_net_weight;
	--???
	function calculate_gross_weight return number is
		l_value		number;
	begin
		l_value := l_pallet * r_item.PALLET_WEIGHT;
		l_grs_weight := l_value + l_net_weight;
		return l_grs_weight;
	end calculate_gross_weight;
	--?????????????????
	function calculate_cartons_on_pallet return number is
		l_value1	number;
		l_value2	number;
	begin
		l_value1 := l_carton / r_item.PALLET_CTN_NUMBER;
		l_value2 := mod(l_carton, r_item.PALLET_CTN_NUMBER);
		l_pallet_f := trunc(l_value1);
		l_carton_r := l_value2;
		return l_carton_r;
	end calculate_cartons_on_pallet;
	--??????
	function calculate_step_of_carton return number is
		l_value1	number;
		l_value2	number;
	begin
		l_value1 := r_item.PALLET_CTN_NUMBER / r_item.PALLET_STEP_CTN_NUMBER;
		l_value2 := l_carton_r / r_item.PALLET_STEP_CTN_NUMBER;
		l_step_f := trunc(l_value1);
		l_step_r := roundup(l_value2);
		if l_value1 <> l_step_f then l_step_f := null; end if;
		return l_step_r;
	end calculate_step_of_carton;
	--??
	function calculate_mesurement return number is
		l_value1	number;
		l_value2	number;
		l_value3	number;
		l_dummy		number(38, 10);
	begin
		l_dummy := calculate_cartons_on_pallet();
		l_dummy := calculate_step_of_carton();
		--
		l_value1 := ((r_item.OUTER_BOX_HEIGHT * l_step_f + r_item.PALLET_HEIGHT)
					 * r_item.PALLET_DEPTH
					 * r_item.PALLET_WIDTH
					) * l_pallet_f
					  / 1000000000;
		l_value2 := ((r_item.OUTER_BOX_HEIGHT * l_step_r + r_item.PALLET_HEIGHT)
					 * r_item.PALLET_DEPTH
					 * r_item.PALLET_WIDTH
					) / 1000000000;
		l_value3 := l_value1 + l_value2;
		l_mesure_f   := l_value1;
		l_mesure_r   := l_value2;
		l_mesurement := roundup(l_value3, 4);
		return l_mesurement;
	end calculate_mesurement;
/*---------- ??? ----------*/
begin
	process_start();
	--????
	p_item_no		:= Item_No;
	p_qty			:= Qty;
	Pieces			:= null;
	Carton			:= null;
	Pallet			:= null;
	Net_Weight		:= null;
	Gross_Weight	:= null;
	Mesurement		:= null;
	--?????
	open  csr_item(p_item_no);
	fetch csr_item into r_item;
	close csr_item;
	--??
	Pieces			:= calculate_pieces();
	Carton			:= calculate_carton();
	Pallet			:= calculate_pallet();
	Net_Weight		:= calculate_net_weight();
	Gross_Weight	:= calculate_gross_weight();
	Mesurement		:= calculate_mesurement();
	--
	process_end();
	echo('success');
exception
when others then
	echo(to_char(sqlcode) || ': ' || sqlerrm);
	echo('failure');
end;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."PACKING_SIZE_CALC_SI" 
/*----------------------------------------------------------------------
  PROCEDURE: ??????(??????) (PACKING_SIZE_CALC_SI)
?
  ????:
      Si_No:        ??????(IN)
      Pieces:       ????    (OUT)
      Carton:       ?????  (OUT)
      Pallet:       ?????  (OUT)
      Net_Weight:   ????    (OUT)
      Gross_Weight: ???      (OUT)
      Mesurement:   ??        (OUT)
----------------------------------------------------------------------
  2016/03/16  H.Suzuki      ????
----------------------------------------------------------------------*/
(
	Si_No			in		varchar2,
	Pieces			out		number,
	Carton			out		number,
	Pallet			out		number,
	Net_Weight		out		number,
	Gross_Weight	out		number,
	Mesurement		out		number
) as
/*
declare
	Si_No			varchar2(20)	:= '1234567890';
	Pieces			number(17,3)	:= null;
	Carton			number(10,0)	:= null;
	Pallet			number(10,0)	:= null;
	Net_Weight		number(32,8)	:= null;
	Gross_Weight	number(32,8)	:= null;
	Mesurement		number(32,8)	:= null;
*/
/*---------- ?? ----------*/
	--????
	start_time		constant date	:= sysdate;
/*---------- ???? ----------*/
	--??????
	cursor csr_answer(p_si_no in varchar2) is
		select a.ITEM_NO
		     , a.QTY
		  from ANSWER a
		 where a.SI_NO = p_si_no
		 order by a.SO_NO, a.SO_LINE_NO
	;
	r_answer		csr_answer%rowtype;
/*---------- ?? ----------*/
	p_si_no			varchar2(20)	:= null;
	l_s_pieces		number(17,3)	:= 0;
	l_s_carton		number(10,0)	:= 0;
	l_s_pallet		number(10,0)	:= 0;
	l_s_grs_weight	number(32,8)	:= 0;
	l_s_net_weight	number(32,8)	:= 0;
	l_s_mesurement	number(32,8)	:= 0;
	--
	l_pieces		number(17,3)	:= null;
	l_carton		number(10,0)	:= null;
	l_pallet		number(10,0)	:= null;
	l_grs_weight	number(32,8)	:= null;
	l_net_weight	number(32,8)	:= null;
	l_mesurement	number(32,8)	:= null;
/*---------- ?? ----------*/
	--????
	procedure process_start is
	begin
		null;
		DBMS_OUTPUT.ENABLE(1000000);
		DBMS_OUTPUT.PUT_LINE('PACKING_SIZE_CALC_SI??  ' || to_char(start_time, 'YYYY/MM/DD hh24:mi:ss'));
	end process_start;
	--????
	procedure process_end is
	begin
		null;
		DBMS_OUTPUT.PUT('PACKING_SIZE_CALC_SI??  ' || to_char(sysdate, 'YYYY/MM/DD hh24:mi:ss'));
		DBMS_OUTPUT.PUT_LINE(' ( spent ' || to_char(trunc((sysdate - start_time) * 86400, 3)) || 'sec )');
	end process_end;
	--??????
	procedure check_point(p_msg in varchar2) is
	begin
		null;
		DBMS_OUTPUT.PUT_LINE(p_msg || ' >> ' || to_char(trunc((sysdate - start_time) * 86400, 3)) || 'sec');
	end check_point;
	--???????
	procedure echo(p_msg in varchar2) is
	begin
		null;
		DBMS_OUTPUT.PUT_LINE(p_msg);
	end echo;
/*---------- ??? ----------*/
begin
	process_start();
	--????
	p_si_no			:= Si_No;
	Pieces			:= null;
	Carton			:= null;
	Pallet			:= null;
	Net_Weight		:= null;
	Gross_Weight	:= null;
	Mesurement		:= null;
	--????????
	open  csr_answer(p_si_no);
	loop
		fetch csr_answer into r_answer;
		exit when csr_answer%notfound;
		PACKING_SIZE_CALC(r_answer.ITEM_NO, r_answer.QTY,
					l_pieces, l_carton, l_pallet, l_net_weight, l_grs_weight, l_mesurement);
		l_s_pieces		:= l_s_pieces     + l_pieces;
		l_s_carton		:= l_s_carton     + l_carton;
		l_s_pallet		:= l_s_pallet     + l_pallet;
		l_s_grs_weight	:= l_s_grs_weight + l_grs_weight;
		l_s_net_weight	:= l_s_net_weight + l_net_weight;
		l_s_mesurement	:= l_s_mesurement + l_mesurement;
	end loop;
	close csr_answer;
	--??
	Pieces			:= l_s_pieces;
	Carton			:= l_s_carton;
	Pallet			:= l_s_pallet;
	Net_Weight		:= l_s_net_weight;
	Gross_Weight	:= l_s_grs_weight;
	Mesurement		:= l_s_mesurement;
	--
	process_end();
	echo('success');
exception
when others then
	if csr_answer%isopen then
		close csr_answer;
	end if;
	echo(to_char(sqlcode) || ': ' || sqlerrm);
	echo('failure');
end;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."PCFAILURE_SET" (V_MONTH in date)
is
begin
  declare
   ITM_REC    item%rowtype ;
   LITM_REC   item%rowtype ;
   PCF_REC    pcfailure%rowtype ;
   STR_REC    structure%rowtype ;
   SBSTR_REC  substructure%rowtype ;

   v_ret_no  number ;
   v_level_no  number(2);

    cursor C1  is
     select *
       from pcfailure 
      where item_no is not null ;

    cursor C3(PARAM1 in number) is
     select *
       from item 
      where item_no = PARAM1 ;


    /* ???????? */
    cursor C4(PARAM1 in varchar2) is
     select *
       from substructure  
      where rtrim(in_process_code) = rtrim(PARAM1) ;

    /* ?????? */
    cursor C5(PARAM1 in number,PARAM2 in varchar2,PARAM3 in number) is
     select *
       from structure 
      where upper_item_no = PARAM1
        and rtrim(reference_number) = rtrim(PARAM2)
        and level_no   =  PARAM3 ;

    /* ????? */
    cursor C6(PARAM1 in number) is
     select max(level_no)
       from leveld 
      where level_cont_key = PARAM1 ;

    /* ?????????? */
    cursor C7 is
     select sysdate,
            section_code, 
            item_no, 
            station_code,
            this_month,
            slip_quantity, 
            in_process_code, 
            cost_process_code, 
            slip_no,
            slip_date,
            bm_item_no,
            level_no,
            wip_flag
       from pcfailure_wk
      order by item_no,
               section_code,
               station_code,
               this_month ;

   C7_REC     C7%ROWTYPE := null;

  begin
    v_ret_no := 0 ;

    delete from pcfailure_wk ;

    open C1 ;
    loop
      fetch C1 into PCF_REC ;
      exit when C1%notfound or C1%notfound is null;

       /* ?????? */
        open C3(PCF_REC.ITEM_NO) ;
          fetch C3 into ITM_REC ;
        close C3 ;

        If ITM_REC.item_no is null Then
           v_ret_no := -1 ;
           goto LOOP_END ;
        End If ;

       /* IN_PROCESS_CODE???????????????????? */
       /* SUBSTRUCTURE???????????? */
        If replace(PCF_REC.IN_PROCESS_CODE,' ','') is not null Then
           open C4(PCF_REC.IN_PROCESS_CODE) ;
           loop
             fetch C4 into SBSTR_REC ;

            /* SUBSTRUCTURE????????????,????? */
             If C4%notfound or C4%notfound is null then
                If C4%rowcount  = 0   then
                   insert into pcfailure_wk (
                          slip_no              ,
                          slip_date            ,
                          section_code         ,
                          item_no              ,
                          level_no             ,
                          station_code         ,
                          in_process_code      ,
                          slip_quantity        ,
                          cost_process_code    ,
                          upto_date            ,
                          reg_date             ,
                          this_month           
                   )values(
                          PCF_REC.slip_no           ,
                          PCF_REC.slip_date         ,
                          PCF_REC.section_code      ,
                          PCF_REC.item_no           ,
                          PCF_REC.level_no          ,
                          PCF_REC.station_code      ,
                          PCF_REC.in_process_code   ,
                          PCF_REC.slip_quantity     ,
                          PCF_REC.cost_process_code ,
                          PCF_REC.upto_date         ,
                          PCF_REC.reg_date          ,
                          TO_CHAR(v_month,'yyyymm') 
                   ) ;
                End If;
                goto LOOP_END_C4 ;
             Else
               /* ?????? */
                v_level_no  := 0;
                open C6(ITM_REC.ITEM_NO) ;
                  fetch C6 into v_level_no ;
                close C6 ;
               /* LEVELD????????????,????? */
                If v_level_no is null then
                   insert into pcfailure_wk (
                          slip_no              ,
                          slip_date            ,
                          section_code         ,
                          item_no              ,
                          level_no             ,
                          station_code         ,
                          in_process_code      ,
                          slip_quantity        ,
                          cost_process_code    ,
                          upto_date            ,
                          reg_date             ,
                          this_month
                   )values(
                          PCF_REC.slip_no           ,
                          PCF_REC.slip_date         ,
                          PCF_REC.section_code      ,
                          PCF_REC.item_no           ,
                          PCF_REC.level_no          ,
                          PCF_REC.station_code      ,
                          PCF_REC.in_process_code   ,
                          PCF_REC.slip_quantity     ,
                          PCF_REC.cost_process_code ,
                          PCF_REC.upto_date         ,
                          PCF_REC.reg_date          ,
                          TO_CHAR(v_month,'yyyymm')
                   ) ;
                Else
                  /* pcfailure?level_no?[NULL]??????????????pcfailure?level_no????? */ 
                   If v_level_no >= PCF_REC.level_no Then
                      v_level_no := PCF_REC.level_no ;
                   End If ;

                  /* STRUCTURE????? */
                   open C5(ITM_REC.ITEM_NO,SBSTR_REC.REFERENCE_NUMBER,v_level_no) ;
                   loop
                     fetch C5 into STR_REC ;
                     exit when C5%notfound or C5%notfound is null;

                      /* ?????? */
                       open C3(STR_REC.LOWER_ITEM_NO) ;
                         fetch C3 into LITM_REC ;
                       close C3 ;

                       insert into pcfailure_wk (
                              slip_no              ,
                              slip_date            ,
                              section_code         ,
                              item_no              ,
                              level_no             ,
                              station_code         ,
                              in_process_code      ,
                              slip_quantity        ,
                              cost_process_code    ,
                              upto_date            ,
                              reg_date             ,
                              this_month           ,
                              wip_flag             ,
                              bm_item_no
                       )values(
                              PCF_REC.slip_no,
                              PCF_REC.slip_date,
                              PCF_REC.section_code ,
                              STR_REC.lower_item_no,
                              v_level_no             ,
                              PCF_REC.station_code ,
                              PCF_REC.in_process_code      ,
                              round(PCF_REC.slip_quantity * STR_REC.QUANTITY / nvl(decode(STR_REC.QUANTITY_BASE,0,1,STR_REC.QUANTITY_BASE),1) * LITM_REC.UNIT_STOCK_RATE / nvl(decode(LITM_REC.UNIT_ENGINEER_RATE,0,1,LITM_REC.UNIT_ENGINEER_RATE),1),6),
                              PCF_REC.cost_process_code    ,
                              PCF_REC.upto_date         ,
                              PCF_REC.reg_date          ,
                              TO_CHAR(v_month,'yyyymm'),
                              '*',
                              ITM_REC.ITEM_NO
                       ) ;
                   end loop ;
                   close C5 ;
                End If ;
             End If ;
           end loop ;
           <<LOOP_END_C4>>
           close C4 ;
        Else
           insert into pcfailure_wk (
                  slip_no              ,
                  slip_date            ,
                  section_code         ,
                  item_no              ,
                  level_no             ,
                  station_code         ,
                  in_process_code      ,
                  slip_quantity        ,
                  cost_process_code    ,
                  upto_date            ,
                  reg_date             ,
                  this_month           
           )values(
                  PCF_REC.slip_no           ,
                  PCF_REC.slip_date         ,
                  PCF_REC.section_code      ,
                  PCF_REC.item_no           ,
                  PCF_REC.level_no          ,
                  PCF_REC.station_code      ,
                  PCF_REC.in_process_code   ,
                  PCF_REC.slip_quantity     ,
                  PCF_REC.cost_process_code ,
                  PCF_REC.upto_date         ,
                  PCF_REC.reg_date          ,
                  TO_CHAR(v_month,'yyyymm') 
           ) ;
        End If ;
    <<LOOP_END>>
    null ;
    end loop ;
    close C1 ;

   /* ?????PCINVENTORY???? */
   /* ????? */
    open C7 ;
    loop
      fetch C7 into C7_REC ;
      exit when C7%notfound or C7%notfound is null;

        PCINVENTORY_SET(
                C7_REC.ITEM_NO,
                TO_DATE(C7_REC.THIS_MONTH,'YYYYMM'),
                C7_REC.slip_quantity,
                4,
                V_RET_NO,
                C7_REC.SECTION_CODE,
                C7_REC.STATION_CODE
        ) ;

       /* ?????? */
        open C3(C7_REC.item_no) ;
             fetch C3 into ITM_REC ;
        close C3 ;

       /* ????????????????????? */
        insert into tran_pcresults (
               operation_date,
               section_code,
               item_no,
               item_code,
               item_name,
               item_description,
               stock_subject_code,
               accounting_month,
               slip_date,
               slip_type,
               slip_no,
               slip_quantity,
               slip_price,
               slip_amount,
               curr_code,
               standard_price,
               standard_amount,
               company_code,
               cost_process_code,
               cost_subject_code,
               unit_stock,
               ex_rate,
               bm_item_no,
               level_no
        )values(
               sysdate,
               C7_REC.section_code ,
               C7_REC.item_no,
               ITM_REC.item_code,
               ITM_REC.item,
               ITM_REC.description,
               ITM_REC.stock_subject_code,
               to_char(C7_REC.slip_date,'yyyymm'),
               C7_REC.slip_date,
               '74', 
               C7_REC.slip_no,
               C7_REC.station_code ,
               C7_REC.slip_quantity,
               ITM_REC.standard_price,
               ITM_REC.curr_code,
               ITM_REC.standard_price,
               round((C7_REC.slip_quantity * ITM_REC.standard_price),8),
               C7_REC.station_code,
               C7_REC.cost_process_code,
               ITM_REC.cost_subject_code,
               ITM_REC.unit_stock,
               get_ex_rate(ITM_REC.curr_code,C7_REC.slip_date),
               C7_REC.bm_item_no,
               C7_REC.level_no
        ) ;

    end loop ;
    close C7 ;

    <<LAST>>
    null ;
    delete from pcfailure ;

    --	DBMS_OUTPUT.PUT_LINE('LAST');

  end ;
end PCFAILURE_SET ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."PCINVENTORY_SET" (
    v_item_no   in number,             -- ???? (?????????? -1)
    v_slip_date in date,               -- ?? ????????????????? -2?
    v_slip_qty  in number,             -- ??
    v_table_position in varchar2,      -- 1:??,2:???,3:??,4:???,9:??(*??*)
                                       -- ??????SLIP_QTY?????????(???Adjust???)??????????
    v_ret_no    in out number,         -- ???????????????
    v_sec_code  in number,             -- ????? (????????? -5)
    v_st_code  in number              -- ????? (????????? -7)

)
is
begin
  declare
   WHI_REC pcinventory%rowtype ;
   ITM_REC item%rowtype ;

   v_date  date ;
   v_sabun  pcinventory.stocktaking_adjust1%TYPE   :=0 ;

   v_section_code        pcinventory.section_code%TYPE          :=v_sec_code ;
   v_station_code        pcinventory.station_code%TYPE          :=v_st_code ;
   v_receive1            pcinventory.receive1%TYPE              :=0 ;
   v_other_receive1      pcinventory.other_receive1%TYPE        :=0 ;
   v_issue1              pcinventory.issue1%TYPE                :=0 ;
   v_other_issue1        pcinventory.other_issue1%TYPE          :=0 ;
   v_stocktaking_adjust1 pcinventory.stocktaking_adjust1%TYPE   :=0 ;
   v_this_inventory      pcinventory.this_inventory%TYPE        :=0 ;
   v_receive2            pcinventory.receive2%TYPE              :=0 ;
   v_other_receive2      pcinventory.other_receive2%TYPE        :=0 ;
   v_issue2              pcinventory.issue2%TYPE                :=0 ;
   v_other_issue2        pcinventory.other_issue2%TYPE          :=0 ;
   v_stocktaking_adjust2 pcinventory.stocktaking_adjust2%TYPE   :=0 ;
   v_last_inventory      pcinventory.last_inventory%TYPE        :=0 ;

    cursor C1 is
     select *
     from pcinventory
     where item_no = v_item_no
       and section_code = v_sec_code
       and station_code = v_st_code
     for update ;

    cursor C2 is
     select nvl(to_date(max(this_month),'yyyymm'),trunc(sysdate))
     from pcinventory  ;

    cursor C3 is
     select *
     from item
     where item_no = v_item_no ;

  begin
      v_ret_no := 0 ;

      /* ??????*/
      open C3 ;
         fetch C3 into ITM_REC ;
      close C3 ;
      If ITM_REC.item_no is null Then
          v_ret_no := -1 ;
          goto LAST ;
      End If ;

      /* ?????? */
      If v_section_code is null Then
           v_ret_no := -5 ;
           goto LAST ;
      End If ;

      /* ???????? */
      If v_station_code is null Then
           v_ret_no := -7 ;
           goto LAST ;
      End If ;

      /* ????????*/
      open C2 ;
         fetch C2 into v_date ;
      close C2 ;
      /* ????????*/
      If  trunc(v_slip_date,'mm') != trunc(v_date,'mm') and  trunc(v_slip_date,'mm') != trunc(add_months(v_date,-1),'mm') Then
          v_ret_no := -2 ;
          goto LAST ;
      End If ;


      /* ?????? */
      open C1 ;
          fetch C1 into WHI_REC;

          If to_char(v_slip_date,'yyyymm') = to_char(v_date,'yyyymm') Then                    --???
               If    v_table_position = 1 Then  v_receive1            := v_slip_qty ; v_this_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 2 Then  v_other_receive1      := v_slip_qty ; v_this_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 3 Then  v_issue1              := v_slip_qty ; v_this_inventory := -v_slip_qty ;
               ElsIf v_table_position = 4 Then  v_other_issue1        := v_slip_qty ; v_this_inventory := -v_slip_qty ;
               ElsIf v_table_position = 9 Then  
                        v_sabun  := v_slip_qty - nvl(WHI_REC.this_inventory,0) ;
                        v_stocktaking_adjust1 := v_sabun ; v_this_inventory := v_sabun ;
               End If ;
          ElsIf to_char(v_slip_date,'yyyymm') = to_char(add_months(v_date,-1),'yyyymm') Then  --???
               If    v_table_position = 1 Then  v_receive2            := v_slip_qty ; v_this_inventory :=  v_slip_qty ; v_last_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 2 Then  v_other_receive2      := v_slip_qty ; v_this_inventory :=  v_slip_qty ; v_last_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 3 Then  v_issue2              := v_slip_qty ; v_this_inventory := -v_slip_qty ; v_last_inventory := -v_slip_qty ;
               ElsIf v_table_position = 4 Then  v_other_issue2        := v_slip_qty ; v_this_inventory := -v_slip_qty ; v_last_inventory := -v_slip_qty ;
               ElsIf v_table_position = 9 Then 
                        v_sabun  := v_slip_qty - nvl(WHI_REC.last_inventory,0) ;
                        v_stocktaking_adjust2 := v_sabun ; v_this_inventory := v_sabun  ; v_last_inventory :=  v_sabun ;
               End If ;
          Else 
             v_ret_no := -9 ;
          End If ;

          If C1%notfound Then
             -- ?????
            insert into pcinventory(
               operation_date,
               section_code,
               item_no,
               location,
               this_month,
               receive1,
               other_receive1,
               issue1,
               other_issue1,
               stocktaking_adjust1,
               this_inventory,
               last_month,
               receive2,
               other_receive2,
               issue2,
               other_issue2,
               stocktaking_adjust2,
               last_inventory,
               last2_inventory,
               station_code
            ) VALUES (
               sysdate,
               V_section_code,
               v_item_no,
               null,
               to_char(v_date,'yyyymm'),
               nvl(v_receive1,0),
               nvl(v_other_receive1,0),
               nvl(v_issue1,0),
               nvl(v_other_issue1,0),
               nvl(v_stocktaking_adjust1,0),
               nvl(v_this_inventory,0),
               to_char(add_months(v_date,-1),'yyyymm'),
               nvl(v_receive2,0),
               nvl(v_other_receive2,0),
               nvl(v_issue2,0),
               nvl(v_other_issue2,0),
               nvl(v_stocktaking_adjust2,0),
               nvl(v_last_inventory,0),
               0,
               v_station_code
            ) ;
          Else
             -- ???
            update pcinventory set
               operation_date        = sysdate,
               receive1              = receive1            + nvl(v_receive1           ,0),
               other_receive1        = other_receive1      + nvl(v_other_receive1     ,0),
               issue1                = issue1              + nvl(v_issue1             ,0),
               other_issue1          = other_issue1        + nvl(v_other_issue1       ,0),
               stocktaking_adjust1   = stocktaking_adjust1 + nvl(v_stocktaking_adjust1,0),
               this_inventory        = this_inventory      + nvl(v_this_inventory     ,0),
               receive2              = receive2            + nvl(v_receive2           ,0),
               other_receive2        = other_receive2      + nvl(v_other_receive2     ,0),
               issue2                = issue2              + nvl(v_issue2             ,0),
               other_issue2          = other_issue2        + nvl(v_other_issue2       ,0),
               stocktaking_adjust2   = stocktaking_adjust2 + nvl(v_stocktaking_adjust2,0),
               last_inventory        = last_inventory      + nvl(v_last_inventory     ,0)
            where item_no = v_item_no
              and section_code = v_section_code
              and nvl(station_code,0) = nvl(v_station_code,0)
            ;


          End If ;
--          If    v_table_position = 1 Then              update item  set  receive_date        = v_slip_date where item_no = v_item_no and receive_date < v_slip_date;
--          ElsIf v_table_position = 2 Then              update item  set  receive_date        = v_slip_date where item_no = v_item_no and receive_date < v_slip_date;
--          ElsIf v_table_position = 3 Then              update item  set  issue_date          = v_slip_date where item_no = v_item_no and receive_date < v_slip_date;
--          ElsIf v_table_position = 4 Then              update item  set  issue_date          = v_slip_date where item_no = v_item_no and receive_date < v_slip_date; 
--          End If ;

      close C1 ;

 <<LAST>>
   null ;

  end ;
end PCINVENTORY_SET ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."PCINVENTORY_SLIDE" (para_pc in number, para_today in date,
                            para_check_flag out number) is
begin
declare
       cursor pc is --pcinventory fetch
             select this_month, receive1, other_receive1,
                    issue1, other_issue1, stocktaking_adjust1,
                    this_inventory, last_month, receive2,
                    other_receive2, issue2, other_issue2,
                    stocktaking_adjust2, last_inventory, last2_inventory
               from pcinventory
               for update of
                    this_month, receive1, other_receive1,
                    issue1, other_issue1, stocktaking_adjust1,
                    this_inventory, last_month, receive2,
                    other_receive2, issue2, other_issue2,
                    stocktaking_adjust2, last_inventory, last2_inventory,
                    operation_date;
       w_this_month          pcinventory.this_month%type; --variable start
       w_receive1            pcinventory.receive1%type;
       w_other_receive1      pcinventory.other_receive1%type;
       w_issue1              pcinventory.issue1%type;
       w_other_issue1        pcinventory.other_issue1%type;
       w_stocktaking_adjust1 pcinventory.stocktaking_adjust1%type;
       w_this_inventory      pcinventory.this_inventory%type;
       w_last_month          pcinventory.last_month%type;
       w_receive2            pcinventory.receive2%type;
       w_other_receive2      pcinventory.other_receive2%type;
       w_issue2              pcinventory.issue2%type;
       w_other_issue2        pcinventory.other_issue2%type;
       w_stocktaking_adjust2 pcinventory.stocktaking_adjust2%type;
       w_last_inventory      pcinventory.last_inventory%type;
       w_last2_inventory     pcinventory.last2_inventory%type;
       w_operation_date      whinventory.operation_date%type; --variable end
     begin
     para_check_flag := 0;
     open pc;
     loop
         fetch pc into
                    w_this_month, w_receive1, w_other_receive1,
                    w_issue1, w_other_issue1, w_stocktaking_adjust1,
                    w_this_inventory, w_last_month, w_receive2,
                    w_other_receive2, w_issue2, w_other_issue2,
                    w_stocktaking_adjust2, w_last_inventory, w_last2_inventory;
         exit when pc%notfound or pc%notfound is null;
         if w_this_month <> para_pc then --month changed?
           w_last2_inventory := w_last_inventory; --value slide start
           w_last_month := w_this_month;
           w_receive2 := w_receive1;
           w_other_receive2 := w_other_receive1;
           w_issue2 := w_issue1;
           w_other_issue2 := w_other_issue1;
           w_stocktaking_adjust2 := w_stocktaking_adjust1;
           w_last_inventory := w_this_inventory;
           w_this_month := para_pc;
           w_receive1 := 0;
           w_other_receive1 := 0;
           w_issue1 := 0;
           w_other_issue1 := 0;
           w_stocktaking_adjust1 := 0;
           w_this_inventory := w_this_inventory;
           w_operation_date := para_today;
           if (w_receive2 = 0 or w_receive2 is null) and
              (w_other_receive2 = 0 or w_other_receive2 is null) and
              (w_issue2 = 0 or w_issue2 is null) and
              (w_other_issue2 = 0 or w_other_issue2 is null) and
              (w_stocktaking_adjust2 = 0 or w_stocktaking_adjust2 is null) and
              (w_last_inventory = 0 or w_last_inventory is null) and
              (w_last2_inventory = 0 or w_last2_inventory is null) then
             delete from pcinventory
              where current of pc; --delete no_move_data for two monthes
           else
             update pcinventory
                set operation_date = w_operation_date,
                    this_month = w_this_month,
                    receive1 = w_receive1,
                    other_receive1 = w_other_receive1,
                    issue1 = w_issue1,
                    other_issue1 = w_other_issue1,
                    stocktaking_adjust1 = w_stocktaking_adjust1,
                    this_inventory = w_this_inventory,
                    last_month = w_last_month,
                    receive2 = w_receive2,
                    other_receive2 = w_other_receive2,
                    issue2 = w_issue2,
                    other_issue2 = w_other_issue2,
                    stocktaking_adjust2 = w_stocktaking_adjust2,
                    last_inventory = w_last_inventory,
                    last2_inventory = w_last2_inventory
              where current of pc; --slide update
           end if;
         end if;
     end loop;
     exception
      when others then
       null;
       para_check_flag := 1;
       if pc%isopen then
        close pc;
       end if;
     close pc;
     end;
end pcinventory_slide;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."PCPHYSICAL_SET" (V_MONTH in date)
is
begin
  declare
   ITM_REC item%rowtype ;
   LITM_REC item%rowtype ;
   PHY_REC pcphysical%rowtype ;
   STR_REC structure%rowtype ;

   v_ret_no  number ;

    cursor C1(PARAM1 in number) is
     select *
     from pcphysical where stock_taking_month = PARAM1 and item_no is not null
     ;

    cursor C2(PARAM1 in number) is
     select *
     from structure where upper_item_no = PARAM1 ;

    cursor C3(PARAM1 in number) is
     select *
     from item where item_no = PARAM1 ;

    cursor C4 is
     select p.item_no,p.section_code,p.station_code,p.this_month,
            sum(p.physical_quantity) physical_quantity
     from  pcphysical_wk p
     group by p.item_no,p.section_code,p.station_code,p.this_month
     ;
     C4_REC			C4%ROWTYPE := null;

     cursor C9 is
     select max(this_month) this_month
      from pcinventory  ;

     C9_REC			C9%ROWTYPE := null;


  begin
      v_ret_no := 0 ;

      delete from pcphysical_wk ;

    /* PCINVENTORY???????? */
      open C9 ;
         fetch C9 into C9_REC ;
      close C9 ;


      open C1(to_char(V_month,'yyyymm')) ;
        loop
        fetch C1 into PHY_REC ;
        exit when C1%notfound or C1%notfound is null;

              /* ??????*/
              open C3(PHY_REC.ITEM_NO) ;
                 fetch C3 into ITM_REC ;
              close C3 ;
              If ITM_REC.item_no is null Then
                  v_ret_no := -1 ;
                  goto LOOPEND ;
              End If ;

             /* IN_PROCESS_CODE???????????????????? */
              If replace(PHY_REC.IN_PROCESS_CODE,' ','') is not null Then
                  open C2(ITM_REC.ITEM_NO) ;
                      loop
                      fetch C2 into STR_REC ;
                      exit when C2%notfound or C2%notfound is null;
                         open C3(STR_REC.LOWER_ITEM_NO) ;
                            fetch C3 into LITM_REC ;
                         close C3 ;

                         insert into pcphysical_wk (
                             operation_date       ,
                             section_code         ,
                             item_no              ,
                             station_code         ,
                             this_month           ,
                             physical_quantity
                         )values(
                             sysdate              ,
                             PHY_REC.section_code ,
                             STR_REC.lower_item_no,
                             PHY_REC.station_code ,
                             PHY_REC.STOCK_TAKING_MONTH,
                             round(PHY_REC.PHYSICAL_QUANTITY * STR_REC.QUANTITY / nvl(decode(STR_REC.QUANTITY_BASE,0,1,STR_REC.QUANTITY_BASE),1) * LITM_REC.UNIT_STOCK_RATE * LITM_REC.UNIT_ENGINEER_RATE,6)
                         ) ;

                      end loop ;
                  close C2 ;
              Else
                         insert into pcphysical_wk (
                             operation_date       ,
                             section_code         ,
                             item_no              ,
                             station_code         ,
                             this_month           ,
                             physical_quantity
                         )values(
                             sysdate              ,
                             PHY_REC.section_code ,
                             PHY_REC.item_no,
                             PHY_REC.station_code ,
                             PHY_REC.STOCK_TAKING_MONTH,
                             PHY_REC.PHYSICAL_QUANTITY
                         ) ;

              End If ;

 <<LOOPEND>>
           null ;
        end loop ;
      close C1 ;

     if  C9_REC.this_month = PHY_REC.STOCK_TAKING_MONTH then
         /* ????????0???? */
          insert into pcphysical_wk (
                         operation_date       ,
                         section_code         ,
                         item_no              ,
                         station_code         ,
                         this_month           ,
                         physical_quantity
                      )
                 select
                         sysdate              ,
                         section_code         ,
                         item_no              ,
                         station_code         ,
                         this_month           ,
                         0
                from pcinventory ;
     else
      insert into pcphysical_wk (
                     operation_date       ,
                     section_code         ,
                     item_no              ,
                     station_code         ,
                     this_month           ,
                     physical_quantity
                  )
             select
                     sysdate              ,
                     section_code         ,
                     item_no              ,
                     station_code         ,
                     last_month           ,
                     0
            from pcinventory ;
       end if;

-- PCINVENOTRY??
      open C4 ;
         loop
            fetch C4 into C4_REC ;
            exit when C4%notfound or C4%notfound is null;
                pcinventory_set(
                   C4_REC.ITEM_NO,
                   TO_DATE(C4_REC.THIS_MONTH,'YYYYMM'),
                   C4_REC.PHYSICAL_QUANTITY,
                   9,
                   V_RET_NO,
                   C4_REC.SECTION_CODE,
                   C4_REC.STATION_CODE
                ) ;

         end loop ;
      close C4 ;
      


 <<LAST>>
   null ;

  end ;
end PCPHYSICAL_SET ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."PCPHYSICAL_SET_ORG" 
is
begin
  declare
   ITM_REC item%rowtype ;
   LITM_REC item%rowtype ;
   PHY_REC pcphysical%rowtype ;
   STR_REC structure%rowtype ;

   v_ret_no  number ;

    cursor C1(PARAM1 in number) is
     select *
     from pcphysical where stock_taking_month = PARAM1 and item_no is not null
     ;

    cursor C2(PARAM1 in number) is
     select *
     from structure where upper_item_no = PARAM1 ;

    cursor C3(PARAM1 in number) is
     select *
     from item where item_no = PARAM1 ;

    cursor C4 is
     select p.item_no,p.section_code,p.station_code,
            sum(p.physical_quantity) physical_quantity,
            nvl(i.last_inventory,0) + nvl(i.receive1,0) + nvl(i.other_receive1,0)  - nvl(i.issue1,0)  - nvl(i.other_issue1,0) this_inventory
     from  pcphysical p,
           pcinventory i 
     where p.item_no = i.item_no  (+)
       and p.section_code = i.section_code (+)
       and p.station_code = i.station_code (+)
     group by p.item_no,p.section_code,p.station_code,i.last_inventory,i.receive1,other_receive1,issue1,other_issue1
     ;
     C4_REC			C4%ROWTYPE := null;

  begin
      v_ret_no := 0 ;

      delete from pcphysical_wk ;

      open C1('200204') ;
        loop
        fetch C1 into PHY_REC ;
        exit when C1%notfound or C1%notfound is null;

              /* ??????*/
              open C3(PHY_REC.ITEM_NO) ;
                 fetch C3 into ITM_REC ;
              close C3 ;
              If ITM_REC.item_no is null Then
                  v_ret_no := -1 ;
                  goto LOOPEND ;
              End If ;

             /* IN_PROCESS_CODE???????????????????? */
              If replace(PHY_REC.IN_PROCESS_CODE,' ','') is not null Then
                  open C2(ITM_REC.ITEM_NO) ;
                      loop
                      fetch C2 into STR_REC ;
                      exit when C2%notfound or C2%notfound is null;
                         open C3(STR_REC.LOWER_ITEM_NO) ;
                            fetch C3 into LITM_REC ;
                         close C3 ;

                         insert into pcphysical_wk (
                             operation_date       ,
                             section_code         ,
                             item_no              ,
                             station_code         ,
                             this_month           ,
                             physical_quantity
                         )values(
                             sysdate              ,
                             PHY_REC.section_code ,
                             STR_REC.lower_item_no,
                             PHY_REC.station_code ,
                             PHY_REC.STOCK_TAKING_MONTH,
                             round(PHY_REC.PHYSICAL_QUANTITY * STR_REC.QUANTITY / nvl(decode(STR_REC.QUANTITY_BASE,0,1,STR_REC.QUANTITY_BASE),1) * LITM_REC.UNIT_STOCK_RATE * LITM_REC.UNIT_ENGINEER_RATE,6)
                         ) ;

                      end loop ;
                  close C2 ;
              Else
                         insert into pcphysical_wk (
                             operation_date       ,
                             section_code         ,
                             item_no              ,
                             station_code         ,
                             this_month           ,
                             physical_quantity
                         )values(
                             sysdate              ,
                             PHY_REC.section_code ,
                             PHY_REC.item_no,
                             PHY_REC.station_code ,
                             PHY_REC.STOCK_TAKING_MONTH,
                             PHY_REC.PHYSICAL_QUANTITY
                         ) ;

              End If ;

 <<LOOPEND>>
           null ;
        end loop ;
      close C1 ;

-- PCINVENOTRY??
      --ADJUST????????
       UPDATE PCINVENTORY SET 
            THIS_INVENTORY = LAST_INVENTORY + RECEIVE1 + OTHER_RECEIVE1 - ISSUE1 - OTHER_ISSUE1,
            STOCKTAKING_ADJUST1 =0 ;

      open C4 ;
         loop
            fetch C4 into C4_REC ;
            exit when C4%notfound or C4%notfound is null;
                pcinventory_set(
                   C4_REC.ITEM_NO,
                   to_date('200204','YYYYMM'),
                   C4_REC.PHYSICAL_QUANTITY - C4_REC.THIS_INVENTORY,
                   9,
                   V_RET_NO,
                   C4_REC.SECTION_CODE,
                   C4_REC.STATION_CODE
                ) ;

         end loop ;
      close C4 ;
      
     -- ??????????0????
       UPDATE PCINVENTORY SET 
            THIS_INVENTORY = 0,
            STOCKTAKING_ADJUST1 = -THIS_INVENTORY 
       WHERE (SECTION_CODE,ITEM_NO,STATION_CODE) not in
                  (select SECTION_CODE,ITEM_NO,STATION_CODE from pcphysical) ;



 <<LAST>>
   null ;

  end ;
end PCPHYSICAL_SET_ORG ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."PP3_PRODUCTION_COMPARISON_SET" 
as
begin
   declare

    /* ?????????????? */
    cursor C1
    is
    select min(product_date) min_product_date ,trunc(sysdate)  today_date
      from pp3_up_wk;

    /* ???????? */
    cursor C2 (para in DATE)
    is
    select ac_month,ITEM_NO, WO_NO, PRODUCT_LINE, DATE_CODE, GRADE,
           sum("01") pln1,
           sum("02") pln2,
           sum("03") pln3,
           sum("04") pln4,
           sum("05") pln5,
           sum("06") pln6,
           sum("07") pln7,
           sum("08") pln8,
           sum("09") pln9,
           sum("10") pln10,
           sum("11") pln11,
           sum("12") pln12,
           sum("13") pln13,
           sum("14") pln14,
           sum("15") pln15,
           sum("16") pln16,
           sum("17") pln17,
           sum("18") pln18,
           sum("19") pln19,
           sum("20") pln20,
           sum("21") pln21,
           sum("22") pln22,
           sum("23") pln23,
           sum("24") pln24,
           sum("25") pln25,
           sum("26") pln26,
           sum("27") pln27,
           sum("28") pln28,
           sum("29") pln29,
           sum("30") pln30,
           sum("31") pln31
           from (
                 select trunc(KURAIRE_DATE,'mm') ac_month ,ITEM_NO, WO_NO, PRODUCT_LINE, DATE_CODE, GRADE, 
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '01', PRODUCT_QUANTITY) "01",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '02', PRODUCT_QUANTITY) "02",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '03', PRODUCT_QUANTITY) "03",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '04', PRODUCT_QUANTITY) "04",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '05', PRODUCT_QUANTITY) "05",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '06', PRODUCT_QUANTITY) "06",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '07', PRODUCT_QUANTITY) "07",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '08', PRODUCT_QUANTITY) "08",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '09', PRODUCT_QUANTITY) "09",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '10', PRODUCT_QUANTITY) "10",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '11', PRODUCT_QUANTITY) "11",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '12', PRODUCT_QUANTITY) "12",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '13', PRODUCT_QUANTITY) "13",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '14', PRODUCT_QUANTITY) "14",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '15', PRODUCT_QUANTITY) "15",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '16', PRODUCT_QUANTITY) "16",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '17', PRODUCT_QUANTITY) "17",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '18', PRODUCT_QUANTITY) "18",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '19', PRODUCT_QUANTITY) "19",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '20', PRODUCT_QUANTITY) "20",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '21', PRODUCT_QUANTITY) "21",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '22', PRODUCT_QUANTITY) "22",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '23', PRODUCT_QUANTITY) "23",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '24', PRODUCT_QUANTITY) "24",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '25', PRODUCT_QUANTITY) "25",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '26', PRODUCT_QUANTITY) "26",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '27', PRODUCT_QUANTITY) "27",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '28', PRODUCT_QUANTITY) "28",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '29', PRODUCT_QUANTITY) "29",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '30', PRODUCT_QUANTITY) "30",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '31', PRODUCT_QUANTITY) "31" 
                from PRODUCT_PLAN_PROGRESS_REPORT)
                 where ac_month >= para
                 group by ac_month,ITEM_NO, WO_NO, ITEM_NO, PRODUCT_LINE, DATE_CODE, GRADE;

    /* ???????????? */
--2010/0803 ??
--    cursor C3 (para1 in date,para2 in number,para3 in varchar2,para4 in varchar2)
    cursor C3 (para1 in date,para2 in number,para3 in varchar2)
    is
    select ac_month, item_no, wo_no, product_line
      from production_comparison_monthly
     where ac_month         = para1
       and item_no          = para2
       and wo_no            = para3
--2010/0803 ??
--       and nvl(product_line,' ')     = nvl(para4, ' ')
     for update;

    /* ???????? */
    cursor C4 (para1 in date)
    is
    select KURAIRE_DATE, ITEM_NO, WO_NO, PRODUCT_LINE, sum(PRODUCT_QUANTITY) PRODUCT_QUANTITY, DATE_CODE, GRADE
      from PRODUCT_PLAN_PROGRESS_REPORT
     where KURAIRE_DATE >= para1
     group by KURAIRE_DATE, ITEM_NO, WO_NO, PRODUCT_LINE, DATE_CODE, GRADE;

    /* ????????(??) */
--2010/0803 ??
--    cursor C5 (para1 in date,para2 in number,para3 in varchar2,para4 in varchar2)
    cursor C5 (para1 in date,para2 in number,para3 in varchar2)
    is
    select product_date, item_no, wo_no, product_line
      from production_comparison
     where product_date         = para1
       and item_no          = para2
       and wo_no            = para3
--2010/0803 ??
--       and nvl(product_line,' ')     = nvl(para4, ' ')
     for update;

    C1_REC           C1%rowtype;
    C2_REC           C2%rowtype;
    C3_REC           C3%rowtype;
    C4_REC           C4%rowtype;
    C5_REC           C5%rowtype;

    wk_total_pln_qty production_comparison_monthly.TOTAL_PLN_QTY%type;
    wk_total_act_qty production_comparison_monthly.TOTAL_ACT_QTY%type;

  
   begin
   /* ?????????????????????  */
   open C1;
     fetch C1  into C1_REC;
   close C1;

    /* ?????????????????    ???????????????????  */
   delete from production_comparison_monthly
    where ac_month >= trunc(C1_REC.MIN_PRODUCT_DATE,'mm');

    /* ???????????????        ???????????????????  */
   delete from production_comparison
    where PRODUCT_DATE >= C1_REC.MIN_PRODUCT_DATE;

   /* ?????????????????????  */
   open C1;
     fetch C1  into C1_REC;
   close C1;


/* ???????   ??????? */
    /*  product_plan_progress_report??? */
    open C2(trunc(C1_REC.MIN_PRODUCT_DATE,'mm'));
      loop
      fetch C2 into C2_REC;
      exit when C2%notfound or C2%notfound is null;

     wk_total_pln_qty := nvl(C2_REC.pln1,0)  + nvl(C2_REC.pln2,0)  + nvl(C2_REC.pln3,0)  + nvl(C2_REC.pln4,0)  + nvl(C2_REC.pln5,0)  + 
                         nvl(C2_REC.pln6,0)  + nvl(C2_REC.pln7,0)  + nvl(C2_REC.pln8,0)  + nvl(C2_REC.pln9,0)  + nvl(C2_REC.pln10,0) +  
                         nvl(C2_REC.pln11,0) + nvl(C2_REC.pln12,0) + nvl(C2_REC.pln13,0) + nvl(C2_REC.pln14,0) + nvl(C2_REC.pln15,0) +  
                         nvl(C2_REC.pln16,0) + nvl(C2_REC.pln17,0) + nvl(C2_REC.pln18,0) + nvl(C2_REC.pln19,0) + nvl(C2_REC.pln20,0) +  
                         nvl(C2_REC.pln21,0) + nvl(C2_REC.pln22,0) + nvl(C2_REC.pln23,0) + nvl(C2_REC.pln24,0) + nvl(C2_REC.pln25,0) +  
                         nvl(C2_REC.pln26,0) + nvl(C2_REC.pln27,0) + nvl(C2_REC.pln28,0) + nvl(C2_REC.pln29,0) + nvl(C2_REC.pln30,0) +  
                         nvl(C2_REC.pln31,0);

      /*  ???????????? */
      open C3(C2_REC.AC_MONTH,C2_REC.ITEM_NO,C2_REC.WO_NO);
        fetch C3  into C3_REC;
        if C3%notfound or C3%notfound is null then
            /* ??????????????????    ???????????????????  */
            insert into production_comparison_monthly (
                                    ac_month,
                                    item_no,
                                    wo_no,
                                    product_line,
                                    date_code_pln,
                                    grade_pln,
                                    date_code_act,
                                    grade_act,
                                    total_pln_qty,
                                    total_act_qty,
                                    pln_qty1,
                                    pln_qty2,
                                    pln_qty3,
                                    pln_qty4,
                                    pln_qty5,
                                    pln_qty6,
                                    pln_qty7,
                                    pln_qty8,
                                    pln_qty9,
                                    pln_qty10,
                                    pln_qty11,
                                    pln_qty12,
                                    pln_qty13,
                                    pln_qty14,
                                    pln_qty15,
                                    pln_qty16,
                                    pln_qty17,
                                    pln_qty18,
                                    pln_qty19,
                                    pln_qty20,
                                    pln_qty21,
                                    pln_qty22,
                                    pln_qty23,
                                    pln_qty24,
                                    pln_qty25,
                                    pln_qty26,
                                    pln_qty27,
                                    pln_qty28,
                                    pln_qty29,
                                    pln_qty30,
                                    pln_qty31,
                                    act_qty1,
                                    act_qty2,
                                    act_qty3,
                                    act_qty4,
                                    act_qty5,
                                    act_qty6,
                                    act_qty7,
                                    act_qty8,
                                    act_qty9,
                                    act_qty10,
                                    act_qty11,
                                    act_qty12,
                                    act_qty13,
                                    act_qty14,
                                    act_qty15,
                                    act_qty16,
                                    act_qty17,
                                    act_qty18,
                                    act_qty19,
                                    act_qty20,
                                    act_qty21,
                                    act_qty22,
                                    act_qty23,
                                    act_qty24,
                                    act_qty25,
                                    act_qty26,
                                    act_qty27,
                                    act_qty28,
                                    act_qty29,
                                    act_qty30,
                                    act_qty31,
                                    operation_date
                        ) values (
                                    C2_REC.ac_month,
                                    C2_REC.item_no,
                                    C2_REC.wo_no,
                                    C2_REC.product_line,
                                    C2_REC.date_code,
                                    C2_REC.grade,
                                    null,
                                    null,
                                    wk_total_pln_qty,
                                    null,
                                    C2_REC.pln1,
                                    C2_REC.pln2,
                                    C2_REC.pln3,
                                    C2_REC.pln4,
                                    C2_REC.pln5,
                                    C2_REC.pln6,
                                    C2_REC.pln7,
                                    C2_REC.pln8,
                                    C2_REC.pln9,
                                    C2_REC.pln10,
                                    C2_REC.pln11,
                                    C2_REC.pln12,
                                    C2_REC.pln13,
                                    C2_REC.pln14,
                                    C2_REC.pln15,
                                    C2_REC.pln16,
                                    C2_REC.pln17,
                                    C2_REC.pln18,
                                    C2_REC.pln19,
                                    C2_REC.pln20,
                                    C2_REC.pln21,
                                    C2_REC.pln22,
                                    C2_REC.pln23,
                                    C2_REC.pln24,
                                    C2_REC.pln25,
                                    C2_REC.pln26,
                                    C2_REC.pln27,
                                    C2_REC.pln28,
                                    C2_REC.pln29,
                                    C2_REC.pln30,
                                    C2_REC.pln31,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    sysdate
                                 );                      
        else
           update production_comparison_monthly
              set total_pln_qty      = wk_total_pln_qty,
                  pln_qty1           = C2_REC.pln1,
                  pln_qty2           = C2_REC.pln2,
                  pln_qty3           = C2_REC.pln3,
                  pln_qty4           = C2_REC.pln4,
                  pln_qty5           = C2_REC.pln5,
                  pln_qty6           = C2_REC.pln6,
                  pln_qty7           = C2_REC.pln7,
                  pln_qty8           = C2_REC.pln8,
                  pln_qty9           = C2_REC.pln9,
                  pln_qty10          = C2_REC.pln10,
                  pln_qty11          = C2_REC.pln11,
                  pln_qty12          = C2_REC.pln12,
                  pln_qty13          = C2_REC.pln13,
                  pln_qty14          = C2_REC.pln14,
                  pln_qty15          = C2_REC.pln15,
                  pln_qty16          = C2_REC.pln16,
                  pln_qty17          = C2_REC.pln17,
                  pln_qty18          = C2_REC.pln18,
                  pln_qty19          = C2_REC.pln19,
                  pln_qty20          = C2_REC.pln20,
                  pln_qty21          = C2_REC.pln21,
                  pln_qty22          = C2_REC.pln22,
                  pln_qty23          = C2_REC.pln23,
                  pln_qty24          = C2_REC.pln24,
                  pln_qty25          = C2_REC.pln25,
                  pln_qty26          = C2_REC.pln26,
                  pln_qty27          = C2_REC.pln27,
                  pln_qty28          = C2_REC.pln28,
                  pln_qty29          = C2_REC.pln29,
                  pln_qty30          = C2_REC.pln30,
                  pln_qty31          = C2_REC.pln31,
                   operation_date = sysdate
           where current of C3;
         end if;
      close C3;

      <<LOOP2_END>>
      null;
      end loop;
    close C2;


/* ???????   ??????? */
 
   /*  PRODUCT_PLAN_PROGRESS_REPORT??? */
    open C4(C1_REC.MIN_PRODUCT_DATE);
      loop
      fetch C4 into C4_REC;
      exit when C4%notfound or C4%notfound is null;

      /*  ???????????? */
--2010/08/03 ??
--      open C5(C4_REC.KURAIRE_DATE,C4_REC.ITEM_NO,C4_REC.WO_NO,C4_REC.PRODUCT_LINE);
      open C5(C4_REC.KURAIRE_DATE,C4_REC.ITEM_NO,C4_REC.WO_NO);
        fetch C5  into C5_REC;
        if C5%notfound or C5%notfound is null then
            insert into production_comparison (
                                    product_date,
                                    item_no,
                                    wo_no,
                                    product_line,
                                    date_code_pln,
                                    grade_pln,
                                    date_code_act,
                                    grade_act,
                                    plan_qty,
                                    actual_qty,
                                    operation_date
                        ) values (
                                    C4_REC.kuraire_date,
                                    C4_REC.item_no,
                                    C4_REC.wo_no,
                                    C4_REC.product_line,
                                    C4_REC.date_code,
                                    C4_REC.grade,
                                    null,
                                    null,
                                    C4_REC.product_quantity,
                                    null,
                                    sysdate
                                 );                      
        else
           update production_comparison
              set plan_qty           = C4_REC.product_quantity,
                  operation_date     = sysdate
           where current of C5;
         end if;
      close C5;

      <<LOOP4_END>>
      null;
      end loop;
    close C4;

   end;
end  PP3_PRODUCTION_COMPARISON_SET;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."PROC_SALES_CHANNELS" (
  p_ym           IN NUMBER
)
IS
/*
======================================================================
(C)2014 FDK CORPORATION

?????????????????????? ??????????

?????  ?
  param1 : p_ym           ????   ?yyyymm???

????    ??????????Commit???????

????
----------------------------------------------------------------------
  Ver    Date        Author          Memo
----------------------------------------------------------------------
  1.0    2014/12/08  NTTk)??       ????
  1.1    2014/12/19  Y.Hagai         ?????
======================================================================
*/
    p_ym_char  VARCHAR2(6) := to_char(p_ym);
    p_y        VARCHAR2(4) := substr(p_ym_char, 1, 4); --[yyyy ??]
    p_m        VARCHAR2(2) := substr(p_ym_char, 5, 2); --[mm ??]

    -- ??????
    wk_sysdate DATE := sysdate;

    -- ??????
    err_code NUMBER(1) := 0;

BEGIN    
    -- *************************************************************
	-- (1) ???????????????
    -- *************************************************************
    delete from SALES_CHANNELS_AMT_MONTH
    where  to_char(FISCAL_MONTH) >= GET_NENDO(p_ym_char) || '04'
      and  to_char(FISCAL_MONTH) <= p_ym_char
    ;

    insert into SALES_CHANNELS_AMT_MONTH
    select *
    from   SALES_CHANNELS_AMT_MONTH_WK
    where  to_char(FISCAL_MONTH) >= GET_NENDO(p_ym_char) || '04'
      and  to_char(FISCAL_MONTH) <= p_ym_char
      and SALES_CHANNELS_CODE <> '996295'
    ;
    
    -- *************************************************************
	-- (2) ????????????
    -- *************************************************************

	--  (2)-1. ???
    IF err_code = 0 THEN
      PROC_SALES_CHANNELS_QTY_MONTH( p_ym, err_code );
    END IF;
    
	--  (2)-2. ???
    IF err_code = 0 THEN
      PROC_SALES_CHANNELS_QTY_QTR( p_ym,  err_code );
    END IF;
    
	--  (2)-3. ??
    IF err_code = 0 THEN
      PROC_SALES_CHANNELS_QTY_HALF( p_ym, err_code );
    END IF;

	--  (2)-4. ??
    IF err_code = 0 THEN
      PROC_SALES_CHANNELS_QTY_YEAR( p_ym, err_code );
    END IF;
    
  -- -----------------------------------------------------------------------------------------------
EXCEPTION
  WHEN OTHERS THEN

    -- ????????
    ROLLBACK;

    -- ?????
    DBMS_OUTPUT.PUT_LINE('ERR_CODE=' || SQLCODE ||', ERR_MSG=' || SQLERRM(SQLCODE) );

END PROC_SALES_CHANNELS ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."PROC_SALES_CHANNELS_QTY_HALF" (
  p_ym           IN NUMBER,
  p_err_code     OUT NUMBER
)
IS
/*
======================================================================
(C)2014 FDK CORPORATION

?????????????????????????????

?????  ?
  param1[IN]  : p_ym           ????   ?yyyymm???
  param2[OUT] : p_err_code     ??????

????
----------------------------------------------------------------------
  Ver    Date        Author          Memo
----------------------------------------------------------------------
  1.0    2014/12/08  NTTk)??       ????
  1.1    2014/12/19  Y.Hagai         ?????
======================================================================
*/

  -- ??????????
  c_company_code_fdk  SALES_CHANNELS_QTY_MONTH.COMPANY_CODE%TYPE := 996130;

  -- ???????
  wk_qty_new SALES_CHANNELS_QTY_HALF.QTY%TYPE := 0;
  -- ????????? 
  wk_qty_tmp SALES_CHANNELS_QTY_HALF.QTY%TYPE := 0;
  
  -- ??
  wk_nendo VARCHAR2(4) := GET_NENDO(to_char(p_ym));  -- [yyyy ??]
  
  -- -------------------------------------------------------------------------------------
  -- ?????? ????????????SONY,??,??,????,PANA,ENR,?????
  -- -------------------------------------------------------------------------------------
  CURSOR C1 IS
        select   main.*,
                 sc.SALES_CHANNELS_NAME
        from     ( select wk.FISCAL_HALF,
                      wk.COMPANY_CODE,
                      wk.COMPANY_NAME,
                      wk.CLASS_CODE,
                      wk.CLASS_NAME_1,
                      wk.CLASS_NAME_2,
                      wk.CLASS_NAME_3,
                      wk.CLASS_NAME_4,
                      wk.CLASS_NAME_5,
                      wk.ITEM_NO,
                      wk.ITEM_NAME,
                      wk.PACK_NUM,
                      wk.FACTORY_TYPE,
                      wk.SPEC_1,
                      wk.ITEM_TYPE,
                      wk.GRADE_CODE,
                      wk.PACKING_TYPE,
                      wk.PACKING_NAME,
                      wk.MAKER,
                      wk.QTY,
                      wk.QTY_CELL,
                      SPEC_TO_SALES_CHANNELS_FI(wk.SPEC_1) as SALES_CHANNELS_CODE_X
                   from   SALES_CHANNELS_QTY_HALF_WK wk
                   where  FISCAL_HALF   like wk_nendo || '%' -- <param>
                     and  SALES_CHANNELS_CODE    = '996295'
                     and  substr(to_char(wk.SPEC_1), 1, 2) >= '70'
                     and  substr(to_char(wk.SPEC_1), 1, 2) <= '80'
                 ) main,
                 SALES_CHANNELS sc
        where    main.SALES_CHANNELS_CODE_X = sc.SALES_CHANNELS_CODE (+)
        order by main.ITEM_NO, main.FISCAL_HALF
       ;
  
  C1_REC C1%ROWTYPE := null;

  -- -------------------------------------------------------------------------------------
  -- ?????? ?????????????
  -- -------------------------------------------------------------------------------------
  CURSOR C2 IS
    select *
    from   ( select  row_number() over ( partition by main.ITEM_NO, main.FISCAL_HALF
                                         order by main.ITEM_NO, main.FISCAL_HALF, main.AMT_QTY_PER desc ) as ROW_NUM
                    ,main.*
                    ,case
                       when SALES_CHANNELS_NAME_TEMP is null then
                         sc.SALES_CHANNELS_NAME
                       else
                         main.SALES_CHANNELS_NAME_TEMP
                     end as SALES_CHANNELS_NAME
            from   ( select  wk.*
                            ,case
                               when nvl(amt.TOTAL_AMT_QTY, 0) = 0 then
                                 1
                               else
                                 round(amt.AMT_QTY / amt.TOTAL_AMT_QTY, 4)
                             end as AMT_QTY_PER
                            ,case
                               when nvl(amt.TOTAL_AMT_QTY, 0) = 0 then
                                 SPEC_TO_SALES_CHANNELS_FI(wk.SPEC_1)
                               else
                                 amt.SALES_CHANNELS_CODE
                             end as SALES_CHANNELS_CODE
                            ,case
                               when nvl(amt.TOTAL_AMT_QTY, 0) = 0 then
                                 null
                               else
                                 amt.SALES_CHANNELS_NAME
                             end as SALES_CHANNELS_NAME_TEMP
                     
                     from     ( select   FISCAL_HALF, COMPANY_CODE, COMPANY_NAME, CLASS_CODE
                                        ,CLASS_NAME_1, CLASS_NAME_2, CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5
                                        ,ITEM_NO, ITEM_NAME, PACK_NUM, FACTORY_TYPE, SPEC_1, ITEM_TYPE
                                        ,GRADE_CODE, PACKING_TYPE, PACKING_NAME, MAKER
                                        ,sum(QTY) as WK_QTY
                                from     SALES_CHANNELS_QTY_HALF_WK
                                where    FISCAL_HALF   like wk_nendo || '%' -- <param>
                                  and    SALES_CHANNELS_CODE    = '996295'
                                  and    ( substr(to_char(SPEC_1), 1, 2) < '70'
                                           or substr(to_char(SPEC_1), 1, 2) > '80')
                                group by FISCAL_HALF, COMPANY_CODE, COMPANY_NAME, CLASS_CODE
                                        ,CLASS_NAME_1, CLASS_NAME_2, CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5
                                        ,ITEM_NO, ITEM_NAME, PACK_NUM, FACTORY_TYPE, SPEC_1, ITEM_TYPE
                                        ,GRADE_CODE, PACKING_TYPE, PACKING_NAME, MAKER
                              ) wk,
                              ( select   a1.ITEM_NO
                                        ,a1.FISCAL_HALF
                                        ,sum(a1.QTY) as AMT_QTY
                                        ,a1.SALES_CHANNELS_CODE
                                        ,a1.SALES_CHANNELS_NAME
                                        ,a2.TOTAL_AMT_QTY
                                from     SALES_CHANNELS_AMT_HALF_FDK a1
                                        ,( select   COMPANY_CODE
                                                   ,ITEM_NO
                                                   ,FISCAL_HALF
                                                   ,sum(QTY) as TOTAL_AMT_QTY
                                           from     SALES_CHANNELS_AMT_HALF_FDK
                                           where    FISCAL_HALF   like wk_nendo || '%' -- <param>
                                             and    COMPANY_CODE = c_company_code_fdk -- ??? 
                                           group by COMPANY_CODE, ITEM_NO, FISCAL_HALF
                                         ) a2
                                where    a1.COMPANY_CODE = a2.COMPANY_CODE
                                  and    a1.ITEM_NO      = a2.ITEM_NO
                                  and    a1.FISCAL_HALF = a2.FISCAL_HALF
                                group by a1.ITEM_NO, a1.FISCAL_HALF, a1.SALES_CHANNELS_CODE, a1.SALES_CHANNELS_NAME,  a2.TOTAL_AMT_QTY
                              ) amt
                     where    wk.ITEM_NO      = amt.ITEM_NO (+)
                       and    wk.FISCAL_HALF = amt.FISCAL_HALF (+)
                    ) main
                   ,SALES_CHANNELS sc
            where   main.SALES_CHANNELS_CODE = sc.SALES_CHANNELS_CODE (+) 
            )
    order by ITEM_NO, FISCAL_HALF, ROW_NUM desc
    ;
  
  C2_REC C2%ROWTYPE := null;

  -- -------------------------------------------------------------------------------------
BEGIN
    -- ?????????
    p_err_code := 0;

    -- *************************************************************
	-- (1) DELETE 
    -- *************************************************************
    delete from SALES_CHANNELS_QTY_HALF
    where  FISCAL_HALF  like wk_nendo || '%'
    ;

    -- *************************************************************
	-- (2) INSERT
    -- *************************************************************
    -- -------------------------------------------------------------
    --   (2)-1 ????????????
    -- -------------------------------------------------------------
    OPEN C1;
    LOOP
      FETCH C1 INTO C1_REC;
      EXIT WHEN C1%notfound or C1%notfound is null;
      
      IF C1%found THEN
        -- -------------------------------------------------------------
        -- INSERT
        -- -------------------------------------------------------------
        insert into SALES_CHANNELS_QTY_HALF
            (FISCAL_HALF, COMPANY_CODE, COMPANY_NAME, SALES_CHANNELS_CODE, 
                 SALES_CHANNELS_NAME, CLASS_CODE, CLASS_NAME_1, CLASS_NAME_2, 
                 CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5, ITEM_NO, ITEM_NAME, PACK_NUM, 
                 FACTORY_TYPE, SPEC_1, ITEM_TYPE, GRADE_CODE, PACKING_TYPE, 
                 PACKING_NAME, MAKER, QTY, QTY_CELL, REG_DATE)
         values
            (C1_REC.FISCAL_HALF, C1_REC.COMPANY_CODE, C1_REC.COMPANY_NAME, C1_REC.SALES_CHANNELS_CODE_X, 
                 C1_REC.SALES_CHANNELS_NAME, C1_REC.CLASS_CODE, C1_REC.CLASS_NAME_1, C1_REC.CLASS_NAME_2, 
                 C1_REC.CLASS_NAME_3, C1_REC.CLASS_NAME_4, C1_REC.CLASS_NAME_5, C1_REC.ITEM_NO, C1_REC.ITEM_NAME, C1_REC.PACK_NUM, 
                 C1_REC.FACTORY_TYPE, C1_REC.SPEC_1, C1_REC.ITEM_TYPE, C1_REC.GRADE_CODE, C1_REC.PACKING_TYPE, 
                 C1_REC.PACKING_NAME, C1_REC.MAKER, C1_REC.QTY, C1_REC.QTY_CELL, sysdate
             )
         ;

      END IF;

    END LOOP;
    CLOSE C1;

    -- -------------------------------------------------------------
    --   (2)-2 ?????????????
    -- -------------------------------------------------------------
    OPEN C2;
    LOOP
      FETCH C2 INTO C2_REC;
      EXIT WHEN C2%notfound or C2%notfound is null;
      
      -- ???
      wk_qty_new := 0;

      IF C2%found THEN
        
        -- -------------------------------------------------------------
        -- ?????????
        --    ? ?????????????????
        --       ??????????????????????????????
        -- -------------------------------------------------------------
        IF C2_REC.ROW_NUM > 1 THEN
          -- ??????(wk_qty_new)?????wk_qty_tmp ?????
          wk_qty_new := trunc( C2_REC.AMT_QTY_PER * C2_REC.WK_QTY );
          wk_qty_tmp := wk_qty_tmp + wk_qty_new;

        ELSE
          --??????????????
          -- ????? ? ???????????????????????
          wk_qty_new := C2_REC.WK_QTY - wk_qty_tmp;
          wk_qty_tmp := 0;
        END IF;
        
        -- -------------------------------------------------------------
        -- INSERT
        -- -------------------------------------------------------------
        insert into SALES_CHANNELS_QTY_HALF
            (FISCAL_HALF, COMPANY_CODE, COMPANY_NAME, SALES_CHANNELS_CODE, 
	         SALES_CHANNELS_NAME, CLASS_CODE, CLASS_NAME_1, CLASS_NAME_2, 
	         CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5, ITEM_NO, ITEM_NAME, PACK_NUM, 
	         FACTORY_TYPE, SPEC_1, ITEM_TYPE, GRADE_CODE, PACKING_TYPE, 
	         PACKING_NAME, MAKER, 
             QTY,
             QTY_CELL,
             REG_DATE)
         values
            (C2_REC.FISCAL_HALF, C2_REC.COMPANY_CODE, C2_REC.COMPANY_NAME, C2_REC.SALES_CHANNELS_CODE, 
	         C2_REC.SALES_CHANNELS_NAME, C2_REC.CLASS_CODE, C2_REC.CLASS_NAME_1, C2_REC.CLASS_NAME_2, 
	         C2_REC.CLASS_NAME_3, C2_REC.CLASS_NAME_4, C2_REC.CLASS_NAME_5, C2_REC.ITEM_NO, C2_REC.ITEM_NAME, C2_REC.PACK_NUM, 
	         C2_REC.FACTORY_TYPE, C2_REC.SPEC_1, C2_REC.ITEM_TYPE, C2_REC.GRADE_CODE, C2_REC.PACKING_TYPE, 
	         C2_REC.PACKING_NAME, C2_REC.MAKER, 
             wk_qty_new,
             wk_qty_new * C2_REC.PACK_NUM,
             sysdate)
         ;

      END IF;

    END LOOP;
    CLOSE C2;

    -- -------------------------------------------------------------
    --   (2)-3 ENR??
    -- -------------------------------------------------------------
    insert into SALES_CHANNELS_QTY_HALF
          (FISCAL_HALF, COMPANY_CODE, COMPANY_NAME, SALES_CHANNELS_CODE,
           SALES_CHANNELS_NAME, CLASS_CODE, CLASS_NAME_1, CLASS_NAME_2,
           CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5, ITEM_NO, ITEM_NAME, PACK_NUM,
           FACTORY_TYPE, SPEC_1, ITEM_TYPE, GRADE_CODE, PACKING_TYPE,
           PACKING_NAME, MAKER, QTY, QTY_CELL, REG_DATE)
    select FISCAL_HALF, COMPANY_CODE, COMPANY_NAME, SALES_CHANNELS_CODE,
           SALES_CHANNELS_NAME, CLASS_CODE, CLASS_NAME_1, CLASS_NAME_2,
           CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5, ITEM_NO, ITEM_NAME, PACK_NUM,
           FACTORY_TYPE, SPEC_1, ITEM_TYPE, GRADE_CODE, PACKING_TYPE,
           PACKING_NAME, MAKER, QTY, QTY_CELL, SYSDATE
    from   SALES_CHANNELS_QTY_HALF_WK
    where  FISCAL_HALF   like wk_nendo || '%'
      and  SALES_CHANNELS_CODE  = '72'
    ;

    -- -------------------------------------------------------------
    --   (2)-4 OTHES??
    -- -------------------------------------------------------------
    insert into SALES_CHANNELS_QTY_HALF
          (FISCAL_HALF, COMPANY_CODE, COMPANY_NAME, SALES_CHANNELS_CODE,
           SALES_CHANNELS_NAME, CLASS_CODE, CLASS_NAME_1, CLASS_NAME_2,
           CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5, ITEM_NO, ITEM_NAME, PACK_NUM,
           FACTORY_TYPE, SPEC_1, ITEM_TYPE, GRADE_CODE, PACKING_TYPE,
           PACKING_NAME, MAKER, QTY, QTY_CELL, REG_DATE)
    select FISCAL_HALF, COMPANY_CODE, COMPANY_NAME, '99',
           'OTHER', CLASS_CODE, CLASS_NAME_1, CLASS_NAME_2,
           CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5, ITEM_NO, ITEM_NAME, PACK_NUM,
           FACTORY_TYPE, SPEC_1, ITEM_TYPE, GRADE_CODE, PACKING_TYPE,
           PACKING_NAME, MAKER, QTY, QTY_CELL, SYSDATE
    from   SALES_CHANNELS_QTY_HALF_WK
    where  FISCAL_HALF   like wk_nendo || '%'
      and  SALES_CHANNELS_CODE  NOT IN ('996295','72')
   ;
  -- -----------------------------------------------------------------------------------------------
  EXCEPTION
    WHEN OTHERS THEN
      -- ?????????
      p_err_code := 1;
      
      -- ????????
      ROLLBACK;

      -- ?????
      DBMS_OUTPUT.PUT_LINE('ERROR. <PROC_SALES_CHANNELS_QTY_HALF>');
      DBMS_OUTPUT.PUT_LINE('ERR_CODE=' || SQLCODE ||', ERR_MSG=' || SQLERRM(SQLCODE) );

END PROC_SALES_CHANNELS_QTY_HALF ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."PROC_SALES_CHANNELS_QTY_MONTH" (
  p_ym           IN NUMBER,
  p_err_code     OUT NUMBER
)
IS
/*
======================================================================
(C)2014 FDK CORPORATION

??????????????????????????????

?????  ?
  param1[IN]  : p_ym           ????   ?yyyymm???
  param2[OUT] : p_err_code     ??????

????
----------------------------------------------------------------------
  Ver    Date        Author          Memo
----------------------------------------------------------------------
  1.0    2014/12/08  NTTk)??       ????
  1.1    2014/12/19  Y.Hagai         ?????
======================================================================
*/

  -- ??????????
  c_company_code_fdk  SALES_CHANNELS_QTY_MONTH.COMPANY_CODE%TYPE := 996130;

  -- ???????
  wk_qty_new SALES_CHANNELS_QTY_MONTH.QTY%TYPE := 0;
  -- ????????? 
  wk_qty_tmp SALES_CHANNELS_QTY_MONTH.QTY%TYPE := 0;
  
  -- ??
  wk_nendo VARCHAR2(4) := GET_NENDO(to_char(p_ym));  -- [yyyy ??]
  
  -- -------------------------------------------------------------------------------------
  -- ?????? ????????????SONY,??,??,????,PANA,ENR,?????
  -- -------------------------------------------------------------------------------------
  CURSOR C1 IS
        select   main.*,
                 sc.SALES_CHANNELS_NAME
        from     ( select wk.FISCAL_MONTH,
                      wk.COMPANY_CODE,
                      wk.COMPANY_NAME,
                      wk.CLASS_CODE,
                      wk.CLASS_NAME_1,
                      wk.CLASS_NAME_2,
                      wk.CLASS_NAME_3,
                      wk.CLASS_NAME_4,
                      wk.CLASS_NAME_5,
                      wk.ITEM_NO,
                      wk.ITEM_NAME,
                      wk.PACK_NUM,
                      wk.FACTORY_TYPE,
                      wk.SPEC_1,
                      wk.ITEM_TYPE,
                      wk.GRADE_CODE,
                      wk.PACKING_TYPE,
                      wk.PACKING_NAME,
                      wk.MAKER,
                      wk.QTY,
                      wk.QTY_CELL,
                      SPEC_TO_SALES_CHANNELS_FI(wk.SPEC_1) as SALES_CHANNELS_CODE_X
                   from   SALES_CHANNELS_QTY_MONTH_WK wk
                   where  to_char(FISCAL_MONTH) >= wk_nendo || '04'    -- <param>
                     and  to_char(FISCAL_MONTH) <= to_char(p_ym)       -- <param>
--                     and  SALES_CHANNELS_CODE    = '996295'
                     and  SALES_CHANNELS_CODE   in ( '996295','77')
                     and  substr(to_char(wk.SPEC_1), 1, 2) >= '70'
                     and  substr(to_char(wk.SPEC_1), 1, 2) <= '80'
                 ) main,
                 SALES_CHANNELS sc
        where    main.SALES_CHANNELS_CODE_X = sc.SALES_CHANNELS_CODE (+)
        order by main.ITEM_NO, main.FISCAL_MONTH
       ;
  
  C1_REC C1%ROWTYPE := null;

  -- -------------------------------------------------------------------------------------
  -- ?????? ?????????????
  -- -------------------------------------------------------------------------------------
  CURSOR C2 IS
    select *
    from   ( select  row_number() over ( partition by main.ITEM_NO, main.FISCAL_MONTH
                                         order by main.ITEM_NO, main.FISCAL_MONTH, main.AMT_QTY_PER desc ) as ROW_NUM
                    ,main.*
                    ,case
                       when SALES_CHANNELS_NAME_TEMP is null then
                         sc.SALES_CHANNELS_NAME
                       else
                         main.SALES_CHANNELS_NAME_TEMP
                     end as SALES_CHANNELS_NAME
            from   ( select  wk.*
                            ,case
                               when nvl(amt.TOTAL_AMT_QTY, 0) = 0 then
                                 1
                               else
                                 round(amt.AMT_QTY / amt.TOTAL_AMT_QTY, 4)
                             end as AMT_QTY_PER
                            ,case
                               when nvl(amt.TOTAL_AMT_QTY, 0) = 0 then
                                 SPEC_TO_SALES_CHANNELS_FI(wk.SPEC_1)
                               else
                                 amt.SALES_CHANNELS_CODE
                             end as SALES_CHANNELS_CODE
                            ,case
                               when nvl(amt.TOTAL_AMT_QTY, 0) = 0 then
                                 null
                               else
                                 amt.SALES_CHANNELS_NAME
                             end as SALES_CHANNELS_NAME_TEMP
                     
                     from     ( select   FISCAL_MONTH, COMPANY_CODE, COMPANY_NAME, CLASS_CODE
                                        ,CLASS_NAME_1, CLASS_NAME_2, CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5
                                        ,ITEM_NO, ITEM_NAME, PACK_NUM, FACTORY_TYPE, SPEC_1, ITEM_TYPE
                                        ,GRADE_CODE, PACKING_TYPE, PACKING_NAME, MAKER
                                        ,sum(QTY) as WK_QTY
                                from     SALES_CHANNELS_QTY_MONTH_WK
                                where    to_char(FISCAL_MONTH) >= wk_nendo || '04'    -- <param>
                                  and    to_char(FISCAL_MONTH) <= to_char(p_ym)       -- <param>
                                  and    SALES_CHANNELS_CODE    = '996295'
                                  and    ( substr(to_char(SPEC_1), 1, 2) < '70'
                                           or substr(to_char(SPEC_1), 1, 2) > '80')
                                group by FISCAL_MONTH, COMPANY_CODE, COMPANY_NAME, CLASS_CODE
                                        ,CLASS_NAME_1, CLASS_NAME_2, CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5
                                        ,ITEM_NO, ITEM_NAME, PACK_NUM, FACTORY_TYPE, SPEC_1, ITEM_TYPE
                                        ,GRADE_CODE, PACKING_TYPE, PACKING_NAME, MAKER
                              ) wk,
                              ( select   a1.ITEM_NO
                                        ,a1.FISCAL_MONTH
                                        ,sum(a1.QTY) as AMT_QTY
                                        ,a1.SALES_CHANNELS_CODE
                                        ,a1.SALES_CHANNELS_NAME
                                        ,a2.TOTAL_AMT_QTY
                                from     SALES_CHANNELS_AMT_MONTH_FDK a1
                                        ,( select   COMPANY_CODE
                                                   ,ITEM_NO
                                                   ,FISCAL_MONTH
                                                   ,sum(QTY) as TOTAL_AMT_QTY
                                           from     SALES_CHANNELS_AMT_MONTH_FDK
                                           where    to_char(FISCAL_MONTH) >= wk_nendo || '04' -- <param>
                                             and    to_char(FISCAL_MONTH) <= to_char(p_ym)    -- <param>
                                             and    COMPANY_CODE = c_company_code_fdk         -- ??? 
                                           group by COMPANY_CODE, ITEM_NO, FISCAL_MONTH
                                         ) a2
                                where    a1.COMPANY_CODE = a2.COMPANY_CODE
                                  and    a1.ITEM_NO      = a2.ITEM_NO
                                  and    a1.FISCAL_MONTH = a2.FISCAL_MONTH
                                group by a1.ITEM_NO, a1.FISCAL_MONTH, a1.SALES_CHANNELS_CODE, a1.SALES_CHANNELS_NAME,  a2.TOTAL_AMT_QTY
                              ) amt
                     where    wk.ITEM_NO      = amt.ITEM_NO (+)
                       and    wk.FISCAL_MONTH = amt.FISCAL_MONTH (+)
                    ) main
                   ,SALES_CHANNELS sc
            where   main.SALES_CHANNELS_CODE = sc.SALES_CHANNELS_CODE (+) 
            )
    order by ITEM_NO, FISCAL_MONTH, ROW_NUM desc
    ;
  
  C2_REC C2%ROWTYPE := null;

  -- -------------------------------------------------------------------------------------
BEGIN
    
    -- ?????????
    p_err_code := 0;

    -- *************************************************************
    -- (1) DELETE 
    -- *************************************************************
    delete from SALES_CHANNELS_QTY_MONTH
    where  to_char(FISCAL_MONTH) >= wk_nendo || '04'
      and  to_char(FISCAL_MONTH) <= to_char(p_ym) 
    ;
    

    -- *************************************************************
    -- (2) INSERT
    -- *************************************************************
    -- -------------------------------------------------------------
    --   (2)-1 ????????????
    -- -------------------------------------------------------------
    OPEN C1;
    LOOP
      FETCH C1 INTO C1_REC;
      EXIT WHEN C1%notfound or C1%notfound is null;
      
      IF C1%found THEN
        -- -------------------------------------------------------------
        -- INSERT
        -- -------------------------------------------------------------
        insert into SALES_CHANNELS_QTY_MONTH
            (FISCAL_MONTH, COMPANY_CODE, COMPANY_NAME, SALES_CHANNELS_CODE, 
                 SALES_CHANNELS_NAME, CLASS_CODE, CLASS_NAME_1, CLASS_NAME_2, 
                 CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5, ITEM_NO, ITEM_NAME, PACK_NUM, 
                 FACTORY_TYPE, SPEC_1, ITEM_TYPE, GRADE_CODE, PACKING_TYPE, 
                 PACKING_NAME, MAKER, QTY, QTY_CELL, REG_DATE)
         values
            (C1_REC.FISCAL_MONTH, C1_REC.COMPANY_CODE, C1_REC.COMPANY_NAME, C1_REC.SALES_CHANNELS_CODE_X, 
                 C1_REC.SALES_CHANNELS_NAME, C1_REC.CLASS_CODE, C1_REC.CLASS_NAME_1, C1_REC.CLASS_NAME_2, 
                 C1_REC.CLASS_NAME_3, C1_REC.CLASS_NAME_4, C1_REC.CLASS_NAME_5, C1_REC.ITEM_NO, C1_REC.ITEM_NAME, C1_REC.PACK_NUM, 
                 C1_REC.FACTORY_TYPE, C1_REC.SPEC_1, C1_REC.ITEM_TYPE, C1_REC.GRADE_CODE, C1_REC.PACKING_TYPE, 
                 C1_REC.PACKING_NAME, C1_REC.MAKER, C1_REC.QTY, C1_REC.QTY_CELL, sysdate
             )
         ;

      END IF;

    END LOOP;
    CLOSE C1;

    -- -------------------------------------------------------------
    --   (2)-2 ?????????????
    -- -------------------------------------------------------------
    OPEN C2;
    LOOP
      FETCH C2 INTO C2_REC;
      EXIT WHEN C2%notfound or C2%notfound is null;
      
      -- ???
      wk_qty_new := 0;

      IF C2%found THEN
        
        -- -------------------------------------------------------------
        -- ?????????
        --    ? ?????????????????
        --       ??????????????????????????????
        -- -------------------------------------------------------------
        IF C2_REC.ROW_NUM > 1 THEN
          -- ??????(wk_qty_new)?????wk_qty_tmp ?????
          wk_qty_new := trunc( C2_REC.AMT_QTY_PER * C2_REC.WK_QTY );
          wk_qty_tmp := wk_qty_tmp + wk_qty_new;

        ELSE
          --??????????????
          -- ????? ? ???????????????????????
          wk_qty_new := C2_REC.WK_QTY - wk_qty_tmp;
          wk_qty_tmp := 0;
        END IF;
        
        -- -------------------------------------------------------------
        -- INSERT
        -- -------------------------------------------------------------
        insert into SALES_CHANNELS_QTY_MONTH
            (FISCAL_MONTH, COMPANY_CODE, COMPANY_NAME, SALES_CHANNELS_CODE, 
	         SALES_CHANNELS_NAME, CLASS_CODE, CLASS_NAME_1, CLASS_NAME_2, 
	         CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5, ITEM_NO, ITEM_NAME, PACK_NUM, 
	         FACTORY_TYPE, SPEC_1, ITEM_TYPE, GRADE_CODE, PACKING_TYPE, 
	         PACKING_NAME, MAKER, 
             QTY,
             QTY_CELL,
             REG_DATE)
         values
            (C2_REC.FISCAL_MONTH, C2_REC.COMPANY_CODE, C2_REC.COMPANY_NAME, C2_REC.SALES_CHANNELS_CODE, 
	         C2_REC.SALES_CHANNELS_NAME, C2_REC.CLASS_CODE, C2_REC.CLASS_NAME_1, C2_REC.CLASS_NAME_2, 
	         C2_REC.CLASS_NAME_3, C2_REC.CLASS_NAME_4, C2_REC.CLASS_NAME_5, C2_REC.ITEM_NO, C2_REC.ITEM_NAME, C2_REC.PACK_NUM, 
	         C2_REC.FACTORY_TYPE, C2_REC.SPEC_1, C2_REC.ITEM_TYPE, C2_REC.GRADE_CODE, C2_REC.PACKING_TYPE, 
	         C2_REC.PACKING_NAME, C2_REC.MAKER, 
             wk_qty_new,
             wk_qty_new * C2_REC.PACK_NUM,
             sysdate)
         ;

      END IF;

    END LOOP;
    CLOSE C2;

    -- -------------------------------------------------------------
    --   (2)-3 ENR??
    -- -------------------------------------------------------------
    insert into SALES_CHANNELS_QTY_MONTH
          (FISCAL_MONTH, COMPANY_CODE, COMPANY_NAME, SALES_CHANNELS_CODE,
           SALES_CHANNELS_NAME, CLASS_CODE, CLASS_NAME_1, CLASS_NAME_2,
           CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5, ITEM_NO, ITEM_NAME, PACK_NUM,
           FACTORY_TYPE, SPEC_1, ITEM_TYPE, GRADE_CODE, PACKING_TYPE,
           PACKING_NAME, MAKER, QTY, QTY_CELL, REG_DATE)
    select FISCAL_MONTH, COMPANY_CODE, COMPANY_NAME, SALES_CHANNELS_CODE,
           SALES_CHANNELS_NAME, CLASS_CODE, CLASS_NAME_1, CLASS_NAME_2,
           CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5, ITEM_NO, ITEM_NAME, PACK_NUM,
           FACTORY_TYPE, SPEC_1, ITEM_TYPE, GRADE_CODE, PACKING_TYPE,
           PACKING_NAME, MAKER, QTY, QTY_CELL, SYSDATE
    from   SALES_CHANNELS_QTY_MONTH_WK
    where  to_char(FISCAL_MONTH) >= wk_nendo || '04'
      and  to_char(FISCAL_MONTH) <= to_char(p_ym) 
      and  SALES_CHANNELS_CODE  = '72'
    ;
    -- -------------------------------------------------------------
    --   (2)-4 OTHES??
    -- -------------------------------------------------------------
    insert into SALES_CHANNELS_QTY_MONTH
          (FISCAL_MONTH, COMPANY_CODE, COMPANY_NAME, SALES_CHANNELS_CODE,
           SALES_CHANNELS_NAME, CLASS_CODE, CLASS_NAME_1, CLASS_NAME_2,
           CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5, ITEM_NO, ITEM_NAME, PACK_NUM,
           FACTORY_TYPE, SPEC_1, ITEM_TYPE, GRADE_CODE, PACKING_TYPE,
           PACKING_NAME, MAKER, QTY, QTY_CELL, REG_DATE)
    select FISCAL_MONTH, COMPANY_CODE, COMPANY_NAME, '99',
           'OTHER', CLASS_CODE, CLASS_NAME_1, CLASS_NAME_2,
           CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5, ITEM_NO, ITEM_NAME, PACK_NUM,
           FACTORY_TYPE, SPEC_1, ITEM_TYPE, GRADE_CODE, PACKING_TYPE,
           PACKING_NAME, MAKER, QTY, QTY_CELL, SYSDATE
    from   SALES_CHANNELS_QTY_MONTH_WK
    where  to_char(FISCAL_MONTH) >= wk_nendo || '04'
      and  to_char(FISCAL_MONTH) <= to_char(p_ym) 
      and  SALES_CHANNELS_CODE  NOT IN ('996295','72','77')
   ;

  -- -----------------------------------------------------------------------------------------------
  EXCEPTION
    WHEN OTHERS THEN
      -- ?????????
      p_err_code := 1;
      
      -- ????????
      ROLLBACK;

      -- ?????
      DBMS_OUTPUT.PUT_LINE('ERROR. <PROC_SALES_CHANNELS_QTY_MONTH>');
      DBMS_OUTPUT.PUT_LINE('ERR_CODE=' || SQLCODE ||', ERR_MSG=' || SQLERRM(SQLCODE) );

END PROC_SALES_CHANNELS_QTY_MONTH ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."PROC_SALES_CHANNELS_QTY_QTR" (
  p_ym           IN NUMBER,
  p_err_code     OUT NUMBER
)
IS
/*
======================================================================
(C)2014 FDK CORPORATION

??????????????????????????????

?????  ?
  param1[IN]  : p_ym           ????   ?yyyymm???
  param2[OUT] : p_err_code     ??????

????
----------------------------------------------------------------------
  Ver    Date        Author          Memo
----------------------------------------------------------------------
  1.0    2014/12/08  NTTk)??       ????
  1.1    2014/12/19  Y.Hagai         ?????
======================================================================
*/

  -- ??????????
  c_company_code_fdk  SALES_CHANNELS_QTY_QTR.COMPANY_CODE%TYPE := 996130;

  -- ???????
  wk_qty_new SALES_CHANNELS_QTY_QTR.QTY%TYPE := 0;
  -- ????????? 
  wk_qty_tmp SALES_CHANNELS_QTY_QTR.QTY%TYPE := 0;
 
  -- ??
  wk_nendo VARCHAR2(4) := GET_NENDO(to_char(p_ym));  -- [yyyy ??]
  
  -- -------------------------------------------------------------------------------------
  -- ?????? ????????????SONY,??,??,????,PANA,ENR,?????
  -- -------------------------------------------------------------------------------------
  CURSOR C1 IS
        select   main.*,
                 sc.SALES_CHANNELS_NAME
        from     ( select wk.FISCAL_QTR,
                      wk.COMPANY_CODE,
                      wk.COMPANY_NAME,
                      wk.CLASS_CODE,
                      wk.CLASS_NAME_1,
                      wk.CLASS_NAME_2,
                      wk.CLASS_NAME_3,
                      wk.CLASS_NAME_4,
                      wk.CLASS_NAME_5,
                      wk.ITEM_NO,
                      wk.ITEM_NAME,
                      wk.PACK_NUM,
                      wk.FACTORY_TYPE,
                      wk.SPEC_1,
                      wk.ITEM_TYPE,
                      wk.GRADE_CODE,
                      wk.PACKING_TYPE,
                      wk.PACKING_NAME,
                      wk.MAKER,
                      wk.QTY,
                      wk.QTY_CELL,
                      SPEC_TO_SALES_CHANNELS_FI(wk.SPEC_1) as SALES_CHANNELS_CODE_X
                   from   SALES_CHANNELS_QTY_QTR_WK wk
                   where  FISCAL_QTR   like wk_nendo || '%' -- <param>
                     and  SALES_CHANNELS_CODE    = '996295'
                     and  substr(to_char(wk.SPEC_1), 1, 2) >= '70'
                     and  substr(to_char(wk.SPEC_1), 1, 2) <= '80'
                 ) main,
                 SALES_CHANNELS sc
        where    main.SALES_CHANNELS_CODE_X = sc.SALES_CHANNELS_CODE (+)
        order by main.ITEM_NO, main.FISCAL_QTR
       ;
  
  C1_REC C1%ROWTYPE := null;

  -- -------------------------------------------------------------------------------------
  -- ?????? ?????????????
  -- -------------------------------------------------------------------------------------
  CURSOR C2 IS
    select *
    from   ( select  row_number() over ( partition by main.ITEM_NO, main.FISCAL_QTR
                                         order by main.ITEM_NO, main.FISCAL_QTR, main.AMT_QTY_PER desc ) as ROW_NUM
                    ,main.*
                    ,case
                       when SALES_CHANNELS_NAME_TEMP is null then
                         sc.SALES_CHANNELS_NAME
                       else
                         main.SALES_CHANNELS_NAME_TEMP
                     end as SALES_CHANNELS_NAME
            from   ( select  wk.*
                            ,case
                               when nvl(amt.TOTAL_AMT_QTY, 0) = 0 then
                                 1
                               else
                                 round(amt.AMT_QTY / amt.TOTAL_AMT_QTY, 4)
                             end as AMT_QTY_PER
                            ,case
                               when nvl(amt.TOTAL_AMT_QTY, 0) = 0 then
                                 SPEC_TO_SALES_CHANNELS_FI(wk.SPEC_1)
                               else
                                 amt.SALES_CHANNELS_CODE
                             end as SALES_CHANNELS_CODE
                            ,case
                               when nvl(amt.TOTAL_AMT_QTY, 0) = 0 then
                                 null
                               else
                                 amt.SALES_CHANNELS_NAME
                             end as SALES_CHANNELS_NAME_TEMP
                     
                     from     ( select   FISCAL_QTR, COMPANY_CODE, COMPANY_NAME, CLASS_CODE
                                        ,CLASS_NAME_1, CLASS_NAME_2, CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5
                                        ,ITEM_NO, ITEM_NAME, PACK_NUM, FACTORY_TYPE, SPEC_1, ITEM_TYPE
                                        ,GRADE_CODE, PACKING_TYPE, PACKING_NAME, MAKER
                                        ,sum(QTY) as WK_QTY
                                from     SALES_CHANNELS_QTY_QTR_WK
                                where    FISCAL_QTR   like wk_nendo || '%' -- <param>
                                  and    SALES_CHANNELS_CODE    = '996295'
                                  and    ( substr(to_char(SPEC_1), 1, 2) < '70'
                                           or substr(to_char(SPEC_1), 1, 2) > '80')
                                group by FISCAL_QTR, COMPANY_CODE, COMPANY_NAME, CLASS_CODE
                                        ,CLASS_NAME_1, CLASS_NAME_2, CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5
                                        ,ITEM_NO, ITEM_NAME, PACK_NUM, FACTORY_TYPE, SPEC_1, ITEM_TYPE
                                        ,GRADE_CODE, PACKING_TYPE, PACKING_NAME, MAKER
                              ) wk,
                              ( select   a1.ITEM_NO
                                        ,a1.FISCAL_QTR
                                        ,sum(a1.QTY) as AMT_QTY
                                        ,a1.SALES_CHANNELS_CODE
                                        ,a1.SALES_CHANNELS_NAME
                                        ,a2.TOTAL_AMT_QTY
                                from     SALES_CHANNELS_AMT_QTR_FDK a1
                                        ,( select   COMPANY_CODE
                                                   ,ITEM_NO
                                                   ,FISCAL_QTR
                                                   ,sum(QTY) as TOTAL_AMT_QTY
                                           from     SALES_CHANNELS_AMT_QTR_FDK
                                           where    FISCAL_QTR   like wk_nendo || '%' -- <param>
                                             and    COMPANY_CODE = c_company_code_fdk -- ??? 
                                           group by COMPANY_CODE, ITEM_NO, FISCAL_QTR
                                         ) a2
                                where    a1.COMPANY_CODE = a2.COMPANY_CODE
                                  and    a1.ITEM_NO      = a2.ITEM_NO
                                  and    a1.FISCAL_QTR = a2.FISCAL_QTR
                                group by a1.ITEM_NO, a1.FISCAL_QTR, a1.SALES_CHANNELS_CODE, a1.SALES_CHANNELS_NAME,  a2.TOTAL_AMT_QTY
                              ) amt
                     where    wk.ITEM_NO      = amt.ITEM_NO (+)
                       and    wk.FISCAL_QTR = amt.FISCAL_QTR (+)
                    ) main
                   ,SALES_CHANNELS sc
            where   main.SALES_CHANNELS_CODE = sc.SALES_CHANNELS_CODE (+) 
            )
    order by ITEM_NO, FISCAL_QTR, ROW_NUM desc
    ;
  
  C2_REC C2%ROWTYPE := null;

  -- -------------------------------------------------------------------------------------
BEGIN
    -- ?????????
    p_err_code := 0;

    -- *************************************************************
	-- (1) DELETE 
    -- *************************************************************
    delete from SALES_CHANNELS_QTY_QTR
    where  FISCAL_QTR   like wk_nendo || '%'
    ;

    -- *************************************************************
	-- (2) INSERT
    -- *************************************************************
    -- -------------------------------------------------------------
    --   (2)-1 ????????????
    -- -------------------------------------------------------------
    OPEN C1;
    LOOP
      FETCH C1 INTO C1_REC;
      EXIT WHEN C1%notfound or C1%notfound is null;
      
      IF C1%found THEN
        -- -------------------------------------------------------------
        -- INSERT
        -- -------------------------------------------------------------
        insert into SALES_CHANNELS_QTY_QTR
            (FISCAL_QTR, COMPANY_CODE, COMPANY_NAME, SALES_CHANNELS_CODE, 
                 SALES_CHANNELS_NAME, CLASS_CODE, CLASS_NAME_1, CLASS_NAME_2, 
                 CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5, ITEM_NO, ITEM_NAME, PACK_NUM, 
                 FACTORY_TYPE, SPEC_1, ITEM_TYPE, GRADE_CODE, PACKING_TYPE, 
                 PACKING_NAME, MAKER, QTY, QTY_CELL, REG_DATE)
         values
            (C1_REC.FISCAL_QTR, C1_REC.COMPANY_CODE, C1_REC.COMPANY_NAME, C1_REC.SALES_CHANNELS_CODE_X, 
                 C1_REC.SALES_CHANNELS_NAME, C1_REC.CLASS_CODE, C1_REC.CLASS_NAME_1, C1_REC.CLASS_NAME_2, 
                 C1_REC.CLASS_NAME_3, C1_REC.CLASS_NAME_4, C1_REC.CLASS_NAME_5, C1_REC.ITEM_NO, C1_REC.ITEM_NAME, C1_REC.PACK_NUM, 
                 C1_REC.FACTORY_TYPE, C1_REC.SPEC_1, C1_REC.ITEM_TYPE, C1_REC.GRADE_CODE, C1_REC.PACKING_TYPE, 
                 C1_REC.PACKING_NAME, C1_REC.MAKER, C1_REC.QTY, C1_REC.QTY_CELL, sysdate
             )
         ;

      END IF;

    END LOOP;
    CLOSE C1;

    -- -------------------------------------------------------------
    --   (2)-2 ?????????????
    -- -------------------------------------------------------------
    OPEN C2;
    LOOP
      FETCH C2 INTO C2_REC;
      EXIT WHEN C2%notfound or C2%notfound is null;
      
      -- ???
      wk_qty_new := 0;

      IF C2%found THEN
        
        -- -------------------------------------------------------------
        -- ?????????
        --    ? ?????????????????
        --       ??????????????????????????????
        -- -------------------------------------------------------------
        IF C2_REC.ROW_NUM > 1 THEN
          -- ??????(wk_qty_new)?????wk_qty_tmp ?????
          wk_qty_new := trunc( C2_REC.AMT_QTY_PER * C2_REC.WK_QTY );
          wk_qty_tmp := wk_qty_tmp + wk_qty_new;

        ELSE
          --??????????????
          -- ????? ? ???????????????????????
          wk_qty_new := C2_REC.WK_QTY - wk_qty_tmp;
          wk_qty_tmp := 0;
        END IF;
        
        -- -------------------------------------------------------------
        -- INSERT
        -- -------------------------------------------------------------
        insert into SALES_CHANNELS_QTY_QTR
            (FISCAL_QTR, COMPANY_CODE, COMPANY_NAME, SALES_CHANNELS_CODE, 
	         SALES_CHANNELS_NAME, CLASS_CODE, CLASS_NAME_1, CLASS_NAME_2, 
	         CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5, ITEM_NO, ITEM_NAME, PACK_NUM, 
	         FACTORY_TYPE, SPEC_1, ITEM_TYPE, GRADE_CODE, PACKING_TYPE, 
	         PACKING_NAME, MAKER, 
             QTY,
             QTY_CELL,
             REG_DATE)
         values
            (C2_REC.FISCAL_QTR, C2_REC.COMPANY_CODE, C2_REC.COMPANY_NAME, C2_REC.SALES_CHANNELS_CODE, 
	         C2_REC.SALES_CHANNELS_NAME, C2_REC.CLASS_CODE, C2_REC.CLASS_NAME_1, C2_REC.CLASS_NAME_2, 
	         C2_REC.CLASS_NAME_3, C2_REC.CLASS_NAME_4, C2_REC.CLASS_NAME_5, C2_REC.ITEM_NO, C2_REC.ITEM_NAME, C2_REC.PACK_NUM, 
	         C2_REC.FACTORY_TYPE, C2_REC.SPEC_1, C2_REC.ITEM_TYPE, C2_REC.GRADE_CODE, C2_REC.PACKING_TYPE, 
	         C2_REC.PACKING_NAME, C2_REC.MAKER, 
             wk_qty_new,
             wk_qty_new * C2_REC.PACK_NUM,
             sysdate)
         ;

      END IF;

    END LOOP;
    CLOSE C2;

    -- -------------------------------------------------------------
    --   (2)-3 ENR??
    -- -------------------------------------------------------------
    insert into SALES_CHANNELS_QTY_QTR
          (FISCAL_QTR, COMPANY_CODE, COMPANY_NAME, SALES_CHANNELS_CODE,
           SALES_CHANNELS_NAME, CLASS_CODE, CLASS_NAME_1, CLASS_NAME_2,
           CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5, ITEM_NO, ITEM_NAME, PACK_NUM,
           FACTORY_TYPE, SPEC_1, ITEM_TYPE, GRADE_CODE, PACKING_TYPE,
           PACKING_NAME, MAKER, QTY, QTY_CELL, REG_DATE)
    select FISCAL_QTR, COMPANY_CODE, COMPANY_NAME, SALES_CHANNELS_CODE,
           SALES_CHANNELS_NAME, CLASS_CODE, CLASS_NAME_1, CLASS_NAME_2,
           CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5, ITEM_NO, ITEM_NAME, PACK_NUM,
           FACTORY_TYPE, SPEC_1, ITEM_TYPE, GRADE_CODE, PACKING_TYPE,
           PACKING_NAME, MAKER, QTY, QTY_CELL, SYSDATE
    from   SALES_CHANNELS_QTY_QTR_WK
    where  FISCAL_QTR   like wk_nendo || '%'
      and  SALES_CHANNELS_CODE  = '72'
    ;

    -- -------------------------------------------------------------
    --   (2)-4 OTHES??
    -- -------------------------------------------------------------
    insert into SALES_CHANNELS_QTY_QTR
          (FISCAL_QTR, COMPANY_CODE, COMPANY_NAME, SALES_CHANNELS_CODE,
           SALES_CHANNELS_NAME, CLASS_CODE, CLASS_NAME_1, CLASS_NAME_2,
           CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5, ITEM_NO, ITEM_NAME, PACK_NUM,
           FACTORY_TYPE, SPEC_1, ITEM_TYPE, GRADE_CODE, PACKING_TYPE,
           PACKING_NAME, MAKER, QTY, QTY_CELL, REG_DATE)
    select FISCAL_QTR, COMPANY_CODE, COMPANY_NAME, '99',
           'OTHER', CLASS_CODE, CLASS_NAME_1, CLASS_NAME_2,
           CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5, ITEM_NO, ITEM_NAME, PACK_NUM,
           FACTORY_TYPE, SPEC_1, ITEM_TYPE, GRADE_CODE, PACKING_TYPE,
           PACKING_NAME, MAKER, QTY, QTY_CELL, SYSDATE
    from   SALES_CHANNELS_QTY_QTR_WK
    where  FISCAL_QTR   like wk_nendo || '%'
      and  SALES_CHANNELS_CODE  NOT IN ('996295','72')
   ;

  -- -----------------------------------------------------------------------------------------------
  EXCEPTION
    WHEN OTHERS THEN
      -- ?????????
      p_err_code := 1;
      
      -- ????????
      ROLLBACK;

      -- ?????
      DBMS_OUTPUT.PUT_LINE('ERROR. <PROC_SALES_CHANNELS_QTY_QTR>');
      DBMS_OUTPUT.PUT_LINE('ERR_CODE=' || SQLCODE ||', ERR_MSG=' || SQLERRM(SQLCODE) );

END PROC_SALES_CHANNELS_QTY_QTR ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."PROC_SALES_CHANNELS_QTY_YEAR" (
  p_ym           IN NUMBER,
  p_err_code     OUT NUMBER
)
IS
/*
======================================================================
(C)2014 FDK CORPORATION

?????????????????????????????

?????  ?
  param1[IN]  : p_ym           ????   ?yyyymm???
  param2[OUT] : p_err_code     ??????

????
----------------------------------------------------------------------
  Ver    Date        Author          Memo
----------------------------------------------------------------------
  1.0    2014/12/08  NTTk)??       ????
  1.1    2014/12/19  Y.Hagai         ?????
======================================================================
*/

  -- ??????????
  c_company_code_fdk  SALES_CHANNELS_QTY_MONTH.COMPANY_CODE%TYPE := 996130;

  -- ???????
  wk_qty_new SALES_CHANNELS_QTY_YEAR.QTY%TYPE := 0;
  -- ????????? 
  wk_qty_tmp SALES_CHANNELS_QTY_YEAR.QTY%TYPE := 0;

  -- ??
  wk_nendo VARCHAR2(4) := GET_NENDO(to_char(p_ym));  -- [yyyy ??]
  
  -- -------------------------------------------------------------------------------------
  -- ?????? ????????????SONY,??,??,????,PANA,ENR,?????
  -- -------------------------------------------------------------------------------------
  CURSOR C1 IS
        select   main.*,
                 sc.SALES_CHANNELS_NAME
        from     ( select wk.FISCAL_YEAR,
                      wk.COMPANY_CODE,
                      wk.COMPANY_NAME,
                      wk.CLASS_CODE,
                      wk.CLASS_NAME_1,
                      wk.CLASS_NAME_2,
                      wk.CLASS_NAME_3,
                      wk.CLASS_NAME_4,
                      wk.CLASS_NAME_5,
                      wk.ITEM_NO,
                      wk.ITEM_NAME,
                      wk.PACK_NUM,
                      wk.FACTORY_TYPE,
                      wk.SPEC_1,
                      wk.ITEM_TYPE,
                      wk.GRADE_CODE,
                      wk.PACKING_TYPE,
                      wk.PACKING_NAME,
                      wk.MAKER,
                      wk.QTY,
                      wk.QTY_CELL,
                      SPEC_TO_SALES_CHANNELS_FI(wk.SPEC_1) as SALES_CHANNELS_CODE_X
                   from   SALES_CHANNELS_QTY_YEAR_WK wk
                   where  FISCAL_YEAR  = 'FY' || wk_nendo  -- <param>
                     and  SALES_CHANNELS_CODE  = '996295'
                     and  substr(to_char(wk.SPEC_1), 1, 2) >= '70'
                     and  substr(to_char(wk.SPEC_1), 1, 2) <= '80'
                 ) main,
                 SALES_CHANNELS sc
        where    main.SALES_CHANNELS_CODE_X = sc.SALES_CHANNELS_CODE (+)
        order by main.ITEM_NO, main.FISCAL_YEAR
       ;
  
  C1_REC C1%ROWTYPE := null;

  -- -------------------------------------------------------------------------------------
  -- ?????? ?????????????
  -- -------------------------------------------------------------------------------------
  CURSOR C2 IS
    select *
    from   ( select  row_number() over ( partition by main.ITEM_NO, main.FISCAL_YEAR
                                         order by main.ITEM_NO, main.FISCAL_YEAR, main.AMT_QTY_PER desc ) as ROW_NUM
                    ,main.*
                    ,case
                       when SALES_CHANNELS_NAME_TEMP is null then
                         sc.SALES_CHANNELS_NAME
                       else
                         main.SALES_CHANNELS_NAME_TEMP
                     end as SALES_CHANNELS_NAME
            from   ( select  wk.*
                            ,case
                               when nvl(amt.TOTAL_AMT_QTY, 0) = 0 then
                                 1
                               else
                                 round(amt.AMT_QTY / amt.TOTAL_AMT_QTY, 4)
                             end as AMT_QTY_PER
                            ,case
                               when nvl(amt.TOTAL_AMT_QTY, 0) = 0 then
                                 SPEC_TO_SALES_CHANNELS_FI(wk.SPEC_1)
                               else
                                 amt.SALES_CHANNELS_CODE
                             end as SALES_CHANNELS_CODE
                            ,case
                               when nvl(amt.TOTAL_AMT_QTY, 0) = 0 then
                                 null
                               else
                                 amt.SALES_CHANNELS_NAME
                             end as SALES_CHANNELS_NAME_TEMP
                     
                     from     ( select   FISCAL_YEAR, COMPANY_CODE, COMPANY_NAME, CLASS_CODE
                                        ,CLASS_NAME_1, CLASS_NAME_2, CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5
                                        ,ITEM_NO, ITEM_NAME, PACK_NUM, FACTORY_TYPE, SPEC_1, ITEM_TYPE
                                        ,GRADE_CODE, PACKING_TYPE, PACKING_NAME, MAKER
                                        ,sum(QTY) as WK_QTY
                                from     SALES_CHANNELS_QTY_YEAR_WK
                                where    FISCAL_YEAR  = 'FY' || wk_nendo  -- <param>
                                  and    SALES_CHANNELS_CODE    = '996295'
                                  and    ( substr(to_char(SPEC_1), 1, 2) < '70'
                                           or substr(to_char(SPEC_1), 1, 2) > '80')
                                group by FISCAL_YEAR, COMPANY_CODE, COMPANY_NAME, CLASS_CODE
                                        ,CLASS_NAME_1, CLASS_NAME_2, CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5
                                        ,ITEM_NO, ITEM_NAME, PACK_NUM, FACTORY_TYPE, SPEC_1, ITEM_TYPE
                                        ,GRADE_CODE, PACKING_TYPE, PACKING_NAME, MAKER
                              ) wk,
                              ( select   a1.ITEM_NO
                                        ,a1.FISCAL_YEAR
                                        ,sum(a1.QTY) as AMT_QTY
                                        ,a1.SALES_CHANNELS_CODE
                                        ,a1.SALES_CHANNELS_NAME
                                        ,a2.TOTAL_AMT_QTY
                                from     SALES_CHANNELS_AMT_YEAR_FDK a1
                                        ,( select   COMPANY_CODE
                                                   ,ITEM_NO
                                                   ,FISCAL_YEAR
                                                   ,sum(QTY) as TOTAL_AMT_QTY
                                           from     SALES_CHANNELS_AMT_YEAR_FDK
                                           where    FISCAL_YEAR  = 'FY' || wk_nendo  -- <param>
                                             and    COMPANY_CODE = c_company_code_fdk -- ??? 
                                           group by COMPANY_CODE, ITEM_NO, FISCAL_YEAR
                                         ) a2
                                where    a1.COMPANY_CODE = a2.COMPANY_CODE
                                  and    a1.ITEM_NO      = a2.ITEM_NO
                                  and    a1.FISCAL_YEAR = a2.FISCAL_YEAR
                                group by a1.ITEM_NO, a1.FISCAL_YEAR, a1.SALES_CHANNELS_CODE, a1.SALES_CHANNELS_NAME,  a2.TOTAL_AMT_QTY
                              ) amt
                     where    wk.ITEM_NO      = amt.ITEM_NO (+)
                       and    wk.FISCAL_YEAR = amt.FISCAL_YEAR (+)
                    ) main
                   ,SALES_CHANNELS sc
            where   main.SALES_CHANNELS_CODE = sc.SALES_CHANNELS_CODE (+) 
            )
    order by ITEM_NO, FISCAL_YEAR, ROW_NUM desc
    ;
  
  C2_REC C2%ROWTYPE := null;

  -- -------------------------------------------------------------------------------------
BEGIN
    -- ?????????
    p_err_code := 0;

    -- *************************************************************
	-- (1) DELETE 
    -- *************************************************************
    delete from SALES_CHANNELS_QTY_YEAR
    where  FISCAL_YEAR  = 'FY' || wk_nendo
    ;

    -- *************************************************************
	-- (2) INSERT
    -- *************************************************************
    -- -------------------------------------------------------------
    --   (2)-1 ????????????
    -- -------------------------------------------------------------
    OPEN C1;
    LOOP
      FETCH C1 INTO C1_REC;
      EXIT WHEN C1%notfound or C1%notfound is null;
      
      IF C1%found THEN
        -- -------------------------------------------------------------
        -- INSERT
        -- -------------------------------------------------------------
        insert into SALES_CHANNELS_QTY_YEAR
            (FISCAL_YEAR, COMPANY_CODE, COMPANY_NAME, SALES_CHANNELS_CODE, 
                 SALES_CHANNELS_NAME, CLASS_CODE, CLASS_NAME_1, CLASS_NAME_2, 
                 CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5, ITEM_NO, ITEM_NAME, PACK_NUM, 
                 FACTORY_TYPE, SPEC_1, ITEM_TYPE, GRADE_CODE, PACKING_TYPE, 
                 PACKING_NAME, MAKER, QTY, QTY_CELL, REG_DATE)
         values
            (C1_REC.FISCAL_YEAR, C1_REC.COMPANY_CODE, C1_REC.COMPANY_NAME, C1_REC.SALES_CHANNELS_CODE_X, 
                 C1_REC.SALES_CHANNELS_NAME, C1_REC.CLASS_CODE, C1_REC.CLASS_NAME_1, C1_REC.CLASS_NAME_2, 
                 C1_REC.CLASS_NAME_3, C1_REC.CLASS_NAME_4, C1_REC.CLASS_NAME_5, C1_REC.ITEM_NO, C1_REC.ITEM_NAME, C1_REC.PACK_NUM, 
                 C1_REC.FACTORY_TYPE, C1_REC.SPEC_1, C1_REC.ITEM_TYPE, C1_REC.GRADE_CODE, C1_REC.PACKING_TYPE, 
                 C1_REC.PACKING_NAME, C1_REC.MAKER, C1_REC.QTY, C1_REC.QTY_CELL, sysdate
             )
         ;

      END IF;

    END LOOP;
    CLOSE C1;

    -- -------------------------------------------------------------
    --   (2)-2 ?????????????
    -- -------------------------------------------------------------
    OPEN C2;
    LOOP
      FETCH C2 INTO C2_REC;
      EXIT WHEN C2%notfound or C2%notfound is null;
      
      -- ???
      wk_qty_new := 0;

      IF C2%found THEN
        
        -- -------------------------------------------------------------
        -- ?????????
        --    ? ?????????????????
        --       ??????????????????????????????
        -- -------------------------------------------------------------
        IF C2_REC.ROW_NUM > 1 THEN
          -- ??????(wk_qty_new)?????wk_qty_tmp ?????
          wk_qty_new := trunc( C2_REC.AMT_QTY_PER * C2_REC.WK_QTY );
          wk_qty_tmp := wk_qty_tmp + wk_qty_new;

        ELSE
          --??????????????
          -- ????? ? ???????????????????????
          wk_qty_new := C2_REC.WK_QTY - wk_qty_tmp;
          wk_qty_tmp := 0;
        END IF;
        
        -- -------------------------------------------------------------
        -- INSERT
        -- -------------------------------------------------------------
        insert into SALES_CHANNELS_QTY_YEAR
            (FISCAL_YEAR, COMPANY_CODE, COMPANY_NAME, SALES_CHANNELS_CODE, 
	         SALES_CHANNELS_NAME, CLASS_CODE, CLASS_NAME_1, CLASS_NAME_2, 
	         CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5, ITEM_NO, ITEM_NAME, PACK_NUM, 
	         FACTORY_TYPE, SPEC_1, ITEM_TYPE, GRADE_CODE, PACKING_TYPE, 
	         PACKING_NAME, MAKER, 
             QTY,
             QTY_CELL,
             REG_DATE)
         values
            (C2_REC.FISCAL_YEAR, C2_REC.COMPANY_CODE, C2_REC.COMPANY_NAME, C2_REC.SALES_CHANNELS_CODE, 
	         C2_REC.SALES_CHANNELS_NAME, C2_REC.CLASS_CODE, C2_REC.CLASS_NAME_1, C2_REC.CLASS_NAME_2, 
	         C2_REC.CLASS_NAME_3, C2_REC.CLASS_NAME_4, C2_REC.CLASS_NAME_5, C2_REC.ITEM_NO, C2_REC.ITEM_NAME, C2_REC.PACK_NUM, 
	         C2_REC.FACTORY_TYPE, C2_REC.SPEC_1, C2_REC.ITEM_TYPE, C2_REC.GRADE_CODE, C2_REC.PACKING_TYPE, 
	         C2_REC.PACKING_NAME, C2_REC.MAKER, 
             wk_qty_new,
             wk_qty_new * C2_REC.PACK_NUM,
             sysdate)
         ;

      END IF;

    END LOOP;
    CLOSE C2;

    -- -------------------------------------------------------------
        --   (2)-3 ENR??
    -- -------------------------------------------------------------
    insert into SALES_CHANNELS_QTY_YEAR
          (FISCAL_YEAR, COMPANY_CODE, COMPANY_NAME, SALES_CHANNELS_CODE,
           SALES_CHANNELS_NAME, CLASS_CODE, CLASS_NAME_1, CLASS_NAME_2,
           CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5, ITEM_NO, ITEM_NAME, PACK_NUM,
           FACTORY_TYPE, SPEC_1, ITEM_TYPE, GRADE_CODE, PACKING_TYPE,
           PACKING_NAME, MAKER, QTY, QTY_CELL, REG_DATE)
    select FISCAL_YEAR, COMPANY_CODE, COMPANY_NAME, SALES_CHANNELS_CODE,
           SALES_CHANNELS_NAME, CLASS_CODE, CLASS_NAME_1, CLASS_NAME_2,
           CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5, ITEM_NO, ITEM_NAME, PACK_NUM,
           FACTORY_TYPE, SPEC_1, ITEM_TYPE, GRADE_CODE, PACKING_TYPE,
           PACKING_NAME, MAKER, QTY, QTY_CELL, SYSDATE
    from   SALES_CHANNELS_QTY_YEAR_WK
    where    FISCAL_YEAR  = 'FY' || wk_nendo  
      and  SALES_CHANNELS_CODE  = '72'
    ;

    -- -------------------------------------------------------------
        --   (2)-4 OTHES??
    -- -------------------------------------------------------------
    insert into SALES_CHANNELS_QTY_YEAR
          (FISCAL_YEAR, COMPANY_CODE, COMPANY_NAME, SALES_CHANNELS_CODE,
           SALES_CHANNELS_NAME, CLASS_CODE, CLASS_NAME_1, CLASS_NAME_2,
           CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5, ITEM_NO, ITEM_NAME, PACK_NUM,
           FACTORY_TYPE, SPEC_1, ITEM_TYPE, GRADE_CODE, PACKING_TYPE,
           PACKING_NAME, MAKER, QTY, QTY_CELL, REG_DATE)
    select FISCAL_YEAR, COMPANY_CODE, COMPANY_NAME, '99',
           'OTHER', CLASS_CODE, CLASS_NAME_1, CLASS_NAME_2,
           CLASS_NAME_3, CLASS_NAME_4, CLASS_NAME_5, ITEM_NO, ITEM_NAME, PACK_NUM,
           FACTORY_TYPE, SPEC_1, ITEM_TYPE, GRADE_CODE, PACKING_TYPE,
           PACKING_NAME, MAKER, QTY, QTY_CELL, SYSDATE
    from   SALES_CHANNELS_QTY_YEAR_WK
    where    FISCAL_YEAR  = 'FY' || wk_nendo  
      and  SALES_CHANNELS_CODE  NOT IN ('996295','72')
   ;

  -- -----------------------------------------------------------------------------------------------
  EXCEPTION
    WHEN OTHERS THEN
      -- ?????????
      p_err_code := 1;
      
      -- ????????
      ROLLBACK;

      -- ?????
      DBMS_OUTPUT.PUT_LINE('ERROR. <PROC_SALES_CHANNELS_QTY_YEAR>');
      DBMS_OUTPUT.PUT_LINE('ERR_CODE=' || SQLCODE ||', ERR_MSG=' || SQLERRM(SQLCODE) );

END PROC_SALES_CHANNELS_QTY_YEAR ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."PROC_SO_DELIVERY_BAL" (
  v_so_no      in varchar2,
  v_so_line_no in number
)
/****************************************************************
  ????? SO_DELIVERY ? BAL_QTY??
  ???          ?2013/11/06
  ???          ?Y.Hagai
*****************************************************************/
as
begin
  declare
     cursor C1(PARAM1 in varchar2, PARAM2 in number) is
       select QTY -BAL_QTY  DEL_QTY 
         from SO_DETAILS
       where  SO_NO   = PARAM1
         and  LINE_NO = PARAM2;

     cursor C2(PARAM1 in varchar2, PARAM2 in number) is
       select SO_NO, SO_LINE_NO, DEL_LINE_NO, DEL_DATE, QTY, BAL_QTY
        from SO_DELIVERY
       where  SO_NO      = PARAM1
         and  SO_LINE_NO = PARAM2
        order by DEL_DATE 
        for update;

     C1_REC			C1%ROWTYPE := null;
     C2_REC			C2%ROWTYPE := null;
     WK_DEL_QTY 		SO_DETAILS.DEL_QTY%TYPE := 0;

  begin
           open C1(v_so_no,v_so_line_no) ;
             fetch C1 into C1_REC ;
           close C1;
        /*  1????????? */
        WK_DEL_QTY := C1_REC.DEL_QTY;

           /* BAL_QTY?DEL_QTY????*/   
           update SO_DELIVERY
              set bal_qty = qty,
                  del_qty = 0,
                  UPTO_DATE = sysdate
            where so_no = v_so_no
              and so_line_no = v_so_line_no;

           open C2(v_so_no,v_so_line_no) ;
             loop
             fetch C2 into C2_REC ;
             if C2%notfound or C2%notfound is null then
                goto LOOPEND;
             else
                if WK_DEL_QTY <= 0 then
                    goto LOOPEND;
                end if;
                if WK_DEL_QTY < C2_REC.QTY then
                    update  SO_DELIVERY
                      set  BAL_QTY   = BAL_QTY - WK_DEL_QTY,
                           DEL_QTY   =  WK_DEL_QTY,
                           UPTO_DATE = sysdate

                     where current of C2;
                    WK_DEL_QTY := WK_DEL_QTY - C2_REC.QTY;

                elsif WK_DEL_QTY >=  C2_REC.QTY then 
                    update  SO_DELIVERY
                      set  BAL_QTY   = 0,
                           DEL_QTY   = C2_REC.QTY,
                           UPTO_DATE = sysdate
                     where current of C2;
                    WK_DEL_QTY := WK_DEL_QTY - C2_REC.QTY;

                end if;
             end if;
            end loop ;
       <<LOOPEND>>
          close C2;

  end ;

end PROC_SO_DELIVERY_BAL ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."PRODUCT_ACTUAL_RESULTS_SET_FI" 
as
begin
   declare

    /* ?????????????? */
    cursor C1
    is
    select operation_date, seq, sheet_name, sheet_row, product_line, 
           product_line_no, wo_no, item_no, date_code, product_date,product_quantity, grade
      from actprod_up_wk;

    /* ?????? */
    cursor C2 (para in number)
    is
    select i.section_code,s.section,s.short_name
      from item i,section s
     where i.item_no = para
       and i.section_code = s.section_code(+);

    /* ?????????????? */
    cursor C3
    is
    select min(product_date) min_product_date ,trunc(sysdate)  today_date
      from actprod_up_wk;

    /* ???????? */
    cursor C4 (para in DATE)
    is
    select ac_month,ITEM_NO, WO_NO, PRODUCT_LINE, DATE_CODE, GRADE,
           sum("01") pln1,
           sum("02") pln2,
           sum("03") pln3,
           sum("04") pln4,
           sum("05") pln5,
           sum("06") pln6,
           sum("07") pln7,
           sum("08") pln8,
           sum("09") pln9,
           sum("10") pln10,
           sum("11") pln11,
           sum("12") pln12,
           sum("13") pln13,
           sum("14") pln14,
           sum("15") pln15,
           sum("16") pln16,
           sum("17") pln17,
           sum("18") pln18,
           sum("19") pln19,
           sum("20") pln20,
           sum("21") pln21,
           sum("22") pln22,
           sum("23") pln23,
           sum("24") pln24,
           sum("25") pln25,
           sum("26") pln26,
           sum("27") pln27,
           sum("28") pln28,
           sum("29") pln29,
           sum("30") pln30,
           sum("31") pln31
           from (
                 select trunc(KURAIRE_DATE,'mm') ac_month ,ITEM_NO, WO_NO, PRODUCT_LINE, DATE_CODE, GRADE, 
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '01', PRODUCT_QUANTITY) "01",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '02', PRODUCT_QUANTITY) "02",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '03', PRODUCT_QUANTITY) "03",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '04', PRODUCT_QUANTITY) "04",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '05', PRODUCT_QUANTITY) "05",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '06', PRODUCT_QUANTITY) "06",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '07', PRODUCT_QUANTITY) "07",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '08', PRODUCT_QUANTITY) "08",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '09', PRODUCT_QUANTITY) "09",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '10', PRODUCT_QUANTITY) "10",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '11', PRODUCT_QUANTITY) "11",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '12', PRODUCT_QUANTITY) "12",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '13', PRODUCT_QUANTITY) "13",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '14', PRODUCT_QUANTITY) "14",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '15', PRODUCT_QUANTITY) "15",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '16', PRODUCT_QUANTITY) "16",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '17', PRODUCT_QUANTITY) "17",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '18', PRODUCT_QUANTITY) "18",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '19', PRODUCT_QUANTITY) "19",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '20', PRODUCT_QUANTITY) "20",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '21', PRODUCT_QUANTITY) "21",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '22', PRODUCT_QUANTITY) "22",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '23', PRODUCT_QUANTITY) "23",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '24', PRODUCT_QUANTITY) "24",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '25', PRODUCT_QUANTITY) "25",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '26', PRODUCT_QUANTITY) "26",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '27', PRODUCT_QUANTITY) "27",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '28', PRODUCT_QUANTITY) "28",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '29', PRODUCT_QUANTITY) "29",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '30', PRODUCT_QUANTITY) "30",
                        DECODE(TO_CHAR(KURAIRE_DATE, 'DD'), '31', PRODUCT_QUANTITY) "31" 
                from PRODUCT_PLAN_PROGRESS_REPORT)
                 where ac_month >= para
                 group by ac_month,ITEM_NO, WO_NO, ITEM_NO, PRODUCT_LINE, DATE_CODE, GRADE;

    /* ???????? */
--2010/0803 ??
--    cursor C5 (para1 in date,para2 in number,para3 in varchar2,para4 in varchar2)
    cursor C5 (para1 in date,para2 in number,para3 in varchar2)
    is
    select ac_month, item_no, wo_no, product_line
      from production_comparison_monthly
     where ac_month         = para1
       and item_no          = para2
       and wo_no            = para3
--2010/0803 ??
--       and nvl(product_line,' ')     = nvl(para4, ' ')
     for update;

    /* ?????????????? */
    cursor C6
    is
    select ac_month,ITEM_NO, WO_NO, PRODUCT_LINE, DATE_CODE, GRADE,
           sum("01") act1,
           sum("02") act2,
           sum("03") act3,
           sum("04") act4,
           sum("05") act5,
           sum("06") act6,
           sum("07") act7,
           sum("08") act8,
           sum("09") act9,
           sum("10") act10,
           sum("11") act11,
           sum("12") act12,
           sum("13") act13,
           sum("14") act14,
           sum("15") act15,
           sum("16") act16,
           sum("17") act17,
           sum("18") act18,
           sum("19") act19,
           sum("20") act20,
           sum("21") act21,
           sum("22") act22,
           sum("23") act23,
           sum("24") act24,
           sum("25") act25,
           sum("26") act26,
           sum("27") act27,
           sum("28") act28,
           sum("29") act29,
           sum("30") act30,
           sum("31") act31
           from (
                 select trunc(PRODUCT_DATE,'mm') ac_month ,ITEM_NO, WO_NO, PRODUCT_LINE, DATE_CODE, GRADE, 
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '01', PRODUCT_QUANTITY) "01",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '02', PRODUCT_QUANTITY) "02",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '03', PRODUCT_QUANTITY) "03",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '04', PRODUCT_QUANTITY) "04",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '05', PRODUCT_QUANTITY) "05",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '06', PRODUCT_QUANTITY) "06",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '07', PRODUCT_QUANTITY) "07",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '08', PRODUCT_QUANTITY) "08",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '09', PRODUCT_QUANTITY) "09",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '10', PRODUCT_QUANTITY) "10",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '11', PRODUCT_QUANTITY) "11",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '12', PRODUCT_QUANTITY) "12",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '13', PRODUCT_QUANTITY) "13",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '14', PRODUCT_QUANTITY) "14",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '15', PRODUCT_QUANTITY) "15",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '16', PRODUCT_QUANTITY) "16",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '17', PRODUCT_QUANTITY) "17",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '18', PRODUCT_QUANTITY) "18",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '19', PRODUCT_QUANTITY) "19",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '20', PRODUCT_QUANTITY) "20",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '21', PRODUCT_QUANTITY) "21",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '22', PRODUCT_QUANTITY) "22",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '23', PRODUCT_QUANTITY) "23",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '24', PRODUCT_QUANTITY) "24",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '25', PRODUCT_QUANTITY) "25",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '26', PRODUCT_QUANTITY) "26",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '27', PRODUCT_QUANTITY) "27",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '28', PRODUCT_QUANTITY) "28",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '29', PRODUCT_QUANTITY) "29",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '30', PRODUCT_QUANTITY) "30",
                        DECODE(TO_CHAR(PRODUCT_DATE, 'DD'), '31', PRODUCT_QUANTITY) "31" 
                from ACTPROD_UP_WK)
                 group by ac_month,ITEM_NO, WO_NO, ITEM_NO, PRODUCT_LINE, DATE_CODE, GRADE;

    /* ???????? */
    cursor C7 (para1 in date)
    is
    select KURAIRE_DATE, ITEM_NO, WO_NO, PRODUCT_LINE, sum(PRODUCT_QUANTITY) PRODUCT_QUANTITY, DATE_CODE, GRADE
      from PRODUCT_PLAN_PROGRESS_REPORT
     where KURAIRE_DATE >= para1
     group by KURAIRE_DATE, ITEM_NO, WO_NO, PRODUCT_LINE, DATE_CODE, GRADE;

    /* ????????(??) */
--2010/0803 ??
--    cursor C8 (para1 in date,para2 in number,para3 in varchar2,para4 in varchar2)
    cursor C8 (para1 in date,para2 in number,para3 in varchar2)
    is
    select product_date, item_no, wo_no, product_line
      from production_comparison
     where product_date         = para1
       and item_no          = para2
       and wo_no            = para3
--2010/0803 ??
--       and nvl(product_line,' ')     = nvl(para4, ' ')
     for update;

    /* ???????? */
    cursor C9
    is
    select PRODUCT_DATE, ITEM_NO, WO_NO, PRODUCT_LINE, sum(PRODUCT_QUANTITY) PRODUCT_QUANTITY, DATE_CODE, GRADE
      from ACTPROD_UP_WK
     group by PRODUCT_DATE, ITEM_NO, WO_NO, PRODUCT_LINE, DATE_CODE, GRADE;

    C1_REC           C1%rowtype;
    C2_REC           C2%rowtype;
    C3_REC           C3%rowtype;
    C4_REC           C4%rowtype;
    C5_REC           C5%rowtype;
    C6_REC           C6%rowtype;
    C7_REC           C7%rowtype;
    C8_REC           C8%rowtype;
    C9_REC           C9%rowtype;

    wk_total_pln_qty production_comparison_monthly.TOTAL_PLN_QTY%type;
    wk_total_act_qty production_comparison_monthly.TOTAL_ACT_QTY%type;

  
   begin
    lock table actprod_up_wk
      in exclusive mode;

   /* ?????????????????????  */
   open C3;
     fetch C3  into C3_REC;
   close C3;

    /* ???????     ???????????????????  */
   delete from PRODUCTION_ACTUAL_RESULTS
    where PRODUCT_DATE >= C3_REC.MIN_PRODUCT_DATE;


    /* ?????????????????    ???????????????????  */
   delete from production_comparison_monthly
    where ac_month >= trunc(C3_REC.MIN_PRODUCT_DATE,'mm');

    /* ???????????????        ???????????????????  */
   delete from production_comparison
    where PRODUCT_DATE >= C3_REC.MIN_PRODUCT_DATE;


    /*  actprod_up_wk??? */
    open C1;
      loop
      fetch C1 into C1_REC;
      exit when C1%notfound or C1%notfound is null;
 
      /*  ?????? */
      open C2(C1_REC.item_no);
        fetch C2  into C2_REC;
      close C2;

          /* ????????   ???????????????????  */
          insert into PRODUCTION_ACTUAL_RESULTS (
                                    operation_date,
                                    section_code,
                                    item_no,
                                    product_date, 
                                    product_quantity,
                                    wo_no,
                                    product_line,
                                    date_code,
                                    grade
                              ) values ( 
                                    sysdate,
                                    C2_REC.SECTION_CODE,
                                    C1_REC.ITEM_NO,
                                    C1_REC.PRODUCT_DATE,
                                    C1_REC.product_quantity,
                                    C1_REC.wo_no,
                                    C1_REC.product_line,
                                    C1_REC.date_code,
                                    C1_REC.grade);

      <<LOOP_END>>
      null;
      end loop;
    close C1;

    /*  product_plan_progress_report????
        ??????????????          */

    open C4(trunc(C3_REC.MIN_PRODUCT_DATE,'mm'));
      loop
      fetch C4 into C4_REC;
      exit when C4%notfound or C4%notfound is null;

     wk_total_pln_qty := nvl(C4_REC.pln1,0)  + nvl(C4_REC.pln2,0)  + nvl(C4_REC.pln3,0)  + nvl(C4_REC.pln4,0)  + nvl(C4_REC.pln5,0)  + 
                         nvl(C4_REC.pln6,0)  + nvl(C4_REC.pln7,0)  + nvl(C4_REC.pln8,0)  + nvl(C4_REC.pln9,0)  + nvl(C4_REC.pln10,0) +  
                         nvl(C4_REC.pln11,0) + nvl(C4_REC.pln12,0) + nvl(C4_REC.pln13,0) + nvl(C4_REC.pln14,0) + nvl(C4_REC.pln15,0) +  
                         nvl(C4_REC.pln16,0) + nvl(C4_REC.pln17,0) + nvl(C4_REC.pln18,0) + nvl(C4_REC.pln19,0) + nvl(C4_REC.pln20,0) +  
                         nvl(C4_REC.pln21,0) + nvl(C4_REC.pln22,0) + nvl(C4_REC.pln23,0) + nvl(C4_REC.pln24,0) + nvl(C4_REC.pln25,0) +  
                         nvl(C4_REC.pln26,0) + nvl(C4_REC.pln27,0) + nvl(C4_REC.pln28,0) + nvl(C4_REC.pln29,0) + nvl(C4_REC.pln30,0) +  
                         nvl(C4_REC.pln31,0);

      /*  ???????????? */
--2010/08/03 ??
--      open C5(C4_REC.AC_MONTH,C4_REC.ITEM_NO,C4_REC.WO_NO,C4_REC.PRODUCT_LINE);
      open C5(C4_REC.AC_MONTH,C4_REC.ITEM_NO,C4_REC.WO_NO);
        fetch C5  into C5_REC;
        if C5%notfound or C5%notfound is null then
            /* ??????????????????    ???????????????????  */
            insert into production_comparison_monthly (
                                    ac_month,
                                    item_no,
                                    wo_no,
                                    product_line,
                                    date_code_pln,
                                    grade_pln,
                                    date_code_act,
                                    grade_act,
                                    total_pln_qty,
                                    total_act_qty,
                                    pln_qty1,
                                    pln_qty2,
                                    pln_qty3,
                                    pln_qty4,
                                    pln_qty5,
                                    pln_qty6,
                                    pln_qty7,
                                    pln_qty8,
                                    pln_qty9,
                                    pln_qty10,
                                    pln_qty11,
                                    pln_qty12,
                                    pln_qty13,
                                    pln_qty14,
                                    pln_qty15,
                                    pln_qty16,
                                    pln_qty17,
                                    pln_qty18,
                                    pln_qty19,
                                    pln_qty20,
                                    pln_qty21,
                                    pln_qty22,
                                    pln_qty23,
                                    pln_qty24,
                                    pln_qty25,
                                    pln_qty26,
                                    pln_qty27,
                                    pln_qty28,
                                    pln_qty29,
                                    pln_qty30,
                                    pln_qty31,
                                    act_qty1,
                                    act_qty2,
                                    act_qty3,
                                    act_qty4,
                                    act_qty5,
                                    act_qty6,
                                    act_qty7,
                                    act_qty8,
                                    act_qty9,
                                    act_qty10,
                                    act_qty11,
                                    act_qty12,
                                    act_qty13,
                                    act_qty14,
                                    act_qty15,
                                    act_qty16,
                                    act_qty17,
                                    act_qty18,
                                    act_qty19,
                                    act_qty20,
                                    act_qty21,
                                    act_qty22,
                                    act_qty23,
                                    act_qty24,
                                    act_qty25,
                                    act_qty26,
                                    act_qty27,
                                    act_qty28,
                                    act_qty29,
                                    act_qty30,
                                    act_qty31,
                                    operation_date
                        ) values (
                                    C4_REC.ac_month,
                                    C4_REC.item_no,
                                    C4_REC.wo_no,
                                    C4_REC.product_line,
                                    C4_REC.date_code,
                                    C4_REC.grade,
                                    null,
                                    null,
                                    wk_total_pln_qty,
                                    null,
                                    C4_REC.pln1,
                                    C4_REC.pln2,
                                    C4_REC.pln3,
                                    C4_REC.pln4,
                                    C4_REC.pln5,
                                    C4_REC.pln6,
                                    C4_REC.pln7,
                                    C4_REC.pln8,
                                    C4_REC.pln9,
                                    C4_REC.pln10,
                                    C4_REC.pln11,
                                    C4_REC.pln12,
                                    C4_REC.pln13,
                                    C4_REC.pln14,
                                    C4_REC.pln15,
                                    C4_REC.pln16,
                                    C4_REC.pln17,
                                    C4_REC.pln18,
                                    C4_REC.pln19,
                                    C4_REC.pln20,
                                    C4_REC.pln21,
                                    C4_REC.pln22,
                                    C4_REC.pln23,
                                    C4_REC.pln24,
                                    C4_REC.pln25,
                                    C4_REC.pln26,
                                    C4_REC.pln27,
                                    C4_REC.pln28,
                                    C4_REC.pln29,
                                    C4_REC.pln30,
                                    C4_REC.pln31,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    sysdate
                                 );                      
        else
           update production_comparison_monthly
              set total_pln_qty      = wk_total_pln_qty,
                  pln_qty1           = C4_REC.pln1,
                  pln_qty2           = C4_REC.pln2,
                  pln_qty3           = C4_REC.pln3,
                  pln_qty4           = C4_REC.pln4,
                  pln_qty5           = C4_REC.pln5,
                  pln_qty6           = C4_REC.pln6,
                  pln_qty7           = C4_REC.pln7,
                  pln_qty8           = C4_REC.pln8,
                  pln_qty9           = C4_REC.pln9,
                  pln_qty10          = C4_REC.pln10,
                  pln_qty11          = C4_REC.pln11,
                  pln_qty12          = C4_REC.pln12,
                  pln_qty13          = C4_REC.pln13,
                  pln_qty14          = C4_REC.pln14,
                  pln_qty15          = C4_REC.pln15,
                  pln_qty16          = C4_REC.pln16,
                  pln_qty17          = C4_REC.pln17,
                  pln_qty18          = C4_REC.pln18,
                  pln_qty19          = C4_REC.pln19,
                  pln_qty20          = C4_REC.pln20,
                  pln_qty21          = C4_REC.pln21,
                  pln_qty22          = C4_REC.pln22,
                  pln_qty23          = C4_REC.pln23,
                  pln_qty24          = C4_REC.pln24,
                  pln_qty25          = C4_REC.pln25,
                  pln_qty26          = C4_REC.pln26,
                  pln_qty27          = C4_REC.pln27,
                  pln_qty28          = C4_REC.pln28,
                  pln_qty29          = C4_REC.pln29,
                  pln_qty30          = C4_REC.pln30,
                  pln_qty31          = C4_REC.pln31,
                   operation_date = sysdate
           where current of C5;
         end if;
      close C5;

      <<LOOP2_END>>
      null;
      end loop;
    close C4;

    /*  actprod_up_wk???
        ??????????????          */

    open C6;
      loop
      fetch C6 into C6_REC;
      exit when C6%notfound or C6%notfound is null;

      wk_total_act_qty := nvl(C6_REC.act1,0)  + nvl(C6_REC.act2,0)  + nvl(C6_REC.act3,0)  + nvl(C6_REC.act4,0)  + nvl(C6_REC.act5,0)  + 
                          nvl(C6_REC.act6,0)  + nvl(C6_REC.act7,0)  + nvl(C6_REC.act8,0)  + nvl(C6_REC.act9,0)  + nvl(C6_REC.act10,0) +  
                          nvl(C6_REC.act11,0) + nvl(C6_REC.act12,0) + nvl(C6_REC.act13,0) + nvl(C6_REC.act14,0) + nvl(C6_REC.act15,0) +  
                          nvl(C6_REC.act16,0) + nvl(C6_REC.act17,0) + nvl(C6_REC.act18,0) + nvl(C6_REC.act19,0) + nvl(C6_REC.act20,0) +  
                          nvl(C6_REC.act21,0) + nvl(C6_REC.act22,0) + nvl(C6_REC.act23,0) + nvl(C6_REC.act24,0) + nvl(C6_REC.act25,0) +  
                          nvl(C6_REC.act26,0) + nvl(C6_REC.act27,0) + nvl(C6_REC.act28,0) + nvl(C6_REC.act29,0) + nvl(C6_REC.act30,0) +  
                          nvl(C6_REC.act31,0);

      /*  ???????????? */
--2010/0803 ??
--      open C5(C6_REC.AC_MONTH,C6_REC.ITEM_NO,C6_REC.WO_NO,C6_REC.PRODUCT_LINE);
      open C5(C6_REC.AC_MONTH,C6_REC.ITEM_NO,C6_REC.WO_NO);
        fetch C5  into C5_REC;
        if C5%notfound or C5%notfound is null then
            insert into production_comparison_monthly (
                                    ac_month,
                                    item_no,
                                    wo_no,
                                    product_line,
                                    date_code_pln,
                                    grade_pln,
                                    date_code_act,
                                    grade_act,
                                    total_pln_qty,
                                    total_act_qty,
                                    pln_qty1,
                                    pln_qty2,
                                    pln_qty3,
                                    pln_qty4,
                                    pln_qty5,
                                    pln_qty6,
                                    pln_qty7,
                                    pln_qty8,
                                    pln_qty9,
                                    pln_qty10,
                                    pln_qty11,
                                    pln_qty12,
                                    pln_qty13,
                                    pln_qty14,
                                    pln_qty15,
                                    pln_qty16,
                                    pln_qty17,
                                    pln_qty18,
                                    pln_qty19,
                                    pln_qty20,
                                    pln_qty21,
                                    pln_qty22,
                                    pln_qty23,
                                    pln_qty24,
                                    pln_qty25,
                                    pln_qty26,
                                    pln_qty27,
                                    pln_qty28,
                                    pln_qty29,
                                    pln_qty30,
                                    pln_qty31,
                                    act_qty1,
                                    act_qty2,
                                    act_qty3,
                                    act_qty4,
                                    act_qty5,
                                    act_qty6,
                                    act_qty7,
                                    act_qty8,
                                    act_qty9,
                                    act_qty10,
                                    act_qty11,
                                    act_qty12,
                                    act_qty13,
                                    act_qty14,
                                    act_qty15,
                                    act_qty16,
                                    act_qty17,
                                    act_qty18,
                                    act_qty19,
                                    act_qty20,
                                    act_qty21,
                                    act_qty22,
                                    act_qty23,
                                    act_qty24,
                                    act_qty25,
                                    act_qty26,
                                    act_qty27,
                                    act_qty28,
                                    act_qty29,
                                    act_qty30,
                                    act_qty31,
                                    operation_date
                        ) values (
                                    C6_REC.ac_month,
                                    C6_REC.item_no,
                                    C6_REC.wo_no,
                                    C6_REC.product_line,
                                    null,
                                    null,
                                    C6_REC.date_code,
                                    C6_REC.grade,
                                    null,
                                    wk_total_act_qty,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    null,
                                    C6_REC.act1,
                                    C6_REC.act2,
                                    C6_REC.act3,
                                    C6_REC.act4,
                                    C6_REC.act5,
                                    C6_REC.act6,
                                    C6_REC.act7,
                                    C6_REC.act8,
                                    C6_REC.act9,
                                    C6_REC.act10,
                                    C6_REC.act11,
                                    C6_REC.act12,
                                    C6_REC.act13,
                                    C6_REC.act14,
                                    C6_REC.act15,
                                    C6_REC.act16,
                                    C6_REC.act17,
                                    C6_REC.act18,
                                    C6_REC.act19,
                                    C6_REC.act20,
                                    C6_REC.act21,
                                    C6_REC.act22,
                                    C6_REC.act23,
                                    C6_REC.act24,
                                    C6_REC.act25,
                                    C6_REC.act26,
                                    C6_REC.act27,
                                    C6_REC.act28,
                                    C6_REC.act29,
                                    C6_REC.act30,
                                    C6_REC.act31,
                                    sysdate
                                 );                      
        else
           update production_comparison_monthly
              set  total_act_qty      = wk_total_act_qty,
                   act_qty1           = C6_REC.act1,
                   act_qty2           = C6_REC.act2,
                   act_qty3           = C6_REC.act3,
                   act_qty4           = C6_REC.act4,
                   act_qty5           = C6_REC.act5,
                   act_qty6           = C6_REC.act6,
                   act_qty7           = C6_REC.act7,
                   act_qty8           = C6_REC.act8,
                   act_qty9           = C6_REC.act9,
                   act_qty10          = C6_REC.act10,
                   act_qty11          = C6_REC.act11,
                   act_qty12          = C6_REC.act12,
                   act_qty13          = C6_REC.act13,
                   act_qty14          = C6_REC.act14,
                   act_qty15          = C6_REC.act15,
                   act_qty16          = C6_REC.act16,
                   act_qty17          = C6_REC.act17,
                   act_qty18          = C6_REC.act18,
                   act_qty19          = C6_REC.act19,
                   act_qty20          = C6_REC.act20,
                   act_qty21          = C6_REC.act21,
                   act_qty22          = C6_REC.act22,
                   act_qty23          = C6_REC.act23,
                   act_qty24          = C6_REC.act24,
                   act_qty25          = C6_REC.act25,
                   act_qty26          = C6_REC.act26,
                   act_qty27          = C6_REC.act27,
                   act_qty28          = C6_REC.act28,
                   act_qty29          = C6_REC.act29,
                   act_qty30          = C6_REC.act30,
                   act_qty31          = C6_REC.act31,
                   operation_date = sysdate
           where current of C5;
         end if;
      close C5;

      <<LOOP3_END>>
      null;
      end loop;
    close C6;

    /*  PRODUCT_PLAN_PROGRESS_REPORT???
        ??????????????          */

    open C7(C3_REC.MIN_PRODUCT_DATE);
      loop
      fetch C7 into C7_REC;
      exit when C7%notfound or C7%notfound is null;

      /*  ???????????? */
--2010/08/03 ??
--      open C8(C7_REC.KURAIRE_DATE,C7_REC.ITEM_NO,C7_REC.WO_NO,C7_REC.PRODUCT_LINE);
      open C8(C7_REC.KURAIRE_DATE,C7_REC.ITEM_NO,C7_REC.WO_NO);
        fetch C8  into C8_REC;
        if C8%notfound or C8%notfound is null then
            insert into production_comparison (
                                    product_date,
                                    item_no,
                                    wo_no,
                                    product_line,
                                    date_code_pln,
                                    grade_pln,
                                    date_code_act,
                                    grade_act,
                                    plan_qty,
                                    actual_qty,
                                    operation_date
                        ) values (
                                    C7_REC.kuraire_date,
                                    C7_REC.item_no,
                                    C7_REC.wo_no,
                                    C7_REC.product_line,
                                    C7_REC.date_code,
                                    C7_REC.grade,
                                    null,
                                    null,
                                    C7_REC.product_quantity,
                                    null,
                                    sysdate
                                 );                      
        else
           update production_comparison
              set plan_qty           = C7_REC.product_quantity,
                  operation_date     = sysdate
           where current of C8;
         end if;
      close C8;

      <<LOOP4_END>>
      null;
      end loop;
    close C7;

    /*  ACTPROD_UP_WK????
        ??????????????          */

    open C9;
      loop
      fetch C9 into C9_REC;
      exit when C9%notfound or C9%notfound is null;

      /*  ???????????? */
--2010/08/03 ??
--      open C8(C9_REC.PRODUCT_DATE,C9_REC.ITEM_NO,C9_REC.WO_NO,C9_REC.PRODUCT_LINE);
      open C8(C9_REC.PRODUCT_DATE,C9_REC.ITEM_NO,C9_REC.WO_NO);
        fetch C8  into C8_REC;
        if C8%notfound or C8%notfound is null then
            insert into production_comparison (
                                    product_date,
                                    item_no,
                                    wo_no,
                                    product_line,
                                    date_code_pln,
                                    grade_pln,
                                    date_code_act,
                                    grade_act,
                                    plan_qty,
                                    actual_qty,
                                    operation_date
                        ) values (
                                    C9_REC.product_date,
                                    C9_REC.item_no,
                                    C9_REC.wo_no,
                                    C9_REC.product_line,
                                    null,
                                    null,
                                    C9_REC.date_code,
                                    C9_REC.grade,
                                    null,
                                    C9_REC.product_quantity,
                                    sysdate
                                 );                      
        else
           update production_comparison
              set actual_qty         = C9_REC.product_quantity,
                  operation_date     = sysdate
           where current of C8;
         end if;
      close C8;

      <<LOOP5_END>>
      null;
      end loop;
    close C9;

   end;
end PRODUCT_ACTUAL_RESULTS_SET_FI;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."PRODUCT_PLAN_SET" 
as
begin
   declare

    /* ?????????????? */
    cursor C1
    is
    select operation_date,product_lot_number, item_no, level_no, 
	       station_code, product_quantity, issue_req_date,
           NVL(rtrim(product_lot_number),'ZZZZZZZZZZ') chk_product_lot_number
      from product_plan_up_wk;

    /* ?????? */
    cursor C2 (	para in number)
    is
    select nvl(max(level_no),0) level_no
      from leveld 
     where item_no = para;

    /* ?????? */
    cursor C3 (para in number)
    is
    select i.section_code,s.section,s.short_name,
           nvl(i.manufact_leadtime,0)  manufact_leadtime
      from item i,section s
     where i.item_no = para
       and i.section_code = s.section_code(+);

    /* ???? */
    cursor C4 (para in varchar2)
    is
    select *  from product_plan
     where product_lot_number = para
    for  update;

    C1_REC          C1%rowtype;
    C2_REC          C2%rowtype;
    C3_REC          C3%rowtype;
    C4_REC          C4%rowtype;
    wk_level_no     leveld.level_no%type;

   begin
    lock table product_plan
      in exclusive mode;

    /*  product_plan_up_wk??? */
    open C1;
      loop
      fetch C1 into C1_REC;
      exit when C1%notfound or C1%notfound is null;
 
      /*  ?????? */
      open C2(C1_REC.item_no);
        fetch C2  into C2_REC;
           if C2%notfound or C2%notfound is null then
               wk_level_no := 0;
           else 
               wk_level_no := C2_REC.level_no;
           end if;
      close C2;

      /*  ?????? */
      open C3(C1_REC.item_no);
        fetch C3  into C3_REC;
      close C3;

      /*  ????????????????????? */
      if  C1_REC.chk_product_lot_number = 'ZZZZZZZZZZ' then
          insert into product_plan (
                                    operation_date,
                                    section_code, 
                                    product_lot_number,
                                    item_no, 
                                    kuraire_date,
                                    bm_item_no, 
                                    level_no,
                                    station_code, 
                                    progress_status, 
                                    buyer_code,
                                    shipto_code,
                                    carved_stamp,
                                    plan_create_date, 
                                    plan_operate_date,
                                    product_quantity,
                                    material_req_date,
                                    issue_req_date, 
                                    product_req_date,
                                    release_date,
                                    product_fin_date,
                                    complete_quantity, 
                                    cancel_quantity,
                                    remainder_quantity
                              ) values ( 
                                    sysdate,
                                	C3_REC.SECTION_CODE,
                         	        C3_REC.SHORT_NAME || to_char(seq_pplan.nextval, 'fm099999'),
	                                C1_REC.ITEM_NO,
	                                C1_REC.issue_req_date + C3_REC.manufact_leadtime,
	                                C1_REC.ITEM_NO,
	                                wk_level_no,
	                                C1_REC.station_code,
	                                'A',
	                                null,
	                                null,
	                                null,
	                                sysdate,
	                                sysdate,
	                                C1_REC.product_quantity,
                                 	C1_REC.issue_req_date -1,
                                	C1_REC.issue_req_date,
                                	C1_REC.issue_req_date +1,
                                	null,
                                	null,
                                	0,
                                	0,
                                	C1_REC.product_quantity);

      else
           /*  ????????????????
               ?????????????????????
               ????????,item_no???????????????????
               ???????? */
          open C4(C1_REC.product_lot_number);
            fetch C4  into C4_REC;
               if C4%notfound or C4%notfound is null then
                    insert into product_plan (
                                        operation_date,
                                        section_code, 
                                        product_lot_number,
                                        item_no, 
                                        kuraire_date,
                                        bm_item_no, 
                                        level_no,
                                        station_code, 
                                        progress_status, 
                                        buyer_code,
                                        shipto_code,
                                        carved_stamp,
                                        plan_create_date, 
                                        plan_operate_date,
                                        product_quantity,
                                        material_req_date,
                                        issue_req_date, 
                                        product_req_date,
                                        release_date,
                                        product_fin_date,
                                        complete_quantity, 
                                        cancel_quantity,
                                        remainder_quantity
                                  ) values ( 
                                        sysdate,
                                    	C3_REC.SECTION_CODE,
                             	        C1_REC.product_lot_number,
	                                    C1_REC.ITEM_NO,
	                                    C1_REC.issue_req_date + C3_REC.manufact_leadtime,
	                                    C1_REC.ITEM_NO,
	                                    wk_level_no,
	                                    C1_REC.station_code,
	                                    'A',
	                                    null,
	                                    null,
	                                    null,
	                                    sysdate,
	                                    sysdate,
	                                    C1_REC.product_quantity,
                                     	C1_REC.issue_req_date -1,
                                    	C1_REC.issue_req_date,
                                    	C1_REC.issue_req_date +1,
                                    	null,
                                    	null,
                                    	0,
                                    	0,
                                    	C1_REC.product_quantity);

               else 
                   if (C1_REC.item_no = C4_REC.item_no) and
                      (C1_REC.product_quantity >= C4_REC.complete_quantity) and
                       C4_REC.progress_status <>  'E' then
                      update product_plan
                        set operation_date     = sysdate,
                            section_code       = C3_REC.SECTION_CODE, 
                            kuraire_date       = C1_REC.issue_req_date + C3_REC.manufact_leadtime,
                            level_no           = wk_level_no,
                            station_code       = C1_REC.station_code, 
                            progress_status    = 'A', 
                            buyer_code         = null,
                            shipto_code        = null,
                            carved_stamp       = null,
                            plan_operate_date  = sysdate,
                            product_quantity   = C1_REC.product_quantity,
                            material_req_date  = C1_REC.issue_req_date -1,
                            issue_req_date     = C1_REC.issue_req_date, 
                            product_req_date   = C1_REC.issue_req_date +1,
                            release_date       = null,
                            product_fin_date   = null,
                            complete_quantity  = C4_REC.complete_quantity, 
                            cancel_quantity    = C4_REC.cancel_quantity,
                            remainder_quantity = C1_REC.product_quantity - C4_REC.complete_quantity
                      where current of C4;
                   else
                       if  C4_REC.progress_status =  'E' then
                          update product_plan
                            set operation_date     = sysdate,
                                section_code       = C3_REC.SECTION_CODE, 
                                kuraire_date       = C1_REC.issue_req_date + C3_REC.manufact_leadtime,
                                level_no           = wk_level_no,
                                station_code       = C1_REC.station_code, 
                                progress_status    = 'A', 
                                buyer_code         = null,
                                shipto_code        = null,
                                carved_stamp       = null,
                                plan_operate_date  = sysdate,
                                product_quantity   = C1_REC.product_quantity,
                                material_req_date  = C1_REC.issue_req_date -1,
                                issue_req_date     = C1_REC.issue_req_date, 
                                product_req_date   = C1_REC.issue_req_date +1,
                                release_date       = null,
                                product_fin_date   = null,
                                complete_quantity  = C4_REC.complete_quantity, 
                                cancel_quantity    = C4_REC.cancel_quantity,
                                remainder_quantity = C1_REC.product_quantity - C4_REC.complete_quantity
                             where current of C4;
                       end if;
                   end if;
               end if;
          close C4;
      end if;
      <<LOOP_END>>
      null;
      end loop;
    close C1;

   end;
end PRODUCT_PLAN_SET;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."PRODUCT_PLAN_SET_FI" 
as
begin
   declare

    /* ?????????????? */
    cursor C1
    is
    select operation_date, seq, sheet_name, sheet_row, product_line, 
           product_line_no, wo_no, item_no, date_code, product_date, 
           product_quantity,grade
      from pp3_up_wk;

    /* ?????? */
    cursor C2 (	para in number)
    is
    select nvl(max(level_no),0) level_no
      from leveld 
     where item_no = para;

    /* ?????? */
    cursor C3 (para in number)
    is
    select i.section_code,s.section,s.short_name,
           nvl(i.manufact_leadtime,0)  manufact_leadtime
      from item i,section s
     where i.item_no = para
       and i.section_code = s.section_code(+);

    /* ?????????????? */
    cursor C4
    is
    select min(product_date) min_product_date ,trunc(sysdate)  today_date
      from pp3_up_wk;

    C1_REC          C1%rowtype;
    C2_REC          C2%rowtype;
    C3_REC          C3%rowtype;
    C4_REC          C4%rowtype;
    wk_level_no     leveld.level_no%type;

   begin
    lock table pp3_up_wk
      in exclusive mode;

    /*  PRODUCT_PLAN??? */
    insert into product_plan_history(operation_date,
                                     section_code,
                                     product_lot_number,
                                     item_no,
                                     kuraire_date,
                                     bm_item_no,
                                     level_no,
                                     station_code,
                                     progress_status,
                                     buyer_code,
                                     shipto_code,
                                     carved_stamp,
                                     plan_create_date,
                                     plan_operate_date,
                                     product_quantity,
                                     material_req_date,
                                     issue_req_date,
                                     product_req_date,
                                     release_date,
                                     product_fin_date,
                                     complete_quantity,
                                     cancel_quantity,
                                     remainder_quantity,
                                     HISTORY_CREATE_DATE,
                                     wo_no,
                                     product_line, 
                                     date_code,
                                     grade
                                     )
                              select operation_date,
                                     section_code,
                                     product_lot_number,
                                     item_no,
                                     kuraire_date,
                                     bm_item_no,
                                     level_no,
                                     station_code,
                                     progress_status,
                                     buyer_code,
                                     shipto_code,
                                     carved_stamp,
                                     plan_create_date,
                                     plan_operate_date,
                                     product_quantity,
                                     material_req_date,
                                     issue_req_date,
                                     product_req_date,
                                     release_date,
                                     product_fin_date,
                                     complete_quantity,
                                     cancel_quantity,
                                     remainder_quantity,
                                     sysdate,
                                     wo_no,
                                     product_line, 
                                     date_code,
                                     grade
                                from product_plan;

   /* ?????????????????????  */
   open C4;
     fetch C4  into C4_REC;
   close C4;

   delete from PRODUCT_PLAN_PROGRESS_REPORT
    where kuraire_date >= C4_REC.MIN_PRODUCT_DATE;

   delete from product_plan;

    /*  pp3_up_wk??? */
    open C1;
      loop
      fetch C1 into C1_REC;
      exit when C1%notfound or C1%notfound is null;
 
      /*  ?????? */
      open C2(C1_REC.item_no);
        fetch C2  into C2_REC;
           if C2%notfound or C2%notfound is null then
               wk_level_no := 0;
           else 
               wk_level_no := C2_REC.level_no;
           end if;
      close C2;

      /*  ?????? */
      open C3(C1_REC.item_no);
        fetch C3  into C3_REC;
      close C3;

          insert into product_plan_progress_report (
                                    operation_date,
                                    section_code, 
                                    product_lot_number,
                                    item_no, 
                                    kuraire_date,
                                    bm_item_no, 
                                    level_no,
                                    station_code, 
                                    progress_status, 
                                    buyer_code,
                                    shipto_code,
                                    carved_stamp,
                                    plan_create_date, 
                                    plan_operate_date,
                                    product_quantity,
                                    material_req_date,
                                    issue_req_date, 
                                    product_req_date,
                                    release_date,
                                    product_fin_date,
                                    complete_quantity, 
                                    cancel_quantity,
                                    remainder_quantity,
                                    wo_no,
                                    product_line,
                                    date_code,
                                    grade
--                                    product_line_no
                              ) values ( 
                                    sysdate,
                                    C3_REC.SECTION_CODE,
                                    to_char(seq_pplan.nextval, 'fm0999999'),
                                    C1_REC.ITEM_NO,
                                    C1_REC.PRODUCT_DATE,
                                    C1_REC.ITEM_NO,
                                    wk_level_no,
                                    '100001',
                                    'A',
                                    null,
                                    null,
                                    null,
                                    sysdate,
                                    sysdate,
                                    C1_REC.product_quantity,
                                 	C1_REC.PRODUCT_DATE -2,
                                 	C1_REC.PRODUCT_DATE -1,
                                 	C1_REC.PRODUCT_DATE,
                                	null,
                                	null,
                                	0,
                                	0,
                                	C1_REC.product_quantity,
                                	C1_REC.wo_no,
                                    C1_REC.product_line,
                                    C1_REC.date_code,
                                    C1_REC.grade
--                                    C1_REC.product_line_no
                                    );

          if C1_REC.PRODUCT_DATE >= C4_REC.today_date then 
              insert into product_plan (
                                    operation_date,
                                    section_code, 
                                    product_lot_number,
                                    item_no, 
                                    kuraire_date,
                                    bm_item_no, 
                                    level_no,
                                    station_code, 
                                    progress_status, 
                                    buyer_code,
                                    shipto_code,
                                    carved_stamp,
                                    plan_create_date, 
                                    plan_operate_date,
                                    product_quantity,
                                    material_req_date,
                                    issue_req_date, 
                                    product_req_date,
                                    release_date,
                                    product_fin_date,
                                    complete_quantity, 
                                    cancel_quantity,
                                    remainder_quantity,
                                    wo_no,
                                    product_line,
                                    date_code,
                                    grade
                              ) values ( 
                                    sysdate,
                                    C3_REC.SECTION_CODE,
                                    to_char(seq_pplan.nextval, 'fm0999999'),
                                    C1_REC.ITEM_NO,
                                    C1_REC.PRODUCT_DATE,
                                    C1_REC.ITEM_NO,
                                    wk_level_no,
                                    '100001',
                                    'A',
                                    null,
                                    null,
                                    null,
                                    sysdate,
                                    sysdate,
                                    C1_REC.product_quantity,
                                    C1_REC.PRODUCT_DATE -2,
                                    C1_REC.PRODUCT_DATE -1,
                                    C1_REC.PRODUCT_DATE,
                                    null,
                                    null,
                                    0,
                                    0,
                                    C1_REC.product_quantity,
                                    C1_REC.wo_no,
                                    C1_REC.product_line,
                                    C1_REC.date_code,
                                    C1_REC.grade);
          end if;
      <<LOOP_END>>
      null;
      end loop;
    close C1;

   end;
end PRODUCT_PLAN_SET_FI;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."PRODUCT_PLAN_WK_SET" 
as
/****************************************************************
  pp2_up_wk --> product_plan_up_wk ???????
  2006/11/29 ?Sayuri Suzuki 
*****************************************************************/
begin
   declare
	cursor C1
	is
	select * from pp2_up_wk
	 order by station_code,
              item_no,
              wo_no ;

	C1_REC 		C1%rowtype;

   begin
	open C1;
	loop
	 -- PP2_UP_WK???????
	  fetch C1 into C1_REC;
	  exit when C1%notfound or C1%notfound is null;

	  if C1_REC.QTY01 is not null and C1_REC.QTY01 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-01', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY01, to_date(C1_REC.ACCOUNTING_MONTH||'01','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY02 is not null and C1_REC.QTY02 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-02', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY02, to_date(C1_REC.ACCOUNTING_MONTH||'02','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY03 is not null and C1_REC.QTY03 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-03', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY03, to_date(C1_REC.ACCOUNTING_MONTH||'03','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY04 is not null and C1_REC.QTY04 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-04', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY04, to_date(C1_REC.ACCOUNTING_MONTH||'04','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY05 is not null and C1_REC.QTY05 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-05', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY05, to_date(C1_REC.ACCOUNTING_MONTH||'05','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY06 is not null and C1_REC.QTY06 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-06', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY06, to_date(C1_REC.ACCOUNTING_MONTH||'06','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY07 is not null and C1_REC.QTY07 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-07', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY07, to_date(C1_REC.ACCOUNTING_MONTH||'07','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY08 is not null and C1_REC.QTY08 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-08', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY08, to_date(C1_REC.ACCOUNTING_MONTH||'08','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY09 is not null and C1_REC.QTY09 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-09', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY09, to_date(C1_REC.ACCOUNTING_MONTH||'09','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY10 is not null and C1_REC.QTY10 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-10', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY10, to_date(C1_REC.ACCOUNTING_MONTH||'10','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY11 is not null and C1_REC.QTY11 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-11', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY11, to_date(C1_REC.ACCOUNTING_MONTH||'11','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY12 is not null and C1_REC.QTY12 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-12', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY12, to_date(C1_REC.ACCOUNTING_MONTH||'12','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY13 is not null and C1_REC.QTY13 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-13', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY13, to_date(C1_REC.ACCOUNTING_MONTH||'13','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY14 is not null and C1_REC.QTY14 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-14', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY14, to_date(C1_REC.ACCOUNTING_MONTH||'14','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY15 is not null and C1_REC.QTY15 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-15', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY15, to_date(C1_REC.ACCOUNTING_MONTH||'15','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY16 is not null and C1_REC.QTY16 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-16', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY16, to_date(C1_REC.ACCOUNTING_MONTH||'16','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY17 is not null and C1_REC.QTY17 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-17', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY17, to_date(C1_REC.ACCOUNTING_MONTH||'17','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY18 is not null and C1_REC.QTY18 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-18', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY18, to_date(C1_REC.ACCOUNTING_MONTH||'18','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY19 is not null and C1_REC.QTY19 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-19', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY19, to_date(C1_REC.ACCOUNTING_MONTH||'19','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY20 is not null and C1_REC.QTY20 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-20', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY20, to_date(C1_REC.ACCOUNTING_MONTH||'20','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY21 is not null and C1_REC.QTY21 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-21', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY21, to_date(C1_REC.ACCOUNTING_MONTH||'21','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY22 is not null and C1_REC.QTY22 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-22', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY22, to_date(C1_REC.ACCOUNTING_MONTH||'22','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY23 is not null and C1_REC.QTY23 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-23', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY23, to_date(C1_REC.ACCOUNTING_MONTH||'23','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY24 is not null and C1_REC.QTY24 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-24', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY24, to_date(C1_REC.ACCOUNTING_MONTH||'24','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY25 is not null and C1_REC.QTY25 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-25', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY25, to_date(C1_REC.ACCOUNTING_MONTH||'25','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY26 is not null and C1_REC.QTY26 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-26', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY26, to_date(C1_REC.ACCOUNTING_MONTH||'26','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY27 is not null and C1_REC.QTY27 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-27', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY27, to_date(C1_REC.ACCOUNTING_MONTH||'27','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY28 is not null and C1_REC.QTY28 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-28', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY28, to_date(C1_REC.ACCOUNTING_MONTH||'28','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY29 is not null and C1_REC.QTY29 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-29', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY29, to_date(C1_REC.ACCOUNTING_MONTH||'29','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY30 is not null and C1_REC.QTY30 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-30', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY30, to_date(C1_REC.ACCOUNTING_MONTH||'30','yyyymmdd')
		 );
	  end if;

	  if C1_REC.QTY31 is not null and C1_REC.QTY31 != 0 then
		 insert into PRODUCT_PLAN_UP_WK(
			   OPERATION_DATE, PRODUCT_LOT_NUMBER, ITEM_NO, LEVEL_NO,
		 	   STATION_CODE, PRODUCT_QUANTITY, ISSUE_REQ_DATE
		 )values (
			   sysdate, C1_REC.WO_NO||'-31', C1_REC.ITEM_NO, C1_REC.LEVEL_NO,
			   C1_REC.STATION_CODE, C1_REC.QTY31, to_date(C1_REC.ACCOUNTING_MONTH||'31','yyyymmdd')
		 );
	  end if;

	end loop;
	close C1;
   end;
end PRODUCT_PLAN_WK_SET;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."PRODUCTS_RECEIVE_UPDATE" 
(
	p_item_No     In number,
	p_slip_date   In date,
	p_slip_qty    In number,
	p_lot_number  In varchar2,
	p_slit_type   In number,
	p_ret_code    In Out number
)
AS
BEGIN
	DECLARE

--debug  Y001 351649

	/* PRODUCT_PLAN??  LOT_NUMBER?? */
	cursor C_PP1
	is
	  SELECT ITEM_NO,KURAIRE_DATE,BM_ITEM_NO,SECTION_CODE,STATION_CODE,
	         LEVEL_NO,REMAINDER_QUANTITY,PRODUCT_LOT_NUMBER
	    FROM PRODUCT_PLAN
       WHERE ITEM_NO=p_item_No
    ORDER BY KURAIRE_DATE;

	/* PRODUCT_PLAN??  LOT_NUMBER?? */
	cursor C_PP2
	is
	  SELECT ITEM_NO,KURAIRE_DATE,BM_ITEM_NO,SECTION_CODE,STATION_CODE,
	         LEVEL_NO,REMAINDER_QUANTITY,PRODUCT_LOT_NUMBER
	    FROM PRODUCT_PLAN
       WHERE ITEM_NO=p_item_No
         AND PRODUCT_LOT_NUMBER=p_lot_number
    ORDER BY KURAIRE_DATE;

	C_PP_REC		C_PP1%ROWTYPE 	:= null;
	WK_PG_ST		PRODUCT_PLAN.PROGRESS_STATUS%TYPE    := null;
	QUTY_diff		PRODUCT_PLAN.REMAINDER_QUANTITY%TYPE := null;
	WK_SLIP_QTY		PRODUCT_PLAN.REMAINDER_QUANTITY%TYPE := null;

	/*??? PRO_STRUCT????????? ???????????????????????????? */
		PROCEDURE PRO_STRUCT(s_item_no    In     Number  ,s_level_no   In     Number,
				             s_qty_diff   In     Number  ,s_slip_date  In     Date,
				             s_slit_type  In     varchar2,s_ret_code   In Out Number,
						     s_sec_code   In     number  ,s_st_code    In     Number)
		IS
		begin
			declare

			/* STRUCTURE?? */
			cursor C_ST
			is
			  SELECT UPPER_ITEM_NO,LOWER_ITEM_NO,LEVEL_NO,
			         QUANTITY,QUANTITY_BASE
			    FROM STRUCTURE
		       WHERE UPPER_ITEM_NO=s_item_no
		         AND LEVEL_NO=s_level_no;

			C_ST_REC	C_ST%ROWTYPE 	:= null;
			pass_qty	pcinventory.receive1%TYPE              :=0 ;

			begin
			 open C_ST();
			 loop
			    fetch C_ST into C_ST_REC;
			          exit when C_ST%notfound or C_ST%notfound is null;
			          --?????( null -> 1 )
			          if C_ST_REC.QUANTITY_BASE is null then C_ST_REC.QUANTITY_BASE := 1;	end if;
			          --????
			          pass_qty := s_qty_diff * (C_ST_REC.QUANTITY/C_ST_REC.QUANTITY_BASE);

--DBMS_OUTPUT.PUT_LINE('pass_qty==' || pass_qty);

			          /* Call PCINVENTORY PROC */
			          PCINVENTORY_SET(  C_ST_REC.LOWER_ITEM_NO,
										s_slip_date,pass_qty,
										s_slit_type,s_ret_code,s_sec_code,s_st_code);

			          if s_ret_code != 0 then	return; end if;
			 end loop;
			 close C_ST;
		    end;
		end PRO_STRUCT;
	/*?????????????????????????????????????????????*/

	begin

		/* Parameter?? */
		if p_item_No is null OR p_slip_qty is null OR p_slit_type is null then
			p_ret_code := -1 ;		-- Parameter Error
			return ;
		else
			p_ret_code := 0 ;		-- Initialize
			WK_SLIP_QTY := p_slip_qty;
		end if;

		/* Lot_NUMBER?? */
		if p_lot_number is null then
			open C_PP1();
			loop
			fetch C_PP1 into C_PP_REC;
				exit when C_PP1%notfound or C_PP1%notfound is null;
				/* ??????? */
				if C_PP_REC.REMAINDER_QUANTITY <= WK_SLIP_QTY then
					WK_SLIP_QTY := WK_SLIP_QTY - C_PP_REC.REMAINDER_QUANTITY;
					QUTY_diff  := C_PP_REC.REMAINDER_QUANTITY;
					C_PP_REC.REMAINDER_QUANTITY := 0 ;
					WK_PG_ST := 'E';
				else
					C_PP_REC.REMAINDER_QUANTITY := C_PP_REC.REMAINDER_QUANTITY - WK_SLIP_QTY;
					QUTY_diff  := WK_SLIP_QTY;
					WK_SLIP_QTY := 0 ;
					WK_PG_ST   := 'A';
				end if;
DBMS_OUTPUT.PUT_LINE('WK_SLIP_QTY==' || WK_SLIP_QTY || '---WK_PG_ST=' || WK_PG_ST);
				/* ?? */
				UPDATE PRODUCT_PLAN SET REMAINDER_QUANTITY=C_PP_REC.REMAINDER_QUANTITY,
										PROGRESS_STATUS=WK_PG_ST
								  WHERE ITEM_NO=C_PP_REC.ITEM_NO
								    AND KURAIRE_DATE=C_PP_REC.KURAIRE_DATE
								    AND PRODUCT_LOT_NUMBER=C_PP_REC.PRODUCT_LOT_NUMBER;
				/* Call PRO_STRUCT */
				PRO_STRUCT(C_PP_REC.BM_ITEM_NO,
				           C_PP_REC.LEVEL_NO,
				           QUTY_diff,p_slip_date,p_slit_type,p_ret_code,
				           C_PP_REC.SECTION_CODE,C_PP_REC.STATION_CODE);

DBMS_OUTPUT.PUT_LINE('p_ret_code==' || p_ret_code);
				/* End Jugment */
				exit when WK_SLIP_QTY = 0 OR p_ret_code != 0 ;

			end loop;
			close C_PP1;
		else
			open C_PP2();
			loop
		    fetch C_PP2 into C_PP_REC;
				exit when C_PP2%notfound or C_PP2%notfound is null;

				/* ??????? */
				if C_PP_REC.REMAINDER_QUANTITY <= WK_SLIP_QTY then
					WK_SLIP_QTY := WK_SLIP_QTY - C_PP_REC.REMAINDER_QUANTITY;
					QUTY_diff  := C_PP_REC.REMAINDER_QUANTITY;
					C_PP_REC.REMAINDER_QUANTITY := 0 ;
					WK_PG_ST := 'E';
				else
					C_PP_REC.REMAINDER_QUANTITY := C_PP_REC.REMAINDER_QUANTITY - WK_SLIP_QTY;
					QUTY_diff  := WK_SLIP_QTY;
					WK_SLIP_QTY := 0 ;
					WK_PG_ST   := 'A';
				end if;
DBMS_OUTPUT.PUT_LINE('WK_SLIP_QTY==' || WK_SLIP_QTY || '---WK_PG_ST=' || WK_PG_ST);

				/* ?? */
				UPDATE PRODUCT_PLAN SET REMAINDER_QUANTITY=C_PP_REC.REMAINDER_QUANTITY,
										PROGRESS_STATUS=WK_PG_ST
								  WHERE ITEM_NO=C_PP_REC.ITEM_NO
								    AND KURAIRE_DATE=C_PP_REC.KURAIRE_DATE
								    AND PRODUCT_LOT_NUMBER=C_PP_REC.PRODUCT_LOT_NUMBER;
				/* Call PRO_STRUCT */
				PRO_STRUCT(C_PP_REC.BM_ITEM_NO,
				           C_PP_REC.LEVEL_NO,
				           QUTY_diff,p_slip_date,p_slit_type,p_ret_code,C_PP_REC.SECTION_CODE,C_PP_REC.STATION_CODE);

DBMS_OUTPUT.PUT_LINE('p_ret_code==' || p_ret_code);
				/* End Jugment */
				exit when WK_SLIP_QTY = 0 OR p_ret_code != 0 ;

			end loop;
			close C_PP2;

		end if;
	end ;

END Products_receive_update;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."RECALC_PRODUCT_PLAN" ( out_result out varchar2, out_errmsg out varchar2 )
IS
/*
======================================================================

?????  ?FI) PGLOSAS
?      ?  ?PRODUCT_PLAN.REMAINDER_QUANTITY????
?      ?  ???
?  ?  ?  ?out_result ???? (0:???9:???
              out_errmsg ????????

?????  ????????????Commit???????


????
----------------------------------------------------------------------
  Ver    Date        Author          Memo
----------------------------------------------------------------------
  1.0    2015/10/26  NTTk)Hino       ????
======================================================================
*/
	
BEGIN
    declare
		out_errmsg    varchar2(1000);

		-- ??????
		wk_sysdate_d  date := sysdate;
		wk_sysdate_v  varchar2(21) := to_char(wk_sysdate_d, 'yyyy/mm/dd hh24:mi:ss');
		
		-- ???????
		wk_err_point       varchar2(100);
		wk_err_point_key   varchar2(100);
		
		-- ??
		wk_qty_kur_total TRANSACTION.SLIP_QUANTITY%type;       -- ???(???)???
		wk_qty_mps       PRODUCT_PLAN.PRODUCT_QUANTITY%type;   -- MPS ??
		wk_qty_remain    PRODUCT_PLAN.REMAINDER_QUANTITY%type; -- ? ??
		wk_wo_no         TRANSACTION.WO_NO%type;
		wk_item_no       TRANSACTION.ITEM_NO%type;
		wk_prg_status    PRODUCT_PLAN.PROGRESS_STATUS%type;
		wk_kur_dt        varchar2(10);                         -- (yyyy/mm/dd ??)
		
/* 2015/11/26 Y.Hagai add start */
		whi_rec whinventory%rowtype ;
		wk_slip_date        TRANSACTION.SLIP_DATE%type;      -- ????

/* 2015/11/26 Y.Hagai add end */

		-- TRANSACTION ??? (? ???????????)
		cursor csr_t  (p_slip_date date)is
			select      replace(rtrim(t.WO_NO),' ','')  WO_NO, 
                     t.ITEM_NO,
			         sum(t.SLIP_QUANTITY) as KURAIRE_TOTAL_QTY
			from     TRANSACTION t,
			         MPS_HEADER h
			where    t.SLIP_TYPE = '80' --('80':???)
			  and    h.WORK_ORDER is not null
--			  and    h.WORK_ORDER = t.WO_NO
			  and    replace(rtrim(h.WORK_ORDER),' ','') = replace(rtrim(t.WO_NO),' ','')
			  and    h.ITEM_NO    = t.ITEM_NO
			  and    t.SLIP_DATE  < p_slip_date
			group by replace(rtrim(t.WO_NO),' ',''), t.ITEM_NO
			;
		rec_t csr_t%rowtype;

		-- PRODUCT_PLAN ????REMAINDER_QUANTITY?0??ISSUE_REQ_DATE?????????
		cursor csr_p (p_WO_NO varchar2)  is
			select  replace(rtrim(p.WO_NO),' ','') WO_NO,
                   p.ITEM_NO,
                   nvl(p.PRODUCT_QUANTITY, 0) as MPS_QTY,
                   to_char(p.KURAIRE_DATE, 'yyyy/mm/dd') as KURAIRE_DATE_YMD,
                   p.PROGRESS_STATUS
			from   ( select    WO_NO, ITEM_NO, min(ISSUE_REQ_DATE) as MIN_ISSUE_REQ_DATE
			         from      PRODUCT_PLAN
--			         where     WO_NO              = p_WO_NO
			         where     replace(rtrim(WO_NO),' ','')              = replace(rtrim(p_WO_NO),' ','')
			           and     REMAINDER_QUANTITY <> 0
			         group by  WO_NO, ITEM_NO
			       ) m,
			       PRODUCT_PLAN p
--			where  m.WO_NO            = p.WO_NO
			where  replace(rtrim(m.WO_NO),' ','')        = replace(rtrim(p.WO_NO),' ','')
			  and  m.ITEM_NO          = p.ITEM_NO
			  and  m.MIN_ISSUE_REQ_DATE = p.ISSUE_REQ_DATE
			;
		rec_p csr_p%rowtype;

/* 2015/11/26 Y.Hagai add start */
		cursor C_WHI
		      is
		 select  *  from whinventory;
/* 2015/11/26 Y.Hagai add end */

	begin
--		delete PRODUCT_PLAN
--		   where KURAIRE_DATE <trunc(sysdate,'mm');
/* 2015/11/26 Y.Hagai add start */

		WHI_REC := null ;
		open C_WHI;
		    fetch C_WHI into WHI_REC ;
		close C_WHI;

		wk_slip_date  := to_date(WHI_REC.THIS_MONTH || '01','YYYYMMDD');

/* 2015/11/26 Y.Hagai add end */


		-- ???????????
		out_result  := '9';
		out_errmsg  := '';
		
		wk_err_point := 'Update PRODUCT_PLAN';

		-- ------------------------------------------------------------
		-- TRANSACTION ??? <Loop>
		-- ------------------------------------------------------------
		wk_err_point := 'Select TRANSACTION' || wk_err_point_key;
		open csr_t (wk_slip_date);
		loop
			fetch csr_t into rec_t;
			exit when csr_t%notfound or csr_t%notfound is null;
			
			wk_err_point_key := '(WO_NO=' || rec_t.WO_NO || ')';

			wk_qty_kur_total := rec_t.KURAIRE_TOTAL_QTY ;
				
			-- PRODUCT_PLAN.ISSUE_REQ_DATE ????????????????(TRANSACTION.KURAIRE_TOTAL_QTY) ??????

			while(wk_qty_kur_total > 0) loop
				
				wk_wo_no      := null;
				wk_qty_remain := 0;

				-- ------------------------------------------------------------
				-- PRODUCT_PLAN ???
				-- ------------------------------------------------------------
				wk_err_point := 'Select PRODUCT_PLAN' || wk_err_point_key;
--				open csr_p(rec_t.WO_NO);
				open csr_p(replace(rtrim(rec_t.WO_NO),' ',''));
				fetch csr_p into rec_p;
				if csr_p%notfound or csr_p%notfound is null then
					close csr_p;
					exit;
				else
					wk_prg_status := rec_p.PROGRESS_STATUS;

					if wk_qty_kur_total >= rec_p.MPS_QTY then
						wk_qty_remain    := 0;
						wk_qty_kur_total := wk_qty_kur_total - rec_p.MPS_QTY;
					else
						wk_qty_remain    := rec_p.MPS_QTY - wk_qty_kur_total;
						wk_qty_kur_total := 0;
						
						if wk_qty_remain < 0 then
							wk_prg_status := 'E';
						end if;
					end if;
					
					-- -------------------------------------------------
					-- PRODUCT_PLAN <Update>
					-- -------------------------------------------------
					wk_err_point := 'Update PRODUCT_PLAN' || wk_err_point_key;
					update PRODUCT_PLAN p
					set    p.REMAINDER_QUANTITY = wk_qty_remain,
					       p.PROGRESS_STATUS    = wk_prg_status,
					       p.PLAN_OPERATE_DATE  = sysdate
--					where  p.WO_NO        = rec_p.WO_NO
					where  replace(rtrim(p.WO_NO),' ','')        = replace(rtrim(rec_p.WO_NO),' ','')
					  and  p.ITEM_NO      = rec_p.ITEM_NO
					  and  to_char(p.KURAIRE_DATE, 'yyyy/mm/dd') = rec_p.KURAIRE_DATE_YMD
					;

					if wk_qty_kur_total <= 0 then
						close csr_p;
						exit;
					end if;
					
				end if;
				close csr_p;

			end loop;
				
		end loop ;
		close csr_t ;
		
		-- -------------------------------------------------
		-- ????10??????????? Y.Hagai
		-- -------------------------------------------------
		delete PRODUCT_PLAN
		where kuraire_date < wk_slip_date - 10; 
		
		-- ************************************************************
		--  ??????
		-- ************************************************************
		wk_err_point := 'SUCCESS';
		out_result   := '0'; -- ??

	exception
		when others then
			-- ************************************************************
			--  ??????
			-- ************************************************************
			out_errmsg := 'ERR_POINT=' || wk_err_point || ', ' || 'SQLERRM=' || SQLERRM;
			
			rollback;
	end;
END RECALC_PRODUCT_PLAN;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."RECOMPILE_OBJECT" 
IS BEGIN
/****************************************************************************
 ?????? RECOMPILE_OBJECT  ????????????
 ???       2008/03/01  FDK
 ????     YYYY/MM/DD  ??        ??
----------------------------------------------------------------------------
              YYYY/MM/DD  XXX         ?????
****************************************************************************/
	DECLARE
	
		WK_SQL VARCHAR2(500) ;

		-- ??????????
		CURSOR C1 IS
		 SELECT DISTINCT OBJECT_NAME, OBJECT_TYPE 
		   FROM USER_OBJECTS 
		  WHERE OBJECT_TYPE IN ('PROCEDURE','FUNCTION','PACKAGE') 
		    AND OBJECT_NAME != 'RECOMPILE_OBJECT' 
		    AND STATUS = 'INVALID'
		 ;
		C1_REC C1%ROWTYPE ;

		-- ?????????(STATUS)??
		CURSOR C2(PARAM1 IN VARCHAR2) IS
		 SELECT STATUS 
		   FROM USER_OBJECTS 
		  WHERE OBJECT_NAME = PARAM1 ;
		C2_REC C2%ROWTYPE ;

	BEGIN

		OPEN C1 ;
			LOOP
				FETCH C1 INTO C1_REC ;
				EXIT WHEN C1%NOTFOUND ;
				
				C2_REC := NULL ;
				OPEN C2(C1_REC.OBJECT_NAME) ;
					FETCH C2 INTO C2_REC ;

					IF C2_REC.STATUS ='INVALID' THEN
						DBMS_OUTPUT.PUT_LINE(C1_REC.OBJECT_TYPE || ' ' || C1_REC.OBJECT_NAME ||  '???????????') ;
						WK_SQL := 'ALTER ' || C1_REC.OBJECT_TYPE || ' ' || C1_REC.OBJECT_NAME || ' COMPILE  ' ;
						BEGIN
							EXECUTE IMMEDIATE WK_SQL;
								DBMS_OUTPUT.PUT_LINE('???????') ;
						EXCEPTION
							WHEN OTHERS THEN
								DBMS_OUTPUT.PUT_LINE('???????????????') ;
						END ;
					END IF ;

				CLOSE C2 ;

			END LOOP ;
		CLOSE C1 ;

	END ;

END RECOMPILE_OBJECT;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."REVIZIONUP" (PARAM_Item_no in number,
									   NEW_ITEM_no   in number,
									   RTN_param in out number)
AS
BEGIN
	DECLARE


	cursor C0
	is
	SELECT * FROM ITEM
	WHERE ITEM_NO=NEW_ITEM_no;

	C0_REC			C0%ROWTYPE := null;

	cursor C1
	is
	SELECT * FROM ITEM
	WHERE ITEM_NO=PARAM_Item_no;

	/* ???????? */
	C1_REC			C1%ROWTYPE := null;

	WK_level_next	number(2) := null;


	cursor C2
	is
	SELECT *
	  FROM STRUCTURE
	 WHERE UPPER_ITEM_NO=PARAM_Item_no
	   AND LEVEL_NO in (select MAX(LEVEL_NO) from STRUCTURE WHERE UPPER_ITEM_NO=PARAM_Item_no);
	/* ???????? */
	C2_REC			C2%ROWTYPE := null;



	cursor C3
	is
	SELECT l.LEVEL_CONT_KEY,l.LEVEL_NO,l.ITEM_NO
	  FROM LEVELD l,ITEM i
	 WHERE i.LEVEL_CONT_KEY=l.LEVEL_CONT_KEY
       AND i.ITEM_NO=l.ITEM_NO
       AND i.ITEM_NO=PARAM_Item_no
     ORDER BY LEVEL_NO DESC;

	/* ???????? */
	C3_REC			C3%ROWTYPE := null;

	cursor C4
	is
	SELECT ld.LEVEL_NO,l1.NEW_LEVEL_NO
	  FROM LEVELD ld,LEVEL1 l1
	 WHERE ld.ITEM_NO=1
	   AND ld.LEVEL_CONT_KEY=l1.LEVEL_CONT_KEY;

	/* ???????? */
	C4_REC			C4%ROWTYPE := null;

	begin
	--??????
	RTN_param := 1 ;

		/* ?????? */
		open C0();
		loop
	    fetch C0 into C0_REC ;
		          exit when C0%notfound or C0%notfound is null;
			--?????????????????
				RTN_param := -4 ;
				return ;
		end loop;
		close C0;

		/* ??RevizionUP????????? */
		open C4();
		loop
	    fetch C4 into C4_REC ;
		          exit when C4%notfound or C4%notfound is null;
			if C4_REC.LEVEL_NO < C4_REC.NEW_LEVEL_NO then
				RTN_param := -5 ;
				return ;
			end if;
		end loop;
		close C4;


		WK_level_next := null;

		/* ITEM */
		open C1();
		loop
	    fetch C1 into C1_REC ;
		          exit when C1%notfound or C1%notfound is null;

			if C1_REC.DRAWING_REV is null OR C1_REC.DRAWING_REV = ' ' then
				WK_level_next := 65;
			else
				WK_level_next := ASCII(C1_REC.DRAWING_REV) + 1 ;
			end if;

				   INSERT INTO ITEM(UPTO_DATE,REG_DATE,DELETE_TYPE,
									ITEM_NO,ITEM_CODE,ITEM,ITEM_FLAG,ORIGIN_CODE,
									DESCRIPTION,CLASS_CODE,UOM_Q,UOM_W,UOM_L,
									SUPPLIER_CODE,EXTERNAL_UNIT_NUMBER,
									STANDARD_PRICE,NEXT_TERM_PRICE,SUPPLIERS_PRICE,
									CURR_CODE,WEIGHT,STOCK_SUBJECT_CODE,COST_SUBJECT_CODE,
									COST_PROCESS_CODE,MANUFACT_LEADTIME,
									PURCHASE_LEADTIME,ADJUSTMENT_LEADTIME,
									REORDER_POINT,LLC_CODE,LEVEL_CONT_KEY,
									DRAWING_NO,DRAWING_REV,APPLICABLE_MODEL,
									CATALOG_NO,ISSUE_POLICY,SECTION_CODE,
									MANUFACT_FAIL_RATE,MAKER_FLAG,
									UNIT_STOCK,UNIT_STOCK_RATE,ISSUE_LOT,
									SAFETY_STOCK,ORDER_POLICY,MAK,
									UNIT_ENGINEERING,UNIT_ENGINEER_RATE)
						     VALUES(sysdate,
									sysdate,
									C1_REC.DELETE_TYPE,
									NEW_ITEM_no,
									C1_REC.ITEM_CODE,
									C1_REC.ITEM,
									C1_REC.ITEM_FLAG,
									C1_REC.ORIGIN_CODE,
									C1_REC.DESCRIPTION,
									C1_REC.CLASS_CODE,
									C1_REC.UOM_Q,
									C1_REC.UOM_W,
									C1_REC.UOM_L,
									C1_REC.SUPPLIER_CODE,
									C1_REC.EXTERNAL_UNIT_NUMBER,
									C1_REC.STANDARD_PRICE,
									C1_REC.NEXT_TERM_PRICE,
									C1_REC.SUPPLIERS_PRICE,
									C1_REC.CURR_CODE,
									C1_REC.WEIGHT,
									C1_REC.STOCK_SUBJECT_CODE,
									C1_REC.COST_SUBJECT_CODE,
									C1_REC.COST_PROCESS_CODE,
									C1_REC.MANUFACT_LEADTIME,
									C1_REC.PURCHASE_LEADTIME,
									C1_REC.ADJUSTMENT_LEADTIME,
									C1_REC.REORDER_POINT,
									C1_REC.LLC_CODE,
									C1_REC.LEVEL_CONT_KEY,
									C1_REC.DRAWING_NO,
									CHR(WK_level_next),
									C1_REC.APPLICABLE_MODEL,
									C1_REC.CATALOG_NO,
									C1_REC.ISSUE_POLICY,
									C1_REC.SECTION_CODE,
									C1_REC.MANUFACT_FAIL_RATE,
									C1_REC.MAKER_FLAG,
									C1_REC.UNIT_STOCK,
									C1_REC.UNIT_STOCK_RATE,
									C1_REC.ISSUE_LOT,
									C1_REC.SAFETY_STOCK,
									C1_REC.ORDER_POLICY,
									C1_REC.MAK,
									C1_REC.UNIT_ENGINEERING,
									C1_REC.UNIT_ENGINEER_RATE								
									);


		end loop;
		close C1;


		--????????????????
		if WK_level_next is null then
			RTN_param := -1 ;
			return ;
		end if;

		WK_level_next := null;

		/* STRUCTURE */
		open C2();
		loop
	    fetch C2 into C2_REC;
		          exit when C2%notfound or C2%notfound is null;

			WK_level_next := C2_REC.LEVEL_NO + 1;

			INSERT INTO STRUCTURE(OPERATION_DATE,UPPER_ITEM_NO,
								  LOWER_ITEM_NO,LEVEL_NO,
								  REVISION,LINE_NO,REFERENCE_NUMBER,
								  QUANTITY,QUANTITY_BASE,FAILURE_RATE,
								  USER_SUPPLY_FLAG,SUBCON_SUPPLY_FLAG)
						   VALUES(sysdate,
								  NEW_ITEM_no,
								  C2_REC.LOWER_ITEM_NO,
								  WK_level_next,
								  C2_REC.REVISION,
								  C2_REC.LINE_NO,
								  C2_REC.REFERENCE_NUMBER,
								  C2_REC.QUANTITY,
								  C2_REC.QUANTITY_BASE,
								  C2_REC.FAILURE_RATE,
								  C2_REC.USER_SUPPLY_FLAG,
								  C2_REC.SUBCON_SUPPLY_FLAG);

		end loop;
		close C2;

		--????????????????
		if WK_level_next is null then
			RTN_param := -2 ;
			return ;
		end if;


		WK_level_next := null;

		open C3();
		loop
	    fetch C3 into C3_REC;
		          exit when C3%notfound or C3%notfound is null;

			if WK_level_next is null then
				WK_level_next := C3_REC.LEVEL_NO + 1;

				INSERT INTO LEVELD(OPERATION_DATE,LEVEL_CONT_KEY,
								   LEVEL_NO,ITEM_NO)
						    VALUES(sysdate,
								   C3_REC.LEVEL_CONT_KEY,
								   WK_level_next,
								   NEW_ITEM_no);

			end if;

		end loop;
		close C3;


		--????????????????
		if WK_level_next is null then
			RTN_param := -3 ;
			return ;
		end if;

/* ?????
EXCEPTION
	 when OTHERS THEN
          ROLLBACK;
*/
   end;

END Revizionup;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."SALES_RESTORE" (
  v_do_no in varchar2,
  v_bl_date  in date,
  v_ret_code in out number
)
as
begin
  declare

   v_slip_type transaction.slip_type%type := '84' ;

   DOH_REC do_header%rowtype ;
   DOD_REC do_details%rowtype ;
   DOS_REC do_so%rowtype ;
   SOD_REC so_details%rowtype ;
   ITM_REC item%rowtype ;
   CUS_REC company%rowtype ;
   CU2_REC company%rowtype ;
   CNF_REC configuration%rowtype ;
   DOHCHK_REC do_header%rowtype ;

   /* DO HEADER?? */
   cursor C_DOH(PARAM1 in varchar2)  is
     select * from do_header where do_no = PARAM1
     for update
     ;

   /* DO DETAILS?? */
   cursor C_DOD(PARAM1 in varchar2)  is
     select * from do_details where do_no = PARAM1 and item_no is not null
     ;

   /* DO SO (VIEW)?? */
   cursor C_DOS(PARAM1 in varchar2)  is
     select * from do_so where do_no = PARAM1
     ;

   /* SO DETAILS?? */
   cursor C_SOD(PARAM1 in varchar2,PARAM2 in VARCHAR2)  is
     select * from so_details where so_no = PARAM1 and line_no =PARAM2
     ;


   /* ITEM ????? */
   cursor C_ITM(PARAM1 in number)  is
     select * from item where item_no = PARAM1 and DELETE_TYPE is null
     ;

   /* COMPANY ????? */
   cursor C_COM(PARAM1 in number)  is
     select * from company where company_code = PARAM1 and DELETE_TYPE is null
     ;

   /* COMPANY ?????2 */
   cursor C_COM2  is
     select * from company where company_type = 0 and DELETE_TYPE is null
     ;

   /* CONFIGURATION ?? */
   cursor C_CNF  is
     select * from CONFIGURATION where CONFIG_KEY = 'FI_PO_TRANSIT'
     ;
   /* DO HEADER?? */
   cursor C_DOH_CHK(PARAM1 in varchar2)  is
     select *  from do_header where do_no = PARAM1
     ;
 
 begin
--FDAC

    open C_DOH_CHK(v_do_no) ;
        DOHCHK_REC := null ;
        fetch C_DOH_CHK into DOHCHK_REC ;
    close C_DOH_CHK ;
    IF DOHCHK_REC.BL_DATE is not null Then
          FDAC_SALES_TRN_DO_PRC(v_do_no,'M',v_bl_date) ;
    End If ;



--???
    v_ret_code := 0 ;  --???????

 /* ??????? */
    open C_COM2 ;
        CU2_REC := null ;
        fetch C_COM2 into CU2_REC ;
    close C_COM2 ;

 /* ??????? */
    open C_CNF ;
        CNF_REC := null ;
        fetch C_CNF into CNF_REC ;
    close C_CNF ;

--?????
 /* ????? */
    open C_DOH(v_do_no) ;
        DOH_REC := null ;
        fetch C_DOH into DOH_REC ;
    close C_DOH ;
      /* ??????? */
       IF DOH_REC.DO_NO is null Then
           -- ????????????
           v_ret_code :=-1 ;
           goto ERROR ;
       End If ;
       IF DOH_REC.SHIP_END_FLG is null Then
           -- ??????NULL????
           v_ret_code :=-1 ;
           goto ERROR ;
       End If ;
       IF DOH_REC.BL_DATE is null Then
           -- ??????????????
           v_ret_code :=-1 ;
           goto ERROR ;
       End If ;

       /* ?????? */
          DELETE FROM ACCOUNT_RECEIVABLE
          where BL_NO = DOH_REC.DO_NO
            and TYPE =1 ;

    /* ???? */
    open C_DOD(DOH_REC.DO_NO) ;
        Loop
            DOD_REC := null ;
            fetch C_DOD into DOD_REC ;
                exit when C_DOD%notfound or C_DOD%notfound is null;
                /* ????? */
                 IF DOD_REC.DO_NO is null Then
                     -- ????????????
                     v_ret_code :=-2 ;
                     goto ERROR ;
                 End If ;

                 /* ??????? */
                 open C_ITM(DOD_REC.ITEM_NO) ;
                     ITM_REC := null ;
                     fetch C_ITM into ITM_REC ;
                 close C_ITM ;
                   /* ??????? */
                    IF ITM_REC.ITEM_NO is null Then
                        -- ?????????????????
                        v_ret_code :=-3 ;
                        goto ERROR ;
                    End If ;


          end loop DOD ;
      close C_DOD ;


 /* ????????????????? */
      open C_DOS(DOH_REC.DO_NO) ;
         loop
            DOS_REC := null ;
            fetch C_DOS into DOS_REC ;
               exit when C_DOS%notfound or C_DOS%notfound is null;

                /* SO_DETAILS?? */
                open C_SOD(DOS_REC.SO_NO,DOS_REC.SO_LINE_NO) ;
                    SOD_REC := null ;
                    fetch C_SOD into SOD_REC ;
                close C_SOD ;

               /* ITEM ????? */
                open C_ITM(DOS_REC.ITEM_NO) ;
                    ITM_REC := null ;
                    fetch C_ITM into ITM_REC ;
                close C_ITM ;

               /* CUSTOMER ????? */
                open C_COM(DOH_REC.CUSTOMER_CODE) ;
                    CUS_REC := null ;
                    fetch C_COM into CUS_REC ;
                close C_COM ;

               if CUS_REC.COUNTRY_CODE =192 Then
               /* FDK??? */
               insert into oa_invoice_trn(
                   EB_TYPE            ,
                   COMPANY_CODE       ,
                   SECTION_CODE       ,
                   PERSON_CODE        ,
                   VENDOR_CODE        ,
                   DIST_COUNTRY_CODE  ,
                   DATA_DATE          ,
                   INVOICE_NO         ,
                   PACKING_NO         ,
                   ITEM_NO            ,
                   ITEM_TYPE          ,
                   QUANTITY           ,
                   PURCHASE_PRICE     ,
                   CURR_CODE          ,
                   EXCHANGE_RATE      ,
                   PURCHASE_AMOUNT    ,
                   PO_NO              ,
                   LINE_NO            ,
                   OPERATION_DATE     ,
                   DATA_SEQ_NO        ,
                   DATA_SOURCE_TYPE   ,
                   WAREHOUSE_CODE     ,
                   YEN_RATE           ,
                   INPORT_FLG         ,
                   PACK_QTY
               ) VALUES (
                   'E',
                   DOH_REC.CUSTOMER_CODE   ,
                   null                    ,
                   null                    ,
                   CU2_REC.COMPANY_CODE    ,
                   105                     ,
                   V_BL_DATE               ,
                   DOH_REC.INV_NO          ,
                   null                    ,
                   DOS_REC.ITEM_NO         ,
                   null                    ,
                   DOS_REC.SO_QTY  * -1    ,
                   DOS_REC.U_PRICE         ,
                   DOH_REC.CURR_CODE       ,
                   null                    ,
                   null                    ,
                   DOS_REC.CUSTOMER_PO_NO  ,
                   SOD_REC.CUSTOMER_PO_LINE_NO ,
                   SYSDATE                 ,
                   null                    ,
                   'OA'                    ,
                   0                       ,
                   0                       ,
                   0                       ,
                   ITM_REC.EXTERNAL_UNIT_NUMBER
               ) ;
               /* FDK??????? (FI????)*/
               if CNF_REC.CONFIG_FLAG = 1 Then
                   insert into fdk_po_transit_trn(
                       COMPANY_CODE            ,
                       SECTION_CODE            ,
                       PERSON_CODE             ,
                       VENDOR_CODE             ,
                       DIST_COUNTRY_CODE       ,
                       DATA_DATE               ,
                       INVOICE_NO              ,
                       INVOICE_LINE_NO         ,
                       PACKING_NO              ,
                       PO_NO                   ,
                       PO_LINE_NO              ,
                       ITEM                    ,
                       ITEM_NO                 ,
                       QUANTITY                ,
                       PURCHASE_PRICE          ,
                       CURR_CODE               ,
                       EXCHANGE_RATE           ,
                       PURCHASE_AMOUNT         ,
                       OPERATION_DATE          ,
                       DATA_SEQ_NO             ,
                       DATA_SOURCE_TYPE        ,
                       WAREHOUSE_CODE          ,
                       YEN_RATE                ,
                       INPORT_FLG              ,
                       PACK_QTY                ,
                       SHIPTO_CODE
                   ) VALUES (
                       DOH_REC.CUSTOMER_CODE   ,
                       null                    ,
                       null                    ,
                       CU2_REC.COMPANY_CODE    ,
                       105                     ,
                       V_BL_DATE               ,
                       DOH_REC.DO_NO           ,
                       DOS_REC.LINE_NO         ,
                       null                    ,
                       DOS_REC.CUSTOMER_PO_NO  ,
                       SOD_REC.CUSTOMER_PO_LINE_NO  ,
                       ITM_REC.ITEM            ,
                       DOS_REC.ITEM_NO         ,
                       DOS_REC.SO_QTY * -1     ,
                       DOS_REC.U_PRICE         ,
                       DOH_REC.CURR_CODE       ,
                       null                    ,
                       SOD_REC.AMT_O           ,
                       SYSDATE                 ,
                       null                    ,
                       'PT'                    ,
                       0                       ,
                       0                       ,
                       0                       ,
                       ITM_REC.EXTERNAL_UNIT_NUMBER,
                       null
                   ) ;
               End If ;

               End If ;
               /* ACCPAC????????????????? */
               INSERT INTO TRANSACTION_SALES (
                  OPERATION_DATE,
                  SECTION_CODE,
                  ITEM_NO,
                  ITEM_CODE,
                  ITEM_NAME,
                  ITEM_DESCRIPTION,
                  STOCK_SUBJECT_CODE,
                  ACCOUNTING_MONTH,
                  SLIP_DATE,
                  SLIP_TYPE,
                  SLIP_NO,
                  SLIP_QUANTITY,
                  SLIP_PRICE,
                  SLIP_AMOUNT,
                  CURR_CODE,
                  STANDARD_PRICE,
                  STANDARD_AMOUNT,
                  SUPPLIERS_PRICE,
                  COMPANY_CODE,
                  ORDER_NUMBER,
                  LINE_NO,
                  COST_PROCESS_CODE,
                  COST_SUBJECT_CODE,
                  PRODUCT_LOT_NUMBER,
                  PURCHASE_QUANTITY,
                  PURCHASE_PRICE,
                  PURCHASE_AMOUNT,
                  PURCHASE_UNIT,
                  UNIT_STOCK,
                  EX_RATE,
                  ANSWER_NO,
                  REMARK1,
                  REMARK2,
                  CUSTOMER_PO_NO,
                  WO_NO,
                  DATE_CODE,
                  REMARK3,
                  INV_NO
               ) VALUES (
                  SYSDATE                   ,
                  ITM_REC.SECTION_CODE      ,
                  DOS_REC.ITEM_NO           ,
                  ITM_REC.ITEM_CODE         ,
                  ITM_REC.ITEM              ,
                  ITM_REC.DESCRIPTION       ,
                  ITM_REC.STOCK_SUBJECT_CODE,
                  TO_CHAR(V_BL_DATE,'YYYYMM'),
                  V_BL_DATE                 ,
                  '84'                      ,
                  DOH_REC.DO_NO             ,
                  DOS_REC.QTY  * -1         ,
                  DOS_REC.U_PRICE           ,
                  round(DOS_REC.QTY * DOS_REC.U_PRICE,2) * -1,
                  DOH_REC.CURR_CODE         ,
                  ITM_REC.STANDARD_PRICE    ,
                  round(ITM_REC.STANDARD_PRICE * DOS_REC.QTY,8) * -1,
                  ITM_REC.SUPPLIERS_PRICE   ,
                  DOH_REC.CUSTOMER_CODE     ,
                  NULL                      ,
                  NULL                      ,
                  ITM_REC.COST_PROCESS_CODE ,
                  ITM_REC.COST_SUBJECT_CODE ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  ITM_REC.UNIT_STOCK        ,
                  DOH_REC.EX_RATE           ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  DOH_REC.INV_NO              
               ) ;

         End loop ;
      close C_DOS ;


--???
     /* SHIP END FLAG ???  */
        UPDATE DO_HEADER SET BL_DATE=null,SHIP_END_FLG=NULL WHERE DO_NO = DOH_REC.DO_NO ;
--?????
    <<ERROR>>
       null ;
  end ;
end Sales_RESTORE ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."SALES_RESTORE_20141009" (
  v_do_no in varchar2,
  v_bl_date  in date,
  v_ret_code in out number
)
as
begin
  declare

   v_slip_type transaction.slip_type%type := '84' ;

   DOH_REC do_header%rowtype ;
   DOD_REC do_details%rowtype ;
   DOS_REC do_so%rowtype ;
   SOD_REC so_details%rowtype ;
   ITM_REC item%rowtype ;
   CUS_REC company%rowtype ;
   CU2_REC company%rowtype ;
   CNF_REC configuration%rowtype ;
   DOHCHK_REC do_header%rowtype ;

   /* DO HEADER?? */
   cursor C_DOH(PARAM1 in varchar2)  is
     select * from do_header where do_no = PARAM1
     for update
     ;

   /* DO DETAILS?? */
   cursor C_DOD(PARAM1 in varchar2)  is
     select * from do_details where do_no = PARAM1 and item_no is not null
     ;

   /* DO SO (VIEW)?? */
   cursor C_DOS(PARAM1 in varchar2)  is
     select * from do_so where do_no = PARAM1
     ;

   /* SO DETAILS?? */
   cursor C_SOD(PARAM1 in varchar2,PARAM2 in VARCHAR2)  is
     select * from so_details where so_no = PARAM1 and line_no =PARAM2
     ;


   /* ITEM ????? */
   cursor C_ITM(PARAM1 in number)  is
     select * from item where item_no = PARAM1 and DELETE_TYPE is null
     ;

   /* COMPANY ????? */
   cursor C_COM(PARAM1 in number)  is
     select * from company where company_code = PARAM1 and DELETE_TYPE is null
     ;

   /* COMPANY ?????2 */
   cursor C_COM2  is
     select * from company where company_type = 0 and DELETE_TYPE is null
     ;

   /* CONFIGURATION ?? */
   cursor C_CNF  is
     select * from CONFIGURATION where CONFIG_KEY = 'FI_PO_TRANSIT'
     ;
   /* DO HEADER?? */
   cursor C_DOH_CHK(PARAM1 in varchar2)  is
     select *  from do_header where do_no = PARAM1
     ;
 
 begin
--FDAC

    open C_DOH_CHK(v_do_no) ;
        DOHCHK_REC := null ;
        fetch C_DOH_CHK into DOHCHK_REC ;
    close C_DOH_CHK ;
    IF DOHCHK_REC.BL_DATE is not null Then
          FDAC_SALES_TRN_DO_PRC(v_do_no,'M',v_bl_date) ;
    End If ;



--???
    v_ret_code := 0 ;  --???????

 /* ??????? */
    open C_COM2 ;
        CU2_REC := null ;
        fetch C_COM2 into CU2_REC ;
    close C_COM2 ;

 /* ??????? */
    open C_CNF ;
        CNF_REC := null ;
        fetch C_CNF into CNF_REC ;
    close C_CNF ;

--?????
 /* ????? */
    open C_DOH(v_do_no) ;
        DOH_REC := null ;
        fetch C_DOH into DOH_REC ;
    close C_DOH ;
      /* ??????? */
       IF DOH_REC.DO_NO is null Then
           -- ????????????
           v_ret_code :=-1 ;
           goto ERROR ;
       End If ;
       IF DOH_REC.SHIP_END_FLG is null Then
           -- ??????NULL????
           v_ret_code :=-1 ;
           goto ERROR ;
       End If ;
       IF DOH_REC.BL_DATE is null Then
           -- ??????????????
           v_ret_code :=-1 ;
           goto ERROR ;
       End If ;

       /* ?????? */
          DELETE FROM ACCOUNT_RECEIVABLE
          where BL_NO = DOH_REC.DO_NO
            and TYPE =1 ;

    /* ???? */
    open C_DOD(DOH_REC.DO_NO) ;
        Loop
            DOD_REC := null ;
            fetch C_DOD into DOD_REC ;
                exit when C_DOD%notfound or C_DOD%notfound is null;
                /* ????? */
                 IF DOD_REC.DO_NO is null Then
                     -- ????????????
                     v_ret_code :=-2 ;
                     goto ERROR ;
                 End If ;

                 /* ??????? */
                 open C_ITM(DOD_REC.ITEM_NO) ;
                     ITM_REC := null ;
                     fetch C_ITM into ITM_REC ;
                 close C_ITM ;
                   /* ??????? */
                    IF ITM_REC.ITEM_NO is null Then
                        -- ?????????????????
                        v_ret_code :=-3 ;
                        goto ERROR ;
                    End If ;


          end loop DOD ;
      close C_DOD ;


 /* ????????????????? */
      open C_DOS(DOH_REC.DO_NO) ;
         loop
            DOS_REC := null ;
            fetch C_DOS into DOS_REC ;
               exit when C_DOS%notfound or C_DOS%notfound is null;

                /* SO_DETAILS?? */
                open C_SOD(DOS_REC.SO_NO,DOS_REC.SO_LINE_NO) ;
                    SOD_REC := null ;
                    fetch C_SOD into SOD_REC ;
                close C_SOD ;

               /* ITEM ????? */
                open C_ITM(DOS_REC.ITEM_NO) ;
                    ITM_REC := null ;
                    fetch C_ITM into ITM_REC ;
                close C_ITM ;

               /* CUSTOMER ????? */
                open C_COM(DOH_REC.CUSTOMER_CODE) ;
                    CUS_REC := null ;
                    fetch C_COM into CUS_REC ;
                close C_COM ;

               if CUS_REC.COUNTRY_CODE =192 Then
               /* FDK??? */
               insert into oa_invoice_trn(
                   EB_TYPE            ,
                   COMPANY_CODE       ,
                   SECTION_CODE       ,
                   PERSON_CODE        ,
                   VENDOR_CODE        ,
                   DIST_COUNTRY_CODE  ,
                   DATA_DATE          ,
                   INVOICE_NO         ,
                   PACKING_NO         ,
                   ITEM_NO            ,
                   ITEM_TYPE          ,
                   QUANTITY           ,
                   PURCHASE_PRICE     ,
                   CURR_CODE          ,
                   EXCHANGE_RATE      ,
                   PURCHASE_AMOUNT    ,
                   PO_NO              ,
                   LINE_NO            ,
                   OPERATION_DATE     ,
                   DATA_SEQ_NO        ,
                   DATA_SOURCE_TYPE   ,
                   WAREHOUSE_CODE     ,
                   YEN_RATE           ,
                   INPORT_FLG         ,
                   PACK_QTY
               ) VALUES (
                   'E',
                   DOH_REC.CUSTOMER_CODE   ,
                   null                    ,
                   null                    ,
                   CU2_REC.COMPANY_CODE    ,
                   105                     ,
                   V_BL_DATE               ,
                   DOH_REC.INV_NO          ,
                   null                    ,
                   DOS_REC.ITEM_NO         ,
                   null                    ,
                   DOS_REC.SO_QTY  * -1    ,
                   DOS_REC.U_PRICE         ,
                   DOH_REC.CURR_CODE       ,
                   null                    ,
                   null                    ,
                   DOS_REC.CUSTOMER_PO_NO  ,
                   SOD_REC.CUSTOMER_PO_LINE_NO ,
                   SYSDATE                 ,
                   null                    ,
                   'OA'                    ,
                   0                       ,
                   0                       ,
                   0                       ,
                   ITM_REC.EXTERNAL_UNIT_NUMBER
               ) ;
               /* FDK??????? (FI????)*/
               if CNF_REC.CONFIG_FLAG = 1 Then
                   insert into fdk_po_transit_trn(
                       COMPANY_CODE            ,
                       SECTION_CODE            ,
                       PERSON_CODE             ,
                       VENDOR_CODE             ,
                       DIST_COUNTRY_CODE       ,
                       DATA_DATE               ,
                       INVOICE_NO              ,
                       INVOICE_LINE_NO         ,
                       PACKING_NO              ,
                       PO_NO                   ,
                       PO_LINE_NO              ,
                       ITEM                    ,
                       ITEM_NO                 ,
                       QUANTITY                ,
                       PURCHASE_PRICE          ,
                       CURR_CODE               ,
                       EXCHANGE_RATE           ,
                       PURCHASE_AMOUNT         ,
                       OPERATION_DATE          ,
                       DATA_SEQ_NO             ,
                       DATA_SOURCE_TYPE        ,
                       WAREHOUSE_CODE          ,
                       YEN_RATE                ,
                       INPORT_FLG              ,
                       PACK_QTY                ,
                       SHIPTO_CODE
                   ) VALUES (
                       DOH_REC.CUSTOMER_CODE   ,
                       null                    ,
                       null                    ,
                       CU2_REC.COMPANY_CODE    ,
                       105                     ,
                       V_BL_DATE               ,
                       DOH_REC.DO_NO           ,
                       DOS_REC.LINE_NO         ,
                       null                    ,
                       DOS_REC.CUSTOMER_PO_NO  ,
                       SOD_REC.CUSTOMER_PO_LINE_NO  ,
                       ITM_REC.ITEM            ,
                       DOS_REC.ITEM_NO         ,
                       DOS_REC.SO_QTY * -1     ,
                       DOS_REC.U_PRICE         ,
                       DOH_REC.CURR_CODE       ,
                       null                    ,
                       SOD_REC.AMT_O           ,
                       SYSDATE                 ,
                       null                    ,
                       'PT'                    ,
                       0                       ,
                       0                       ,
                       0                       ,
                       ITM_REC.EXTERNAL_UNIT_NUMBER,
                       null
                   ) ;
               End If ;

               End If ;
               /* ACCPAC????????????????? */
               INSERT INTO TRANSACTION_SALES (
                  OPERATION_DATE,
                  SECTION_CODE,
                  ITEM_NO,
                  ITEM_CODE,
                  ITEM_NAME,
                  ITEM_DESCRIPTION,
                  STOCK_SUBJECT_CODE,
                  ACCOUNTING_MONTH,
                  SLIP_DATE,
                  SLIP_TYPE,
                  SLIP_NO,
                  SLIP_QUANTITY,
                  SLIP_PRICE,
                  SLIP_AMOUNT,
                  CURR_CODE,
                  STANDARD_PRICE,
                  STANDARD_AMOUNT,
                  SUPPLIERS_PRICE,
                  COMPANY_CODE,
                  ORDER_NUMBER,
                  LINE_NO,
                  COST_PROCESS_CODE,
                  COST_SUBJECT_CODE,
                  PRODUCT_LOT_NUMBER,
                  PURCHASE_QUANTITY,
                  PURCHASE_PRICE,
                  PURCHASE_AMOUNT,
                  PURCHASE_UNIT,
                  UNIT_STOCK,
                  EX_RATE,
                  ANSWER_NO,
                  REMARK1,
                  REMARK2,
                  CUSTOMER_PO_NO,
                  WO_NO,
                  DATE_CODE,
                  REMARK3,
                  INV_NO
               ) VALUES (
                  SYSDATE                   ,
                  ITM_REC.SECTION_CODE      ,
                  DOS_REC.ITEM_NO           ,
                  ITM_REC.ITEM_CODE         ,
                  ITM_REC.ITEM              ,
                  ITM_REC.DESCRIPTION       ,
                  ITM_REC.STOCK_SUBJECT_CODE,
                  TO_CHAR(V_BL_DATE,'YYYYMM'),
                  V_BL_DATE                 ,
                  '84'                      ,
                  DOH_REC.DO_NO             ,
                  DOS_REC.QTY  * -1         ,
                  DOS_REC.U_PRICE           ,
                  round(DOS_REC.QTY * DOS_REC.U_PRICE,2) * -1,
                  DOH_REC.CURR_CODE         ,
                  ITM_REC.STANDARD_PRICE    ,
                  round(ITM_REC.STANDARD_PRICE * DOS_REC.QTY,8) * -1,
                  ITM_REC.SUPPLIERS_PRICE   ,
                  DOH_REC.CUSTOMER_CODE     ,
                  NULL                      ,
                  NULL                      ,
                  ITM_REC.COST_PROCESS_CODE ,
                  ITM_REC.COST_SUBJECT_CODE ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  ITM_REC.UNIT_STOCK        ,
                  DOH_REC.EX_RATE           ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  DOH_REC.INV_NO              
               ) ;

         End loop ;
      close C_DOS ;


--???
     /* SHIP END FLAG ???  */
        UPDATE DO_HEADER SET BL_DATE=null,SHIP_END_FLG=NULL WHERE DO_NO = DOH_REC.DO_NO ;
--?????
    <<ERROR>>
       null ;
  end ;
end Sales_RESTORE_20141009 ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."SALES_UPDATE" (
  v_do_no in varchar2,
  v_bl_date in date,
  v_ret_code in out number
)
as
begin
  declare

   DOH_REC do_header%rowtype ;
   DOD_REC do_details%rowtype ;
   DOS_REC do_so%rowtype ;
   SOD_REC so_details%rowtype ;
   ITM_REC item%rowtype ;
   CUS_REC company%rowtype ;
   CU2_REC company%rowtype ;
   CNF_REC configuration%rowtype ;
   DOHCHK_REC do_header%rowtype ;

   /* DO HEADER?? */
   cursor C_DOH(PARAM1 in varchar2)  is
     select * from do_header where do_no = PARAM1
     for update
     ;

   /* DO DETAILS?? */
   cursor C_DOD(PARAM1 in varchar2)  is
     select * from do_details where do_no = PARAM1 and item_no is not null
     ;

   /* DO SO (VIEW)?? */
   cursor C_DOS(PARAM1 in varchar2)  is
     select * from do_so where do_no = PARAM1
     ;

   /* SO DETAILS?? */
   cursor C_SOD(PARAM1 in varchar2,PARAM2 in VARCHAR2)  is
     select * from so_details where so_no = PARAM1 and line_no =PARAM2
     ;

   /* ITEM ????? */
   cursor C_ITM(PARAM1 in number)  is
     select * from item where item_no = PARAM1 and DELETE_TYPE is null
     ;

   /* COMPANY ????? */
   cursor C_COM(PARAM1 in number)  is
     select * from company where company_code = PARAM1 and DELETE_TYPE is null
     ;

   /* COMPANY ?????2 */
   cursor C_COM2  is
     select * from company where company_type = 0 and DELETE_TYPE is null
     ;

   /* CONFIGURATION ?? */
   cursor C_CNF  is
     select * from CONFIGURATION where CONFIG_KEY = 'FI_PO_TRANSIT'
     ;

   /* DO HEADER?? */
   cursor C_DOH_CHK(PARAM1 in varchar2)  is
     select *  from do_header where do_no = PARAM1
     ;

  begin
--FDAC
    open C_DOH_CHK(v_do_no) ;
        DOHCHK_REC := null ;
        fetch C_DOH_CHK into DOHCHK_REC ;
    close C_DOH_CHK ;
    IF DOHCHK_REC.BL_DATE is null Then
         FDAC_SALES_TRN_DO_PRC(v_do_no,'P',v_bl_date) ;
    End If ;


--???
    v_ret_code := 0 ;  --???????

 /* ??????? */
    open C_COM2 ;
        CU2_REC := null ;
        fetch C_COM2 into CU2_REC ;
    close C_COM2 ;

 /* ??????? */
    open C_CNF ;
        CNF_REC := null ;
        fetch C_CNF into CNF_REC ;
    close C_CNF ;


--?????
 /* ????? */
    open C_DOH(v_do_no) ;
        DOH_REC := null ;
        fetch C_DOH into DOH_REC ;
    close C_DOH ;
      /* ??????? */
       IF DOH_REC.DO_NO is null Then
           -- ????????????
           v_ret_code :=-1 ;
           goto ERROR ;
       End If ;
       IF DOH_REC.SHIP_END_FLG is not null Then
           -- ?????????????????
           v_ret_code :=-1 ;
           goto ERROR ;
       End If ;

       /* ?????? */
          INSERT INTO ACCOUNT_RECEIVABLE(
               CUSTOMER_CODE      ,
               BL_NO              ,
               TYPE               ,
               RP_NO              ,
               RECEIPT_DATE       ,
               AMT                ,
               BANK               ,
               BL_DATE            ,
               CURR_CODE          ,
               RATE               ,
               AMT_F              ,
               CHEQ               ,
               REG_DATE           ,
               UPTO_DATE          ,
               PDAYS              ,
               PDESC              ,
               PBY
          )VALUES(
               DOH_REC.CUSTOMER_CODE  ,
               DOH_REC.DO_NO,
               1                  ,
               NULL               ,
               V_BL_DATE          ,
               round(DOH_REC.AMT_O  * DOH_REC.EX_RATE,2)     ,
               NULL               ,
               v_bl_date + nvl(DOH_REC.PDAYS,0),
               DOH_REC.CURR_CODE  ,
               DOH_REC.EX_RATE    ,
               DOH_REC.AMT_O      ,
               NULL               ,
               SYSDATE            ,
               SYSDATE            ,
               DOH_REC.PDAYS      ,
               DOH_REC.PDESC      ,
               DOH_REC.PBY
          ) ;

    /* ???? */
    open C_DOD(DOH_REC.DO_NO) ;
        Loop
            DOD_REC := null ;
            fetch C_DOD into DOD_REC ;
            exit when C_DOD%notfound or C_DOD%notfound is null;
               /* ??????? */
                IF DOD_REC.DO_NO is null Then
                    -- ????????????
                    v_ret_code :=-2 ;
                    goto ERROR ;
                End If ;

                /* ??????? */
                open C_ITM(DOD_REC.ITEM_NO) ;
                    ITM_REC := null ;
                    fetch C_ITM into ITM_REC ;
                close C_ITM ;
                  /* ??????? */
                   IF ITM_REC.ITEM_NO is null Then
                       -- ?????????????????
                       v_ret_code :=-3 ;
                       goto ERROR ;
                   End If ;

          end loop DOD ;
      close C_DOD ;


 /* OA_INVOICE ?? */
      open C_DOS(DOH_REC.DO_NO) ;
         loop
            DOS_REC := null ;
            fetch C_DOS into DOS_REC ;
               exit when C_DOS%notfound or C_DOS%notfound is null;

                /* SO_DETAILS?? */
                open C_SOD(DOS_REC.SO_NO,DOS_REC.SO_LINE_NO) ;
                    SOD_REC := null ;
                    fetch C_SOD into SOD_REC ;
                close C_SOD ;

               /* ITEM ????? */
                open C_ITM(DOS_REC.ITEM_NO) ;
                    ITM_REC := null ;
                    fetch C_ITM into ITM_REC ;
                close C_ITM ;

               /* CUSTOMER ????? */
                open C_COM(DOH_REC.CUSTOMER_CODE) ;
                    CUS_REC := null ;
                    fetch C_COM into CUS_REC ;
                close C_COM ;

               if CUS_REC.COUNTRY_CODE =192 Then
               /* FDK??? */
               insert into oa_invoice_trn(
                   EB_TYPE            ,
                   COMPANY_CODE       ,
                   SECTION_CODE       ,
                   PERSON_CODE        ,
                   VENDOR_CODE        ,
                   DIST_COUNTRY_CODE  ,
                   DATA_DATE          ,
                   INVOICE_NO         ,
                   PACKING_NO         ,
                   ITEM_NO            ,
                   ITEM_TYPE          ,
                   QUANTITY           ,
                   PURCHASE_PRICE     ,
                   CURR_CODE          ,
                   EXCHANGE_RATE      ,
                   PURCHASE_AMOUNT    ,
                   PO_NO              ,
                   LINE_NO            ,
                   OPERATION_DATE     ,
                   DATA_SEQ_NO        ,
                   DATA_SOURCE_TYPE   ,
                   WAREHOUSE_CODE     ,
                   YEN_RATE           ,
                   INPORT_FLG         ,
                   PACK_QTY
               ) VALUES (
                   'E',
                   DOH_REC.CUSTOMER_CODE   ,
                   null                    ,
                   null                    ,
                   CU2_REC.COMPANY_CODE    ,
                   105                     ,
                   V_BL_DATE               ,
                   substr(DOH_REC.DO_NO,1,23),
                   null          ,
                   DOS_REC.ITEM_NO         ,
                   null                    ,
                   DOS_REC.SO_QTY          ,
                   DOS_REC.U_PRICE         ,
                   DOH_REC.CURR_CODE       ,
                   null                    ,
                   null                    ,
                   DOS_REC.CUSTOMER_PO_NO  ,
                   SOD_REC.CUSTOMER_PO_LINE_NO ,
                   SYSDATE                 ,
                   null                    ,
                   'OA'                    ,
                   0                       ,
                   0                       ,
                   0                       ,
                   ITM_REC.EXTERNAL_UNIT_NUMBER
               ) ;
               /* FDK??????? (FI????)*/
               if CNF_REC.CONFIG_FLAG = 1 Then
                   insert into fdk_po_transit_trn(
                       COMPANY_CODE            ,
                       SECTION_CODE            ,
                       PERSON_CODE             ,
                       VENDOR_CODE             ,
                       DIST_COUNTRY_CODE       ,
                       DATA_DATE               ,
                       INVOICE_NO              ,
                       INVOICE_LINE_NO         ,
                       PACKING_NO              ,
                       PO_NO                   ,
                       PO_LINE_NO              ,
                       ITEM                    ,
                       ITEM_NO                 ,
                       QUANTITY                ,
                       PURCHASE_PRICE          ,
                       CURR_CODE               ,
                       EXCHANGE_RATE           ,
                       PURCHASE_AMOUNT         ,
                       OPERATION_DATE          ,
                       DATA_SEQ_NO             ,
                       DATA_SOURCE_TYPE        ,
                       WAREHOUSE_CODE          ,
                       YEN_RATE                ,
                       INPORT_FLG              ,
                       PACK_QTY                ,
                       SHIPTO_CODE
                   ) VALUES (
                       DOH_REC.CUSTOMER_CODE   ,
                       null                    ,
                       null                    ,
                       CU2_REC.COMPANY_CODE    ,
                       105                     ,
                       V_BL_DATE               ,
                       DOH_REC.DO_NO           ,
                       DOS_REC.LINE_NO         ,
                       null                    ,
                       DOS_REC.CUSTOMER_PO_NO  ,
                       SOD_REC.CUSTOMER_PO_LINE_NO  ,
                       SUBSTRB(ITM_REC.ITEM,1,30)           ,
                       DOS_REC.ITEM_NO         ,
                       DOS_REC.SO_QTY          ,
                       DOS_REC.U_PRICE         ,
                       DOH_REC.CURR_CODE       ,
                       null                    ,
                       SOD_REC.AMT_O           ,
                       SYSDATE                 ,
                       null                    ,
                       'PT'                    ,
                       0                       ,
                       0                       ,
                       0                       ,
                       ITM_REC.EXTERNAL_UNIT_NUMBER,
                       null
                   ) ;
               End If ;

               null;
               End If ;

               /* ?????????? */
               INSERT INTO TRANSACTION_SALES (
                  OPERATION_DATE,
                  SECTION_CODE,
                  ITEM_NO,
                  ITEM_CODE,
                  ITEM_NAME,
                  ITEM_DESCRIPTION,
                  STOCK_SUBJECT_CODE,
                  ACCOUNTING_MONTH,
                  SLIP_DATE,
                  SLIP_TYPE,
                  SLIP_NO,
                  SLIP_QUANTITY,
                  SLIP_PRICE,
                  SLIP_AMOUNT,
                  CURR_CODE,
                  STANDARD_PRICE,
                  STANDARD_AMOUNT,
                  SUPPLIERS_PRICE,
                  COMPANY_CODE,
                  ORDER_NUMBER,
                  LINE_NO,
                  COST_PROCESS_CODE,
                  COST_SUBJECT_CODE,
                  PRODUCT_LOT_NUMBER,
                  PURCHASE_QUANTITY,
                  PURCHASE_PRICE,
                  PURCHASE_AMOUNT,
                  PURCHASE_UNIT,
                  UNIT_STOCK,
                  EX_RATE,
                  ANSWER_NO,
                  REMARK1,
                  REMARK2,
                  CUSTOMER_PO_NO,
                  WO_NO,
                  DATE_CODE,
                  REMARK3,
                  INV_NO
               ) VALUES (
                  SYSDATE                   ,
                  ITM_REC.SECTION_CODE      ,
                  DOS_REC.ITEM_NO           ,
                  ITM_REC.ITEM_CODE         ,
                  ITM_REC.ITEM              ,
                  substr(ITM_REC.DESCRIPTION,0,30)       ,
                  ITM_REC.STOCK_SUBJECT_CODE,
                  TO_CHAR(V_BL_DATE,'YYYYMM'),
                  V_BL_DATE                 ,
                  '84'                      ,
                  DOH_REC.DO_NO             ,
                  DOS_REC.QTY               ,
                  DOS_REC.U_PRICE           ,
                  round(DOS_REC.QTY * DOS_REC.U_PRICE,2),
                  DOH_REC.CURR_CODE         ,
                  ITM_REC.STANDARD_PRICE    ,
                  round(ITM_REC.STANDARD_PRICE * DOS_REC.QTY,8),
                  ITM_REC.SUPPLIERS_PRICE   ,
                  DOH_REC.CUSTOMER_CODE     ,
                  NULL                      ,
                  NULL                      ,
                  ITM_REC.COST_PROCESS_CODE ,
                  ITM_REC.COST_SUBJECT_CODE ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  ITM_REC.UNIT_STOCK        ,
                  DOH_REC.EX_RATE           ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  DOH_REC.INV_NO              
               ) ;



         End loop ;
      close C_DOS ;


--???
     /* SHIPPING FLAG ?'F'????  */
        UPDATE DO_HEADER SET BL_DATE=v_bl_date ,SHIP_END_FLG='F' WHERE DO_NO = DOH_REC.DO_NO ;

--?????
    <<ERROR>>
       null ;
  end ;
end SALES_UPDATE ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."SALES_UPDATE_20141009" (
  v_do_no in varchar2,
  v_bl_date in date,
  v_ret_code in out number
)
as
begin
  declare

   DOH_REC do_header%rowtype ;
   DOD_REC do_details%rowtype ;
   DOS_REC do_so%rowtype ;
   SOD_REC so_details%rowtype ;
   ITM_REC item%rowtype ;
   CUS_REC company%rowtype ;
   CU2_REC company%rowtype ;
   CNF_REC configuration%rowtype ;
   DOHCHK_REC do_header%rowtype ;

   /* DO HEADER?? */
   cursor C_DOH(PARAM1 in varchar2)  is
     select * from do_header where do_no = PARAM1
     for update
     ;

   /* DO DETAILS?? */
   cursor C_DOD(PARAM1 in varchar2)  is
     select * from do_details where do_no = PARAM1 and item_no is not null
     ;

   /* DO SO (VIEW)?? */
   cursor C_DOS(PARAM1 in varchar2)  is
     select * from do_so where do_no = PARAM1
     ;

   /* SO DETAILS?? */
   cursor C_SOD(PARAM1 in varchar2,PARAM2 in VARCHAR2)  is
     select * from so_details where so_no = PARAM1 and line_no =PARAM2
     ;

   /* ITEM ????? */
   cursor C_ITM(PARAM1 in number)  is
     select * from item where item_no = PARAM1 and DELETE_TYPE is null
     ;

   /* COMPANY ????? */
   cursor C_COM(PARAM1 in number)  is
     select * from company where company_code = PARAM1 and DELETE_TYPE is null
     ;

   /* COMPANY ?????2 */
   cursor C_COM2  is
     select * from company where company_type = 0 and DELETE_TYPE is null
     ;

   /* CONFIGURATION ?? */
   cursor C_CNF  is
     select * from CONFIGURATION where CONFIG_KEY = 'FI_PO_TRANSIT'
     ;

   /* DO HEADER?? */
   cursor C_DOH_CHK(PARAM1 in varchar2)  is
     select *  from do_header where do_no = PARAM1
     ;

  begin
--FDAC
    open C_DOH_CHK(v_do_no) ;
        DOHCHK_REC := null ;
        fetch C_DOH_CHK into DOHCHK_REC ;
    close C_DOH_CHK ;
    IF DOHCHK_REC.BL_DATE is null Then
         FDAC_SALES_TRN_DO_PRC(v_do_no,'P',v_bl_date) ;
    End If ;


--???
    v_ret_code := 0 ;  --???????

 /* ??????? */
    open C_COM2 ;
        CU2_REC := null ;
        fetch C_COM2 into CU2_REC ;
    close C_COM2 ;

 /* ??????? */
    open C_CNF ;
        CNF_REC := null ;
        fetch C_CNF into CNF_REC ;
    close C_CNF ;


--?????
 /* ????? */
    open C_DOH(v_do_no) ;
        DOH_REC := null ;
        fetch C_DOH into DOH_REC ;
    close C_DOH ;
      /* ??????? */
       IF DOH_REC.DO_NO is null Then
           -- ????????????
           v_ret_code :=-1 ;
           goto ERROR ;
       End If ;
       IF DOH_REC.SHIP_END_FLG is not null Then
           -- ?????????????????
           v_ret_code :=-1 ;
           goto ERROR ;
       End If ;

       /* ?????? */
          INSERT INTO ACCOUNT_RECEIVABLE(
               CUSTOMER_CODE      ,
               BL_NO              ,
               TYPE               ,
               RP_NO              ,
               RECEIPT_DATE       ,
               AMT                ,
               BANK               ,
               BL_DATE            ,
               CURR_CODE          ,
               RATE               ,
               AMT_F              ,
               CHEQ               ,
               REG_DATE           ,
               UPTO_DATE          ,
               PDAYS              ,
               PDESC              ,
               PBY
          )VALUES(
               DOH_REC.CUSTOMER_CODE  ,
               DOH_REC.DO_NO,
               1                  ,
               NULL               ,
               V_BL_DATE          ,
               round(DOH_REC.AMT_O  * DOH_REC.EX_RATE,2)     ,
               NULL               ,
               v_bl_date + nvl(DOH_REC.PDAYS,0),
               DOH_REC.CURR_CODE  ,
               DOH_REC.EX_RATE    ,
               DOH_REC.AMT_O      ,
               NULL               ,
               SYSDATE            ,
               SYSDATE            ,
               DOH_REC.PDAYS      ,
               DOH_REC.PDESC      ,
               DOH_REC.PBY
          ) ;

    /* ???? */
    open C_DOD(DOH_REC.DO_NO) ;
        Loop
            DOD_REC := null ;
            fetch C_DOD into DOD_REC ;
            exit when C_DOD%notfound or C_DOD%notfound is null;
               /* ??????? */
                IF DOD_REC.DO_NO is null Then
                    -- ????????????
                    v_ret_code :=-2 ;
                    goto ERROR ;
                End If ;

                /* ??????? */
                open C_ITM(DOD_REC.ITEM_NO) ;
                    ITM_REC := null ;
                    fetch C_ITM into ITM_REC ;
                close C_ITM ;
                  /* ??????? */
                   IF ITM_REC.ITEM_NO is null Then
                       -- ?????????????????
                       v_ret_code :=-3 ;
                       goto ERROR ;
                   End If ;

          end loop DOD ;
      close C_DOD ;


 /* OA_INVOICE ?? */
      open C_DOS(DOH_REC.DO_NO) ;
         loop
            DOS_REC := null ;
            fetch C_DOS into DOS_REC ;
               exit when C_DOS%notfound or C_DOS%notfound is null;

                /* SO_DETAILS?? */
                open C_SOD(DOS_REC.SO_NO,DOS_REC.SO_LINE_NO) ;
                    SOD_REC := null ;
                    fetch C_SOD into SOD_REC ;
                close C_SOD ;

               /* ITEM ????? */
                open C_ITM(DOS_REC.ITEM_NO) ;
                    ITM_REC := null ;
                    fetch C_ITM into ITM_REC ;
                close C_ITM ;

               /* CUSTOMER ????? */
                open C_COM(DOH_REC.CUSTOMER_CODE) ;
                    CUS_REC := null ;
                    fetch C_COM into CUS_REC ;
                close C_COM ;

               if CUS_REC.COUNTRY_CODE =192 Then
               /* FDK??? */
               insert into oa_invoice_trn(
                   EB_TYPE            ,
                   COMPANY_CODE       ,
                   SECTION_CODE       ,
                   PERSON_CODE        ,
                   VENDOR_CODE        ,
                   DIST_COUNTRY_CODE  ,
                   DATA_DATE          ,
                   INVOICE_NO         ,
                   PACKING_NO         ,
                   ITEM_NO            ,
                   ITEM_TYPE          ,
                   QUANTITY           ,
                   PURCHASE_PRICE     ,
                   CURR_CODE          ,
                   EXCHANGE_RATE      ,
                   PURCHASE_AMOUNT    ,
                   PO_NO              ,
                   LINE_NO            ,
                   OPERATION_DATE     ,
                   DATA_SEQ_NO        ,
                   DATA_SOURCE_TYPE   ,
                   WAREHOUSE_CODE     ,
                   YEN_RATE           ,
                   INPORT_FLG         ,
                   PACK_QTY
               ) VALUES (
                   'E',
                   DOH_REC.CUSTOMER_CODE   ,
                   null                    ,
                   null                    ,
                   CU2_REC.COMPANY_CODE    ,
                   105                     ,
                   V_BL_DATE               ,
                   substr(DOH_REC.DO_NO,1,23),
                   null          ,
                   DOS_REC.ITEM_NO         ,
                   null                    ,
                   DOS_REC.SO_QTY          ,
                   DOS_REC.U_PRICE         ,
                   DOH_REC.CURR_CODE       ,
                   null                    ,
                   null                    ,
                   DOS_REC.CUSTOMER_PO_NO  ,
                   SOD_REC.CUSTOMER_PO_LINE_NO ,
                   SYSDATE                 ,
                   null                    ,
                   'OA'                    ,
                   0                       ,
                   0                       ,
                   0                       ,
                   ITM_REC.EXTERNAL_UNIT_NUMBER
               ) ;
               /* FDK??????? (FI????)*/
               if CNF_REC.CONFIG_FLAG = 1 Then
                   insert into fdk_po_transit_trn(
                       COMPANY_CODE            ,
                       SECTION_CODE            ,
                       PERSON_CODE             ,
                       VENDOR_CODE             ,
                       DIST_COUNTRY_CODE       ,
                       DATA_DATE               ,
                       INVOICE_NO              ,
                       INVOICE_LINE_NO         ,
                       PACKING_NO              ,
                       PO_NO                   ,
                       PO_LINE_NO              ,
                       ITEM                    ,
                       ITEM_NO                 ,
                       QUANTITY                ,
                       PURCHASE_PRICE          ,
                       CURR_CODE               ,
                       EXCHANGE_RATE           ,
                       PURCHASE_AMOUNT         ,
                       OPERATION_DATE          ,
                       DATA_SEQ_NO             ,
                       DATA_SOURCE_TYPE        ,
                       WAREHOUSE_CODE          ,
                       YEN_RATE                ,
                       INPORT_FLG              ,
                       PACK_QTY                ,
                       SHIPTO_CODE
                   ) VALUES (
                       DOH_REC.CUSTOMER_CODE   ,
                       null                    ,
                       null                    ,
                       CU2_REC.COMPANY_CODE    ,
                       105                     ,
                       V_BL_DATE               ,
                       DOH_REC.DO_NO           ,
                       DOS_REC.LINE_NO         ,
                       null                    ,
                       DOS_REC.CUSTOMER_PO_NO  ,
                       SOD_REC.CUSTOMER_PO_LINE_NO  ,
                       SUBSTRB(ITM_REC.ITEM,1,30)           ,
                       DOS_REC.ITEM_NO         ,
                       DOS_REC.SO_QTY          ,
                       DOS_REC.U_PRICE         ,
                       DOH_REC.CURR_CODE       ,
                       null                    ,
                       SOD_REC.AMT_O           ,
                       SYSDATE                 ,
                       null                    ,
                       'PT'                    ,
                       0                       ,
                       0                       ,
                       0                       ,
                       ITM_REC.EXTERNAL_UNIT_NUMBER,
                       null
                   ) ;
               End If ;

               null;
               End If ;

               /* ?????????? */
               INSERT INTO TRANSACTION_SALES (
                  OPERATION_DATE,
                  SECTION_CODE,
                  ITEM_NO,
                  ITEM_CODE,
                  ITEM_NAME,
                  ITEM_DESCRIPTION,
                  STOCK_SUBJECT_CODE,
                  ACCOUNTING_MONTH,
                  SLIP_DATE,
                  SLIP_TYPE,
                  SLIP_NO,
                  SLIP_QUANTITY,
                  SLIP_PRICE,
                  SLIP_AMOUNT,
                  CURR_CODE,
                  STANDARD_PRICE,
                  STANDARD_AMOUNT,
                  SUPPLIERS_PRICE,
                  COMPANY_CODE,
                  ORDER_NUMBER,
                  LINE_NO,
                  COST_PROCESS_CODE,
                  COST_SUBJECT_CODE,
                  PRODUCT_LOT_NUMBER,
                  PURCHASE_QUANTITY,
                  PURCHASE_PRICE,
                  PURCHASE_AMOUNT,
                  PURCHASE_UNIT,
                  UNIT_STOCK,
                  EX_RATE,
                  ANSWER_NO,
                  REMARK1,
                  REMARK2,
                  CUSTOMER_PO_NO,
                  WO_NO,
                  DATE_CODE,
                  REMARK3,
                  INV_NO
               ) VALUES (
                  SYSDATE                   ,
                  ITM_REC.SECTION_CODE      ,
                  DOS_REC.ITEM_NO           ,
                  ITM_REC.ITEM_CODE         ,
                  ITM_REC.ITEM              ,
                  ITM_REC.DESCRIPTION       ,
                  ITM_REC.STOCK_SUBJECT_CODE,
                  TO_CHAR(V_BL_DATE,'YYYYMM'),
                  V_BL_DATE                 ,
                  '84'                      ,
                  DOH_REC.DO_NO             ,
                  DOS_REC.QTY               ,
                  DOS_REC.U_PRICE           ,
                  round(DOS_REC.QTY * DOS_REC.U_PRICE,2),
                  DOH_REC.CURR_CODE         ,
                  ITM_REC.STANDARD_PRICE    ,
                  round(ITM_REC.STANDARD_PRICE * DOS_REC.QTY,8),
                  ITM_REC.SUPPLIERS_PRICE   ,
                  DOH_REC.CUSTOMER_CODE     ,
                  NULL                      ,
                  NULL                      ,
                  ITM_REC.COST_PROCESS_CODE ,
                  ITM_REC.COST_SUBJECT_CODE ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  ITM_REC.UNIT_STOCK        ,
                  DOH_REC.EX_RATE           ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  NULL                      ,
                  DOH_REC.INV_NO              
               ) ;



         End loop ;
      close C_DOS ;


--???
     /* SHIPPING FLAG ?'F'????  */
        UPDATE DO_HEADER SET BL_DATE=v_bl_date ,SHIP_END_FLG='F' WHERE DO_NO = DOH_REC.DO_NO ;

--?????
    <<ERROR>>
       null ;
  end ;
end SALES_UPDATE_20141009 ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."SEND_MAIL" (
p_sender IN VARCHAR2,
p_recipient IN VARCHAR2,
p_message IN VARCHAR2
)
AS
l_mailhost VARCHAR2 (255) := 'do.not.reply.fdkindonesia@fdk.co.jp';
l_mail_conn UTL_SMTP.connection;
BEGIN
l_mail_conn := UTL_SMTP.open_connection (l_mailhost, 25);
utl_smtp.command( l_mail_conn, 'virus.fdk.co.jp');
utl_smtp.command( l_mail_conn, utl_raw.cast_to_varchar2( utl_encode.base64_encode( utl_raw.cast_to_raw( 'do.not.reply.fdkindonesia' ))) );
utl_smtp.command( l_mail_conn, utl_raw.cast_to_varchar2( utl_encode.base64_encode( utl_raw.cast_to_raw( 'fidonot' ))) );
UTL_SMTP.helo (l_mail_conn, l_mailhost);
UTL_SMTP.mail (l_mail_conn, p_sender);
UTL_SMTP.rcpt (l_mail_conn, p_recipient);
UTL_SMTP.open_data (l_mail_conn);
UTL_SMTP.write_data (l_mail_conn, p_message);
UTL_SMTP.close_data (l_mail_conn);
UTL_SMTP.quit (l_mail_conn);
END;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."SET_MT_STRUCTURE" 
/*----------------------------------------------------------------------
  PROCEDURE: ????????? (SET_MT_STRUCTURE)
?
  ????:
      Return_Code: ????:0, ????:0??
      Return_Msg:  ????????
----------------------------------------------------------------------
  2016/03/24  H.Suzuki      ????
----------------------------------------------------------------------*/
(
	p_mte_seq		in		number,
	p_item_no		in		number,
	p_level_no		in		number,
	p_qty			in		number,
	p_lvl			in		number,
	p_line_no		in out	number
) as
/*---------- ?? ----------*/
	--????
	start_time		constant date	:= sysdate;
/*---------- ???? ----------*/
	--
	cursor csr_item(p_item_no in number) is
		select i.STOCK_SUBJECT_CODE
		     , i.MANUFACT_FAIL_RATE
		  from ITEM i
		 where i.ITEM_NO = p_item_no
	;
	r_upper_item	csr_item%rowtype;
	r_lower_item	csr_item%rowtype;
	--
	cursor csr_struct(p_item_no in number, p_level_no in number) is
		select s.*
		  from STRUCTURE s
		 where s.UPPER_ITEM_NO = p_item_no
		   and s.LEVEL_NO = p_level_no
		 order by s.LINE_NO
	;
	r_struct		csr_struct%rowtype;
	r_work			MTE_STRUCTURE_WK%rowtype;
/*---------- ?? ----------*/
	l_today			date := trunc(start_time, 'j');
	l_regDate		date := start_time;
	l_qty			number(10);
/*---------- ?? ----------*/
	--????
	procedure process_start is
	begin
		null;
		--DBMS_OUTPUT.ENABLE(1000000);
		--DBMS_OUTPUT.PUT_LINE('SET_MT_STRUCTURE??  ' || to_char(start_time, 'YYYY/MM/DD hh24:mi:ss'));
	end process_start;
	--????
	procedure process_end is
	begin
		null;
		--DBMS_OUTPUT.PUT('SET_MT_STRUCTURE??  ' || to_char(sysdate, 'YYYY/MM/DD hh24:mi:ss'));
		--DBMS_OUTPUT.PUT_LINE(' ( spent ' || to_char(trunc((sysdate - start_time) * 86400, 3)) || 'sec )');
	end process_end;
	--??????
	procedure check_point(p_msg in varchar2) is
	begin
		null;
		--DBMS_OUTPUT.PUT_LINE(p_msg || ' >> ' || to_char(trunc((sysdate - start_time) * 86400, 3)) || 'sec');
	end check_point;
	--???????
	procedure echo(p_msg in varchar2) is
	begin
		null;
		--DBMS_OUTPUT.PUT_LINE(p_msg);
	end echo;
/*---------- ??? ----------*/
begin
	process_start();
	--
	open  csr_item(p_item_no);
	fetch csr_item into r_upper_item;
	if csr_item%notfound then
		close csr_item;
		raise_application_error(-20999, 'An item not found.');
	elsif r_upper_item.STOCK_SUBJECT_CODE not in ('4', '5') then
		close csr_item;
		raise_application_error(-20999, 'An item is not a (semi-)finished good.');
	end if;
	close csr_item;
	if r_upper_item.MANUFACT_FAIL_RATE is null then
		r_upper_item.MANUFACT_FAIL_RATE := 0;
	end if;
	--
	open csr_struct(p_item_no, p_level_no);
	loop
		fetch csr_struct into r_struct;
		exit when csr_struct%notfound;
		open  csr_item(r_struct.LOWER_ITEM_NO);
		fetch csr_item into r_lower_item;
		if csr_item%notfound then
			close csr_item;
			raise_application_error(-20999, 'A part not found: '||to_char(r_struct.LOWER_ITEM_NO));
		end if;
		close csr_item;
		--
		l_qty := ceil(p_qty
						* case when r_struct.QUANTITY_BASE = 0 then 0
						       else nvl(r_struct.QUANTITY / r_struct.QUANTITY_BASE, 0) end
						* ( 1 + nvl(r_lower_item.MANUFACT_FAIL_RATE / 100, 0)
						      + nvl(r_struct.FAILURE_RATE / 100, 0))
						);
		--
		if r_lower_item.STOCK_SUBJECT_CODE = '4' then
			SET_MT_STRUCTURE(p_mte_seq, r_struct.LOWER_ITEM_NO, p_level_no, l_qty, p_lvl + 1, p_line_no);
		else
			p_line_no := p_line_no + 1;
			r_work.MTE_SEQ		:= p_mte_seq;
			r_work.LINE_NO		:= p_line_no;
			r_work.LEVEL_NO		:= p_lvl;
			r_work.ITEM_NO		:= r_struct.LOWER_ITEM_NO;
			r_work.QUANTITY		:= l_qty;
			insert into MTE_STRUCTURE_WK values r_work;
		end if;
	end loop;
	close csr_struct;
	process_end();
exception
when others then
	if csr_struct%isopen then
		close csr_struct;
	end if;
	echo('ReturnCode: ' || to_char(sqlcode));
	echo('message:    ' || sqlerrm);
	raise;
end;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."SHIPPING_ANS_UPDATE" (para_answer_no in varchar2,
                                                para_quantity in number,
                                                para_io in varchar2,
                                                para_error_check out number) as
begin
declare
 rec_ans answer%rowtype;
 cursor ans is
  select *
    from answer
   where answer_no = para_answer_no
     for update of bal_qty;
begin
open ans;
fetch ans into rec_ans;
if ans%notfound or ans%notfound is null then
 para_error_check := 1;
else
 if para_io = 'O' then
  update answer set
         bal_qty = bal_qty - para_quantity
   where current of ans;
 else
  update answer set
         bal_qty = bal_qty + para_quantity
   where current of ans;
 end if;
 para_error_check := 0;
end if;
close ans;
end;
end shipping_ans_update;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."SHIPPING_ENTRY" (para_bl_date in date,
                                           para_inv_no  in varchar2,
                                           para_io      in varchar2,
                                           para_error_check out number) as
begin
declare
cursor head is
 select customer_code, curr_code
   from do_header
  where inv_no = para_inv_no
    for update of ship_end_flg, bl_date;
cursor detail is
 select item_no, u_price, qty,
        so_no1, so_line_no1, nvl(qty1,0), answer_no1,
        so_no2, so_line_no2, nvl(qty2,0), answer_no2,
        so_no3, so_line_no3, nvl(qty3,0), answer_no3,
        so_no4, so_line_no4, nvl(qty4,0), answer_no4,
        so_no5, so_line_no5, nvl(qty5,0), answer_no5,
        so_no6, so_line_no6, nvl(qty6,0), answer_no6,
        so_no7, so_line_no7, nvl(qty7,0), answer_no7,
        so_no8, so_line_no8, nvl(qty8,0), answer_no8
   from do_details
  where do_no = para_inv_no
  order by line_no;
w_customer_code do_header.customer_code%type; --do_header start
w_curr_code     do_header.curr_code%type; --do_header end
w_item_no     do_details.item_no%type; --do_details start
w_u_price     do_details.u_price%type;
w_qty         do_details.qty%type;
w_so_no1      do_details.so_no1%type;
w_so_line_no1 do_details.so_line_no1%type;
w_qty1        do_details.qty1%type;
w_answer_no1  do_details.answer_no1%type;
w_so_no2      do_details.so_no2%type;
w_so_line_no2 do_details.so_line_no2%type;
w_qty2        do_details.qty2%type;
w_answer_no2  do_details.answer_no2%type;
w_so_no3      do_details.so_no3%type;
w_so_line_no3 do_details.so_line_no3%type;
w_qty3        do_details.qty3%type;
w_answer_no3  do_details.answer_no3%type;
w_so_no4      do_details.so_no4%type;
w_so_line_no4 do_details.so_line_no4%type;
w_qty4        do_details.qty4%type;
w_answer_no4  do_details.answer_no4%type;
w_so_no5      do_details.so_no5%type;
w_so_line_no5 do_details.so_line_no5%type;
w_qty5        do_details.qty5%type;
w_answer_no5  do_details.answer_no5%type;
w_so_no6      do_details.so_no6%type;
w_so_line_no6 do_details.so_line_no6%type;
w_qty6        do_details.qty6%type;
w_answer_no6  do_details.answer_no6%type;
w_so_no7      do_details.so_no7%type;
w_so_line_no7 do_details.so_line_no7%type;
w_qty7        do_details.qty7%type;
w_answer_no7  do_details.answer_no7%type;
w_so_no8      do_details.so_no8%type;
w_so_line_no8 do_details.so_line_no8%type;
w_qty8        do_details.qty8%type; --do_details end
w_answer_no8  do_details.answer_no8%type;
begin
para_error_check := 0;
open head; --header fetch
fetch head into w_customer_code, w_curr_code;
if head%notfound or head%notfound is null then
 para_error_check := 1;
 goto check_error;
end if;
open detail; --details fetch
loop
 fetch detail into
  w_item_no, w_u_price, w_qty,
  w_so_no1, w_so_line_no1, w_qty1, w_answer_no1,
  w_so_no2, w_so_line_no2, w_qty2, w_answer_no2,
  w_so_no3, w_so_line_no3, w_qty3, w_answer_no3,
  w_so_no4, w_so_line_no4, w_qty4, w_answer_no4,
  w_so_no5, w_so_line_no5, w_qty5, w_answer_no5,
  w_so_no6, w_so_line_no6, w_qty6, w_answer_no6,
  w_so_no7, w_so_line_no7, w_qty7, w_answer_no7,
  w_so_no8, w_so_line_no8, w_qty8, w_answer_no8;
 exit when detail%notfound or detail%notfound is null;
 if w_qty1 <> 0 then
  porder.shipping_tran_entry(w_item_no, para_bl_date, para_inv_no, w_qty1, w_u_price,
                             w_curr_code, w_customer_code, para_io, w_so_no1, w_so_line_no1,
                             para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
  porder.shipping_so_update(w_so_no1, w_so_line_no1, w_qty1, para_io, para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
  porder.shipping_ind_update(w_answer_no1, para_io, para_bl_date, para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
  porder.shipping_ans_update(w_answer_no1, w_qty1, para_io, para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
 end if;
 if w_qty2 <> 0 then
  porder.shipping_tran_entry(w_item_no, para_bl_date, para_inv_no, w_qty2, w_u_price,
                             w_curr_code, w_customer_code, para_io, w_so_no2, w_so_line_no2,
                             para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
  porder.shipping_so_update(w_so_no2, w_so_line_no2, w_qty2, para_io, para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
  porder.shipping_ind_update(w_answer_no2, para_io, para_bl_date, para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
  porder.shipping_ans_update(w_answer_no2, w_qty2, para_io, para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
 end if;
 if w_qty3 <> 0 then
  porder.shipping_tran_entry(w_item_no, para_bl_date, para_inv_no, w_qty3, w_u_price,
                             w_curr_code, w_customer_code, para_io, w_so_no3, w_so_line_no3,
                             para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
  porder.shipping_so_update(w_so_no3, w_so_line_no3, w_qty3, para_io, para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
  porder.shipping_ind_update(w_answer_no3, para_io, para_bl_date, para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
  porder.shipping_ans_update(w_answer_no3, w_qty3, para_io, para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
 end if;
 if w_qty4 <> 0 then
  porder.shipping_tran_entry(w_item_no, para_bl_date, para_inv_no, w_qty4, w_u_price,
                             w_curr_code, w_customer_code, para_io, w_so_no4, w_so_line_no4,
                             para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
  porder.shipping_so_update(w_so_no4, w_so_line_no4, w_qty4, para_io, para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
  porder.shipping_ind_update(w_answer_no4, para_io, para_bl_date, para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
  porder.shipping_ans_update(w_answer_no4, w_qty4, para_io, para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
 end if;
 if w_qty5 <> 0 then
  porder.shipping_tran_entry(w_item_no, para_bl_date, para_inv_no, w_qty5, w_u_price,
                             w_curr_code, w_customer_code, para_io, w_so_no5, w_so_line_no5,
                             para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
  porder.shipping_so_update(w_so_no5, w_so_line_no5, w_qty5, para_io, para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
  porder.shipping_ind_update(w_answer_no5, para_io, para_bl_date, para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
  porder.shipping_ans_update(w_answer_no5, w_qty5, para_io, para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
 end if;
 if w_qty6 <> 0 then
  porder.shipping_tran_entry(w_item_no, para_bl_date, para_inv_no, w_qty6, w_u_price,
                             w_curr_code, w_customer_code, para_io, w_so_no6, w_so_line_no6,
                             para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
  porder.shipping_so_update(w_so_no6, w_so_line_no6, w_qty6, para_io, para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
  porder.shipping_ind_update(w_answer_no6, para_io, para_bl_date, para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
  porder.shipping_ans_update(w_answer_no6, w_qty6, para_io, para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
 end if;
 if w_qty7 <> 0 then
  porder.shipping_tran_entry(w_item_no, para_bl_date, para_inv_no, w_qty7, w_u_price,
                             w_curr_code, w_customer_code, para_io, w_so_no7, w_so_line_no7,
                             para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
  porder.shipping_so_update(w_so_no7, w_so_line_no7, w_qty7, para_io, para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
  porder.shipping_ind_update(w_answer_no7, para_io, para_bl_date, para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
  porder.shipping_ans_update(w_answer_no7, w_qty7, para_io, para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
 end if;
 if w_qty8 <> 0 then
  porder.shipping_tran_entry(w_item_no, para_bl_date, para_inv_no, w_qty8, w_u_price,
                             w_curr_code, w_customer_code, para_io, w_so_no8, w_so_line_no8,
                             para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
  porder.shipping_so_update(w_so_no8, w_so_line_no8, w_qty8, para_io, para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
  porder.shipping_ind_update(w_answer_no8, para_io, para_bl_date, para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
  porder.shipping_ans_update(w_answer_no8, w_qty8, para_io, para_error_check);
  if para_error_check = 1 then
   goto check_error;
  end if;
 end if;
 if para_io = 'O' then
  porder.whinventory_set(w_item_no, para_bl_date, w_qty, '3', para_error_check, null);
 else
  porder.whinventory_set(w_item_no, para_bl_date, 0 - w_qty, '3', para_error_check, null);
 end if;
 if para_error_check < 0 then
  para_error_check := 1;
  goto check_error;
 end if;
end loop;
close detail;
if para_io = 'O' then
 update do_header set
  ship_end_flg = 'F', bl_date = para_bl_date
  where current of head;
else
 update do_header set
  ship_end_flg = null, bl_date = null
  where current of head;
end if;

close head;
<<check_error>>
if head%isopen then
 close head;
end if;
if detail%isopen then
 close detail;
end if;

end;
end shipping_entry;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."SHIPPING_IND_UPDATE" (para_answer_no in varchar2,
                                               para_io in varchar2,
                                               para_bl_date in date,
                                               para_error_check out number) as
begin
declare
 rec_ind indication%rowtype;
 cursor ind is
  select *
    from indication
     for update of commit_date;
begin
 open ind;
 fetch ind into rec_ind;
 if ind%notfound or ind%notfound is null then
  para_error_check := 1;
 else
  if para_io = 'I' then
   update indication set
          commit_date = null
    where current of ind;
  else
   update indication set
          commit_date = para_bl_date
    where current of ind;
  end if;
  para_error_check := 0;
 end if;
 close ind;
end;
end shipping_ind_update;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."SHIPPING_SO_UPDATE" (para_so_no in varchar2,
                                               para_line_no in number,
                                               para_quantity in number,
                                               para_io in varchar2,
                                               para_error_check out number) as
begin
declare
 rec_detail so_details%rowtype;
 cursor detail is
  select *
    from so_details
   where so_no = para_so_no and
         line_no = para_line_no
     for update of bal_qty;
begin
 open detail;
 fetch detail into rec_detail;
 if detail%notfound or detail%notfound is null then
  para_error_check := 1;
 else
  if para_io = 'O' then
   update so_details set
          bal_qty = bal_qty - para_quantity
    where current of detail;
  else
   update so_details set
          bal_qty = bal_qty + para_quantity
    where current of detail;
  end if;
  para_error_check := 0;
 end if;
 close detail;
end;
end shipping_so_update;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."SHIPPING_TRAN_ENTRY" (para_item_no in number,
                                      para_slip_date in date,
                                      para_slip_no in varchar2,
                                      para_slip_quantity in number,
                                      para_slip_price in number,
                                      para_curr_code in number,
                                      para_company_code in number,
                                      para_io in varchar2,
                                      para_order_no in varchar2,
                                      para_line_no in number,
                                      para_error_check out number) as
begin
declare
cursor item1 is
 select section_code, item_code, item,
        description, stock_subject_code, standard_price,
        cost_process_code, cost_subject_code, unit_stock
   from item
  where item_no = para_item_no;
w_section_code       item.section_code%type;
w_item_code          item.item_code%type;
w_item               item.item%type;
w_description        item.description%type;
w_stock_subject_code item.stock_subject_code%type;
w_standard_price     item.standard_price%type;
w_cost_process_code  item.cost_process_code%type;
w_cost_subject_code  item.cost_subject_code%type;
w_unit_stock         item.unit_stock%type;
w_slip_type          transaction.slip_type%type;
w_accounting_month   transaction.accounting_month%type;
w_slip_quantity      transaction.slip_quantity%type;
begin
para_error_check := 0;
w_accounting_month := to_number(
                      substr(to_char(para_slip_date,'yyyy/mm/dd'),1,4)||
                      substr(to_char(para_slip_date,'yyyy/mm/dd'),6,2), '000000');
open item1;
fetch item1 into
 w_section_code, w_item_code, w_item,
 w_description, w_stock_subject_code, w_standard_price,
 w_cost_process_code, w_cost_subject_code, w_unit_stock;
if item1%notfound or item1%notfound is null then
 para_error_check := 1;
 goto check_error;
end if;
if para_io = 'I' then
 w_slip_type := '20';
 w_slip_quantity := 0 - para_slip_quantity;
else
 w_slip_type := '11';
 w_slip_quantity := para_slip_quantity;
end if;
insert into transaction(
 operation_date, section_code, item_no,
 item_code, item_name, item_description,
 stock_subject_code, accounting_month, slip_date,
 slip_no, slip_quantity, slip_price,
 slip_amount, curr_code, standard_price,
 standard_amount, company_code, order_number,
 line_no, cost_process_code, cost_subject_code,
 unit_stock, slip_type)
values(
 sysdate, w_section_code, para_item_no,
 w_item_code, w_item, w_description,
 w_stock_subject_code, w_accounting_month, para_slip_date,
 para_slip_no, w_slip_quantity, para_slip_price,
 w_slip_quantity * para_slip_price, para_curr_code, w_standard_price,
 w_slip_quantity * w_standard_price, para_company_code, para_order_no,
 para_line_no, w_cost_process_code, w_cost_subject_code,
 w_unit_stock, w_slip_type);
<<check_error>>
if item1%isopen then
 close item1;
end if;
end;
end shipping_tran_entry;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."SO_SET" (
    w_types      in number,
    w_so_no      in varchar2,
    w_line_no    in number,
    w_qty        in number,
    w_ret_no    in out number
)
is
begin
  declare
     SO_REC  so_details%rowtype ;

     w_delivery_qty number := 0 ;   --???
     w_balance_qty  number := 0 ;   --???

     chk_qty        number := 0 ;   -- S/O TOTAL QUANTITY
     chk_bal_qty    number := 0 ;   -- ??? Error Check?
     chk_del_qty    number := 0 ;   -- ??? Error Check?

     cursor C1 is
      select *
      from  so_details
      where so_no = w_so_no
        and line_no = w_line_no
      for update
      ;

  begin
      w_ret_no := 0 ;

      open C1 ;
         fetch C1 into SO_REC ;
         If w_types = 1 Then
            w_delivery_qty := w_qty * -1 ;
            w_balance_qty  := w_qty ;
         ElsIf w_types = 2 Then
            w_delivery_qty := w_qty ;
            w_balance_qty  := w_qty * -1 ;
         --null ;
         End If ;

         If C1%notfound Then
            w_ret_no := -1 ;     --??S/O??
         Else
            chk_qty     := SO_REC.qty ;
            chk_bal_qty := SO_REC.bal_qty ;
            chk_del_qty := SO_REC.del_qty ;

            If chk_bal_qty + w_balance_qty < 0 Then
               w_ret_no := -2 ;  --??Error
            ElsIf chk_qty < chk_del_qty + w_delivery_qty Then
               w_ret_no := -3 ;  --???Error
            Else
               update so_details set
                  del_qty   = del_qty + nvl(w_delivery_qty,0),
                  bal_qty   = bal_qty + nvl(w_balance_qty,0),
                  upto_date = sysdate
               where current of C1 ;
            End If ;
         End If ;
      close C1 ;
 <<LAST>>
   null ;

  end ;
end so_set ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."STRUCTURE_COPYSAVE" (
    v_item_no           in number,        -- ??????item_no?
    v_upper_item_no     in number,        -- ???????item_no?
    v_lower_line_no     in number,        -- ???????line_no?
    v_to_level_no       in number,        -- ??????level_no?
    v_from_level_no     in number,        -- ??????level_no?
    v_line_no           in number,        -- ????line_no?
    v_rowid             in varchar2,      -- ??????row_id?
    v_err_msg           in out varchar2

)
as
begin
   declare

    ERR_CODE CHAR(7);                                            -- SQL ERROR CODE
    ERR_MSG  VARCHAR2(255) := null;                              -- SQL ERROR (ORACLE ERROR CODE)

	cursor C1 (para1 in number,para2 in varchar2,para3 in number)
	is
	select * from structure
      where upper_item_no = para1 and
--            line_no       = para2 and
            rowid         = para2 and
            level_no      = para3;

      c1_rec	structure%rowtype;

--
   begin

	open C1 (v_upper_item_no,v_rowid,v_from_level_no);
	loop
		fetch C1 into c1_REC;
		exit when C1%notfound or C1%notfound is null;

        insert into structure (OPERATION_DATE,
                               UPPER_ITEM_NO,
                               LOWER_ITEM_NO,
                               LEVEL_NO,
                               REVISION,
                               LINE_NO,
                               REFERENCE_NUMBER,
                               QUANTITY,
                               QUANTITY_BASE,
                               FAILURE_RATE,
                               USER_SUPPLY_FLAG,
                               SUBCON_SUPPLY_FLAG,
                               REMARK)
               values         (sysdate,
                               v_item_no,
                               c1_rec.LOWER_ITEM_NO,
                               v_to_level_no,
                               c1_rec.REVISION,
                               v_line_no,
                               c1_rec.REFERENCE_NUMBER,
                               c1_rec.QUANTITY,
                               c1_rec.QUANTITY_BASE,
                               c1_rec.FAILURE_RATE,
                               c1_rec.USER_SUPPLY_FLAG,
                               c1_rec.SUBCON_SUPPLY_FLAG,
                               c1_rec.REMARK);
	<<LOOP_END>>
	  null;
	end loop;
	close C1;
 --? ???? ?----------------------------------------------------------------------------------
    exception
      when others then
          ERR_CODE := SQLCODE;
          ERR_MSG  := SQLERRM( ERR_CODE );
          DBMS_OUTPUT.PUT_LINE('ERR_CODE = ' || ERR_CODE) ;
          DBMS_OUTPUT.PUT_LINE('ERR_MSG = '  || ERR_MSG) ;
          v_err_msg := SQLERRM;


   end;
end STRUCTURE_COPYSAVE;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."STRUCTURE_SET" 
as
/****************************************************************
  structure_up_wk --> structure ???????
  2007/10/02 ?Sayuri Suzuki 
*****************************************************************/
begin
   declare
    /* ????????????? (upper_item_no,level_no??????*/
    cursor C1
    is
    select distinct 
           upper_item_no,
           level_no
      from structure_up_wk ;

    /* ????????????? */
    cursor C2 (para in number,para2 in number)
    is
    select upper_item_no,
           lower_item_no,
           level_no,
           line_no, 
	       reference_number,
	       quantity,
	       quantity_base,
	       failure_rate
      from structure_up_wk 
     where upper_item_no = para
       and level_no      = para2 ;

    /* ?????? */
    cursor C3 (para in number)
    is
    select max(level_no) level_no
      from leveld 
     where item_no = para ;

    /* ??? */
    cursor C4 (para in number,para2 in number)
    is
    select distinct
           upper_item_no,
           level_no
      from structure
     where upper_item_no = para
       and level_no      = para2 ;

    C1_REC          C1%rowtype ;
    C2_REC          C2%rowtype ;
    C3_REC          C3%rowtype ;
    C4_REC          C4%rowtype ;

   begin
   
    ZSP_VALIDATE_DATECODE();
    
    lock table structure in exclusive mode ;

    /*  structure_up_wk??? */
    open C1 ;
      loop
      fetch C1 into C1_REC ;
      exit when C1%notfound or C1%notfound is null ;
 
      /*  LEVELD?? */
      open C3(C1_REC.upper_item_no) ;
        fetch C3 into C3_REC ;
           if C3_REC.level_no is null then
              /* LEVELD ?? */
              insert into leveld (
                          operation_date,
                          level_cont_key,
                          level_no,
                          item_no
                ) values (
                          sysdate,
                          C1_REC.upper_item_no,
                          C1_REC.level_no,
                          C1_REC.upper_item_no
                ) ;
           end if ;
      close C3 ;

      /*  ????????????????????INSERT?? */
      open C4(C1_REC.upper_item_no,C1_REC.level_no) ;
        fetch C4 into C4_REC ;
           if C4%notfound or C4%notfound is null then
              /* STRUCTURE ????? */
              open C2(C1_REC.upper_item_no,C1_REC.level_no) ;
                loop
                fetch C2 into C2_REC ;
                 exit when C2%notfound or C2%notfound is null ;
                   if C2%found then
                      insert into structure (
                                  operation_date,
                                  upper_item_no, 
                                  lower_item_no,
                                  level_no, 
                                  revision,
                                  line_no, 
                                  reference_number,
                                  quantity, 
                                  quantity_base, 
                                  failure_rate,
                                  user_supply_flag,
                                  subcon_supply_flag,
                                  remark
                        ) values ( 
                                  sysdate,
                                  C2_REC.upper_item_no,
	                              C2_REC.lower_item_no,
	                              C2_REC.level_no,
	                              null,
	                              C2_REC.line_no,
	                              C2_REC.reference_number,
	                              C2_REC.quantity,
	                              C2_REC.quantity_base,
                                  C2_REC.failure_rate,
	                              null,
	                              null,
	                              null
                       ) ;
                   end if ;
	            end loop ;
              close C2 ; 
           else 
              /* STRUCTURE ???????????? */
              delete from structure
               where upper_item_no = C1_REC.upper_item_no
                 and level_no      = C1_REC.level_no ;

              /* STRUCTURE ????? */
              open C2(C1_REC.upper_item_no,C1_REC.level_no) ;
                loop
                fetch C2 into C2_REC ;
                 exit when C2%notfound or C2%notfound is null ;
                   if C2%found then
                      insert into structure (
                                  operation_date,
                                  upper_item_no, 
                                  lower_item_no,
                                  level_no, 
                                  revision,
                                  line_no, 
                                  reference_number,
                                  quantity, 
                                  quantity_base, 
                                  failure_rate,
                                  user_supply_flag,
                                  subcon_supply_flag,
                                  remark
                        ) values ( 
                                  sysdate,
                                  C2_REC.upper_item_no,
	                              C2_REC.lower_item_no,
	                              C2_REC.level_no,
	                              null,
	                              C2_REC.line_no,
	                              C2_REC.reference_number,
	                              C2_REC.quantity,
	                              C2_REC.quantity_base,
                                  C2_REC.failure_rate,
	                              null,
	                              null,
	                              null
                       ) ;
                   end if ;
     	           end loop ;
              close C2 ; 
           end if ;
      close C4 ;
	  end loop ;
    close C1 ;
   end ;
end STRUCTURE_SET ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."T_MRP_PROC" is
begin
     t_mrp000;
     t_mrp005;
     t_mrp010A;
     t_mrp015;
     t_mrp020A;
--     t_mrp025;
--     t_mrp025A;
     t_mrp025B;
     t_mrp030;
--     t_mrp035A;
     t_mrp035B;
     t_required;
     t_required2;
     t_required8;
     t_required9;
     necessary_make;
     t_teiji;
     t_teiji2;
     t_teiji3;
end;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."T_MRP000" 
AUTHID CURRENT_USER 
as
begin
   declare
    SOH_REC          so_header%rowtype ;
    SOD_REC          so_details%rowtype ;
    FST_REC          forecast%rowtype ;
    ITM_REC          item%rowtype ;
    ST_REC           company%rowtype ;

    SQL_1            varchar2(5000) := null ;                    -- SQL 
    TBL_CT           NUMBER(6) := 0;
     cursor C_SOD
      is
       select
          *
       from so_details
       where bal_qty > 0
      ;

     cursor C_SOH(PARAM1 in varchar2)
      is
       select
          *
       from so_header
       where so_no = PARAM1
      ;

     cursor C_ITM(PARAM1 in varchar2)
      is
       select
          *
       from item
       where item_no = PARAM1
      ;

     cursor C_FST
      is
       select
          *
       from forecast
      ;

     cursor C_ST
      is
       select
          *
       from company
       where company_type  = 0
      ;

     cursor C_WM
      is
       select this_month          
       from WHINVENTORY
      ;

    WH_THIS_MONTH    whinventory.THIS_MONTH%type;

     cursor C_MPS
      is
       select MAX(UPLOAD_DATE)  UPLOAD_DATE        
       from MPS_HEADER
      ;

    MPS_UPLOAD_DATE  mps_header.UPLOAD_DATE%type;

   begin
--????

    /* MRP VIEW???????PO ?GR??? 2017/02/17 Y.Hagai*/

         SELECT COUNT(*) INTO TBL_CT  FROM USER_TABLES
         WHERE TABLE_NAME = 'MRPGR_HEADER';

         IF TBL_CT >  0 THEN 
             SQL_1 := 'DROP TABLE MRPGR_HEADER ' ;
             EXECUTE IMMEDIATE SQL_1 ;

             SQL_1 := 'CREATE TABLE MRPGR_HEADER  AS  SELECT * FROM GR_HEADER' ;
             EXECUTE IMMEDIATE SQL_1 ;

             SQL_1 := 'CREATE INDEX MRPGR_HEADER_IDX ON MRPGR_HEADER (GR_NO) ' ;
             EXECUTE IMMEDIATE SQL_1 ;

             SQL_1 := 'CREATE INDEX MRPGR_HEADER_IDX2 ON MRPGR_HEADER (INV_NO) ' ;
             EXECUTE IMMEDIATE SQL_1 ;

             SQL_1 := 'CREATE INDEX MRPGR_HEADER_IDX3 ON MRPGR_HEADER (GR_NO, GR_DATE) ' ;
             EXECUTE IMMEDIATE SQL_1 ;

         ELSE
             SQL_1 := 'CREATE TABLE MRPGR_HEADER  AS  SELECT * FROM GR_HEADER' ;
             EXECUTE IMMEDIATE SQL_1 ;

             SQL_1 := 'CREATE INDEX MRPGR_HEADER_IDX ON MRPGR_HEADER (GR_NO) ' ;
             EXECUTE IMMEDIATE SQL_1 ;

             SQL_1 := 'CREATE INDEX MRPGR_HEADER_IDX2 ON MRPGR_HEADER (INV_NO) ' ;
             EXECUTE IMMEDIATE SQL_1 ;

             SQL_1 := 'CREATE INDEX MRPGR_HEADER_IDX3 ON MRPGR_HEADER (GR_NO, GR_DATE) ' ;
             EXECUTE IMMEDIATE SQL_1 ;

         END IF;

         SELECT COUNT(*) INTO TBL_CT  FROM USER_TABLES
         WHERE TABLE_NAME = 'MRPGR_DETAILS';

         IF TBL_CT >  0 THEN 
             SQL_1 := 'DROP TABLE MRPGR_DETAILS ' ;
             EXECUTE IMMEDIATE SQL_1 ;

             SQL_1 := 'CREATE TABLE MRPGR_DETAILS  AS  SELECT * FROM GR_DETAILS' ;
             EXECUTE IMMEDIATE SQL_1 ;

             SQL_1 := 'CREATE INDEX MRPGR_DETAILS_IDX	ON MRPGR_DETAILS (GR_NO) ' ;
             EXECUTE IMMEDIATE SQL_1 ;
             SQL_1 := 'CREATE INDEX MRPGR_DETAILS_IDX2	ON MRPGR_DETAILS (GR_NO, LINE_NO) ' ;
             EXECUTE IMMEDIATE SQL_1 ;
             SQL_1 := 'CREATE INDEX MRPGR_DETAILS_IDX3	ON MRPGR_DETAILS (GR_NO, PO_NO, PO_LINE_NO) ' ;
             EXECUTE IMMEDIATE SQL_1 ;
             SQL_1 := 'CREATE INDEX MRPGR_DETAILS_IDX4	ON MRPGR_DETAILS (PO_NO, PO_LINE_NO) ' ;
             EXECUTE IMMEDIATE SQL_1 ;

         ELSE
             SQL_1 := 'CREATE TABLE MRPGR_DETAILS  AS  SELECT * FROM GR_DETAILS' ;
             EXECUTE IMMEDIATE SQL_1 ;

             SQL_1 := 'CREATE INDEX MRPGR_DETAILS_IDX	ON MRPGR_DETAILS (GR_NO) ' ;
             EXECUTE IMMEDIATE SQL_1 ;
             SQL_1 := 'CREATE INDEX MRPGR_DETAILS_IDX2	ON MRPGR_DETAILS (GR_NO, LINE_NO) ' ;
             EXECUTE IMMEDIATE SQL_1 ;
             SQL_1 := 'CREATE INDEX MRPGR_DETAILS_IDX3	ON MRPGR_DETAILS (GR_NO, PO_NO, PO_LINE_NO) ' ;
             EXECUTE IMMEDIATE SQL_1 ;
             SQL_1 := 'CREATE INDEX MRPGR_DETAILS_IDX4	ON MRPGR_DETAILS (PO_NO, PO_LINE_NO) ' ;
             EXECUTE IMMEDIATE SQL_1 ;
         END IF;

         SELECT COUNT(*) INTO TBL_CT  FROM USER_TABLES
         WHERE TABLE_NAME = 'MRPPO_HEADER';

         IF TBL_CT >  0 THEN 
             SQL_1 := 'DROP TABLE MRPPO_HEADER ' ;
             EXECUTE IMMEDIATE SQL_1 ;

             SQL_1 := 'CREATE TABLE MRPPO_HEADER  AS  SELECT * FROM PO_HEADER' ;
             EXECUTE IMMEDIATE SQL_1 ;

             SQL_1 := 'CREATE INDEX MRPPO_H_IDX1 ON MRPPO_HEADER (PO_NO) ' ;
             EXECUTE IMMEDIATE SQL_1 ;
             SQL_1 := 'CREATE INDEX MRPPO_H_IDX3 ON MRPPO_HEADER (SUPPLIER_CODE, PO_NO) ' ;
             EXECUTE IMMEDIATE SQL_1 ;

         ELSE
             SQL_1 := 'CREATE TABLE MRPPO_HEADER  AS  SELECT * FROM PO_HEADER' ;
             EXECUTE IMMEDIATE SQL_1 ;

             SQL_1 := 'CREATE INDEX MRPPO_H_IDX1 ON MRPPO_HEADER (PO_NO) ' ;
             EXECUTE IMMEDIATE SQL_1 ;
             SQL_1 := 'CREATE INDEX MRPPO_H_IDX3 ON MRPPO_HEADER (SUPPLIER_CODE, PO_NO) ' ;
             EXECUTE IMMEDIATE SQL_1 ;

         END IF;

         SELECT COUNT(*) INTO TBL_CT  FROM USER_TABLES
         WHERE TABLE_NAME = 'MRPPO_DETAILS';

         IF TBL_CT >  0 THEN 
             SQL_1 := 'DROP TABLE MRPPO_DETAILS ' ;
             EXECUTE IMMEDIATE SQL_1 ;

             SQL_1 := 'CREATE TABLE MRPPO_DETAILS  AS  SELECT * FROM PO_DETAILS' ;
             EXECUTE IMMEDIATE SQL_1 ;

             SQL_1 := 'CREATE INDEX MRPPO_D_IDX1 ON MRPPO_DETAILS (PO_NO) ' ;
             EXECUTE IMMEDIATE SQL_1 ;
             SQL_1 := 'CREATE INDEX MRPPO_D_IDX3 ON MRPPO_DETAILS (PO_NO, LINE_NO) ' ;
             EXECUTE IMMEDIATE SQL_1 ;

         ELSE

             SQL_1 := 'CREATE TABLE MRPPO_DETAILS  AS  SELECT * FROM PO_DETAILS' ;
             EXECUTE IMMEDIATE SQL_1 ;

             SQL_1 := 'CREATE INDEX MRPPO_D_IDX1 ON MRPPO_DETAILS (PO_NO) ' ;
             EXECUTE IMMEDIATE SQL_1 ;
             SQL_1 := 'CREATE INDEX MRPPO_D_IDX3 ON MRPPO_DETAILS (PO_NO, LINE_NO) ' ;
             EXECUTE IMMEDIATE SQL_1 ;

         END IF;



    delete from t_mrp_demand;

    /* MRP?????WHINENTORY????MPS???????????? */
    delete MRP_OPERATION_DATE;

    open C_ST ;
       fetch C_ST into ST_REC ;
    close C_ST ;

--?????
  /* ????? */
    open C_SOD;
    loop
      fetch C_SOD into SOD_REC ;
         exit when C_SOD%notfound ;

         open C_SOH(SOD_REC.SO_NO) ;
             fetch C_SOH into SOH_REC ;
         close C_SOH ;

         open C_ITM(SOD_REC.ITEM_NO) ;
             ITM_REC := null ;
             fetch C_ITM into ITM_REC ;
         close C_ITM ;
         if ITM_REC.ITEM_NO is null Then
              goto END_LOOP ;
         end if ;

         insert into t_mrp_demand(
            OPERATION_DATE ,
            SECTION_CODE   ,
            ITEM_NO        ,
            DEMAND_ST      ,
            DEMAND_DATE    ,
            DEMAND_SUB_DATE,
            DEMAND_NO      ,
            DEMAND_QTY     ,
            DEMAND_TYPE    ,
            DEMAND_PRIORITY
         ) values (
            SYSDATE                ,
            ITM_REC.SECTION_CODE   ,
            SOD_REC.ITEM_NO        ,
             ST_REC.COMPANY_CODE   ,
            SOD_REC.ETD            ,
            SOD_REC.ETD            ,
            SOD_REC.SO_NO          ,
            SOD_REC.BAL_QTY        ,
            'O'                    ,
            'D'
         ) ;

         <<END_LOOP>>
         null ;
    end loop;
    close C_SOD;

  /*????????? */
    open C_FST;
    loop
      fetch C_FST into FST_REC ;
         exit when C_FST%notfound ;

         open C_ITM(FST_REC.ITEM_NO) ;
             ITM_REC := null ;
             fetch C_ITM into ITM_REC ;
         close C_ITM ;
         if ITM_REC.ITEM_NO is null Then
              goto END_LOOP ;
         end if ;

         insert into t_mrp_demand(
            OPERATION_DATE ,
            SECTION_CODE   ,
            ITEM_NO        ,
            DEMAND_ST      ,
            DEMAND_DATE    ,
            DEMAND_SUB_DATE,
            DEMAND_NO      ,
            DEMAND_QTY     ,
            DEMAND_TYPE    ,
            DEMAND_PRIORITY
         ) values (
            SYSDATE                ,
            ITM_REC.SECTION_CODE   ,
            FST_REC.ITEM_NO        ,
             ST_REC.COMPANY_CODE   ,
            FST_REC.ETD            ,
            FST_REC.ETD            ,
            FST_REC.FORECAST_NO    ,
            FST_REC.QTY        ,
            'F'                    ,
            'P'
         ) ;

         <<END_LOOP>>
         null ;
    end loop;
    close C_FST;

    open C_WM ;
       fetch C_WM into WH_THIS_MONTH ;
    close C_WM ;
    open C_MPS ;
       fetch C_MPS into MPS_UPLOAD_DATE ;
    close C_MPS ;

    insert into MRP_OPERATION_DATE(MRP_OPERATION_DATE, WHINVENTORY_MONTH,MPS_UPLOAD_DATE) 
            values(sysdate,WH_THIS_MONTH,MPS_UPLOAD_DATE);

   end ;
end T_MRP000 ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."T_MRP005" 
as
begin
   declare
    ISU_REC issue%rowtype ;
    HJU_REC hojyu%rowtype ;

     cursor C_ISU
      is
       select
          *
       from issue
       where remainder_qty > 0
         and product_lot_number is not null
      ;

     cursor C_HJU
      is
       select
          *
       from hojyu
       where order_create_date is null
      ;

   begin
--????

--?????
  /* ??????? */
    open C_ISU;
    loop
      fetch C_ISU into ISU_REC ;
         exit when C_ISU%notfound ;

         insert into t_mrp_demand(
            OPERATION_DATE ,
            SECTION_CODE   ,
            ITEM_NO        ,
            DEMAND_ST      ,
            DEMAND_DATE    ,
            DEMAND_SUB_DATE,
            DEMAND_NO      ,
            DEMAND_QTY     ,
            DEMAND_TYPE    ,
            DEMAND_PRIORITY
         ) values (
            SYSDATE                   ,
            ISU_REC.SECTION_CODE      ,
            ISU_REC.ITEM_NO           ,
            ISU_REC.STATION_CODE      ,
            ISU_REC.MATERIAL_REQ_DATE ,
            ISU_REC.ISSUE_REQ_DATE    ,
            ISU_REC.ISSUE_ORDER_NO    ,
            ISU_REC.REMAINDER_QTY     ,
            'T'                       ,
            'A'
         ) ;
    end loop;
    close C_ISU;

  /* ?????????????? */
    open C_HJU;
    loop
      fetch C_HJU into HJU_REC ;
         exit when C_HJU%notfound ;

         insert into t_mrp_demand(
            OPERATION_DATE ,
            SECTION_CODE   ,
            ITEM_NO        ,
            DEMAND_ST      ,
            DEMAND_DATE    ,
            DEMAND_SUB_DATE,
            DEMAND_NO      ,
            DEMAND_QTY     ,
            DEMAND_TYPE    ,
            DEMAND_PRIORITY
         ) values (
            SYSDATE                   ,
            HJU_REC.SECTION_CODE      ,
            HJU_REC.ITEM_NO           ,
            HJU_REC.STATION_CODE      ,
            HJU_REC.ISSUE_REQ_DATE    ,
            HJU_REC.ORDER_CREATE_DATE ,
            'AA' || to_char(sysdate,'mm') || substr(HJU_REC.STATION_CODE,1,10),
            HJU_REC.ISSUE_REQ_QTY     ,
            'T'                       ,
            'F'
         ) ;
    end loop;
    close C_HJU;

   end ;
end T_MRP005 ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."T_MRP010" 
as
begin
   declare
    PLN_REC  product_plan%rowtype ;
    LVLD_REC leveld%rowtype ;
    STR_REC structure%rowtype ;
    UITM_REC  item%rowtype ;
    LITM_REC  item%rowtype ;
-- 2006/10/27 Y.Hagai FI??  ??????
    wk_LT        number(3) ;
    wk_req_date  DATE ;
    CNF_REC configuration%rowtype ;

    v_demand_qty t_mrp_demand.demand_qty%type ;

     cursor C_PLN
      is
       select  *  from product_plan
       where nvl(progress_status,'A') < 'C';

     cursor C_LVLD(PARAM1 in number,PARAM2 in number)
      is
       select  *  from leveld
       where item_no =PARAM1
         and level_no = PARAM2
     ;

     cursor C_STR(PARAM1 in number,PARAM2 in number)
      is
       select  *  from structure
       where upper_item_no =PARAM1
         and level_no = PARAM2
         and quantity > 0
         and nvl(user_supply_flag,0) not in ('1','2','3')
         and nvl(subcon_supply_flag,0) not in ('3','4')
     ;

     cursor C_ITM(PARAM1 in number)
      is
       select  *  from item
       where item_no =PARAM1
      ;

   /* 2006/10/27 Y.HagaiCONFIGURATION ?? */
     cursor C_CNF  
      is
       select * from CONFIGURATION where CONFIG_KEY = 'MRP_ADJ_LT_CALC'
      ;

   begin
--????

--?????
 /* ??????? */
    open C_CNF ;
        CNF_REC := null ;
        fetch C_CNF into CNF_REC ;
    close C_CNF ;

  /* ??????? */
    open C_PLN;
    loop
      fetch C_PLN into PLN_REC ;
         exit when C_PLN%notfound ;

         /* ????? */
           open C_ITM(PLN_REC.ITEM_NO) ;
               UITM_REC := null ;
               fetch C_ITM into UITM_REC ;
           close C_ITM ;
           if  UITM_REC.ITEM_NO is null then
               goto END_LOOP ;
           End If ;


         /* ??????? */
            open C_STR (PLN_REC.BM_ITEM_NO,PLN_REC.LEVEL_NO) ;
            loop
                 fetch C_STR into STR_REC ;
                 exit when C_STR%notfound or C_STR%notfound is null;


                      /* ????? */
                        open C_ITM(STR_REC.LOWER_ITEM_NO) ;
                            LITM_REC := null ;
                            fetch C_ITM into LITM_REC ;
                        close C_ITM ;
                        if  LITM_REC.ITEM_NO is null then
                            goto END_LOOP_STR ;
                        End If ;

                     /* ??????? */
                      If STR_REC.QUANTITY_BASE = 0 or STR_REC.QUANTITY_BASE is null Then
                          STR_REC.QUANTITY_BASE := 1 ;
                      End If ;


                     /* ???? */
                      v_demand_qty := STR_REC.QUANTITY / STR_REC.QUANTITY_BASE *
                                       (1 + (nvl(UITM_REC.MANUFACT_FAIL_RATE,0)/100) +
                                            (nvl(LITM_REC.MANUFACT_FAIL_RATE,0)/100) +
                                            (nvl(STR_REC.FAILURE_RATE,0)/100)
                                       ) *  PLN_REC.REMAINDER_QUANTITY ;

                     /* ??????????????? */
                       If LITM_REC.UNIT_STOCK_RATE != LITM_REC.unit_engineer_rate Then
                           v_demand_qty := v_demand_qty * nvl(LITM_REC.UNIT_STOCK_RATE,1)/ nvl(LITM_REC.unit_engineer_rate,1) ;
                       End If ;

                     /* 2006/10/27 Y.Hagai ??????? */
                       If CNF_REC.CONFIG_FLAG = 1 Then
                           wk_LT :=  nvl(LITM_REC.ADJUSTMENT_LEADTIME,0) ;
--2006/11/22 y.hagai modify                           wk_req_date := PLN_REC.ISSUE_REQ_DATE - wk_LT ;
                           wk_req_date := add_work_date(PLN_REC.ISSUE_REQ_DATE, wk_LT * -1) ;
                       else
                           wk_req_date := PLN_REC.ISSUE_REQ_DATE ;
                       End If ;

                      insert into t_mrp_demand(
                         OPERATION_DATE ,
                         SECTION_CODE   ,
                         ITEM_NO        ,
                         DEMAND_ST      ,
                         DEMAND_DATE    ,
                         DEMAND_SUB_DATE,
                         DEMAND_NO      ,
                         DEMAND_QTY     ,
                         DEMAND_TYPE    ,
                         DEMAND_PRIORITY
                      ) values (
                         SYSDATE                   ,
                         PLN_REC.SECTION_CODE      ,
                         LITM_REC.ITEM_NO          ,
                         PLN_REC.STATION_CODE      ,
                         wk_req_date               ,
                         wk_req_date               ,
                         PLN_REC.PRODUCT_LOT_NUMBER,
                         v_demand_qty              ,
                         'Y'                       ,
                         'B'
                      ) ;
              <<END_LOOP_STR>>
               null ;
            end loop ;
            close C_STR ;



        <<END_LOOP>>
            null ;
    end loop;
    close C_PLN;

   end ;
end T_MRP010 ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."T_MRP010A" 
as
/****************************************************************
  ?????????????
  ???          ?2007/07/18
  ???          ?Y.Hagai
  ???          ?2016/02/20
  ???          ?Y.Hagai
  ????
  2016/02/20     MPS?PO_NO,PO_LINE_NO,WORK_ORDER???

*****************************************************************/
begin
   declare
    LVLD_REC leveld%rowtype ;
    STR_REC structure%rowtype ;
    UITM_REC  item%rowtype ;
    LITM_REC  item%rowtype ;
-- 2006/10/27 Y.Hagai FI??  ??????
    wk_LT        number(3) ;
    wk_req_date  DATE ;

    CNF_REC configuration%rowtype ;

    v_demand_qty t_mrp_demand.demand_qty%type ;

     cursor C_PLN
      is
--2016/02/20 Y.Hagai mente start
--       select  *  from product_plan
--       where nvl(progress_status,'A') < 'C';
       select  p.OPERATION_DATE, p.SECTION_CODE, p.PRODUCT_LOT_NUMBER, p.ITEM_NO, 
	p.KURAIRE_DATE, p.BM_ITEM_NO, p.LEVEL_NO, p.STATION_CODE, p.PROGRESS_STATUS, 
	p.BUYER_CODE, p.SHIPTO_CODE, p.CARVED_STAMP, p.PLAN_CREATE_DATE, 
	p.PLAN_OPERATE_DATE, p.PRODUCT_QUANTITY, p.MATERIAL_REQ_DATE, p.ISSUE_REQ_DATE, 
	p.PRODUCT_REQ_DATE, p.RELEASE_DATE, p.PRODUCT_FIN_DATE, p.COMPLETE_QUANTITY, 
	p.CANCEL_QUANTITY, p.REMAINDER_QUANTITY, p.WO_NO, p.PRODUCT_LINE, p.DATE_CODE, 
	p.GRADE, m.PO_NO,m.PO_LINE_NO,m.WORK_ORDER,m.STATUS MPS_STATUS  from product_plan p,mps_header m
       where nvl(progress_status,'A') < 'C'
         and p.PO_NO = m.PO_NO(+)
         and p.PO_LINE_NO = m.PO_LINE_NO(+);

    PLN_REC  C_PLN%rowtype := null;

--2016/02/20 Y.Hagai mente end

     cursor C_LVLD(PARAM1 in number)
      is
       select  MAX(LEVEL_NO) LEVEL_NO  from leveld
       where item_no =PARAM1;
 --        and level_no = PARAM2;
      LEVELD_REC C_LVLD%rowtype := null;

 
    cursor C_STR(PARAM1 in number,PARAM2 in number)
      is
       select  *  from structure
       where upper_item_no =PARAM1
         and level_no = PARAM2
         and quantity > 0
         and nvl(user_supply_flag,0) not in ('1','2','3')
         and nvl(subcon_supply_flag,0) not in ('3','4')
     ;

     cursor C_ITM(PARAM1 in number)
      is
       select  *  from item
       where item_no =PARAM1
      ;

   /* 2006/10/27 Y.Hagai CONFIGURATION ?? */
     cursor C_CNF  
      is
       select * from CONFIGURATION where CONFIG_KEY = 'MRP_ADJ_LT_CALC'
      ;

   /* 2007/07/19 Y.Hagai CONFIGURATION ?? */
     cursor C2_CNF  
      is
       select * from CONFIGURATION where CONFIG_KEY = 'RUNNING_CHANGE'
      ;

      CNF2_REC configuration%rowtype ;

     cursor C_RNC(PARAM1 in number,PARAM2 in number)
      is
       select  *  from runningchange
       where item_no = PARAM1
         and NEW_ITEM_NO = PARAM2
         and VALID_FLAG  = '1'
      ;

       RNC_REC  runningchange%rowtype ;
--
       wk_item_no       number(8) ;
       wk_LEVEL_no       number(8) ;


   begin
--????

--?????
 /* ??????? */
    open C_CNF ;
        CNF_REC := null ;
        fetch C_CNF into CNF_REC ;
    close C_CNF ;

 /* ?????2?? */
    open C2_CNF ;
        CNF2_REC := null ;
        fetch C2_CNF into CNF2_REC ;
    close C2_CNF ;

  /* ??????? */
    open C_PLN;
    loop
      fetch C_PLN into PLN_REC ;
         exit when C_PLN%notfound ;

         /* ????? */
           open C_ITM(PLN_REC.ITEM_NO) ;
               UITM_REC := null ;
               fetch C_ITM into UITM_REC ;
           close C_ITM ;
           if  UITM_REC.ITEM_NO is null then
               goto END_LOOP ;
           End If ;

         /* ????? */
           open C_LVLD(PLN_REC.ITEM_NO) ;
               fetch C_LVLD into LEVELD_REC ;
           close C_LVLD ;

         /* ??????? */
--            open C_STR (PLN_REC.BM_ITEM_NO,PLN_REC.LEVEL_NO) ;
            open C_STR (PLN_REC.BM_ITEM_NO,LEVELD_REC.LEVEL_NO) ;


            loop
                 fetch C_STR into STR_REC ;
                 exit when C_STR%notfound or C_STR%notfound is null;


                      /* ????? */
                        open C_ITM(STR_REC.LOWER_ITEM_NO) ;
                            LITM_REC := null ;
                            fetch C_ITM into LITM_REC ;
                        close C_ITM ;
                        if  LITM_REC.ITEM_NO is null then
                            goto END_LOOP_STR ;
                        End If ;

                     /* ??????? */
                      If STR_REC.QUANTITY_BASE = 0 or STR_REC.QUANTITY_BASE is null Then
                          STR_REC.QUANTITY_BASE := 1 ;
                      End If ;


                     /* ???? */
                      v_demand_qty := STR_REC.QUANTITY / STR_REC.QUANTITY_BASE *
                                       (1 + (nvl(UITM_REC.MANUFACT_FAIL_RATE,0)/100) +
                                            (nvl(LITM_REC.MANUFACT_FAIL_RATE,0)/100) +
                                            (nvl(STR_REC.FAILURE_RATE,0)/100)
                                       ) *  PLN_REC.REMAINDER_QUANTITY ;

                     /* ??????????????? */
                       If LITM_REC.UNIT_STOCK_RATE != LITM_REC.unit_engineer_rate Then
                           if LITM_REC.UNIT_STOCK_RATE = 0 then
                              LITM_REC.UNIT_STOCK_RATE := 1;
                           end if;
                           if LITM_REC.unit_engineer_rate = 0 then
                              LITM_REC.unit_engineer_rate := 1;
                           end if;
                           v_demand_qty := v_demand_qty * nvl(LITM_REC.UNIT_STOCK_RATE,1)/ nvl(LITM_REC.unit_engineer_rate,1) ;
                       End If ;

                     /* 2006/10/27 Y.Hagai ??????? */
                       If CNF_REC.CONFIG_FLAG = 1 Then
                           wk_LT :=  nvl(LITM_REC.ADJUSTMENT_LEADTIME,0) ;
                           wk_req_date := add_work_date(PLN_REC.ISSUE_REQ_DATE, wk_LT  * -1) ;
                       else
                           wk_req_date := PLN_REC.ISSUE_REQ_DATE ;
                       End If ;

                      /*
                         2007/07/19 Y.Hagai ????????
                         ?????????????????????????????
                      */

                       wk_item_no := LITM_REC.ITEM_NO;

                       If CNF2_REC.CONFIG_FLAG = 1 Then
                          open C_RNC(PLN_REC.BM_ITEM_NO,LITM_REC.ITEM_NO) ;
                               RNC_REC := null ;
                               fetch C_RNC into RNC_REC ;
                          close C_RNC;
                          if  RNC_REC.OLD_ITEM_NO is not null then
                               wk_item_no := RNC_REC.OLD_ITEM_NO;
                          End If ;
                       End If ;

                      insert into t_mrp_demand(
                         OPERATION_DATE ,
                         SECTION_CODE   ,
                         ITEM_NO        ,
                         DEMAND_ST      ,
                         DEMAND_DATE    ,
                         DEMAND_SUB_DATE,
                         DEMAND_NO      ,
                         DEMAND_QTY     ,
                         DEMAND_TYPE    ,
                         DEMAND_PRIORITY,
                         BM_ITEM_NO     ,
--2016/02/20 Y.Hagai mente start         
                         PO_NO          ,
                         PO_LINE_NO     ,
                         WORK_ORDER     ,
                         MPS_STATUS     ,
                         LEVEL_NO
--2016/02/20 Y.Hagai mente end
                      ) values (
                         SYSDATE                   ,
                         PLN_REC.SECTION_CODE      ,
                         wk_item_no                ,
                         PLN_REC.STATION_CODE      ,
                         wk_req_date               ,
                         wk_req_date               ,
                         PLN_REC.PRODUCT_LOT_NUMBER,
                         v_demand_qty              ,
                         'Y'                       ,
                         'B'                       ,
                          PLN_REC.BM_ITEM_NO       ,
--2016/02/20 Y.Hagai mente start         
                         PLN_REC.PO_NO             ,
                         PLN_REC.PO_LINE_NO        ,
                         PLN_REC.WORK_ORDER        ,
                         PLN_REC.MPS_STATUS       , 
                         LEVELD_REC.LEVEL_NO      
--2016/02/20 Y.Hagai mente end
                      ) ;
              <<END_LOOP_STR>>
               null ;
            end loop ;
            close C_STR ;



        <<END_LOOP>>
            null ;
    end loop;
    close C_PLN;

   end ;
end T_MRP010A ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."T_MRP015" 
as
/****************************************************************
  ???          ?2016/02/20
  ???          ?Y.Hagai
  ????
  2016/02/20     MPS?PO_NO,PO_LINE_NO,WORK_ORDER???

*****************************************************************/
begin
   declare
    ITM_REC  item%rowtype ;

    v_demand_qty t_mrp_demand.demand_qty%type ;

     cursor C_PLN
      is
--2016/02/20 Y.Hagai mente start
--       select  *  from product_plan
--       where remainder_quantity > 0
       select  p.OPERATION_DATE, p.SECTION_CODE, p.PRODUCT_LOT_NUMBER, p.ITEM_NO, 
	p.KURAIRE_DATE, p.BM_ITEM_NO, p.LEVEL_NO, p.STATION_CODE, p.PROGRESS_STATUS, 
	p.BUYER_CODE, p.SHIPTO_CODE, p.CARVED_STAMP, p.PLAN_CREATE_DATE, 
	p.PLAN_OPERATE_DATE, p.PRODUCT_QUANTITY, p.MATERIAL_REQ_DATE, p.ISSUE_REQ_DATE, 
	p.PRODUCT_REQ_DATE, p.RELEASE_DATE, p.PRODUCT_FIN_DATE, p.COMPLETE_QUANTITY, 
	p.CANCEL_QUANTITY, p.REMAINDER_QUANTITY, p.WO_NO, p.PRODUCT_LINE, p.DATE_CODE, 
	p.GRADE, m.PO_NO,m.PO_LINE_NO,m.WORK_ORDER,m.STATUS MPS_STATUS  from product_plan p,mps_header m
        where remainder_quantity > 0
         and nvl(progress_status,'A') >= 'C'
         and p.PO_NO = m.PO_NO(+)
         and p.PO_LINE_NO = m.PO_LINE_NO(+)
      ;

    PLN_REC  C_PLN%rowtype := null;

--2016/02/20 Y.Hagai mente end

     cursor C_ITM(PARAM1 in number)
      is
       select  *  from item
       where item_no =PARAM1
      ;

   begin
--????
  delete from t_mrp_demand_fix ;

--?????
  /* ????? */

    open C_PLN;
    loop
      fetch C_PLN into PLN_REC ;
         exit when C_PLN%notfound ;
          insert into t_mrp_demand_fix(
              OPERATION_DATE ,
              SECTION_CODE   ,
              ITEM_NO        ,
              DEMAND_ST      ,
              DEMAND_DATE    ,
              DEMAND_SUB_DATE,
              DEMAND_NO      ,
              DEMAND_QTY     ,
              DEMAND_TYPE    ,
              DEMAND_PRIORITY,
              BM_ITEM_NO     ,
--2016/02/20 Y.Hagai mente start 
              PO_NO          ,
              PO_LINE_NO     ,
              WORK_ORDER     ,
              MPS_STATUS      
--2016/02/20 Y.Hagai mente end
           ) values (
              SYSDATE                     ,
              PLN_REC.SECTION_CODE        ,
              PLN_REC.ITEM_NO             ,
              PLN_REC.STATION_CODE        ,
              PLN_REC.MATERIAL_REQ_DATE   ,
              PLN_REC.PRODUCT_REQ_DATE    ,
              PLN_REC.PRODUCT_LOT_NUMBER  ,
              PLN_REC.REMAINDER_QUANTITY  ,
              null                        ,
              null                        ,
              PLN_REC.BM_ITEM_NO          ,
--2016/02/20 Y.Hagai mente start           
              PLN_REC.PO_NO               ,
              PLN_REC.PO_LINE_NO          ,
              PLN_REC.WORK_ORDER          , 
              PLN_REC.MPS_STATUS      
--2016/02/20 Y.Hagai mente end
           ) ;
    end loop ;
    close C_PLN ;


   end ;
end T_MRP015 ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."T_MRP015_ORG" 
as
begin
   declare
    PLN_REC  product_plan%rowtype ;
    POD_REC  po_details%rowtype ;
    POH_REC  po_header%rowtype ;
    ITM_REC  item%rowtype ;

    v_demand_qty t_mrp_demand.demand_qty%type ;

     cursor C_PLN
      is
       select  *  from product_plan
       where remainder_quantity > 0
         and nvl(progress_status,'A') >= 'C'
      ;

     cursor C_POD
      is
       select  *  from po_details
       where bal_qty >0
        and item_no in (select item_no from item where nvl(stock_subject_code,0) >=3)
      ;

     cursor C_POH(PARAM1 in varchar2)
      is
       select  *  from po_header
       where po_no = PARAM1
      ;

     cursor C_ITM(PARAM1 in number)
      is
       select  *  from item
       where item_no =PARAM1
      ;

   begin
--????
  delete from t_mrp_demand_fix ;

--?????
  /* ????? */

    open C_PLN;
    loop
      fetch C_PLN into PLN_REC ;
         exit when C_PLN%notfound ;
          insert into t_mrp_demand_fix(
              OPERATION_DATE ,
              SECTION_CODE   ,
              ITEM_NO        ,
              DEMAND_ST      ,
              DEMAND_DATE    ,
              DEMAND_SUB_DATE,
              DEMAND_NO      ,
              DEMAND_QTY     ,
              DEMAND_TYPE    ,
              DEMAND_PRIORITY
           ) values (
              SYSDATE              ,
              PLN_REC.SECTION_CODE     ,
              PLN_REC.ITEM_NO      ,
              PLN_REC.STATION_CODE,
              PLN_REC.MATERIAL_REQ_DATE     ,
              PLN_REC.PRODUCT_REQ_DATE     ,
              PLN_REC.PRODUCT_LOT_NUMBER   ,
              PLN_REC.REMAINDER_QUANTITY      ,
              null                 ,
              null
           ) ;
    end loop ;
    close C_PLN ;

    open C_POD;
    loop
      fetch C_POD into POD_REC ;
         exit when C_POD%notfound ;

         /* ???? */
           open C_ITM(POD_REC.ITEM_NO) ;
               ITM_REC := null ;
               fetch C_ITM into ITM_REC ;
           close C_ITM ;
           if ITM_REC.ITEM_NO is null then
               goto END_LOOP ;
           End If ;
           if nvl(ITM_REC.STOCK_SUBJECT_CODE,0) < 3 then
               goto END_LOOP ;
           End If ;
           if ITM_REC.ITEM_NO is null then
               goto END_LOOP ;
           End If ;

         /* ??????? */
           open C_POH(POD_REC.PO_NO) ;
               POH_REC := null ;
               fetch C_POH into POH_REC ;
           close C_POH ;
           if POH_REC.PO_NO is null then
               goto END_LOOP ;
           End If ;


           insert into t_mrp_demand_fix(
              OPERATION_DATE ,
              SECTION_CODE   ,
              ITEM_NO        ,
              DEMAND_ST      ,
              DEMAND_DATE    ,
              DEMAND_SUB_DATE,
              DEMAND_NO      ,
              DEMAND_QTY     ,
              DEMAND_TYPE    ,
              DEMAND_PRIORITY
           ) values (
              SYSDATE              ,
              POH_REC.SECTION_CODE     ,
              POD_REC.ITEM_NO      ,
              POH_REC.SUPPLIER_CODE,
              decode(nvl(ITM_REC.MANUFACT_LEADTIME,0),0,POD_REC.ETA,add_work_date(POD_REC.ETA,-ITM_REC.MANUFACT_LEADTIME)) ,
              POD_REC.SCHEDULE     ,
              POD_REC.PO_NO        ,
              POD_REC.BAL_QTY      ,
              null                 ,
              null
           ) ;

      <<END_LOOP>>
      null ;
    end loop;
    close C_POD;

   end ;
end T_MRP015_ORG ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."T_MRP020" 
as
begin
   declare
    FIX_REC   t_mrp_demand_fix%rowtype ;
    LVLD_REC  leveld%rowtype ;
    STR_REC   structure%rowtype ;
    UITM_REC  item%rowtype ;
    LITM_REC  item%rowtype ;
-- 2006/10/27 Y.Hagai FI??  ??????
    wk_LT        number(3) ;
    wk_req_date  DATE ;
    CNF_REC configuration%rowtype ;


    v_demand_qty t_mrp_demand.demand_qty%type ;
    v_level_no   structure.level_no%type ;

     cursor C_FIX
      is
       select  *  from t_mrp_demand_fix
      ;

     cursor C_LVLD(PARAM1 in number,PARAM2 in number)
      is
       select  *  from leveld
       where item_no =PARAM1
         and level_no = PARAM2
     ;

     cursor C_STR(PARAM1 in number,PARAM2 in number)
      is
       select  *  from structure
       where upper_item_no =PARAM1
         and level_no = PARAM2
         and quantity > 0
         and nvl(user_supply_flag,0) not in ('1','2','3')
         and nvl(subcon_supply_flag,0) not in ('3','4')
     ;

     cursor C_ITM(PARAM1 in number)
      is
       select  *  from item
       where item_no =PARAM1
      ;

   /* 2006/10/27 Y.HagaiCONFIGURATION ?? */
     cursor C_CNF  
      is
       select * from CONFIGURATION where CONFIG_KEY = 'MRP_ADJ_LT_CALC'
      ;

   begin
--????
 /* ??????? */
    open C_CNF ;
        CNF_REC := null ;
        fetch C_CNF into CNF_REC ;
    close C_CNF ;

--?????
  /* ??????? */
    open C_FIX;
    loop
      fetch C_FIX into FIX_REC ;
         exit when C_FIX%notfound ;

         /* ????? */
           open C_ITM(FIX_REC.ITEM_NO) ;
               UITM_REC := null ;
               fetch C_ITM into UITM_REC ;
           close C_ITM ;
           if UITM_REC.ITEM_NO is null then
               goto END_LOOP ;
           End If ;


         /* ??????? */
              select max(level_no) into v_level_no from leveld where item_no= FIX_REC.ITEM_NO ;

         /* ??????? */
            open C_STR (FIX_REC.ITEM_NO,v_level_no) ;
            loop
                 fetch C_STR into STR_REC ;
                 exit when C_STR%notfound or C_STR%notfound is null;


                      /* ????? */
                        open C_ITM(STR_REC.LOWER_ITEM_NO) ;
                            LITM_REC := null ;
                            fetch C_ITM into LITM_REC ;
                        close C_ITM ;
                        if  LITM_REC.ITEM_NO is null then
                            goto END_STR_LOOP ;
                        End If ;
                        if  LITM_REC.ISSUE_POLICY <> 'D' then
                            goto END_STR_LOOP ;
                        End If ;

                     /* ??????? */
                      If STR_REC.QUANTITY_BASE = 0 or STR_REC.QUANTITY_BASE is null Then
                          STR_REC.QUANTITY_BASE := 1 ;
                      End If ;

                     /* ???? */
                      v_demand_qty := STR_REC.QUANTITY / STR_REC.QUANTITY_BASE *
                                       (1 + (nvl(UITM_REC.MANUFACT_FAIL_RATE,0)/100) +
                                            (nvl(LITM_REC.MANUFACT_FAIL_RATE,0)/100) +
                                            (nvl(STR_REC.FAILURE_RATE,0)/100)
                                       ) *  FIX_REC.DEMAND_QTY ;

                     /* ??????????????? */
                       If LITM_REC.UNIT_STOCK_RATE != LITM_REC.unit_engineer_rate Then
                           v_demand_qty := v_demand_qty * nvl(LITM_REC.UNIT_STOCK_RATE,1) / nvl(LITM_REC.unit_engineer_rate,1) ;
                       End If ;
 
                      /* 2006/10/27 Y.Hagai ??????? */
                       If CNF_REC.CONFIG_FLAG = 1 Then
                           wk_LT :=  nvl(LITM_REC.ADJUSTMENT_LEADTIME,0) ;
--2006/11/22 y.hagai modify                           wk_req_date := FIX_REC.DEMAND_DATE - wk_LT ;
                           wk_req_date := add_work_date(FIX_REC.DEMAND_DATE, wk_LT * -1) ;
                       else
                           wk_req_date := FIX_REC.DEMAND_DATE ;
                       End If ;

                     insert into t_mrp_demand(
                         OPERATION_DATE ,
                         SECTION_CODE   ,
                         ITEM_NO        ,
                         DEMAND_ST      ,
                         DEMAND_DATE    ,
                         DEMAND_SUB_DATE,
                         DEMAND_NO      ,
                         DEMAND_QTY     ,
                         DEMAND_TYPE    ,
                         DEMAND_PRIORITY
                      ) values (
                         SYSDATE                   ,
                         FIX_REC.SECTION_CODE      ,
                         STR_REC.LOWER_ITEM_NO     ,
                         FIX_REC.DEMAND_ST         ,
                         wk_req_date               ,
                         wk_req_date               ,
                         FIX_REC.DEMAND_NO         ,
                         v_demand_qty              ,
                         'S'                       ,
                         'A'
                      ) ;

             <<END_STR_LOOP>>
               null ;
            end loop ;
            close C_STR ;
      <<END_LOOP>>
         null ;
    end loop;
    close C_FIX;
--2006/04/13 Y.hagai ???????
-- ??section ???item????????section?item????????????
    update t_mrp_demand b
        set b.section_code  = (select section_code from item where item_no = b.item_no)
       where b.item_no in (select item_no from item);

   end ;
end T_MRP020 ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."T_MRP020A" 
as
/****************************************************************
  ?????????????
  ???          ?2007/07/18
  ???          ?Y.Hagai
  ???          ?2016/02/20
  ???          ?Y.Hagai
  ????
  2016/02/20     MPS?PO_NO,PO_LINE_NO,WORK_ORDER???

*****************************************************************/
begin
   declare
    FIX_REC   t_mrp_demand_fix%rowtype ;
    LVLD_REC  leveld%rowtype ;
    STR_REC   structure%rowtype ;
    UITM_REC  item%rowtype ;
    LITM_REC  item%rowtype ;
    CNF_REC configuration%rowtype ;
-- 2006/10/27 Y.Hagai FI??  ??????
    wk_LT        number(3) ;
    wk_req_date  DATE ;

    v_demand_qty t_mrp_demand.demand_qty%type ;
    v_level_no   structure.level_no%type ;

     cursor C_FIX
      is
       select  *  from t_mrp_demand_fix
      ;

     cursor C_LVLD(PARAM1 in number,PARAM2 in number)
      is
       select  *  from leveld
       where item_no =PARAM1
         and level_no = PARAM2
     ;

     cursor C_STR(PARAM1 in number,PARAM2 in number)
      is
       select  *  from structure
       where upper_item_no =PARAM1
         and level_no = PARAM2
         and quantity > 0
         and nvl(user_supply_flag,0) not in ('1','2','3')
         and nvl(subcon_supply_flag,0) not in ('3','4')
     ;

     cursor C_ITM(PARAM1 in number)
      is
       select  *  from item
       where item_no =PARAM1
      ;
   /* 2006/10/27 Y.HagaiCONFIGURATION ?? */
     cursor C_CNF  
      is
       select * from CONFIGURATION where CONFIG_KEY = 'MRP_ADJ_LT_CALC'
      ;

   /* 2007/07/19 Y.Hagai CONFIGURATION ?? */
     cursor C2_CNF  
      is
       select * from CONFIGURATION where CONFIG_KEY = 'RUNNING_CHANGE'
      ;

      CNF2_REC configuration%rowtype ;

     cursor C_RNC(PARAM1 in number,PARAM2 in number)
      is
       select  *  from runningchange
       where item_no = PARAM1
         and NEW_ITEM_NO = PARAM2
         and VALID_FLAG  = '1'
      ;

       RNC_REC  runningchange%rowtype ;
--
       wk_item_no       number(8) ;

   begin
--????

--?????
  /* ??????? */
    open C_FIX;
    loop
      fetch C_FIX into FIX_REC ;
         exit when C_FIX%notfound ;

         /* ????? */
           open C_ITM(FIX_REC.ITEM_NO) ;
               UITM_REC := null ;
               fetch C_ITM into UITM_REC ;
           close C_ITM ;
           if UITM_REC.ITEM_NO is null then
               goto END_LOOP ;
           End If ;


         /* ??????? */
              select max(level_no) into v_level_no from leveld where item_no= FIX_REC.ITEM_NO ;

         /* ??????? */
            open C_STR (FIX_REC.ITEM_NO,v_level_no) ;
            loop
                 fetch C_STR into STR_REC ;
                 exit when C_STR%notfound or C_STR%notfound is null;


                      /* ????? */
                        open C_ITM(STR_REC.LOWER_ITEM_NO) ;
                            LITM_REC := null ;
                            fetch C_ITM into LITM_REC ;
                        close C_ITM ;
                        if  LITM_REC.ITEM_NO is null then
                            goto END_STR_LOOP ;
                        End If ;
                        if  LITM_REC.ISSUE_POLICY <> 'D' then
                            goto END_STR_LOOP ;
                        End If ;

                     /* ??????? */
                      If STR_REC.QUANTITY_BASE = 0 or STR_REC.QUANTITY_BASE is null Then
                          STR_REC.QUANTITY_BASE := 1 ;
                      End If ;

                     /* ???? */
                      v_demand_qty := STR_REC.QUANTITY / STR_REC.QUANTITY_BASE *
                                       (1 + (nvl(UITM_REC.MANUFACT_FAIL_RATE,0)/100) +
                                            (nvl(LITM_REC.MANUFACT_FAIL_RATE,0)/100) +
                                            (nvl(STR_REC.FAILURE_RATE,0)/100)
                                       ) *  FIX_REC.DEMAND_QTY ;

                     /* ??????????????? */
                       If LITM_REC.UNIT_STOCK_RATE != LITM_REC.unit_engineer_rate Then
                           v_demand_qty := v_demand_qty * nvl(LITM_REC.UNIT_STOCK_RATE,1) / nvl(LITM_REC.unit_engineer_rate,1) ;
                       End If ;
 
                      /* 2006/10/27 Y.Hagai ??????? */
                       If CNF_REC.CONFIG_FLAG = 1 Then
                           wk_LT :=  nvl(LITM_REC.ADJUSTMENT_LEADTIME,0) ;
--2006/11/22 y.hagai modify                           wk_req_date := FIX_REC.DEMAND_DATE - wk_LT ;
                           wk_req_date := add_work_date(FIX_REC.DEMAND_DATE, wk_LT * -1) ;
                       else
                           wk_req_date := FIX_REC.DEMAND_DATE ;
                       End If ;

                      /*
                         2007/07/19 Y.Hagai ????????
                         ?????????????????????????????
                      */
                       wk_item_no := STR_REC.LOWER_ITEM_NO;

                       If CNF2_REC.CONFIG_FLAG = 1 Then
                          open C_RNC(FIX_REC.ITEM_NO,STR_REC.LOWER_ITEM_NO) ;
                               RNC_REC := null ;
                               fetch C_RNC into RNC_REC ;
                          close C_ITM ;
                          if  RNC_REC.OLD_ITEM_NO is not null then
                               wk_item_no := RNC_REC.OLD_ITEM_NO;
                          End If ;
                       End If ;

                     insert into t_mrp_demand(
                         OPERATION_DATE ,
                         SECTION_CODE   ,
                         ITEM_NO        ,
                         DEMAND_ST      ,
                         DEMAND_DATE    ,
                         DEMAND_SUB_DATE,
                         DEMAND_NO      ,
                         DEMAND_QTY     ,
                         DEMAND_TYPE    ,
                         DEMAND_PRIORITY,
                         BM_ITEM_NO     ,
--2016/02/20 Y.Hagai mente start 
                         PO_NO          ,
                         PO_LINE_NO     ,
                         WORK_ORDER     ,
                         MPS_STATUS      
--2016/02/20 Y.Hagai mente end
                      ) values (
                         SYSDATE                   ,
                         FIX_REC.SECTION_CODE      ,
                         wk_item_no                ,
                         FIX_REC.DEMAND_ST         ,
                         wk_req_date               ,
                         wk_req_date               ,
                         FIX_REC.DEMAND_NO         ,
                         v_demand_qty              ,
                         'S'                       ,
                         'A'                       ,
                         FIX_REC.ITEM_NO           ,
--2016/02/20 Y.Hagai mente start 
                         FIX_REC.PO_NO            ,
                         FIX_REC.PO_LINE_NO       ,
                         FIX_REC.WORK_ORDER       ,
                         FIX_REC.MPS_STATUS
--2016/02/20 Y.Hagai mente end
                      ) ;

             <<END_STR_LOOP>>
               null ;
            end loop ;
            close C_STR ;
      <<END_LOOP>>
         null ;
    end loop;
    close C_FIX;
     update t_mrp_demand b
        set b.section_code  = (select section_code from item where item_no = b.item_no)
       where b.item_no in (select item_no from item);
--2006/04/13 Y.hagai ???????
-- ??section ???item????????section?item????????????
    update t_mrp_demand b
        set b.section_code  = (select section_code from item where item_no = b.item_no)
       where b.item_no in (select item_no from item);


   end ;
end T_MRP020A ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."T_MRP025" 
as
begin
   declare
    PLN_REC   product_plan%rowtype ;
    POD_REC   po_details%rowtype ;
    POH_REC   po_header%rowtype ;
    WHI_REC   whinventory%rowtype ;
    PCI_REC   pcinventory%rowtype ;
    PCI2_REC   pcinventory%rowtype ;
    ITM_REC   item%rowtype ;
    ST_REC    company%rowtype ;
    CNF_REC   configuration%rowtype ;

    wk_supply_type t_mrp_supply.supply_type%type;

     cursor C_PLN
      is
       select  *  from product_plan
       where nvl(progress_status,'A') < 'E'
         and remainder_quantity > 0
      ;

     cursor C_POD
      is
       select  *  from po_details
       where bal_qty > 0
      ;

     cursor C_POH(PARAM1 in varchar2)
      is
       select  *  from po_header
       where po_no = PARAM1
      ;


     cursor C_WHI
      is
       select  *  from whinventory
       where this_inventory > 0
     ;

     cursor C_PCI
      is
       select  *  from pcinventory
       where this_inventory > 0
     ;

    /* PCINVENTORY?????????? Y.HAGAI 2005/05/19*/
     cursor C_PCI2
      is
       select  *  from pcinventory
       where this_inventory > 0 OR this_inventory < 0
     ;

     cursor C_ITM(PARAM1 in number)
      is
       select  *  from item
       where item_no =PARAM1
      ;

     cursor C_ST
      is
       select
          *
       from company
       where company_type  = 0
      ;

    /* CONFIGURATION ?? */
    cursor C_CNF  is
     select * from CONFIGURATION where CONFIG_KEY = 'MRP_MINUS_PCINV';

   begin
--????
    delete from t_mrp_supply ;
    open C_ST ;
       fetch C_ST into ST_REC ;
    close C_ST ;

    /* ??????? */
    open C_CNF;
        CNF_REC := null ;
        fetch C_CNF into CNF_REC ;
    close C_CNF;

--?????
    /* ???? */
    open C_PLN;
    loop
      fetch C_PLN into PLN_REC ;
         exit when C_PLN%notfound ;

         If PLN_REC.PROGRESS_STATUS <'C' Then
             wk_supply_type :='P' ;
         Else
             wk_supply_type :='M' ;
         End If ;

               insert into t_mrp_supply(
                  OPERATION_DATE ,
                  SECTION_CODE   ,
                  ITEM_NO        ,
                  SUPPLY_ST      ,
                  SUPPLY_DATE    ,
                  SUPPLY_SUB_DATE,
                  SUPPLY_NO      ,
                  SUPPLY_QTY     ,
                  SUPPLY_TYPE    ,
                  SUPPLY_PRIORITY
               ) values (
                  SYSDATE                   ,
                  PLN_REC.SECTION_CODE      ,
                  PLN_REC.ITEM_NO           ,
                  PLN_REC.STATION_CODE      ,
                  PLN_REC.KURAIRE_DATE      ,
                  PLN_REC.ISSUE_REQ_DATE   ,
                  PLN_REC.PRODUCT_LOT_NUMBER,
                  PLN_REC.REMAINDER_QUANTITY,
                  wk_supply_type            ,
                  'A'
               ) ;

            end loop ;
            close C_PLN ;

    /* ??? */
    open C_POD;
    loop
      fetch C_POD into POD_REC ;
         exit when C_POD%notfound ;

          open C_POH(POD_REC.PO_NO) ;
             fetch C_POH into POH_REC ;
          close C_POH ;

               open C_ITM(POD_REC.ITEM_NO) ;
                     ITM_REC := null ;
                     fetch C_ITM into ITM_REC ;
               close C_ITM ;
               If ITM_REC.STOCK_SUBJECT_CODE = 0 Then
                    goto POD_LOOP_END ;
               End If ;

               insert into t_mrp_supply(
                  OPERATION_DATE ,
                  SECTION_CODE   ,
                  ITEM_NO        ,
                  SUPPLY_ST      ,
                  SUPPLY_DATE    ,
                  SUPPLY_SUB_DATE,
                  SUPPLY_NO      ,
                  SUPPLY_QTY     ,
                  SUPPLY_TYPE    ,
                  SUPPLY_PRIORITY
               ) values (
                  SYSDATE                   ,
                  POH_REC.SECTION_CODE      ,
                  POD_REC.ITEM_NO           ,
                  POH_REC.SUPPLIER_CODE     ,
--2007/07/09 Y.Hagai SUPPLY_DATE ? ETA??????(SCHEDULE)???
--2015/11/12 Y.Hagai ???????? + 1????
--                  nvl(POD_REC.SCHEDULE,POD_REC.ETA)      ,
                  nvl(POD_REC.SCHEDULE + 1, POD_REC.ETA + 1)      ,
--2007/07/09 Y.Hagai SUPPLY_SUB_DATE ? ETA??????(SCHEDULE)???
--2015/11/12 Y.Hagai ???????? + 1????
--                  nvl(POD_REC.SCHEDULE,POD_REC.ETA)   ,
                  nvl(POD_REC.SCHEDULE + 1,POD_REC.ETA + 1)   ,
                  POD_REC.PO_NO,
                  POD_REC.BAL_QTY,
                  'R'                       ,
                  'A'
               ) ;
             <<POD_LOOP_END>>
               null ;
            end loop ;
            close C_POD ;

    /* ???? */
    open C_WHI;
    loop
      fetch C_WHI into WHI_REC ;
         exit when C_WHI%notfound ;

               open C_ITM(WHI_REC.ITEM_NO) ;
                     ITM_REC := null ;
                     fetch C_ITM into ITM_REC ;
               close C_ITM ;

               insert into t_mrp_supply(
                  OPERATION_DATE ,
                  SECTION_CODE   ,
                  ITEM_NO        ,
                  SUPPLY_ST      ,
                  SUPPLY_DATE    ,
                  SUPPLY_SUB_DATE,
                  SUPPLY_NO      ,
                  SUPPLY_QTY     ,
                  SUPPLY_TYPE    ,
                  SUPPLY_PRIORITY
               ) values (
                  SYSDATE                   ,
                  WHI_REC.SECTION_CODE      ,
                  WHI_REC.ITEM_NO           ,
                  ST_REC.COMPANY_CODE,
                  NULL,
                  NULL,
                  ST_REC.COMPANY_CODE,
                  WHI_REC.THIS_INVENTORY,
                  'W'                       ,
                  'A'
               ) ;

            end loop ;
            close C_WHI ;


    /* ???? */
    if CNF_REC.CONFIG_FLAG = '1' Then
        open C_PCI2;
        loop
          fetch C_PCI2 into PCI2_REC ;
             exit when C_PCI2%notfound ;

                   open C_ITM(PCI2_REC.ITEM_NO) ;
                         ITM_REC := null ;
                         fetch C_ITM into ITM_REC ;
                   close C_ITM ;
                   If ITM_REC.ISSUE_POLICY <> 'D' Then
                        goto PCI2_LOOP_END ;
                   End If ;

                   insert into t_mrp_supply(
                      OPERATION_DATE ,
                      SECTION_CODE   ,
                      ITEM_NO        ,
                      SUPPLY_ST      ,
                      SUPPLY_DATE    ,
                      SUPPLY_SUB_DATE,
                      SUPPLY_NO      ,
                      SUPPLY_QTY     ,
                      SUPPLY_TYPE    ,
                      SUPPLY_PRIORITY
                   ) values (
                      SYSDATE                   ,
                      PCI2_REC.SECTION_CODE      ,
                      PCI2_REC.ITEM_NO           ,
                      PCI2_REC.STATION_CODE      ,
                      NULL,
                      NULL,
                      PCI2_REC.STATION_CODE      ,
                      PCI2_REC.THIS_INVENTORY,
                      'X'                       ,
                      'A'
                   ) ;
                 <<PCI2_LOOP_END>>
                   null ;
                end loop ;
    
                close C_PCI2 ;
    else
        open C_PCI;
        loop
          fetch C_PCI into PCI_REC ;
             exit when C_PCI%notfound ;

                   open C_ITM(PCI_REC.ITEM_NO) ;
                         ITM_REC := null ;
                         fetch C_ITM into ITM_REC ;
                   close C_ITM ;
                   If ITM_REC.ISSUE_POLICY <> 'D' Then
                        goto PCI_LOOP_END ;
                   End If ;

                   insert into t_mrp_supply(
                      OPERATION_DATE ,
                      SECTION_CODE   ,
                      ITEM_NO        ,
                      SUPPLY_ST      ,
                      SUPPLY_DATE    ,
                      SUPPLY_SUB_DATE,
                      SUPPLY_NO      ,
                      SUPPLY_QTY     ,
                      SUPPLY_TYPE    ,
                      SUPPLY_PRIORITY
                   ) values (
                      SYSDATE                   ,
                      PCI_REC.SECTION_CODE      ,
                      PCI_REC.ITEM_NO           ,
                      PCI_REC.STATION_CODE      ,
                      NULL,
                      NULL,
                      PCI_REC.STATION_CODE      ,
                      PCI_REC.THIS_INVENTORY,
                      'X'                       ,
                      'A'
                   ) ;
                 <<PCI_LOOP_END>>
                   null ;
                end loop ;

                close C_PCI ;
    end if;

   end ;
end T_MRP025 ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."T_MRP025A" 
as
/****************************************************************
  ??????????????
  ?????? PO_DETAILS ?PO_DETAILS_LAST_VIEW
               WHINVENTORY,PCINVENTORY? LAST_INVENTORY?????
  ???          ?2015/11/27
  ???          ?Y.Hagai
*****************************************************************/
begin
   declare
    PLN_REC   product_plan%rowtype ;
--    POD_REC   po_details%rowtype ;
    POD_REC   po_details_last_view%rowtype ;
    POH_REC   po_header%rowtype ;
    WHI_REC   whinventory%rowtype ;
    PCI_REC   pcinventory%rowtype ;
    PCI2_REC   pcinventory%rowtype ;
    ITM_REC   item%rowtype ;
    ST_REC    company%rowtype ;
    CNF_REC   configuration%rowtype ;

    wk_supply_type t_mrp_supply.supply_type%type;

     cursor C_PLN
      is
       select  *  from product_plan
       where nvl(progress_status,'A') < 'E'
         and remainder_quantity > 0
      ;

     cursor C_POD
      is
--       select  *  from po_details
/* 2015/11/28 Y.HAGAI */
      select  *  from PO_DETAILS_LAST_VIEW
       where bal_qty > 0
      ;

     cursor C_POH(PARAM1 in varchar2)
      is
       select  *  from po_header
       where po_no = PARAM1
      ;


     cursor C_WHI
      is
       select  *  from whinventory
--       where this_inventory > 0
       where last_inventory > 0
     ;

     cursor C_PCI
      is
       select  *  from pcinventory
--       where this_inventory > 0
       where last_inventory > 0
     ;

    /* PCINVENTORY?????????? Y.HAGAI 2005/05/19*/
     cursor C_PCI2
      is
       select  *  from pcinventory
--       where this_inventory > 0 OR this_inventory < 0
       where last_inventory > 0 OR last_inventory < 0
     ;

     cursor C_ITM(PARAM1 in number)
      is
       select  *  from item
       where item_no =PARAM1
      ;

     cursor C_ST
      is
       select
          *
       from company
       where company_type  = 0
      ;

    /* CONFIGURATION ?? */
    cursor C_CNF  is
     select * from CONFIGURATION where CONFIG_KEY = 'MRP_MINUS_PCINV';

   begin
--????
    delete from t_mrp_supply ;
    open C_ST ;
       fetch C_ST into ST_REC ;
    close C_ST ;

    /* ??????? */
    open C_CNF;
        CNF_REC := null ;
        fetch C_CNF into CNF_REC ;
    close C_CNF;

--?????
    /* ???? */
    open C_PLN;
    loop
      fetch C_PLN into PLN_REC ;
         exit when C_PLN%notfound ;

         If PLN_REC.PROGRESS_STATUS <'C' Then
             wk_supply_type :='P' ;
         Else
             wk_supply_type :='M' ;
         End If ;

               insert into t_mrp_supply(
                  OPERATION_DATE ,
                  SECTION_CODE   ,
                  ITEM_NO        ,
                  SUPPLY_ST      ,
                  SUPPLY_DATE    ,
                  SUPPLY_SUB_DATE,
                  SUPPLY_NO      ,
                  SUPPLY_QTY     ,
                  SUPPLY_TYPE    ,
                  SUPPLY_PRIORITY
               ) values (
                  SYSDATE                   ,
                  PLN_REC.SECTION_CODE      ,
                  PLN_REC.ITEM_NO           ,
                  PLN_REC.STATION_CODE      ,
                  PLN_REC.KURAIRE_DATE      ,
                  PLN_REC.ISSUE_REQ_DATE   ,
                  PLN_REC.PRODUCT_LOT_NUMBER,
                  PLN_REC.REMAINDER_QUANTITY,
                  wk_supply_type            ,
                  'A'
               ) ;

            end loop ;
            close C_PLN ;

    /* ??? */
    open C_POD;
    loop
      fetch C_POD into POD_REC ;
         exit when C_POD%notfound ;

          open C_POH(POD_REC.PO_NO) ;
             fetch C_POH into POH_REC ;
          close C_POH ;

               open C_ITM(POD_REC.ITEM_NO) ;
                     ITM_REC := null ;
                     fetch C_ITM into ITM_REC ;
               close C_ITM ;
               If ITM_REC.STOCK_SUBJECT_CODE = 0 Then
                    goto POD_LOOP_END ;
               End If ;

               insert into t_mrp_supply(
                  OPERATION_DATE ,
                  SECTION_CODE   ,
                  ITEM_NO        ,
                  SUPPLY_ST      ,
                  SUPPLY_DATE    ,
                  SUPPLY_SUB_DATE,
                  SUPPLY_NO      ,
                  SUPPLY_QTY     ,
                  SUPPLY_TYPE    ,
                  SUPPLY_PRIORITY
               ) values (
                  SYSDATE                   ,
                  POH_REC.SECTION_CODE      ,
                  POD_REC.ITEM_NO           ,
                  POH_REC.SUPPLIER_CODE     ,
--2007/07/09 Y.Hagai SUPPLY_DATE ? ETA??????(SCHEDULE)???
--2015/11/12 Y.Hagai ???????? + 1????
--                  nvl(POD_REC.SCHEDULE,POD_REC.ETA)      ,
                  nvl(POD_REC.SCHEDULE + 1, POD_REC.ETA + 1)      ,
--2007/07/09 Y.Hagai SUPPLY_SUB_DATE ? ETA??????(SCHEDULE)???
--2015/11/12 Y.Hagai ???????? + 1????
--                  nvl(POD_REC.SCHEDULE,POD_REC.ETA)   ,
                  nvl(POD_REC.SCHEDULE + 1,POD_REC.ETA + 1)   ,
                  POD_REC.PO_NO,
                  POD_REC.BAL_QTY,
                  'R'                       ,
                  'A'
               ) ;
             <<POD_LOOP_END>>
               null ;
            end loop ;
            close C_POD ;

    /* ???? */
    open C_WHI;
    loop
      fetch C_WHI into WHI_REC ;
         exit when C_WHI%notfound ;

               open C_ITM(WHI_REC.ITEM_NO) ;
                     ITM_REC := null ;
                     fetch C_ITM into ITM_REC ;
               close C_ITM ;

               insert into t_mrp_supply(
                  OPERATION_DATE ,
                  SECTION_CODE   ,
                  ITEM_NO        ,
                  SUPPLY_ST      ,
                  SUPPLY_DATE    ,
                  SUPPLY_SUB_DATE,
                  SUPPLY_NO      ,
                  SUPPLY_QTY     ,
                  SUPPLY_TYPE    ,
                  SUPPLY_PRIORITY
               ) values (
                  SYSDATE                   ,
                  WHI_REC.SECTION_CODE      ,
                  WHI_REC.ITEM_NO           ,
                  ST_REC.COMPANY_CODE,
                  NULL,
                  NULL,
                  ST_REC.COMPANY_CODE,
--                  WHI_REC.THIS_INVENTORY,
                  WHI_REC.LAST_INVENTORY,
                  'W'                       ,
                  'A'
               ) ;

            end loop ;
            close C_WHI ;


    /* ???? */
    if CNF_REC.CONFIG_FLAG = '1' Then
        open C_PCI2;
        loop
          fetch C_PCI2 into PCI2_REC ;
             exit when C_PCI2%notfound ;

                   open C_ITM(PCI2_REC.ITEM_NO) ;
                         ITM_REC := null ;
                         fetch C_ITM into ITM_REC ;
                   close C_ITM ;
                   If ITM_REC.ISSUE_POLICY <> 'D' Then
                        goto PCI2_LOOP_END ;
                   End If ;

                   insert into t_mrp_supply(
                      OPERATION_DATE ,
                      SECTION_CODE   ,
                      ITEM_NO        ,
                      SUPPLY_ST      ,
                      SUPPLY_DATE    ,
                      SUPPLY_SUB_DATE,
                      SUPPLY_NO      ,
                      SUPPLY_QTY     ,
                      SUPPLY_TYPE    ,
                      SUPPLY_PRIORITY
                   ) values (
                      SYSDATE                   ,
                      PCI2_REC.SECTION_CODE      ,
                      PCI2_REC.ITEM_NO           ,
                      PCI2_REC.STATION_CODE      ,
                      NULL,
                      NULL,
                      PCI2_REC.STATION_CODE      ,
--                      PCI2_REC.THIS_INVENTORY,
                      PCI2_REC.LAST_INVENTORY,
                      'X'                       ,
                      'A'
                   ) ;
                 <<PCI2_LOOP_END>>
                   null ;
                end loop ;
    
                close C_PCI2 ;
    else
        open C_PCI;
        loop
          fetch C_PCI into PCI_REC ;
             exit when C_PCI%notfound ;

                   open C_ITM(PCI_REC.ITEM_NO) ;
                         ITM_REC := null ;
                         fetch C_ITM into ITM_REC ;
                   close C_ITM ;
                   If ITM_REC.ISSUE_POLICY <> 'D' Then
                        goto PCI_LOOP_END ;
                   End If ;

                   insert into t_mrp_supply(
                      OPERATION_DATE ,
                      SECTION_CODE   ,
                      ITEM_NO        ,
                      SUPPLY_ST      ,
                      SUPPLY_DATE    ,
                      SUPPLY_SUB_DATE,
                      SUPPLY_NO      ,
                      SUPPLY_QTY     ,
                      SUPPLY_TYPE    ,
                      SUPPLY_PRIORITY
                   ) values (
                      SYSDATE                   ,
                      PCI_REC.SECTION_CODE      ,
                      PCI_REC.ITEM_NO           ,
                      PCI_REC.STATION_CODE      ,
                      NULL,
                      NULL,
                      PCI_REC.STATION_CODE      ,
--                      PCI_REC.THIS_INVENTORY,
                      PCI_REC.LAST_INVENTORY,
                      'X'                       ,
                      'A'
                   ) ;
                 <<PCI_LOOP_END>>
                   null ;
                end loop ;

                close C_PCI ;
    end if;

   end ;
end T_MRP025A ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."T_MRP025B" 
as
/****************************************************************
  ??????????????
  ?????? PO_DETAILS ?PO_DETAILS_LAST_VIEW
               WHINVENTORY,PCINVENTORY? LAST_INVENTORY?????
  ???          ?2015/11/27
  ???          ?Y.Hagai
  1.1    2016/02/02  Y.Hagai       'CSPINVENTORY'??????

*****************************************************************/
begin
   declare
    PLN_REC   product_plan%rowtype ;
--    POD_REC   po_details%rowtype ;
    POD_REC   po_details%rowtype ;
    POH_REC   po_header%rowtype ;
    WHI_REC   whinventory%rowtype ;
--    PCI_REC   pcinventory%rowtype ;
--    PCI2_REC   pcinventory%rowtype ;
    ITM_REC   item%rowtype ;
    ST_REC    company%rowtype ;
    CNF_REC   configuration%rowtype ;

    wk_supply_type t_mrp_supply.supply_type%type;

     cursor C_PLN
      is
       select  *  from product_plan
       where nvl(progress_status,'A') < 'E'
         and remainder_quantity > 0
      ;

     cursor C_POD
      is
--       select  *  from po_details
/* 2015/11/28 Y.HAGAI */
      select  *  from po_details
       where bal_qty > 0
      ;

     cursor C_POH(PARAM1 in varchar2)
      is
       select  *  from po_header
       where po_no = PARAM1
      ;


     cursor C_WHI
      is
       select  *  from whinventory
--       where this_inventory > 0
       where last_inventory > 0
     ;
--
--     cursor C_PCI
--      is
--       select  *  from pcinventory
--       where this_inventory > 0
--       where last_inventory > 0
--     ;
/* 2016/02/02 Y.Hagai  Add */
     cursor C_PCI
      is
       select section_code, item_no, station_code, last_inventory from (
             select section_code, item_no, station_code,sum(last_inventory) last_inventory from 
                  (select section_code, item_no, station_code, last_inventory from   pcinventory
                    union all 
                   select section_code, item_no, station_code, last_inventory from   cspinventory)
             group by section_code, item_no, station_code)
          where last_inventory > 0 
        order by section_code, item_no, station_code
     ;

        PCI_REC C_PCI%rowtype := null;

/* 2016/02/02 Y.Hagai  Add end */

    /* PCINVENTORY?????????? Y.HAGAI 2005/05/19*/
     cursor C_PCI2
      is
       select section_code, item_no, station_code, last_inventory from (
             select section_code, item_no, station_code,sum(last_inventory) last_inventory from 
                  (select section_code, item_no, station_code, last_inventory from   pcinventory
                    union all 
                   select section_code, item_no, station_code, last_inventory from   cspinventory)
             group by section_code, item_no, station_code)
       where last_inventory > 0 OR last_inventory < 0
     ;
        PCI2_REC C_PCI2%rowtype := null;

     cursor C_ITM(PARAM1 in number)
      is
       select  *  from item
       where item_no =PARAM1
      ;

     cursor C_ST
      is
       select
          *
       from company
       where company_type  = 0
      ;

    /* CONFIGURATION ?? */
    cursor C_CNF  is
     select * from CONFIGURATION where CONFIG_KEY = 'MRP_MINUS_PCINV';


/* 2015/11/28 Y.HAGAI */
     cursor C_GRD
      is
      select  d.SECTION_CODE,h.SUPPLIER_CODE,h.GR_DATE,d.ITEM_NO,d.PO_NO,d.QTY  from gr_header h,gr_details d
       where h.GR_NO = d.GR_NO
         and to_char(h.GR_DATE,'yyyymm') in (select distinct this_month from whinventory) 
        ;

        GRD_REC C_GRD%rowtype := null;


   begin
--????
    delete from t_mrp_supply ;
    open C_ST ;
       fetch C_ST into ST_REC ;
    close C_ST ;

    /* ??????? */
    open C_CNF;
        CNF_REC := null ;
        fetch C_CNF into CNF_REC ;
    close C_CNF;

--?????
    /* ???? */
    open C_PLN;
    loop
      fetch C_PLN into PLN_REC ;
         exit when C_PLN%notfound ;

         If PLN_REC.PROGRESS_STATUS <'C' Then
             wk_supply_type :='P' ;
         Else
             wk_supply_type :='M' ;
         End If ;

               insert into t_mrp_supply(
                  OPERATION_DATE ,
                  SECTION_CODE   ,
                  ITEM_NO        ,
                  SUPPLY_ST      ,
                  SUPPLY_DATE    ,
                  SUPPLY_SUB_DATE,
                  SUPPLY_NO      ,
                  SUPPLY_QTY     ,
                  SUPPLY_TYPE    ,
                  SUPPLY_PRIORITY
               ) values (
                  SYSDATE                   ,
                  PLN_REC.SECTION_CODE      ,
                  PLN_REC.ITEM_NO           ,
                  PLN_REC.STATION_CODE      ,
                  PLN_REC.KURAIRE_DATE      ,
                  PLN_REC.ISSUE_REQ_DATE   ,
                  PLN_REC.PRODUCT_LOT_NUMBER,
                  PLN_REC.REMAINDER_QUANTITY,
                  wk_supply_type            ,
                  'A'
               ) ;

            end loop ;
            close C_PLN ;

    /* ??? */
    open C_POD;
    loop
      fetch C_POD into POD_REC ;
         exit when C_POD%notfound ;

          open C_POH(POD_REC.PO_NO) ;
             fetch C_POH into POH_REC ;
          close C_POH ;

               open C_ITM(POD_REC.ITEM_NO) ;
                     ITM_REC := null ;
                     fetch C_ITM into ITM_REC ;
               close C_ITM ;
               If ITM_REC.STOCK_SUBJECT_CODE = 0 Then
                    goto POD_LOOP_END ;
               End If ;

               insert into t_mrp_supply(
                  OPERATION_DATE ,
                  SECTION_CODE   ,
                  ITEM_NO        ,
                  SUPPLY_ST      ,
                  SUPPLY_DATE    ,
                  SUPPLY_SUB_DATE,
                  SUPPLY_NO      ,
                  SUPPLY_QTY     ,
                  SUPPLY_TYPE    ,
                  SUPPLY_PRIORITY
               ) values (
                  SYSDATE                   ,
                  POH_REC.SECTION_CODE      ,
                  POD_REC.ITEM_NO           ,
                  POH_REC.SUPPLIER_CODE     ,
--2007/07/09 Y.Hagai SUPPLY_DATE ? ETA??????(SCHEDULE)???
--2015/11/12 Y.Hagai ???????? + 1????
--                  nvl(POD_REC.SCHEDULE,POD_REC.ETA)      ,
                  nvl(POD_REC.SCHEDULE + 1, POD_REC.ETA + 1)      ,
--2007/07/09 Y.Hagai SUPPLY_SUB_DATE ? ETA??????(SCHEDULE)???
--2015/11/12 Y.Hagai ???????? + 1????
--                  nvl(POD_REC.SCHEDULE,POD_REC.ETA)   ,
                  nvl(POD_REC.SCHEDULE + 1,POD_REC.ETA + 1)   ,
                  POD_REC.PO_NO,
                  POD_REC.BAL_QTY,
                  'R'                       ,
                  'A'
               ) ;
             <<POD_LOOP_END>>
               null ;
            end loop ;
            close C_POD ;


    /* ????? */
    open C_GRD;
    loop
      fetch C_GRD into GRD_REC ;
         exit when C_GRD%notfound ;


               open C_ITM(GRD_REC.ITEM_NO) ;
                     ITM_REC := null ;
                     fetch C_ITM into ITM_REC ;
               close C_ITM ;
               If ITM_REC.STOCK_SUBJECT_CODE = 0 Then
                    goto GRD_LOOP_END ;
               End If ;

               insert into t_mrp_supply(
                  OPERATION_DATE ,
                  SECTION_CODE   ,
                  ITEM_NO        ,
                  SUPPLY_ST      ,
                  SUPPLY_DATE    ,
                  SUPPLY_SUB_DATE,
                  SUPPLY_NO      ,
                  SUPPLY_QTY     ,
                  SUPPLY_TYPE    ,
                  SUPPLY_PRIORITY
               ) values (
                  SYSDATE                   ,
                  GRD_REC.SECTION_CODE      ,
                  GRD_REC.ITEM_NO           ,
                  GRD_REC.SUPPLIER_CODE     ,
                  GRD_REC.GR_DATE    ,
                  GRD_REC.GR_DATE    ,
                  GRD_REC.PO_NO,
                  GRD_REC.QTY,
                  'R'                       ,
                  'A'
               ) ;
             <<GRD_LOOP_END>>
               null ;
            end loop ;
            close C_GRD ;

    /* ???? */
    open C_WHI;
    loop
      fetch C_WHI into WHI_REC ;
         exit when C_WHI%notfound ;

               open C_ITM(WHI_REC.ITEM_NO) ;
                     ITM_REC := null ;
                     fetch C_ITM into ITM_REC ;
               close C_ITM ;

               insert into t_mrp_supply(
                  OPERATION_DATE ,
                  SECTION_CODE   ,
                  ITEM_NO        ,
                  SUPPLY_ST      ,
                  SUPPLY_DATE    ,
                  SUPPLY_SUB_DATE,
                  SUPPLY_NO      ,
                  SUPPLY_QTY     ,
                  SUPPLY_TYPE    ,
                  SUPPLY_PRIORITY
               ) values (
                  SYSDATE                   ,
                  WHI_REC.SECTION_CODE      ,
                  WHI_REC.ITEM_NO           ,
                  ST_REC.COMPANY_CODE,
                  NULL,
                  NULL,
                  ST_REC.COMPANY_CODE,
--                  WHI_REC.THIS_INVENTORY,
                  WHI_REC.LAST_INVENTORY,
                  'W'                       ,
                  'A'
               ) ;

            end loop ;
            close C_WHI ;


    /* ???? */
    if CNF_REC.CONFIG_FLAG = '1' Then
        open C_PCI2;
        loop
          fetch C_PCI2 into PCI2_REC ;
             exit when C_PCI2%notfound ;

                   open C_ITM(PCI2_REC.ITEM_NO) ;
                         ITM_REC := null ;
                         fetch C_ITM into ITM_REC ;
                   close C_ITM ;
                   If ITM_REC.ISSUE_POLICY <> 'D' Then
                        goto PCI2_LOOP_END ;
                   End If ;

                   insert into t_mrp_supply(
                      OPERATION_DATE ,
                      SECTION_CODE   ,
                      ITEM_NO        ,
                      SUPPLY_ST      ,
                      SUPPLY_DATE    ,
                      SUPPLY_SUB_DATE,
                      SUPPLY_NO      ,
                      SUPPLY_QTY     ,
                      SUPPLY_TYPE    ,
                      SUPPLY_PRIORITY
                   ) values (
                      SYSDATE                   ,
                      PCI2_REC.SECTION_CODE      ,
                      PCI2_REC.ITEM_NO           ,
                      PCI2_REC.STATION_CODE      ,
                      NULL,
                      NULL,
                      PCI2_REC.STATION_CODE      ,
--                      PCI2_REC.THIS_INVENTORY,
                      PCI2_REC.LAST_INVENTORY,
                      'X'                       ,
                      'A'
                   ) ;
                 <<PCI2_LOOP_END>>
                   null ;
                end loop ;
    
                close C_PCI2 ;
    else
        open C_PCI;
        loop
          fetch C_PCI into PCI_REC ;
             exit when C_PCI%notfound ;

                   open C_ITM(PCI_REC.ITEM_NO) ;
                         ITM_REC := null ;
                         fetch C_ITM into ITM_REC ;
                   close C_ITM ;
                   If ITM_REC.ISSUE_POLICY <> 'D' Then
                        goto PCI_LOOP_END ;
                   End If ;

                   insert into t_mrp_supply(
                      OPERATION_DATE ,
                      SECTION_CODE   ,
                      ITEM_NO        ,
                      SUPPLY_ST      ,
                      SUPPLY_DATE    ,
                      SUPPLY_SUB_DATE,
                      SUPPLY_NO      ,
                      SUPPLY_QTY     ,
                      SUPPLY_TYPE    ,
                      SUPPLY_PRIORITY
                   ) values (
                      SYSDATE                   ,
                      PCI_REC.SECTION_CODE      ,
                      PCI_REC.ITEM_NO           ,
                      PCI_REC.STATION_CODE      ,
                      NULL,
                      NULL,
                      PCI_REC.STATION_CODE      ,
--                      PCI_REC.THIS_INVENTORY,
                      PCI_REC.LAST_INVENTORY,
                      'X'                       ,
                      'A'
                   ) ;
                 <<PCI_LOOP_END>>
                   null ;
                end loop ;

                close C_PCI ;
    end if;

   end ;
end T_MRP025B ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."T_MRP030" 
as
begin
   declare
    v_section_code  t_mrp_demand.section_code%type ;
    v_item_no       t_mrp_demand.item_no%type ;

    v_llc number(3) ;

     cursor C_DMD
      is
       select distinct
         section_code,
         item_no
       from t_mrp_demand
       order by section_code,item_no
      ;

   begin
--????
   delete from t_mrp_itemcont ;

--?????
  /* ???????????????LLC???? */
    open C_DMD;
    loop
      fetch C_DMD into v_section_code,v_item_no ;
         exit when C_DMD%notfound ;

         v_llc := get_llc(v_item_no) ;
         if v_llc >=0 Then
               insert into T_MRP_ITEMCONT(
                   SECTION_CODE,
                   ITEM_NO     ,
                   LLC_CODE
               ) values (
                   v_section_code,
                   v_item_no     ,
                   v_llc

               ) ;
         end If ;

    end loop;
    close C_DMD;

   end ;
end T_MRP030 ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."T_MRP035" 
as
begin
   declare
    ICNT_REC t_mrp_itemcont%rowtype ;
    DMD_REC  t_mrp_demand%rowtype ;
    SPY_REC  t_mrp_supply%rowtype ;
    UITM_REC  item%rowtype ;
    LITM_REC  item%rowtype ;
    STR_REC   structure%rowtype ;
    SPY2_REC  t_mrp_supply%rowtype ;

    wk_level_now  number(3);
    wk_level_no   number(3);
    wk_llc_cnt    number(5);


    wk_supply_qty     t_mrp_supply.supply_qty%type;
    wk_supply_remain  t_mrp_supply.supply_qty%type;
    wk_demand_qty     t_mrp_demand.demand_qty%type;
    wk_allocate_qty   t_mrp_demand.demand_qty%type;

    wk_req_qty   t_mrp_demand.demand_qty%type;
    wk_LT        number(3) ;
    wk_req_date  DATE ;

    wk_count  number(5) ;
    wk_LLC  number(5) ;

    /* ???????? */
     cursor C_ICNT(PARAM1 in number)
      is
       select * from t_mrp_itemcont
       where llc_code = PARAM1
       order by item_no,section_code
       for update
      ;

    /* ??????? */
     cursor C_DMD(PARAM1 in number, PARAM2 in varchar2)
      is
       select  *  from t_mrp_demand_wk
       where item_no = PARAM1
--         and section_code = PARAM2
       order by demand_priority, demand_type, demand_date, demand_st, demand_no
      ;

    /* ???????(???) */
     cursor C_SPY(PARAM1 in number, PARAM2 in varchar2)
      is
       select  *  from t_mrp_supply_wk
       where item_no = PARAM1
--         and section_code = PARAM2
       order by supply_type desc, decode(supply_type,'R',0,supply_st), supply_date, supply_no
       for update of supply_qty
      ;

    /* ??????? */
     cursor C_SPY2
      is
       select  *  from t_mrp_supply_wk
       order by supply_type desc, decode(supply_type,'R',0,supply_st), supply_date, supply_no
       for update of supply_qty
      ;

    /* ??????? */
     cursor C_ITM(PARAM1 in number)
      is
       select  *  from item
       where item_no = PARAM1
      ;

    /* ???????? */
     cursor C_STR(PARAM1 in number,PARAM2 in number)
      is
       select  *  from structure
       where upper_item_no = PARAM1
         and level_no = PARAM2
         and quantity > 0
         and nvl(user_supply_flag,0) not in ('1','2','3')
         and nvl(subcon_supply_flag,0) not in ('3','4')
      ;

    /* ?????????? */
     cursor C_BAL_W
      is
         select
              SECTION_CODE           , ITEM_NO                ,
              DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
              SUM(ALLOCATE_QTY)      , ALLOCATE_ST            , DEMAND_TYPE            ,
              DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
              SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
              SUPPLY_SUB_DATE
         from t_mrp_balance_wk
         where ALLOCATE_QTY > 0
         group by SECTION_CODE           , ITEM_NO                ,
                  DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                           ALLOCATE_ST            , DEMAND_TYPE            ,
                  DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                  SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                  SUPPLY_SUB_DATE
         order by ITEM_NO, nvl(SUPPLY_TYPE,'0') desc, DEMAND_DATE
         ;
              BWK_SECTION_CODE       BALANCE.SECTION_CODE%type       ;
              BWK_ITEM_NO            BALANCE.ITEM_NO%type            ;
              BWK_DEMAND_NUMBER      BALANCE.DEMAND_NUMBER%type      ;
              BWK_SUPPLY_NUMBER      BALANCE.SUPPLY_NUMBER%type      ;
              BWK_ALLOCATE_STATUS    BALANCE.ALLOCATE_STATUS%type    ;
              BWK_ALLOCATE_QTY       BALANCE.ALLOCATE_QTY%type       ;
              BWK_ALLOCATE_ST        BALANCE.ALLOCATE_ST%type        ;
              BWK_DEMAND_TYPE        BALANCE.DEMAND_TYPE%type        ;
              BWK_DEMAND_PRIORITY    BALANCE.DEMAND_PRIORITY%type    ;
              BWK_DEMAND_DATE        BALANCE.DEMAND_DATE%type        ;
              BWK_DEMAND_SUB_DATE    BALANCE.DEMAND_SUB_DATE%type    ;
              BWK_SUPPLY_TYPE        BALANCE.SUPPLY_TYPE%type        ;
              BWK_SUPPLY_PRIORITY    BALANCE.SUPPLY_PRIORITY%type    ;
              BWK_SUPPLY_DATE        BALANCE.SUPPLY_DATE%type        ;
              BWK_SUPPLY_SUB_DATE    BALANCE.SUPPLY_SUB_DATE%type    ;
              BWK_SEQ                BALANCE.SEQ%type := 0    ;


   begin
--????
       delete from t_mrp_demand_wk  ;
       insert into t_mrp_demand_wk select * from t_mrp_demand  ;
       delete from t_mrp_supply_wk  ;
       insert into t_mrp_supply_wk select * from t_mrp_supply  ;

       --delete from balance ;
       delete from t_mrp_balance_wk ;
       delete from balance ;


--?????
    /* LEVEL_NO????????? */
<<MAIN>>
      wk_level_now := -1 ;
      loop
          select count(*) into wk_llc_cnt from t_mrp_itemcont;
          if wk_llc_cnt = 0 or wk_level_now >20 then
               exit;
          end if;

          wk_level_now := wk_level_now + 1;

         /*???????*/
          open C_ICNT(wk_level_now);
          ICNT_REC := null ;
          loop
              fetch C_ICNT into ICNT_REC ;
              exit when C_ICNT%notfound or C_ICNT%notfound is null;

              /*???? ?? */
               open C_DMD(ICNT_REC.ITEM_NO, ICNT_REC.SECTION_CODE);
               loop
                   fetch C_DMD into DMD_REC ;
                   exit when C_DMD%notfound or C_DMD%notfound is null;

                       wk_demand_qty := DMD_REC.DEMAND_QTY ;      --??????

                       /*???? ?? */
                        open C_SPY(ICNT_REC.ITEM_NO, ICNT_REC.SECTION_CODE);
                        loop
                            fetch C_SPY into SPY_REC ;
                            exit when C_SPY%notfound or C_SPY%notfound is null;

                                wk_supply_qty    := SPY_REC.SUPPLY_QTY ;   --??????
                                wk_supply_remain := SPY_REC.SUPPLY_QTY ;   --?????

                                /* ??????????? */
                                -- ????????
                                If SPY_REC.SUPPLY_TYPE = 'X' Then
                                    If DMD_REC.DEMAND_ST = SPY_REC.SUPPLY_ST Then
                                        wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                        If wk_supply_remain >= 0 Then
                                            wk_supply_qty   := wk_supply_remain ;
                                            wk_allocate_qty := wk_demand_qty ;
                                            wk_demand_qty   := 0 ;
                                        Else
                                            wk_demand_qty   := wk_supply_remain * -1 ;
                                            wk_allocate_qty := wk_supply_qty ;
                                            wk_supply_qty   := 0 ;
                                        End If ;

                                        INSERT INTO t_mrp_balance_wk(
                                             OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                             DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                             ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                             DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                             SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                             SUPPLY_SUB_DATE
                                        ) VALUES (
                                             sysdate                , DMD_REC.SECTION_CODE   , DMD_REC.ITEM_NO        ,
                                             DMD_REC.DEMAND_NO      , SPY_REC.SUPPLY_NO      , 'A'                    ,
                                             wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                             DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                             SPY_REC.SUPPLY_TYPE    , SPY_REC.SUPPLY_PRIORITY, SPY_REC.SUPPLY_DATE    ,
                                             SPY_REC.SUPPLY_SUB_DATE
                                        ) ;

                                        If wk_supply_qty = 0 Then
                                                delete t_mrp_supply_wk where current of C_SPY ;
                                        Else
                                                update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY ;
                                        End If ;
                                    End If ;

                                ElsIf SPY_REC.SUPPLY_TYPE = 'W' Then
                                        wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                        If wk_supply_remain >= 0 Then
                                            wk_supply_qty   := wk_supply_remain ;
                                            wk_allocate_qty := wk_demand_qty ;
                                            wk_demand_qty   := 0 ;
                                        Else
                                            wk_demand_qty   := wk_supply_remain * -1 ;
                                            wk_allocate_qty := wk_supply_qty ;
                                            wk_supply_qty   := 0 ;
                                        End If ;

                                        INSERT INTO t_mrp_balance_wk(
                                             OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                             DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                             ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                             DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                             SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                             SUPPLY_SUB_DATE
                                        ) VALUES (
                                             sysdate                , DMD_REC.SECTION_CODE   , DMD_REC.ITEM_NO        ,
                                             DMD_REC.DEMAND_NO      , SPY_REC.SUPPLY_NO      , 'A'                    ,
                                             wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                             DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                             SPY_REC.SUPPLY_TYPE    , SPY_REC.SUPPLY_PRIORITY, SPY_REC.SUPPLY_DATE    ,
                                             SPY_REC.SUPPLY_SUB_DATE
                                        ) ;

                                        If wk_supply_qty = 0 Then
                                                delete t_mrp_supply_wk where current of C_SPY ;
                                        Else
                                                update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY ;
                                        End If ;

                                ElsIf SPY_REC.SUPPLY_TYPE = 'P' Then
                                        wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                        If wk_supply_remain >= 0 Then
                                            wk_supply_qty   := wk_supply_remain ;
                                            wk_allocate_qty := wk_demand_qty ;
                                            wk_demand_qty   := 0 ;
                                        Else
                                            wk_demand_qty   := wk_supply_remain * -1 ;
                                            wk_allocate_qty := wk_supply_qty ;
                                            wk_supply_qty   := 0 ;
                                        End If ;

                                        INSERT INTO t_mrp_balance_wk(
                                             OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                             DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                             ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                             DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                             SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                             SUPPLY_SUB_DATE
                                        ) VALUES (
                                             sysdate                , DMD_REC.SECTION_CODE   , DMD_REC.ITEM_NO        ,
                                             DMD_REC.DEMAND_NO      , SPY_REC.SUPPLY_NO      , 'A'                    ,
                                             wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                             DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                             SPY_REC.SUPPLY_TYPE    , SPY_REC.SUPPLY_PRIORITY, SPY_REC.SUPPLY_DATE    ,
                                             SPY_REC.SUPPLY_SUB_DATE
                                        ) ;

                                        If wk_supply_qty = 0 Then
                                                delete t_mrp_supply_wk where current of C_SPY ;
                                        Else
                                                update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY ;
                                        End If ;

                                ElsIf SPY_REC.SUPPLY_TYPE = 'M' Then
                                        wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                        If wk_supply_remain >= 0 Then
                                            wk_supply_qty   := wk_supply_remain ;
                                            wk_allocate_qty := wk_demand_qty ;
                                            wk_demand_qty   := 0 ;
                                        Else
                                            wk_demand_qty   := wk_supply_remain * -1 ;
                                            wk_allocate_qty := wk_supply_qty ;
                                            wk_supply_qty   := 0 ;
                                        End If ;

                                        INSERT INTO t_mrp_balance_wk(
                                             OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                             DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                             ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                             DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                             SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                             SUPPLY_SUB_DATE
                                        ) VALUES (
                                             sysdate                , DMD_REC.SECTION_CODE   , DMD_REC.ITEM_NO        ,
                                             DMD_REC.DEMAND_NO      , SPY_REC.SUPPLY_NO      , 'A'                    ,
                                             wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                             DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                             SPY_REC.SUPPLY_TYPE    , SPY_REC.SUPPLY_PRIORITY, SPY_REC.SUPPLY_DATE    ,
                                             SPY_REC.SUPPLY_SUB_DATE
                                        ) ;

                                        If wk_supply_qty = 0 Then
                                                delete t_mrp_supply_wk where current of C_SPY ;
                                        Else
                                                update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY ;
                                        End If ;

                                ElsIf SPY_REC.SUPPLY_TYPE = 'R' Then
                                        wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                        If wk_supply_remain >= 0 Then
                                            wk_supply_qty   := wk_supply_remain ;
                                            wk_allocate_qty := wk_demand_qty ;
                                            wk_demand_qty   := 0 ;
                                        Else
                                            wk_demand_qty   := wk_supply_remain * -1 ;
                                            wk_allocate_qty := wk_supply_qty ;
                                            wk_supply_qty   := 0 ;
                                        End If ;

                                        INSERT INTO t_mrp_balance_wk(
                                             OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                             DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                             ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                             DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                             SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                             SUPPLY_SUB_DATE
                                        ) VALUES (
                                             sysdate                , DMD_REC.SECTION_CODE   , DMD_REC.ITEM_NO        ,
                                             DMD_REC.DEMAND_NO      , SPY_REC.SUPPLY_NO      , 'A'                    ,
                                             wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                             DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                             SPY_REC.SUPPLY_TYPE    , SPY_REC.SUPPLY_PRIORITY, SPY_REC.SUPPLY_DATE    ,
                                             SPY_REC.SUPPLY_SUB_DATE
                                        ) ;

                                        If wk_supply_qty = 0 Then
                                                delete t_mrp_supply_wk where current of C_SPY ;
                                        Else
                                                update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY ;
                                        End If ;

                                Else
                                    null ;
                                End If ;

                                If wk_demand_qty <=0 Then
                                     goto END_SUPPLY ;
                                End If ;

                            end loop supply ;
                            <<END_SUPPLY>>
                        close C_SPY ;


                        /* ????????? */
                        If wk_demand_qty <= 0 Then
                           goto END_DEMAND ;
                        End If ;

                        /* ???????? */
                          INSERT INTO t_mrp_balance_wk(
                               OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                               DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                               ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                               DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                               SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                               SUPPLY_SUB_DATE
                          ) VALUES (
                               sysdate                , DMD_REC.SECTION_CODE   , DMD_REC.ITEM_NO        ,
                               DMD_REC.DEMAND_NO      , null                   , 'A'                    ,
                               wk_demand_qty          , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                               DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                               null                   , null                   , null                   ,
                               null
                          ) ;

                        /*  ?????????????????????????????????????????????? */
                         select max(level_no) into wk_level_no from leveld
                         where item_no = DMD_REC.ITEM_NO ;
                            if wk_level_no is null or DMD_REC.DEMAND_TYPE = 'O' Then
                                goto END_DEMAND ;
                            end If ;

                        /* ???????????? */
                         open C_ITM(DMD_REC.ITEM_NO) ;
                            UITM_REC :=null ;
                            fetch C_ITM into UITM_REC ;
                         close C_ITM ;

                        /* ????? */
                          open C_STR(DMD_REC.ITEM_NO,wk_level_no) ;
                              loop
                                 fetch C_STR into STR_REC ;
                                 exit when C_STR%notfound or C_STR%notfound is null;

                                /* ??????????? */
                                 open C_ITM(STR_REC.LOWER_ITEM_NO) ;
                                    LITM_REC :=null ;
                                    fetch C_ITM into LITM_REC ;
                                 close C_ITM ;

                                    /* ????'D'???????????????????? */
                                     --If LITM_REC.ISSUE_POLICY <> 'D' Then
                                     --    goto STR_LOOP_END ;
                                     --End If ;

                                    /* ??? ????????? */
                                     wk_req_qty := round(wk_demand_qty *
                                                        STR_REC.QUANTITY / nvl(STR_REC.QUANTITY_BASE,1) *
                                                        (1 + (nvl(STR_REC.FAILURE_RATE,0)/100)
                                                           + (nvl(LITM_REC.MANUFACT_FAIL_RATE,0)/100)
                                                           + (nvl(UITM_REC.MANUFACT_FAIL_RATE,0)/100))
                                                        ,4) ;
                                     If LITM_REC.UNIT_STOCK_RATE != LITM_REC.unit_engineer_rate Then
                                        wk_req_qty := wk_req_qty * nvl(LITM_REC.UNIT_STOCK_RATE,1) / nvl(LITM_REC.unit_engineer_rate,1) ;
                                     End If ;

                                    /* ??????? */
                                     wk_LT := nvl(UITM_REC.MANUFACT_LEADTIME,0) + nvl(UITM_REC.ADJUSTMENT_LEADTIME,0) + nvl(LITM_REC.ADJUSTMENT_LEADTIME,0) ;
                                     wk_req_date := DMD_REC.DEMAND_DATE - wk_LT ;

                                    /* ICONT ??????*/
                                     select count(*) into wk_count from t_mrp_itemcont
                                       where item_no = STR_REC.LOWER_ITEM_NO ;

                                     wk_LLC := get_llc(STR_REC.LOWER_ITEM_NO) ;
                                         if wk_count = 0 and wk_LLC > wk_level_now  Then
                                             insert into  t_mrp_itemcont(SECTION_CODE,ITEM_NO,LLC_CODE) VALUES(DMD_REC.SECTION_CODE,STR_REC.LOWER_ITEM_NO,wk_LLC) ;
                                         end If ;

--                                  If DMD_REC.DEMAND_TYPE ='Y' and  DMD_REC.DEMAND_PRIORITY ='P' Then
                                     INSERT INTO t_mrp_demand_wk(
                                          OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                          DEMAND_ST              , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                          DEMAND_NO              , DEMAND_QTY             , DEMAND_TYPE            ,
                                          DEMAND_PRIORITY
                                     ) VALUES (
                                          sysdate                , DMD_REC.SECTION_CODE   , STR_REC.LOWER_ITEM_NO  ,
                                          DMD_REC.DEMAND_ST      , wk_req_date            , wk_req_date                   ,
                                          DMD_REC.DEMAND_NO      , wk_req_qty             , 'Y'                    ,
                                          'C'
                                     ) ;
--                                    End If ;

                                 <<STR_LOOP_END>>
                                  null ;
                              end loop ;
                          close C_STR ;

                   <<END_DEMAND>>
                    null ;
               end loop demand ;
               close C_DMD ;

               /* ???????? */
               delete from  t_mrp_itemcont where current of C_ICNT ;

          end loop icnt ;
          close C_ICNT ;

     end loop main ;

     /* ??????? */
     open C_SPY2 ;
     loop
     fetch C_SPY2 into SPY_REC ;
     exit when C_SPY2%notfound or C_SPY2%notfound is null;

         INSERT INTO t_mrp_balance_wk(
              OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
              DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
              ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
              DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
              SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
              SUPPLY_SUB_DATE
         ) VALUES (
              sysdate                , SPY_REC.SECTION_CODE   , SPY_REC.ITEM_NO       ,
              null                   , SPY_REC.SUPPLY_NO      , 'A'                    ,
              SPY_REC.SUPPLY_QTY     , SPY_REC.SUPPLY_ST      , null                   ,
              null                   , null                   , null                   ,
              SPY_REC.SUPPLY_TYPE    , SPY_REC.SUPPLY_PRIORITY, SPY_REC.SUPPLY_DATE    ,
              SPY_REC.SUPPLY_SUB_DATE
         ) ;
     end loop ;
     close C_SPY2 ;

     /* ????????BALANCE??? */
     open C_BAL_W ;
     loop
     fetch C_BAL_W into BWK_SECTION_CODE    ,
                        BWK_ITEM_NO         ,
                        BWK_DEMAND_NUMBER   ,
                        BWK_SUPPLY_NUMBER   ,
                        BWK_ALLOCATE_STATUS ,
                        BWK_ALLOCATE_QTY    ,
                        BWK_ALLOCATE_ST     ,
                        BWK_DEMAND_TYPE     ,
                        BWK_DEMAND_PRIORITY ,
                        BWK_DEMAND_DATE     ,
                        BWK_DEMAND_SUB_DATE ,
                        BWK_SUPPLY_TYPE     ,
                        BWK_SUPPLY_PRIORITY ,
                        BWK_SUPPLY_DATE     ,
                        BWK_SUPPLY_SUB_DATE ;

         exit when C_BAL_W%notfound or C_BAL_W%notfound is null;

         BWK_SEQ := BWK_SEQ + 1 ;

         If BWK_SUPPLY_TYPE = 'X' Then
               BWK_SUPPLY_TYPE := 'H' ;
         Elsif BWK_SUPPLY_TYPE = 'W' Then
               BWK_SUPPLY_TYPE := 'Z' ;
         End If ;

         insert into balance(
              OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
              DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
              ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
              DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
              SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
              SUPPLY_SUB_DATE        , SEQ
         ) values (
              SYSDATE                , BWK_SECTION_CODE       , BWK_ITEM_NO                ,
              BWK_DEMAND_NUMBER      , BWK_SUPPLY_NUMBER      , BWK_ALLOCATE_STATUS        ,
              BWK_ALLOCATE_QTY       , BWK_ALLOCATE_ST        , BWK_DEMAND_TYPE            ,
              BWK_DEMAND_PRIORITY    , BWK_DEMAND_DATE        , BWK_DEMAND_SUB_DATE        ,
              BWK_SUPPLY_TYPE        , BWK_SUPPLY_PRIORITY    , BWK_SUPPLY_DATE            ,
              BWK_SUPPLY_SUB_DATE    , BWK_SEQ
         ) ;

     end loop ;
     close C_BAL_W ;

     update balance b
        set b.section_code  = (select section_code from item where item_no = b.item_no)
       where b.item_no in (select item_no from item);

  end ;
end T_MRP035 ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."T_MRP035A" 
as
/****************************************************************
  ?????????????
  ???          ?2007/07/18
  ???          ?Y.Hagai
*****************************************************************/
begin
   declare
    ICNT_REC t_mrp_itemcont%rowtype ;
    DMD_REC  t_mrp_demand%rowtype ;
    SPY_REC  t_mrp_supply%rowtype ;
    UITM_REC  item%rowtype ;
    LITM_REC  item%rowtype ;
    STR_REC   structure%rowtype ;
    SPY2_REC  t_mrp_supply%rowtype ;
    SPY3_REC  t_mrp_supply%rowtype ;

    wk_level_now  number(3);
    wk_level_no   number(3);
    wk_llc_cnt    number(5);


    wk_supply_qty     t_mrp_supply.supply_qty%type;
    wk_supply_remain  t_mrp_supply.supply_qty%type;
    wk_demand_qty     t_mrp_demand.demand_qty%type;
    wk_allocate_qty   t_mrp_demand.demand_qty%type;

    wk_req_qty   t_mrp_demand.demand_qty%type;
    wk_LT        number(3) ;
    wk_req_date  DATE ;

    wk_count  number(5) ;
    wk_LLC  number(5) ;

    /* ???????? */
     cursor C_ICNT(PARAM1 in number)
      is
       select * from t_mrp_itemcont
       where llc_code = PARAM1
       order by item_no,section_code
       for update
      ;

    /* ??????? */
     cursor C_DMD(PARAM1 in number, PARAM2 in varchar2)
      is
       select  *  from t_mrp_demand_wk
       where item_no = PARAM1
--         and section_code = PARAM2
       order by demand_priority, demand_type, demand_date, demand_st, demand_no
      ;

    /* ???????(???) */
     cursor C_SPY(PARAM1 in number, PARAM2 in varchar2)
      is
       select  *  from t_mrp_supply_wk
       where item_no = PARAM1
--         and section_code = PARAM2
--2007/06/22 Y.HAGAI
--       order by supply_type desc, supply_st, supply_date, supply_no
       order by supply_type desc, supply_st, supply_date, supply_no,section_code
       for update of supply_qty
      ;

    /* ??????? */
     cursor C_SPY2
      is
       select  *  from t_mrp_supply_wk
       order by supply_type desc, supply_st, supply_date, supply_no
       for update of supply_qty
      ;

    /* ??????? */
     cursor C_ITM(PARAM1 in number)
      is
       select  *  from item
       where item_no = PARAM1
      ;

    /* ???????? */
     cursor C_STR(PARAM1 in number,PARAM2 in number)
      is
       select  *  from structure
       where upper_item_no = PARAM1
         and level_no = PARAM2
         and quantity > 0
         and nvl(user_supply_flag,0) not in ('1','2','3')
         and nvl(subcon_supply_flag,0) not in ('3','4')
      ;

    /* ?????????? */
     cursor C_BAL_W
      is
         select
              SECTION_CODE           , ITEM_NO                ,
              DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
              SUM(ALLOCATE_QTY)      , ALLOCATE_ST            , DEMAND_TYPE            ,
              DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
              SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
              SUPPLY_SUB_DATE
         from t_mrp_balance_wk
         where ALLOCATE_QTY > 0
         group by SECTION_CODE           , ITEM_NO                ,
                  DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                           ALLOCATE_ST            , DEMAND_TYPE            ,
                  DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                  SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                  SUPPLY_SUB_DATE
         order by ITEM_NO, nvl(SUPPLY_TYPE,'0') desc, DEMAND_DATE
         ;
              BWK_SECTION_CODE       BALANCE.SECTION_CODE%type       ;
              BWK_ITEM_NO            BALANCE.ITEM_NO%type            ;
              BWK_DEMAND_NUMBER      BALANCE.DEMAND_NUMBER%type      ;
              BWK_SUPPLY_NUMBER      BALANCE.SUPPLY_NUMBER%type      ;
              BWK_ALLOCATE_STATUS    BALANCE.ALLOCATE_STATUS%type    ;
              BWK_ALLOCATE_QTY       BALANCE.ALLOCATE_QTY%type       ;
              BWK_ALLOCATE_ST        BALANCE.ALLOCATE_ST%type        ;
              BWK_DEMAND_TYPE        BALANCE.DEMAND_TYPE%type        ;
              BWK_DEMAND_PRIORITY    BALANCE.DEMAND_PRIORITY%type    ;
              BWK_DEMAND_DATE        BALANCE.DEMAND_DATE%type        ;
              BWK_DEMAND_SUB_DATE    BALANCE.DEMAND_SUB_DATE%type    ;
              BWK_SUPPLY_TYPE        BALANCE.SUPPLY_TYPE%type        ;
              BWK_SUPPLY_PRIORITY    BALANCE.SUPPLY_PRIORITY%type    ;
              BWK_SUPPLY_DATE        BALANCE.SUPPLY_DATE%type        ;
              BWK_SUPPLY_SUB_DATE    BALANCE.SUPPLY_SUB_DATE%type    ;
              BWK_SEQ                BALANCE.SEQ%type := 0    ;

   /* 2007/07/19 Y.Hagai CONFIGURATION ?? */
    /* CONFIGURATION ?? */
     cursor C_CNF
      is
       select * from CONFIGURATION where CONFIG_KEY = 'MRP_MINUS_PCINV';

      CNF_REC configuration%rowtype ;

     cursor C2_CNF  
      is
       select * from CONFIGURATION where CONFIG_KEY = 'RUNNING_CHANGE';

      CNF2_REC configuration%rowtype ;

     cursor C_RNC(PARAM1 in number,PARAM2 in number)
      is
       select  *  from runningchange
       where item_no = PARAM1
         and OLD_ITEM_NO = PARAM2
         and VALID_FLAG  = '1'
      ;

       RNC_REC  runningchange%rowtype ;
--
       wk_item_no       number(8) ;

    /* ???????(???)????? */
     cursor C_SPY3(PARAM1 in number, PARAM2 in varchar2)
      is
       select  *  from t_mrp_supply_wk
       where item_no = PARAM1
--         and section_code = PARAM2
--2007/06/22 Y.HAGAI
--       order by supply_type desc, supply_st, supply_date, supply_no
       order by supply_type desc, supply_st, supply_date, supply_no,section_code
       for update of supply_qty
      ;
   begin
--????
 /* ?????2?? */
    open C2_CNF ;
        CNF2_REC := null ;
        fetch C2_CNF into CNF2_REC ;
    close C2_CNF ;

       delete from t_mrp_demand_wk  ;
       insert into t_mrp_demand_wk select * from t_mrp_demand  ;
       delete from t_mrp_supply_wk  ;
       insert into t_mrp_supply_wk select * from t_mrp_supply  ;

       --delete from balance ;
       delete from t_mrp_balance_wk ;
       delete from balance ;


--?????
    /* LEVEL_NO????????? */
<<MAIN>>
      wk_level_now := -1 ;
      loop
          select count(*) into wk_llc_cnt from t_mrp_itemcont;
          if wk_llc_cnt = 0 or wk_level_now >20 then
               exit;
          end if;

          wk_level_now := wk_level_now + 1;

         /*???????*/
          open C_ICNT(wk_level_now);
          ICNT_REC := null ;
          loop
              fetch C_ICNT into ICNT_REC ;
              exit when C_ICNT%notfound or C_ICNT%notfound is null;

              /*???? ?? */
               open C_DMD(ICNT_REC.ITEM_NO, ICNT_REC.SECTION_CODE);
               loop
                   fetch C_DMD into DMD_REC ;
                   exit when C_DMD%notfound or C_DMD%notfound is null;

                       wk_demand_qty := DMD_REC.DEMAND_QTY ;      --??????

                       /*???? ?? */
                        open C_SPY(ICNT_REC.ITEM_NO, ICNT_REC.SECTION_CODE);
                        loop
                            fetch C_SPY into SPY_REC ;
                            exit when C_SPY%notfound or C_SPY%notfound is null;

                                wk_supply_qty    := SPY_REC.SUPPLY_QTY ;   --??????
                                wk_supply_remain := SPY_REC.SUPPLY_QTY ;   --?????

                                /* ??????????? */
                                -- ????????
                                If SPY_REC.SUPPLY_TYPE = 'X' Then
                                    If DMD_REC.DEMAND_ST = SPY_REC.SUPPLY_ST Then
                                        wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                        If wk_supply_remain >= 0 Then
                                            wk_supply_qty   := wk_supply_remain ;
                                            wk_allocate_qty := wk_demand_qty ;
                                            wk_demand_qty   := 0 ;
                                        Else
                                            wk_demand_qty   := wk_supply_remain * -1 ;
                                            wk_allocate_qty := wk_supply_qty ;
                                            wk_supply_qty   := 0 ;
                                        End If ;

                                        INSERT INTO t_mrp_balance_wk(
                                             OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                             DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                             ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                             DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                             SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                             SUPPLY_SUB_DATE
                                        ) VALUES (
                                             sysdate                , DMD_REC.SECTION_CODE   , DMD_REC.ITEM_NO        ,
                                             DMD_REC.DEMAND_NO      , SPY_REC.SUPPLY_NO      , 'A'                    ,
                                             wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                             DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                             SPY_REC.SUPPLY_TYPE    , SPY_REC.SUPPLY_PRIORITY, SPY_REC.SUPPLY_DATE    ,
                                             SPY_REC.SUPPLY_SUB_DATE
                                        ) ;

                                        If wk_supply_qty = 0 Then
                                                delete t_mrp_supply_wk where current of C_SPY ;
                                        Else
                                                update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY ;
                                        End If ;
                                    End If ;

                                ElsIf SPY_REC.SUPPLY_TYPE = 'W' Then
                                        wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                        If wk_supply_remain >= 0 Then
                                            wk_supply_qty   := wk_supply_remain ;
                                            wk_allocate_qty := wk_demand_qty ;
                                            wk_demand_qty   := 0 ;
                                        Else
                                            wk_demand_qty   := wk_supply_remain * -1 ;
                                            wk_allocate_qty := wk_supply_qty ;
                                            wk_supply_qty   := 0 ;
                                        End If ;

                                        INSERT INTO t_mrp_balance_wk(
                                             OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                             DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                             ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                             DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                             SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                             SUPPLY_SUB_DATE
                                        ) VALUES (
                                             sysdate                , DMD_REC.SECTION_CODE   , DMD_REC.ITEM_NO        ,
                                             DMD_REC.DEMAND_NO      , SPY_REC.SUPPLY_NO      , 'A'                    ,
                                             wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                             DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                             SPY_REC.SUPPLY_TYPE    , SPY_REC.SUPPLY_PRIORITY, SPY_REC.SUPPLY_DATE    ,
                                             SPY_REC.SUPPLY_SUB_DATE
                                        ) ;

                                        If wk_supply_qty = 0 Then
                                                delete t_mrp_supply_wk where current of C_SPY ;
                                        Else
                                                update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY ;
                                        End If ;

                                ElsIf SPY_REC.SUPPLY_TYPE = 'P' Then
                                        wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                        If wk_supply_remain >= 0 Then
                                            wk_supply_qty   := wk_supply_remain ;
                                            wk_allocate_qty := wk_demand_qty ;
                                            wk_demand_qty   := 0 ;
                                        Else
                                            wk_demand_qty   := wk_supply_remain * -1 ;
                                            wk_allocate_qty := wk_supply_qty ;
                                            wk_supply_qty   := 0 ;
                                        End If ;

                                        INSERT INTO t_mrp_balance_wk(
                                             OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                             DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                             ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                             DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                             SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                             SUPPLY_SUB_DATE
                                        ) VALUES (
                                             sysdate                , DMD_REC.SECTION_CODE   , DMD_REC.ITEM_NO        ,
                                             DMD_REC.DEMAND_NO      , SPY_REC.SUPPLY_NO      , 'A'                    ,
                                             wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                             DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                             SPY_REC.SUPPLY_TYPE    , SPY_REC.SUPPLY_PRIORITY, SPY_REC.SUPPLY_DATE    ,
                                             SPY_REC.SUPPLY_SUB_DATE
                                        ) ;

                                        If wk_supply_qty = 0 Then
                                                delete t_mrp_supply_wk where current of C_SPY ;
                                        Else
                                                update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY ;
                                        End If ;

                                ElsIf SPY_REC.SUPPLY_TYPE = 'M' Then
                                        wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                        If wk_supply_remain >= 0 Then
                                            wk_supply_qty   := wk_supply_remain ;
                                            wk_allocate_qty := wk_demand_qty ;
                                            wk_demand_qty   := 0 ;
                                        Else
                                            wk_demand_qty   := wk_supply_remain * -1 ;
                                            wk_allocate_qty := wk_supply_qty ;
                                            wk_supply_qty   := 0 ;
                                        End If ;

                                        INSERT INTO t_mrp_balance_wk(
                                             OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                             DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                             ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                             DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                             SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                             SUPPLY_SUB_DATE
                                        ) VALUES (
                                             sysdate                , DMD_REC.SECTION_CODE   , DMD_REC.ITEM_NO        ,
                                             DMD_REC.DEMAND_NO      , SPY_REC.SUPPLY_NO      , 'A'                    ,
                                             wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                             DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                             SPY_REC.SUPPLY_TYPE    , SPY_REC.SUPPLY_PRIORITY, SPY_REC.SUPPLY_DATE    ,
                                             SPY_REC.SUPPLY_SUB_DATE
                                        ) ;

                                        If wk_supply_qty = 0 Then
                                                delete t_mrp_supply_wk where current of C_SPY ;
                                        Else
                                                update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY ;
                                        End If ;

                                ElsIf SPY_REC.SUPPLY_TYPE = 'R' Then
                                        wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                        If wk_supply_remain >= 0 Then
                                            wk_supply_qty   := wk_supply_remain ;
                                            wk_allocate_qty := wk_demand_qty ;
                                            wk_demand_qty   := 0 ;
                                        Else
                                            wk_demand_qty   := wk_supply_remain * -1 ;
                                            wk_allocate_qty := wk_supply_qty ;
                                            wk_supply_qty   := 0 ;
                                        End If ;

                                        INSERT INTO t_mrp_balance_wk(
                                             OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                             DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                             ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                             DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                             SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                             SUPPLY_SUB_DATE
                                        ) VALUES (
                                             sysdate                , DMD_REC.SECTION_CODE   , DMD_REC.ITEM_NO        ,
                                             DMD_REC.DEMAND_NO      , SPY_REC.SUPPLY_NO      , 'A'                    ,
                                             wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                             DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                             SPY_REC.SUPPLY_TYPE    , SPY_REC.SUPPLY_PRIORITY, SPY_REC.SUPPLY_DATE    ,
                                             SPY_REC.SUPPLY_SUB_DATE
                                        ) ;

                                        If wk_supply_qty = 0 Then
                                                delete t_mrp_supply_wk where current of C_SPY ;
                                        Else
                                                update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY ;
                                        End If ;

                                Else
                                    null ;
                                End If ;

                                If wk_demand_qty <=0 Then
                                     goto END_SUPPLY ;
                                End If ;

                            end loop supply ;
                            <<END_SUPPLY>>
                        close C_SPY ;


                        /* ????????? */
                        If wk_demand_qty <= 0 Then
                           goto END_DEMAND ;
                        End If ;
                      
/*
2007/07/19 Y.Hagai ???????
?????????????????????????????
???????????????????????????????
????
*/
                       wk_item_no := DMD_REC.ITEM_NO;

                       If CNF2_REC.CONFIG_FLAG = 1 Then
                          open C_RNC(DMD_REC.BM_ITEM_NO,DMD_REC.ITEM_NO) ;
                               RNC_REC := null ;
                               fetch C_RNC into RNC_REC ;
                          close C_RNC ;
                          if  RNC_REC.NEW_ITEM_NO is not null then
--    dbms_output.put_line(DMD_REC.ITEM_NO || '='|| RNC_REC.NEW_ITEM_NO ||'='||wk_demand_qty);
 
                              wk_item_no :=  RNC_REC.NEW_ITEM_NO;

                             /*???? ??2 ????? */
                              open C_SPY3(RNC_REC.NEW_ITEM_NO, ICNT_REC.SECTION_CODE);
                              loop
                                  fetch C_SPY3 into SPY3_REC ;
                                  exit when C_SPY3%notfound or C_SPY3%notfound is null;      

                                      wk_supply_qty    := SPY3_REC.SUPPLY_QTY ;   --??????      
                                      wk_supply_remain := SPY3_REC.SUPPLY_QTY ;   --?????

                                      /* ??????????? */
                                      -- ????????
                                      If SPY3_REC.SUPPLY_TYPE = 'X' Then
                                          If DMD_REC.DEMAND_ST = SPY3_REC.SUPPLY_ST Then
                                              wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                              If wk_supply_remain >= 0 Then
                                                  wk_supply_qty   := wk_supply_remain ;
                                                  wk_allocate_qty := wk_demand_qty ;
                                                  wk_demand_qty   := 0 ;
                                              Else
                                                  wk_demand_qty   := wk_supply_remain * -1 ;
                                                  wk_allocate_qty := wk_supply_qty ;
                                                  wk_supply_qty   := 0 ;
                                              End If ;
--    dbms_output.put_line(SPY3_REC.SUPPLY_TYPE ||'='||wk_supply_qty||'='|| wk_supply_remain||'='||wk_demand_qty);

                                              INSERT INTO t_mrp_balance_wk(
                                                   OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                                   DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                                   ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                                   DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                                   SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                                   SUPPLY_SUB_DATE
                                              ) VALUES (
                                                   sysdate                , DMD_REC.SECTION_CODE   , RNC_REC.NEW_ITEM_NO        ,
                                                   DMD_REC.DEMAND_NO      , SPY3_REC.SUPPLY_NO      , 'A'                    ,
                                                   wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                                   DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                                   SPY3_REC.SUPPLY_TYPE    , SPY3_REC.SUPPLY_PRIORITY, SPY3_REC.SUPPLY_DATE    ,
                                                   SPY3_REC.SUPPLY_SUB_DATE
                                              ) ;

                                              If wk_supply_qty = 0 Then
                                                      delete t_mrp_supply_wk where current of C_SPY3 ;
                                              Else
                                                      update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY3 ;
                                              End If ;
                                          End If ;

                                      ElsIf SPY3_REC.SUPPLY_TYPE = 'W' Then
                                            wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                              If wk_supply_remain >= 0 Then
                                                  wk_supply_qty   := wk_supply_remain ;
                                                  wk_allocate_qty := wk_demand_qty ;
                                                  wk_demand_qty   := 0 ;
                                              Else
                                                  wk_demand_qty   := wk_supply_remain * -1 ;
                                                  wk_allocate_qty := wk_supply_qty ;
                                                  wk_supply_qty   := 0 ;
                                              End If ;
--    dbms_output.put_line(SPY3_REC.SUPPLY_TYPE ||'='||wk_supply_qty||'='|| wk_supply_remain||'='||wk_demand_qty);

                                              INSERT INTO t_mrp_balance_wk(
                                                   OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                                   DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                                   ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                                   DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                                   SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                                   SUPPLY_SUB_DATE
                                              ) VALUES (
                                                   sysdate                , DMD_REC.SECTION_CODE   , RNC_REC.NEW_ITEM_NO        ,
                                                   DMD_REC.DEMAND_NO      , SPY3_REC.SUPPLY_NO      , 'A'                    ,
                                                   wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                                   DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                                   SPY3_REC.SUPPLY_TYPE    , SPY3_REC.SUPPLY_PRIORITY, SPY3_REC.SUPPLY_DATE    ,
                                                   SPY3_REC.SUPPLY_SUB_DATE
                                              ) ;

                                              If wk_supply_qty = 0 Then
                                                      delete t_mrp_supply_wk where current of C_SPY3 ;
                                              Else
                                                      update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY3 ;
                                              End If ;

                                      ElsIf SPY3_REC.SUPPLY_TYPE = 'P' Then
                                              wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                              If wk_supply_remain >= 0 Then
                                                  wk_supply_qty   := wk_supply_remain ;
                                                  wk_allocate_qty := wk_demand_qty ;
                                                  wk_demand_qty   := 0 ;
                                              Else
                                                  wk_demand_qty   := wk_supply_remain * -1 ;
                                                  wk_allocate_qty := wk_supply_qty ;
                                                  wk_supply_qty   := 0 ;
                                              End If ;

--    dbms_output.put_line(SPY3_REC.SUPPLY_TYPE ||'='||wk_supply_qty||'='|| wk_supply_remain||'='||wk_demand_qty);
                                              INSERT INTO t_mrp_balance_wk(
                                                   OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                                   DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                                   ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                                   DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                                   SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                                   SUPPLY_SUB_DATE
                                              ) VALUES (
                                                   sysdate                , DMD_REC.SECTION_CODE   , RNC_REC.NEW_ITEM_NO        ,
                                                   DMD_REC.DEMAND_NO      , SPY3_REC.SUPPLY_NO      , 'A'                    ,
                                                   wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                                   DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                                   SPY3_REC.SUPPLY_TYPE    , SPY3_REC.SUPPLY_PRIORITY, SPY3_REC.SUPPLY_DATE    ,
                                                   SPY3_REC.SUPPLY_SUB_DATE
                                              ) ;

                                              If wk_supply_qty = 0 Then
                                                      delete t_mrp_supply_wk where current of C_SPY3 ;
                                              Else
                                                      update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY3 ;
                                              End If ;

                                            ElsIf SPY3_REC.SUPPLY_TYPE = 'M' Then
                                             wk_supply_remain := wk_supply_remain - wk_demand_qty ;      

                                              If wk_supply_remain >= 0 Then
                                                  wk_supply_qty   := wk_supply_remain ;
                                                  wk_allocate_qty := wk_demand_qty ;
                                                  wk_demand_qty   := 0 ;
                                              Else
                                                  wk_demand_qty   := wk_supply_remain * -1 ;
                                                  wk_allocate_qty := wk_supply_qty ;
                                                  wk_supply_qty   := 0 ;
                                              End If ;

--    dbms_output.put_line(SPY3_REC.SUPPLY_TYPE ||'='||wk_supply_qty||'='|| wk_supply_remain||'='||wk_demand_qty);
                                              INSERT INTO t_mrp_balance_wk(
                                                   OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                                   DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                                   ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                                   DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                                   SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                                   SUPPLY_SUB_DATE
                                              ) VALUES (
                                                   sysdate                , DMD_REC.SECTION_CODE   , RNC_REC.NEW_ITEM_NO        ,
                                                   DMD_REC.DEMAND_NO      , SPY3_REC.SUPPLY_NO      , 'A'                    ,
                                                   wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                                   DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                                   SPY3_REC.SUPPLY_TYPE    , SPY3_REC.SUPPLY_PRIORITY, SPY3_REC.SUPPLY_DATE    ,
                                                   SPY3_REC.SUPPLY_SUB_DATE
                                              ) ;

                                              If wk_supply_qty = 0 Then
                                                      delete t_mrp_supply_wk where current of C_SPY3 ;
                                              Else
                                                      update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY3 ;
                                              End If ;

                                      ElsIf SPY3_REC.SUPPLY_TYPE = 'R' Then
                                             wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                              If wk_supply_remain >= 0 Then
                                                  wk_supply_qty   := wk_supply_remain ;
                                                  wk_allocate_qty := wk_demand_qty ;
                                                  wk_demand_qty   := 0 ;
                                              Else
                                                  wk_demand_qty   := wk_supply_remain * -1 ;
                                                  wk_allocate_qty := wk_supply_qty ;
                                                  wk_supply_qty   := 0 ;
                                              End If ;

--    dbms_output.put_line(SPY3_REC.SUPPLY_TYPE ||'='||wk_supply_qty||'='|| wk_supply_remain||'='||wk_demand_qty);
                                              INSERT INTO t_mrp_balance_wk(
                                                   OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                                   DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                                   ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                                   DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                                   SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                                   SUPPLY_SUB_DATE
                                              ) VALUES (
                                                   sysdate                , DMD_REC.SECTION_CODE   , RNC_REC.NEW_ITEM_NO        ,
                                                   DMD_REC.DEMAND_NO      , SPY3_REC.SUPPLY_NO      , 'A'                    ,
                                                   wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                                   DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                                   SPY3_REC.SUPPLY_TYPE    , SPY3_REC.SUPPLY_PRIORITY, SPY3_REC.SUPPLY_DATE    ,
                                                   SPY3_REC.SUPPLY_SUB_DATE
                                              ) ;

                                              If wk_supply_qty = 0 Then
                                                      delete t_mrp_supply_wk where current of C_SPY3 ;
                                              Else
                                                      update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY3 ;
                                              End If ;

                                      Else
                                          null ;
                                      End If ;

                                      If wk_demand_qty <=0 Then
                                           goto END_SUPPLY3 ;
                                      End If ;

                                  end loop supply3 ;
                                  <<END_SUPPLY3>>
                              close C_SPY3 ;

                              /* ????????? */
                              If wk_demand_qty <= 0 Then
                                 goto END_DEMAND ;
                              End If ;
                          End If ;
                       End If ;

/*
2007/07/19 Y.Hagai ???????
????
*/

 

                        /* ???????? */
                          INSERT INTO t_mrp_balance_wk(
                               OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                               DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                               ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                               DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                               SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                               SUPPLY_SUB_DATE
                          ) VALUES (
--2007/07/26 Y.Hagai ????? ???????wk_item_no???????????
--                               sysdate                , DMD_REC.SECTION_CODE   , DMD_REC.ITEM_NO        ,
                               sysdate                , DMD_REC.SECTION_CODE   , wk_item_no             ,
                               DMD_REC.DEMAND_NO      , null                   , 'A'                    ,
                               wk_demand_qty          , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                               DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                               null                   , null                   , null                   ,
                               null
                          ) ;

                        /*  ?????????????????????????????????????????????? */
                         select max(level_no) into wk_level_no from leveld
--2007/07/26 Y.Hagai ????? ???????wk_item_no???????????
--                         where item_no = DMD_REC.ITEM_NO ;
                         where item_no = wk_item_no ;
                            if wk_level_no is null or DMD_REC.DEMAND_TYPE = 'O' Then
                                goto END_DEMAND ;
                            end If ;

                        /* ???????????? */
--2007/07/26 Y.Hagai ????? ???????wk_item_no???????????
--                         open C_ITM(DMD_REC.ITEM_NO) ;
                         open C_ITM(wk_item_no) ;
                            UITM_REC :=null ;
                            fetch C_ITM into UITM_REC ;
                         close C_ITM ;

                        /* ????? */
--2007/07/26 Y.Hagai ????? ???????wk_item_no???????????
--                          open C_STR(DMD_REC.ITEM_NO,wk_level_no) ;
                          open C_STR(wk_item_no,wk_level_no) ;
                              loop
                                 fetch C_STR into STR_REC ;
                                 exit when C_STR%notfound or C_STR%notfound is null;

                                /* ??????????? */
                                 open C_ITM(STR_REC.LOWER_ITEM_NO) ;
                                    LITM_REC :=null ;
                                    fetch C_ITM into LITM_REC ;
                                 close C_ITM ;

                                    /* ????'D'???????????????????? */
                                     --If LITM_REC.ISSUE_POLICY <> 'D' Then
                                     --    goto STR_LOOP_END ;
                                     --End If ;

                                    /* ??? ????????? */
                                     wk_req_qty := round(wk_demand_qty *
                                                        STR_REC.QUANTITY / nvl(STR_REC.QUANTITY_BASE,1) *
                                                        (1 + (nvl(STR_REC.FAILURE_RATE,0)/100)
                                                           + (nvl(LITM_REC.MANUFACT_FAIL_RATE,0)/100)
                                                           + (nvl(UITM_REC.MANUFACT_FAIL_RATE,0)/100))
                                                        ,4) ;
                                     If LITM_REC.UNIT_STOCK_RATE != LITM_REC.unit_engineer_rate Then
                                        wk_req_qty := wk_req_qty * nvl(LITM_REC.UNIT_STOCK_RATE,1) / nvl(LITM_REC.unit_engineer_rate,1) ;
                                     End If ;

                                    /* ??????? */
                                     wk_LT := nvl(UITM_REC.MANUFACT_LEADTIME,0) + nvl(UITM_REC.ADJUSTMENT_LEADTIME,0) + nvl(LITM_REC.ADJUSTMENT_LEADTIME,0) ;
                                     wk_req_date := DMD_REC.DEMAND_DATE - wk_LT ;

                                    /* ICONT ??????*/
                                     select count(*) into wk_count from t_mrp_itemcont
                                       where item_no = STR_REC.LOWER_ITEM_NO ;

                                     wk_LLC := get_llc(STR_REC.LOWER_ITEM_NO) ;
                                         if wk_count = 0 and wk_LLC > wk_level_now  Then
                                             insert into  t_mrp_itemcont(SECTION_CODE,ITEM_NO,LLC_CODE) VALUES(DMD_REC.SECTION_CODE,STR_REC.LOWER_ITEM_NO,wk_LLC) ;
                                         end If ;

--                                  If DMD_REC.DEMAND_TYPE ='Y' and  DMD_REC.DEMAND_PRIORITY ='P' Then
                                     INSERT INTO t_mrp_demand_wk(
                                          OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                          DEMAND_ST              , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                          DEMAND_NO              , DEMAND_QTY             , DEMAND_TYPE            ,
                                          DEMAND_PRIORITY
                                     ) VALUES (
                                          sysdate                , DMD_REC.SECTION_CODE   , STR_REC.LOWER_ITEM_NO  ,
                                          DMD_REC.DEMAND_ST      , wk_req_date            , wk_req_date                   ,
                                          DMD_REC.DEMAND_NO      , wk_req_qty             , 'Y'                    ,
                                          'C'
                                     ) ;
--                                    End If ;

                                 <<STR_LOOP_END>>
                                  null ;
                              end loop ;
                          close C_STR ;

                   <<END_DEMAND>>
                    null ;
               end loop demand ;
               close C_DMD ;

               /* ???????? */
               delete from  t_mrp_itemcont where current of C_ICNT ;

          end loop icnt ;
          close C_ICNT ;

     end loop main ;

     /* ??????? */
     open C_SPY2 ;
     loop
     fetch C_SPY2 into SPY_REC ;
     exit when C_SPY2%notfound or C_SPY2%notfound is null;

         INSERT INTO t_mrp_balance_wk(
              OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
              DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
              ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
              DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
              SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
              SUPPLY_SUB_DATE
         ) VALUES (
              sysdate                , SPY_REC.SECTION_CODE   , SPY_REC.ITEM_NO       ,
              null                   , SPY_REC.SUPPLY_NO      , 'A'                    ,
              SPY_REC.SUPPLY_QTY     , SPY_REC.SUPPLY_ST      , null                   ,
              null                   , null                   , null                   ,
              SPY_REC.SUPPLY_TYPE    , SPY_REC.SUPPLY_PRIORITY, SPY_REC.SUPPLY_DATE    ,
              SPY_REC.SUPPLY_SUB_DATE
         ) ;
     end loop ;
     close C_SPY2 ;

     /* ????????BALANCE??? */
     open C_BAL_W ;
     loop
     fetch C_BAL_W into BWK_SECTION_CODE    ,
                        BWK_ITEM_NO         ,
                        BWK_DEMAND_NUMBER   ,
                        BWK_SUPPLY_NUMBER   ,
                        BWK_ALLOCATE_STATUS ,
                        BWK_ALLOCATE_QTY    ,
                        BWK_ALLOCATE_ST     ,
                        BWK_DEMAND_TYPE     ,
                        BWK_DEMAND_PRIORITY ,
                        BWK_DEMAND_DATE     ,
                        BWK_DEMAND_SUB_DATE ,
                        BWK_SUPPLY_TYPE     ,
                        BWK_SUPPLY_PRIORITY ,
                        BWK_SUPPLY_DATE     ,
                        BWK_SUPPLY_SUB_DATE ;

         exit when C_BAL_W%notfound or C_BAL_W%notfound is null;

         BWK_SEQ := BWK_SEQ + 1 ;

         If BWK_SUPPLY_TYPE = 'X' Then
               BWK_SUPPLY_TYPE := 'H' ;
         Elsif BWK_SUPPLY_TYPE = 'W' Then
               BWK_SUPPLY_TYPE := 'Z' ;
         End If ;

         insert into balance(
              OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
              DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
              ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
              DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
              SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
              SUPPLY_SUB_DATE        , SEQ
         ) values (
              SYSDATE                , BWK_SECTION_CODE       , BWK_ITEM_NO                ,
              BWK_DEMAND_NUMBER      , BWK_SUPPLY_NUMBER      , BWK_ALLOCATE_STATUS        ,
              BWK_ALLOCATE_QTY       , BWK_ALLOCATE_ST        , BWK_DEMAND_TYPE            ,
              BWK_DEMAND_PRIORITY    , BWK_DEMAND_DATE        , BWK_DEMAND_SUB_DATE        ,
              BWK_SUPPLY_TYPE        , BWK_SUPPLY_PRIORITY    , BWK_SUPPLY_DATE            ,
              BWK_SUPPLY_SUB_DATE    , BWK_SEQ
         ) ;

     end loop ;
     close C_BAL_W ;

     update balance b
        set b.section_code  = (select section_code from item where item_no = b.item_no)
       where b.item_no in (select item_no from item);

  end ;
end T_MRP035A ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."T_MRP035B" 
as
/****************************************************************
  ?????????????
  ???          ?2007/07/18
  ???          ?Y.Hagai
  ???          ?2016/02/20
  ???          ?Y.Hagai
  ????
  2016/02/20     MPS?PO_NO,PO_LINE_NO,WORK_ORDER???,????
                 demand_priority, demand_type, mps_status, demand_date
                 ???
*****************************************************************/
begin
   declare
    ICNT_REC t_mrp_itemcont%rowtype ;
    DMD_REC  t_mrp_demand%rowtype ;
    SPY_REC  t_mrp_supply%rowtype ;
    UITM_REC  item%rowtype ;
    LITM_REC  item%rowtype ;
    STR_REC   structure%rowtype ;
    SPY2_REC  t_mrp_supply%rowtype ;
    SPY3_REC  t_mrp_supply%rowtype ;

    wk_level_now  number(3);
    wk_level_no   number(3);
    wk_llc_cnt    number(5);


    wk_supply_qty     t_mrp_supply.supply_qty%type;
    wk_supply_remain  t_mrp_supply.supply_qty%type;
    wk_demand_qty     t_mrp_demand.demand_qty%type;
    wk_allocate_qty   t_mrp_demand.demand_qty%type;

    wk_req_qty   t_mrp_demand.demand_qty%type;
    wk_LT        number(3) ;
    wk_req_date  DATE ;

    wk_count  number(5) ;
    wk_LLC  number(5) ;

    /* ???????? */
     cursor C_ICNT(PARAM1 in number)
      is
       select * from t_mrp_itemcont
       where llc_code = PARAM1
       order by item_no,section_code
       for update
      ;

    /* ??????? */
     cursor C_DMD(PARAM1 in number, PARAM2 in varchar2)
      is
       select  *  from t_mrp_demand_wk
       where item_no = PARAM1
--         and section_code = PARAM2
--2016/02/20 Y.Hagai Mente start
--       order by demand_priority, demand_type, demand_date, demand_st, demand_no
       order by demand_priority, demand_type, mps_status, demand_date, demand_st, demand_no
--2016/02/20 Y.Hagai Mente end
      ;

    /* ???????(???) */
     cursor C_SPY(PARAM1 in number, PARAM2 in varchar2)
      is
       select  *  from t_mrp_supply_wk
       where item_no = PARAM1
--         and section_code = PARAM2
--2007/06/22 Y.HAGAI
--       order by supply_type desc, supply_st, supply_date, supply_no
       order by supply_type desc, supply_st, supply_date, supply_no,section_code
       for update of supply_qty
      ;

    /* ??????? */
     cursor C_SPY2
      is
       select  *  from t_mrp_supply_wk
       order by supply_type desc, supply_st, supply_date, supply_no
       for update of supply_qty
      ;

    /* ??????? */
     cursor C_ITM(PARAM1 in number)
      is
       select  *  from item
       where item_no = PARAM1
      ;

    /* ???????? */
     cursor C_STR(PARAM1 in number,PARAM2 in number)
      is
       select  *  from structure
       where upper_item_no = PARAM1
         and level_no = PARAM2
         and quantity > 0
         and nvl(user_supply_flag,0) not in ('1','2','3')
         and nvl(subcon_supply_flag,0) not in ('3','4')
      ;

    /* ?????????? */
     cursor C_BAL_W
      is
         select
              SECTION_CODE           , ITEM_NO                ,
              DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
              SUM(ALLOCATE_QTY)      , ALLOCATE_ST            , DEMAND_TYPE            ,
              DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
              SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
              SUPPLY_SUB_DATE        , BM_ITEM_NO            ,
--2016/02/20 Y.Hagai mente start 
              PO_NO                  , PO_LINE_NO             , WORK_ORDER             ,
              MPS_STATUS             , LEVEL_NO
--2016/02/20 Y.Hagai mente end 
         from t_mrp_balance_wk
         where ALLOCATE_QTY > 0
         group by SECTION_CODE           , ITEM_NO                ,
                  DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                           ALLOCATE_ST            , DEMAND_TYPE            ,
                  DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                  SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                  SUPPLY_SUB_DATE        , BM_ITEM_NO ,
--2016/02/20 Y.Hagai mente start 
                  PO_NO                  , PO_LINE_NO             , WORK_ORDER             ,
                  MPS_STATUS             , LEVEL_NO
--2016/02/20 Y.Hagai mente end 

         order by ITEM_NO, nvl(SUPPLY_TYPE,'0') desc, DEMAND_DATE
         ;
              BWK_SECTION_CODE       BALANCE_FI.SECTION_CODE%type       ;
              BWK_ITEM_NO            BALANCE_FI.ITEM_NO%type            ;
              BWK_DEMAND_NUMBER      BALANCE_FI.DEMAND_NUMBER%type      ;
              BWK_SUPPLY_NUMBER      BALANCE_FI.SUPPLY_NUMBER%type      ;
              BWK_ALLOCATE_STATUS    BALANCE_FI.ALLOCATE_STATUS%type    ;
              BWK_ALLOCATE_QTY       BALANCE_FI.ALLOCATE_QTY%type       ;
              BWK_ALLOCATE_ST        BALANCE_FI.ALLOCATE_ST%type        ;
              BWK_DEMAND_TYPE        BALANCE_FI.DEMAND_TYPE%type        ;
              BWK_DEMAND_PRIORITY    BALANCE_FI.DEMAND_PRIORITY%type    ;
              BWK_DEMAND_DATE        BALANCE_FI.DEMAND_DATE%type        ;
              BWK_DEMAND_SUB_DATE    BALANCE_FI.DEMAND_SUB_DATE%type    ;
              BWK_SUPPLY_TYPE        BALANCE_FI.SUPPLY_TYPE%type        ;
              BWK_SUPPLY_PRIORITY    BALANCE_FI.SUPPLY_PRIORITY%type    ;
              BWK_SUPPLY_DATE        BALANCE_FI.SUPPLY_DATE%type        ;
              BWK_SUPPLY_SUB_DATE    BALANCE_FI.SUPPLY_SUB_DATE%type    ;
              BWK_SEQ                BALANCE_FI.SEQ%type := 0           ;
              BWK_BM_ITEM_NO         BALANCE_FI.BM_ITEM_NO%type         ;
              BWK_PO_NO              BALANCE_FI.PO_NO%type              ;
              BWK_PO_LINE_NO         BALANCE_FI.PO_LINE_NO%type         ;
              BWK_WORK_ORDER         BALANCE_FI.WORK_ORDER%type         ;
              BWK_MPS_STATUS         BALANCE_FI.MPS_STATUS%type         ;
              BWK_LEVEL_NO           BALANCE_FI.LEVEL_NO%type          ;

   /* 2007/07/19 Y.Hagai CONFIGURATION ?? */
    /* CONFIGURATION ?? */
     cursor C_CNF
      is
       select * from CONFIGURATION where CONFIG_KEY = 'MRP_MINUS_PCINV';

      CNF_REC configuration%rowtype ;

     cursor C2_CNF  
      is
       select * from CONFIGURATION where CONFIG_KEY = 'RUNNING_CHANGE';

      CNF2_REC configuration%rowtype ;

   /* 2016/06/20 Y.Hagai CONFIGURATION ?? */
     cursor C3_CNF  
      is
       select * from CONFIGURATION where CONFIG_KEY = 'MRP_ADJ_LT_CALC';

      CNF3_REC configuration%rowtype ;

     cursor C_RNC(PARAM1 in number,PARAM2 in number)
      is
       select  *  from runningchange
       where item_no = PARAM1
         and OLD_ITEM_NO = PARAM2
         and VALID_FLAG  = '1'
      ;

       RNC_REC  runningchange%rowtype ;
--
       wk_item_no       number(8) ;

    /* ???????(???)????? */
     cursor C_SPY3(PARAM1 in number, PARAM2 in varchar2)
      is
       select  *  from t_mrp_supply_wk
       where item_no = PARAM1
--         and section_code = PARAM2
--2007/06/22 Y.HAGAI
--       order by supply_type desc, supply_st, supply_date, supply_no
       order by supply_type desc, supply_st, supply_date, supply_no,section_code
       for update of supply_qty
      ;

   begin
--????
 /* ?????2?? */
    open C2_CNF ;
        CNF2_REC := null ;
        fetch C2_CNF into CNF2_REC ;
    close C2_CNF ;

 /* ?????3?? */
    open C3_CNF ;
        CNF3_REC := null ;
        fetch C3_CNF into CNF3_REC ;
    close C3_CNF ;

       delete from t_mrp_demand_wk  ;
       insert into t_mrp_demand_wk select * from t_mrp_demand  ;
       delete from t_mrp_supply_wk  ;
       insert into t_mrp_supply_wk select * from t_mrp_supply  ;

       --delete from balance_FI ;
       delete from t_mrp_balance_wk ;
       delete from balance_FI ;


--?????
    /* LEVEL_NO????????? */
<<MAIN>>
      wk_level_now := -1 ;
      loop
          select count(*) into wk_llc_cnt from t_mrp_itemcont;
          if wk_llc_cnt = 0 or wk_level_now >20 then
               exit;
          end if;

          wk_level_now := wk_level_now + 1;

         /*???????*/
          open C_ICNT(wk_level_now);
          ICNT_REC := null ;
          loop
              fetch C_ICNT into ICNT_REC ;
              exit when C_ICNT%notfound or C_ICNT%notfound is null;

              /*???? ?? */
               open C_DMD(ICNT_REC.ITEM_NO, ICNT_REC.SECTION_CODE);
               loop
                   fetch C_DMD into DMD_REC ;
                   exit when C_DMD%notfound or C_DMD%notfound is null;

                       wk_demand_qty := DMD_REC.DEMAND_QTY ;      --??????

                       /*???? ?? */
                        open C_SPY(ICNT_REC.ITEM_NO, ICNT_REC.SECTION_CODE);
                        loop
                            fetch C_SPY into SPY_REC ;
                            exit when C_SPY%notfound or C_SPY%notfound is null;

                                wk_supply_qty    := SPY_REC.SUPPLY_QTY ;   --??????
                                wk_supply_remain := SPY_REC.SUPPLY_QTY ;   --?????

                                /* ??????????? */
                                -- ????????
                                If SPY_REC.SUPPLY_TYPE = 'X' Then
                                    If DMD_REC.DEMAND_ST = SPY_REC.SUPPLY_ST Then
                                        wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                        If wk_supply_remain >= 0 Then
                                            wk_supply_qty   := wk_supply_remain ;
                                            wk_allocate_qty := wk_demand_qty ;
                                            wk_demand_qty   := 0 ;
                                        Else
                                            wk_demand_qty   := wk_supply_remain * -1 ;
                                            wk_allocate_qty := wk_supply_qty ;
                                            wk_supply_qty   := 0 ;
                                        End If ;

                                        INSERT INTO t_mrp_balance_wk(
                                             OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                             DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                             ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                             DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                             SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                             SUPPLY_SUB_DATE        , BM_ITEM_NO             ,
                                             PO_NO                  , PO_LINE_NO             , WORK_ORDER             ,
                                             MPS_STATUS             , LEVEL_NO
                                        ) VALUES (
                                             sysdate                , DMD_REC.SECTION_CODE   , DMD_REC.ITEM_NO        ,
                                             DMD_REC.DEMAND_NO      , SPY_REC.SUPPLY_NO      , 'A'                    ,
                                             wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                             DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                             SPY_REC.SUPPLY_TYPE    , SPY_REC.SUPPLY_PRIORITY, SPY_REC.SUPPLY_DATE    ,
                                             SPY_REC.SUPPLY_SUB_DATE, DMD_REC.BM_ITEM_NO     ,
                                             DMD_REC.PO_NO          , DMD_REC.PO_LINE_NO     , DMD_REC.WORK_ORDER     ,
                                             DMD_REC.MPS_STATUS     , DMD_REC.LEVEL_NO

                                        ) ;

                                        If wk_supply_qty = 0 Then
                                                delete t_mrp_supply_wk where current of C_SPY ;
                                        Else
                                                update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY ;
                                        End If ;
                                    End If ;

                                ElsIf SPY_REC.SUPPLY_TYPE = 'W' Then
                                        wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                        If wk_supply_remain >= 0 Then
                                            wk_supply_qty   := wk_supply_remain ;
                                            wk_allocate_qty := wk_demand_qty ;
                                            wk_demand_qty   := 0 ;
                                        Else
                                            wk_demand_qty   := wk_supply_remain * -1 ;
                                            wk_allocate_qty := wk_supply_qty ;
                                            wk_supply_qty   := 0 ;
                                        End If ;

                                        INSERT INTO t_mrp_balance_wk(
                                             OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                             DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                             ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                             DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                             SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                             SUPPLY_SUB_DATE        , BM_ITEM_NO             ,
                                             PO_NO                  , PO_LINE_NO             , WORK_ORDER             ,
                                             MPS_STATUS             , LEVEL_NO
                                        ) VALUES (
                                             sysdate                , DMD_REC.SECTION_CODE   , DMD_REC.ITEM_NO        ,
                                             DMD_REC.DEMAND_NO      , SPY_REC.SUPPLY_NO      , 'A'                    ,
                                             wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                             DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                             SPY_REC.SUPPLY_TYPE    , SPY_REC.SUPPLY_PRIORITY, SPY_REC.SUPPLY_DATE    ,
                                             SPY_REC.SUPPLY_SUB_DATE,DMD_REC.BM_ITEM_NO      ,
                                             DMD_REC.PO_NO          , DMD_REC.PO_LINE_NO     , DMD_REC.WORK_ORDER    ,
                                             DMD_REC.MPS_STATUS     , DMD_REC.LEVEL_NO
                                        ) ;

                                        If wk_supply_qty = 0 Then
                                                delete t_mrp_supply_wk where current of C_SPY ;
                                        Else
                                                update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY ;
                                        End If ;

                                ElsIf SPY_REC.SUPPLY_TYPE = 'P' Then
                                        wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                        If wk_supply_remain >= 0 Then
                                            wk_supply_qty   := wk_supply_remain ;
                                            wk_allocate_qty := wk_demand_qty ;
                                            wk_demand_qty   := 0 ;
                                        Else
                                            wk_demand_qty   := wk_supply_remain * -1 ;
                                            wk_allocate_qty := wk_supply_qty ;
                                            wk_supply_qty   := 0 ;
                                        End If ;

                                        INSERT INTO t_mrp_balance_wk(
                                             OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                             DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                             ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                             DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                             SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                             SUPPLY_SUB_DATE        , BM_ITEM_NO             ,
                                             PO_NO                  , PO_LINE_NO             , WORK_ORDER             ,
                                             MPS_STATUS             , LEVEL_NO
                                        ) VALUES (
                                             sysdate                , DMD_REC.SECTION_CODE   , DMD_REC.ITEM_NO        ,
                                             DMD_REC.DEMAND_NO      , SPY_REC.SUPPLY_NO      , 'A'                    ,
                                             wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                             DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                             SPY_REC.SUPPLY_TYPE    , SPY_REC.SUPPLY_PRIORITY, SPY_REC.SUPPLY_DATE    ,
                                             SPY_REC.SUPPLY_SUB_DATE, DMD_REC.BM_ITEM_NO     ,
                                             DMD_REC.PO_NO          , DMD_REC.PO_LINE_NO     , DMD_REC.WORK_ORDER     ,
                                             DMD_REC.MPS_STATUS     , DMD_REC.LEVEL_NO
                                        ) ;

                                        If wk_supply_qty = 0 Then
                                                delete t_mrp_supply_wk where current of C_SPY ;
                                        Else
                                                update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY ;
                                        End If ;

                                ElsIf SPY_REC.SUPPLY_TYPE = 'M' Then
                                        wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                        If wk_supply_remain >= 0 Then
                                            wk_supply_qty   := wk_supply_remain ;
                                            wk_allocate_qty := wk_demand_qty ;
                                            wk_demand_qty   := 0 ;
                                        Else
                                            wk_demand_qty   := wk_supply_remain * -1 ;
                                            wk_allocate_qty := wk_supply_qty ;
                                            wk_supply_qty   := 0 ;
                                        End If ;

                                        INSERT INTO t_mrp_balance_wk(
                                             OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                             DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                             ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                             DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                             SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                             SUPPLY_SUB_DATE        , BM_ITEM_NO             ,
                                             PO_NO                  , PO_LINE_NO             , WORK_ORDER             ,
                                             MPS_STATUS             , LEVEL_NO
                                        ) VALUES (
                                             sysdate                , DMD_REC.SECTION_CODE   , DMD_REC.ITEM_NO        ,
                                             DMD_REC.DEMAND_NO      , SPY_REC.SUPPLY_NO      , 'A'                    ,
                                             wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                             DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                             SPY_REC.SUPPLY_TYPE    , SPY_REC.SUPPLY_PRIORITY, SPY_REC.SUPPLY_DATE    ,
                                             SPY_REC.SUPPLY_SUB_DATE, DMD_REC.BM_ITEM_NO     ,
                                             DMD_REC.PO_NO          , DMD_REC.PO_LINE_NO     , DMD_REC.WORK_ORDER     ,
                                             DMD_REC.MPS_STATUS     , DMD_REC.LEVEL_NO
                                        ) ;

                                        If wk_supply_qty = 0 Then
                                                delete t_mrp_supply_wk where current of C_SPY ;
                                        Else
                                                update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY ;
                                        End If ;

                                ElsIf SPY_REC.SUPPLY_TYPE = 'R' Then
                                        wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                        If wk_supply_remain >= 0 Then
                                            wk_supply_qty   := wk_supply_remain ;
                                            wk_allocate_qty := wk_demand_qty ;
                                            wk_demand_qty   := 0 ;
                                        Else
                                            wk_demand_qty   := wk_supply_remain * -1 ;
                                            wk_allocate_qty := wk_supply_qty ;
                                            wk_supply_qty   := 0 ;
                                        End If ;

                                        INSERT INTO t_mrp_balance_wk(
                                             OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                             DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                             ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                             DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                             SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                             SUPPLY_SUB_DATE        , BM_ITEM_NO             ,
                                             PO_NO                  , PO_LINE_NO             , WORK_ORDER             ,
                                             MPS_STATUS             , LEVEL_NO
                                        ) VALUES (
                                             sysdate                , DMD_REC.SECTION_CODE   , DMD_REC.ITEM_NO        ,
                                             DMD_REC.DEMAND_NO      , SPY_REC.SUPPLY_NO      , 'A'                    ,
                                             wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                             DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                             SPY_REC.SUPPLY_TYPE    , SPY_REC.SUPPLY_PRIORITY, SPY_REC.SUPPLY_DATE    ,
                                             SPY_REC.SUPPLY_SUB_DATE, DMD_REC.BM_ITEM_NO     ,
                                             DMD_REC.PO_NO          , DMD_REC.PO_LINE_NO     , DMD_REC.WORK_ORDER     ,
                                             DMD_REC.MPS_STATUS     , DMD_REC.LEVEL_NO
                                        ) ;

                                        If wk_supply_qty = 0 Then
                                                delete t_mrp_supply_wk where current of C_SPY ;
                                        Else
                                                update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY ;
                                        End If ;

                                Else
                                    null ;
                                End If ;

                                If wk_demand_qty <=0 Then
                                     goto END_SUPPLY ;
                                End If ;

                            end loop supply ;
                            <<END_SUPPLY>>
                        close C_SPY ;


                        /* ????????? */
                        If wk_demand_qty <= 0 Then
                           goto END_DEMAND ;
                        End If ;
                      
/*
2007/07/19 Y.Hagai ???????
?????????????????????????????
???????????????????????????????
????
*/
                       wk_item_no := DMD_REC.ITEM_NO;

                       If CNF2_REC.CONFIG_FLAG = 1 Then
                          open C_RNC(DMD_REC.BM_ITEM_NO,DMD_REC.ITEM_NO) ;
                               RNC_REC := null ;
                               fetch C_RNC into RNC_REC ;
                          close C_RNC ;
                          if  RNC_REC.NEW_ITEM_NO is not null then
--    dbms_output.put_line(DMD_REC.ITEM_NO || '='|| RNC_REC.NEW_ITEM_NO ||'='||wk_demand_qty);
 
                              wk_item_no :=  RNC_REC.NEW_ITEM_NO;

                             /*???? ??2 ????? */
                              open C_SPY3(RNC_REC.NEW_ITEM_NO, ICNT_REC.SECTION_CODE);
                              loop
                                  fetch C_SPY3 into SPY3_REC ;
                                  exit when C_SPY3%notfound or C_SPY3%notfound is null;      

                                      wk_supply_qty    := SPY3_REC.SUPPLY_QTY ;   --??????      
                                      wk_supply_remain := SPY3_REC.SUPPLY_QTY ;   --?????

                                      /* ??????????? */
                                      -- ????????
                                      If SPY3_REC.SUPPLY_TYPE = 'X' Then
                                          If DMD_REC.DEMAND_ST = SPY3_REC.SUPPLY_ST Then
                                              wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                              If wk_supply_remain >= 0 Then
                                                  wk_supply_qty   := wk_supply_remain ;
                                                  wk_allocate_qty := wk_demand_qty ;
                                                  wk_demand_qty   := 0 ;
                                              Else
                                                  wk_demand_qty   := wk_supply_remain * -1 ;
                                                  wk_allocate_qty := wk_supply_qty ;
                                                  wk_supply_qty   := 0 ;
                                              End If ;
--    dbms_output.put_line(SPY3_REC.SUPPLY_TYPE ||'='||wk_supply_qty||'='|| wk_supply_remain||'='||wk_demand_qty);

                                              INSERT INTO t_mrp_balance_wk(
                                                   OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                                   DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                                   ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                                   DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                                   SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                                   SUPPLY_SUB_DATE        , BM_ITEM_NO             ,
                                                   PO_NO                  , PO_LINE_NO             , WORK_ORDER             ,
                                                   MPS_STATUS             , LEVEL_NO

                                              ) VALUES (
                                                   sysdate                , DMD_REC.SECTION_CODE   , RNC_REC.NEW_ITEM_NO     ,
                                                   DMD_REC.DEMAND_NO      , SPY3_REC.SUPPLY_NO      , 'A'                    ,
                                                   wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE     ,
                                                   DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE ,
                                                   SPY3_REC.SUPPLY_TYPE    , SPY3_REC.SUPPLY_PRIORITY, SPY3_REC.SUPPLY_DATE  ,
                                                   SPY3_REC.SUPPLY_SUB_DATE, DMD_REC.BM_ITEM_NO    ,
                                                   DMD_REC.PO_NO           , DMD_REC.PO_LINE_NO    , DMD_REC.WORK_ORDER      ,
                                                   DMD_REC.MPS_STATUS     , DMD_REC.LEVEL_NO
                                              ) ;

                                              If wk_supply_qty = 0 Then
                                                      delete t_mrp_supply_wk where current of C_SPY3 ;
                                              Else
                                                      update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY3 ;
                                              End If ;
                                          End If ;

                                      ElsIf SPY3_REC.SUPPLY_TYPE = 'W' Then
                                            wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                              If wk_supply_remain >= 0 Then
                                                  wk_supply_qty   := wk_supply_remain ;
                                                  wk_allocate_qty := wk_demand_qty ;
                                                  wk_demand_qty   := 0 ;
                                              Else
                                                  wk_demand_qty   := wk_supply_remain * -1 ;
                                                  wk_allocate_qty := wk_supply_qty ;
                                                  wk_supply_qty   := 0 ;
                                              End If ;
--    dbms_output.put_line(SPY3_REC.SUPPLY_TYPE ||'='||wk_supply_qty||'='|| wk_supply_remain||'='||wk_demand_qty);

                                              INSERT INTO t_mrp_balance_wk(
                                                   OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                                   DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                                   ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                                   DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                                   SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                                   SUPPLY_SUB_DATE        , BM_ITEM_NO             ,
                                                   PO_NO                  , PO_LINE_NO             , WORK_ORDER             ,
                                                   MPS_STATUS             , LEVEL_NO
                                              ) VALUES (
                                                   sysdate                , DMD_REC.SECTION_CODE   , RNC_REC.NEW_ITEM_NO     ,
                                                   DMD_REC.DEMAND_NO      , SPY3_REC.SUPPLY_NO      , 'A'                    ,
                                                   wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE     ,
                                                   DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE ,
                                                   SPY3_REC.SUPPLY_TYPE    , SPY3_REC.SUPPLY_PRIORITY, SPY3_REC.SUPPLY_DATE  ,
                                                   SPY3_REC.SUPPLY_SUB_DATE, DMD_REC.BM_ITEM_NO    ,
                                                   DMD_REC.PO_NO          , DMD_REC.PO_LINE_NO     , DMD_REC.WORK_ORDER      ,
                                                   DMD_REC.MPS_STATUS     , DMD_REC.LEVEL_NO
                                              ) ;

                                              If wk_supply_qty = 0 Then
                                                      delete t_mrp_supply_wk where current of C_SPY3 ;
                                              Else
                                                      update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY3 ;
                                              End If ;

                                      ElsIf SPY3_REC.SUPPLY_TYPE = 'P' Then
                                              wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                              If wk_supply_remain >= 0 Then
                                                  wk_supply_qty   := wk_supply_remain ;
                                                  wk_allocate_qty := wk_demand_qty ;
                                                  wk_demand_qty   := 0 ;
                                              Else
                                                  wk_demand_qty   := wk_supply_remain * -1 ;
                                                  wk_allocate_qty := wk_supply_qty ;
                                                  wk_supply_qty   := 0 ;
                                              End If ;

--    dbms_output.put_line(SPY3_REC.SUPPLY_TYPE ||'='||wk_supply_qty||'='|| wk_supply_remain||'='||wk_demand_qty);
                                              INSERT INTO t_mrp_balance_wk(
                                                   OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                                   DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                                   ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                                   DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                                   SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                                   SUPPLY_SUB_DATE        , BM_ITEM_NO             ,
                                                   PO_NO                  , PO_LINE_NO             , WORK_ORDER             ,
                                                   MPS_STATUS             , LEVEL_NO
                                              ) VALUES (
                                                   sysdate                , DMD_REC.SECTION_CODE   , RNC_REC.NEW_ITEM_NO    ,
                                                   DMD_REC.DEMAND_NO      , SPY3_REC.SUPPLY_NO      , 'A'                   ,
                                                   wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                                   DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                                   SPY3_REC.SUPPLY_TYPE    , SPY3_REC.SUPPLY_PRIORITY, SPY3_REC.SUPPLY_DATE ,
                                                   SPY3_REC.SUPPLY_SUB_DATE,DMD_REC.BM_ITEM_NO     ,
                                                   DMD_REC.PO_NO          , DMD_REC.PO_LINE_NO     , DMD_REC.WORK_ORDER     ,
                                                   DMD_REC.MPS_STATUS     , DMD_REC.LEVEL_NO
                                              ) ;

                                              If wk_supply_qty = 0 Then
                                                      delete t_mrp_supply_wk where current of C_SPY3 ;
                                              Else
                                                      update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY3 ;
                                              End If ;

                                            ElsIf SPY3_REC.SUPPLY_TYPE = 'M' Then
                                             wk_supply_remain := wk_supply_remain - wk_demand_qty ;      

                                              If wk_supply_remain >= 0 Then
                                                  wk_supply_qty   := wk_supply_remain ;
                                                  wk_allocate_qty := wk_demand_qty ;
                                                  wk_demand_qty   := 0 ;
                                              Else
                                                  wk_demand_qty   := wk_supply_remain * -1 ;
                                                  wk_allocate_qty := wk_supply_qty ;
                                                  wk_supply_qty   := 0 ;
                                              End If ;

--    dbms_output.put_line(SPY3_REC.SUPPLY_TYPE ||'='||wk_supply_qty||'='|| wk_supply_remain||'='||wk_demand_qty);
                                              INSERT INTO t_mrp_balance_wk(
                                                   OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                                   DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                                   ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                                   DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                                   SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                                   SUPPLY_SUB_DATE        , BM_ITEM_NO             ,
                                                   PO_NO                  , PO_LINE_NO             , WORK_ORDER             ,
                                                   MPS_STATUS             , LEVEL_NO
                                              ) VALUES (
                                                   sysdate                , DMD_REC.SECTION_CODE   , RNC_REC.NEW_ITEM_NO    ,
                                                   DMD_REC.DEMAND_NO      , SPY3_REC.SUPPLY_NO      , 'A'                   ,
                                                   wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                                   DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                                   SPY3_REC.SUPPLY_TYPE    , SPY3_REC.SUPPLY_PRIORITY, SPY3_REC.SUPPLY_DATE ,
                                                   SPY3_REC.SUPPLY_SUB_DATE, DMD_REC.BM_ITEM_NO    ,
                                                   DMD_REC.PO_NO          , DMD_REC.PO_LINE_NO     , DMD_REC.WORK_ORDER     ,
                                                   DMD_REC.MPS_STATUS     , DMD_REC.LEVEL_NO
                                              ) ;

                                              If wk_supply_qty = 0 Then
                                                      delete t_mrp_supply_wk where current of C_SPY3 ;
                                              Else
                                                      update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY3 ;
                                              End If ;

                                      ElsIf SPY3_REC.SUPPLY_TYPE = 'R' Then
                                             wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                              If wk_supply_remain >= 0 Then
                                                  wk_supply_qty   := wk_supply_remain ;
                                                  wk_allocate_qty := wk_demand_qty ;
                                                  wk_demand_qty   := 0 ;
                                              Else
                                                  wk_demand_qty   := wk_supply_remain * -1 ;
                                                  wk_allocate_qty := wk_supply_qty ;
                                                  wk_supply_qty   := 0 ;
                                              End If ;

--    dbms_output.put_line(SPY3_REC.SUPPLY_TYPE ||'='||wk_supply_qty||'='|| wk_supply_remain||'='||wk_demand_qty);
                                              INSERT INTO t_mrp_balance_wk(
                                                   OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                                   DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                                   ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                                   DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                                   SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                                   SUPPLY_SUB_DATE        , BM_ITEM_NO             ,
                                                   PO_NO                  , PO_LINE_NO             , WORK_ORDER             ,
                                                   MPS_STATUS             , LEVEL_NO
                                              ) VALUES (
                                                   sysdate                , DMD_REC.SECTION_CODE   , RNC_REC.NEW_ITEM_NO    ,
                                                   DMD_REC.DEMAND_NO      , SPY3_REC.SUPPLY_NO      , 'A'                   ,
                                                   wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                                   DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                                   SPY3_REC.SUPPLY_TYPE    , SPY3_REC.SUPPLY_PRIORITY, SPY3_REC.SUPPLY_DATE ,
                                                   SPY3_REC.SUPPLY_SUB_DATE, DMD_REC.BM_ITEM_NO    ,
                                                   DMD_REC.PO_NO          , DMD_REC.PO_LINE_NO     , DMD_REC.WORK_ORDER     ,
                                                   DMD_REC.MPS_STATUS     , DMD_REC.LEVEL_NO
                                              ) ;

                                              If wk_supply_qty = 0 Then
                                                      delete t_mrp_supply_wk where current of C_SPY3 ;
                                              Else
                                                      update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY3 ;
                                              End If ;

                                      Else
                                          null ;
                                      End If ;

                                      If wk_demand_qty <=0 Then
                                           goto END_SUPPLY3 ;
                                      End If ;

                                  end loop supply3 ;
                                  <<END_SUPPLY3>>
                              close C_SPY3 ;

                              /* ????????? */
                              If wk_demand_qty <= 0 Then
                                 goto END_DEMAND ;
                              End If ;
                          End If ;
                       End If ;

/*
2007/07/19 Y.Hagai ???????
????
*/

 

                        /* ???????? */
                          INSERT INTO t_mrp_balance_wk(
                               OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                               DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                               ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                               DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                               SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                               SUPPLY_SUB_DATE        , BM_ITEM_NO             ,
                               PO_NO                  , PO_LINE_NO             , WORK_ORDER             ,
                               MPS_STATUS             , LEVEL_NO
                          ) VALUES (
--2007/07/26 Y.Hagai ????? ???????wk_item_no???????????
--                               sysdate                , DMD_REC.SECTION_CODE   , DMD_REC.ITEM_NO        ,
                               sysdate                , DMD_REC.SECTION_CODE   , wk_item_no             ,
                               DMD_REC.DEMAND_NO      , null                   , 'A'                    ,
                               wk_demand_qty          , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                               DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                               null                   , null                   , null                   ,
                               null                   ,DMD_REC.BM_ITEM_NO      ,
                               DMD_REC.PO_NO          , DMD_REC.PO_LINE_NO     , DMD_REC.WORK_ORDER     ,
                               DMD_REC.MPS_STATUS     , DMD_REC.LEVEL_NO
                          ) ;

                        /*  ?????????????????????????????????????????????? */
                         select max(level_no) into wk_level_no from leveld
--2007/07/26 Y.Hagai ????? ???????wk_item_no???????????
--                         where item_no = DMD_REC.ITEM_NO ;
                         where item_no = wk_item_no ;
                            if wk_level_no is null or DMD_REC.DEMAND_TYPE = 'O' Then
                                goto END_DEMAND ;
                            end If ;

                        /* ???????????? */
--2007/07/26 Y.Hagai ????? ???????wk_item_no???????????
--                         open C_ITM(DMD_REC.ITEM_NO) ;
                         open C_ITM(wk_item_no) ;
                            UITM_REC :=null ;
                            fetch C_ITM into UITM_REC ;
                         close C_ITM ;

                        /* ????? */
--2007/07/26 Y.Hagai ????? ???????wk_item_no???????????
--                          open C_STR(DMD_REC.ITEM_NO,wk_level_no) ;
                          open C_STR(wk_item_no,wk_level_no) ;
                              loop
                                 fetch C_STR into STR_REC ;
                                 exit when C_STR%notfound or C_STR%notfound is null;

                                /* ??????????? */
                                 open C_ITM(STR_REC.LOWER_ITEM_NO) ;
                                    LITM_REC :=null ;
                                    fetch C_ITM into LITM_REC ;
                                 close C_ITM ;

                                    /* ????'D'???????????????????? */
                                     --If LITM_REC.ISSUE_POLICY <> 'D' Then
                                     --    goto STR_LOOP_END ;
                                     --End If ;

                                    /* ??? ????????? */
                                     wk_req_qty := round(wk_demand_qty *
                                                        STR_REC.QUANTITY / nvl(STR_REC.QUANTITY_BASE,1) *
                                                        (1 + (nvl(STR_REC.FAILURE_RATE,0)/100)
                                                           + (nvl(LITM_REC.MANUFACT_FAIL_RATE,0)/100)
                                                           + (nvl(UITM_REC.MANUFACT_FAIL_RATE,0)/100))
                                                        ,4) ;
                                     If LITM_REC.UNIT_STOCK_RATE != LITM_REC.unit_engineer_rate Then
                                        If LITM_REC.UNIT_STOCK_RATE = 0 then 
                                           LITM_REC.UNIT_STOCK_RATE := 1; 
                                        End if;
                                        If LITM_REC.unit_engineer_rate = 0 then 
                                           LITM_REC.unit_engineer_rate := 1; 
                                        End if;
                                        wk_req_qty := wk_req_qty * nvl(LITM_REC.UNIT_STOCK_RATE,1) / nvl(LITM_REC.unit_engineer_rate,1) ;
                                     End If ;

                                    /* ??????? */
                                     wk_LT := nvl(UITM_REC.MANUFACT_LEADTIME,0) + nvl(UITM_REC.ADJUSTMENT_LEADTIME,0) + nvl(LITM_REC.ADJUSTMENT_LEADTIME,0) ;

                                   /* 2016/6/20 Y.Hagai ??????? */
--                                     wk_req_date := DMD_REC.DEMAND_DATE - wk_LT ;
                                     If CNF3_REC.CONFIG_FLAG = 1 Then
                                        wk_req_date := add_work_date(DMD_REC.DEMAND_DATE, wk_LT  * -1) ;
                                     else
                                        wk_req_date := DMD_REC.DEMAND_DATE - wk_LT ;
                                     End If ;


                                    /* ICONT ??????*/
                                     select count(*) into wk_count from t_mrp_itemcont
                                       where item_no = STR_REC.LOWER_ITEM_NO ;

                                     wk_LLC := get_llc(STR_REC.LOWER_ITEM_NO) ;
                                         if wk_count = 0 and wk_LLC > wk_level_now  Then
                                             insert into  t_mrp_itemcont(SECTION_CODE,ITEM_NO,LLC_CODE) VALUES(DMD_REC.SECTION_CODE,STR_REC.LOWER_ITEM_NO,wk_LLC) ;
                                         end If ;

--                                  If DMD_REC.DEMAND_TYPE ='Y' and  DMD_REC.DEMAND_PRIORITY ='P' Then

                                    INSERT INTO t_mrp_demand_wk(
                                          OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                          DEMAND_ST              , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                          DEMAND_NO              , DEMAND_QTY             , DEMAND_TYPE            ,
                                          DEMAND_PRIORITY        , BM_ITEM_NO             ,
                                          PO_NO                  , PO_LINE_NO             , WORK_ORDER             ,
                                          MPS_STATUS             , LEVEL_NO
                                     ) VALUES (
                                          sysdate                , DMD_REC.SECTION_CODE   , STR_REC.LOWER_ITEM_NO  ,
                                          DMD_REC.DEMAND_ST      , wk_req_date            , wk_req_date            ,
                                          DMD_REC.DEMAND_NO      , wk_req_qty             , 'Y'                    ,
/* 2016/6/20 Y.Hagai ????upper_item_no???????? */
--                                          'C'                    , STR_REC.UPPER_ITEM_NO  ,
                                          'C'                    , wk_item_no             ,
                                          DMD_REC.PO_NO          , DMD_REC.PO_LINE_NO     , DMD_REC.WORK_ORDER     ,
/* 2016/6/20 Y.Hagai ????level_no???????? */
--                                          DMD_REC.MPS_STATUS     , DMD_REC.LEVEL_NO
                                          DMD_REC.MPS_STATUS     , wk_level_no
                                     ) ;
--                                    End If ;

                                 <<STR_LOOP_END>>
                                  null ;
                              end loop ;
                          close C_STR ;

                   <<END_DEMAND>>
                    null ;
               end loop demand ;
               close C_DMD ;

               /* ???????? */
               delete from  t_mrp_itemcont where current of C_ICNT ;

          end loop icnt ;
          close C_ICNT ;

     end loop main ;

     /* ??????? */
     open C_SPY2 ;
     loop
     fetch C_SPY2 into SPY_REC ;
     exit when C_SPY2%notfound or C_SPY2%notfound is null;

         INSERT INTO t_mrp_balance_wk(
              OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
              DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
              ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
              DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
              SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
              SUPPLY_SUB_DATE        , BM_ITEM_NO 

         ) VALUES (
              sysdate                , SPY_REC.SECTION_CODE   , SPY_REC.ITEM_NO       ,
              null                   , SPY_REC.SUPPLY_NO      , 'A'                    ,
              SPY_REC.SUPPLY_QTY     , SPY_REC.SUPPLY_ST      , null                   ,
              null                   , null                   , null                   ,
              SPY_REC.SUPPLY_TYPE    , SPY_REC.SUPPLY_PRIORITY, SPY_REC.SUPPLY_DATE    ,
              SPY_REC.SUPPLY_SUB_DATE,NULL
         ) ;
     end loop ;
     close C_SPY2 ;

     /* ????????BALANCE??? */
     open C_BAL_W ;
     loop
     fetch C_BAL_W into BWK_SECTION_CODE    ,
                        BWK_ITEM_NO         ,
                        BWK_DEMAND_NUMBER   ,
                        BWK_SUPPLY_NUMBER   ,
                        BWK_ALLOCATE_STATUS ,
                        BWK_ALLOCATE_QTY    ,
                        BWK_ALLOCATE_ST     ,
                        BWK_DEMAND_TYPE     ,
                        BWK_DEMAND_PRIORITY ,
                        BWK_DEMAND_DATE     ,
                        BWK_DEMAND_SUB_DATE ,
                        BWK_SUPPLY_TYPE     ,
                        BWK_SUPPLY_PRIORITY ,
                        BWK_SUPPLY_DATE     ,
                        BWK_SUPPLY_SUB_DATE ,
                        BWK_BM_ITEM_NO      ,
                        BWK_PO_NO           ,
                        BWK_PO_LINE_NO      ,
                        BWK_WORK_ORDER      ,
                        BWK_MPS_STATUS      ,
                        BWK_LEVEL_NO        ;

         exit when C_BAL_W%notfound or C_BAL_W%notfound is null;

         BWK_SEQ := BWK_SEQ + 1 ;

         If BWK_SUPPLY_TYPE = 'X' Then
               BWK_SUPPLY_TYPE := 'H' ;
         Elsif BWK_SUPPLY_TYPE = 'W' Then
               BWK_SUPPLY_TYPE := 'Z' ;
         End If ;

         insert into balance_FI(
              OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
              DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
              ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
              DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
              SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
              SUPPLY_SUB_DATE        , SEQ                    , BM_ITEM_NO             ,
              PO_NO                  , PO_LINE_NO             , WORK_ORDER             ,
              MPS_STATUS             , LEVEL_NO
         ) values (
              SYSDATE                , BWK_SECTION_CODE       , BWK_ITEM_NO                ,
              BWK_DEMAND_NUMBER      , BWK_SUPPLY_NUMBER      , BWK_ALLOCATE_STATUS        ,
              BWK_ALLOCATE_QTY       , BWK_ALLOCATE_ST        , BWK_DEMAND_TYPE            ,
              BWK_DEMAND_PRIORITY    , BWK_DEMAND_DATE        , BWK_DEMAND_SUB_DATE        ,
              BWK_SUPPLY_TYPE        , BWK_SUPPLY_PRIORITY    , BWK_SUPPLY_DATE            ,
              BWK_SUPPLY_SUB_DATE    , BWK_SEQ                , BWK_BM_ITEM_NO             ,
              BWK_PO_NO              , BWK_PO_LINE_NO         , BWK_WORK_ORDER             ,
              BWK_MPS_STATUS         , BWK_LEVEL_NO
         ) ;

     end loop ;
     close C_BAL_W ;

     update balance_FI b
        set b.section_code  = (select section_code from item where item_no = b.item_no)
       where b.item_no in (select item_no from item);

  end ;
end T_MRP035B ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."T_MRP040" 
as
begin
   declare
    ICNT_REC  t_mrp_itemcont%rowtype ;
    DMD_REC   t_mrp_demand%rowtype ;
    SPY_REC   t_mrp_supply%rowtype ;
    UITM_REC  item%rowtype ;
    LITM_REC  item%rowtype ;
    STR_REC   structure%rowtype ;
    SPY2_REC  t_mrp_supply%rowtype ;
    CNF_REC   configuration%rowtype ;

    wk_level_now  number(3);
    wk_level_no   number(3);
    wk_llc_cnt    number(5);


    wk_supply_qty     t_mrp_supply.supply_qty%type;
    wk_supply_remain  t_mrp_supply.supply_qty%type;
    wk_demand_qty     t_mrp_demand.demand_qty%type;
    wk_allocate_qty   t_mrp_demand.demand_qty%type;

    wk_req_qty   t_mrp_demand.demand_qty%type;
    wk_LT        number(3) ;
    wk_req_date  DATE ;

    wk_count  number(5) ;
    wk_LLC  number(5) ;

    /* ???????? */
     cursor C_ICNT(PARAM1 in number)
      is
       select * from t_mrp_itemcont
       where llc_code = PARAM1
       order by item_no,section_code
       for update
      ;

    /* ??????? */
     cursor C_DMD(PARAM1 in number, PARAM2 in varchar2)
      is
       select  *  from t_mrp_demand_wk
       where item_no = PARAM1
--         and section_code = PARAM2
       order by demand_priority, demand_type, demand_date, demand_st, demand_no
      ;

    /* ???????(???) */
     cursor C_SPY(PARAM1 in number, PARAM2 in varchar2)
      is
       select  *  from t_mrp_supply_wk
       where item_no = PARAM1
--         and section_code = PARAM2
--2007/06/25 Y.Hagai
--     order by supply_type desc, supply_st, supply_date, supply_no
       order by supply_type desc, supply_st, supply_date, supply_no, section_code
       for update of supply_qty
      ;

    /* ??????? */
     cursor C_SPY2
      is
       select  *  from t_mrp_supply_wk
       order by supply_type desc, supply_st, supply_date, supply_no
       for update of supply_qty
      ;

    /* ??????? */
     cursor C_ITM(PARAM1 in number)
      is
       select  *  from item
       where item_no = PARAM1
      ;

    /* ???????? */
     cursor C_STR(PARAM1 in number,PARAM2 in number)
      is
       select  *  from structure
       where upper_item_no = PARAM1
         and level_no = PARAM2
         and quantity > 0
         and nvl(user_supply_flag,0) not in ('1','2','3')
         and nvl(subcon_supply_flag,0) not in ('3','4')
      ;

    /* ?????????? */
     cursor C_BAL_W
      is
         select
              SECTION_CODE           , ITEM_NO                ,
              DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
              SUM(ALLOCATE_QTY)      , ALLOCATE_ST            , DEMAND_TYPE            ,
              DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
              SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
              SUPPLY_SUB_DATE        , SUPPLY_ST
         from forecast_t_mrp_balance_wk
         where ALLOCATE_QTY > 0
         group by SECTION_CODE           , ITEM_NO                ,
                  DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                           ALLOCATE_ST            , DEMAND_TYPE            ,
                  DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                  SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                  SUPPLY_SUB_DATE        , SUPPLY_ST
         order by ITEM_NO, nvl(SUPPLY_TYPE,'0') desc, DEMAND_DATE
         ;

    /* ?????????? ?????????????*/
     cursor C_BAL_W2
      is
         select
              SECTION_CODE           , ITEM_NO                ,
              DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
              SUM(ALLOCATE_QTY)      , ALLOCATE_ST            , DEMAND_TYPE            ,
              DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
              SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
              SUPPLY_SUB_DATE        , SUPPLY_ST
         from forecast_t_mrp_balance_wk
--         where ALLOCATE_QTY > 0
         group by SECTION_CODE           , ITEM_NO                ,
                  DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                           ALLOCATE_ST            , DEMAND_TYPE            ,
                  DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                  SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                  SUPPLY_SUB_DATE        , SUPPLY_ST
         order by ITEM_NO, nvl(SUPPLY_TYPE,'0') desc, DEMAND_DATE
         ;
              BWK_SECTION_CODE       forecast_balance.SECTION_CODE%type       ;
              BWK_ITEM_NO            forecast_balance.ITEM_NO%type            ;
              BWK_DEMAND_NUMBER      forecast_balance.DEMAND_NUMBER%type      ;
              BWK_SUPPLY_NUMBER      forecast_balance.SUPPLY_NUMBER%type      ;
              BWK_ALLOCATE_STATUS    forecast_balance.ALLOCATE_STATUS%type    ;
              BWK_ALLOCATE_QTY       forecast_balance.ALLOCATE_QTY%type       ;
              BWK_ALLOCATE_ST        forecast_balance.ALLOCATE_ST%type        ;
              BWK_DEMAND_TYPE        forecast_balance.DEMAND_TYPE%type        ;
              BWK_DEMAND_PRIORITY    forecast_balance.DEMAND_PRIORITY%type    ;
              BWK_DEMAND_DATE        forecast_balance.DEMAND_DATE%type        ;
              BWK_DEMAND_SUB_DATE    forecast_balance.DEMAND_SUB_DATE%type    ;
              BWK_SUPPLY_TYPE        forecast_balance.SUPPLY_TYPE%type        ;
              BWK_SUPPLY_PRIORITY    forecast_balance.SUPPLY_PRIORITY%type    ;
              BWK_SUPPLY_DATE        forecast_balance.SUPPLY_DATE%type        ;
              BWK_SUPPLY_SUB_DATE    forecast_balance.SUPPLY_SUB_DATE%type    ;
              BWK_SEQ                forecast_balance.SEQ%type := 0    ;
              BWK_SUPPLY_ST          forecast_balance.SUPPLY_ST%type    ;

    /* CONFIGURATION ?? */
    cursor C_CNF  is
     select * from CONFIGURATION where CONFIG_KEY = 'MRP_MINUS_PCINV';

   begin
--????
       delete from t_mrp_demand_wk  ;
       insert into t_mrp_demand_wk select * from t_mrp_demand  ;
       delete from t_mrp_supply_wk  ;
       insert into t_mrp_supply_wk select * from t_mrp_supply  ;

       --delete from forecast_balance ;
       delete from forecast_t_mrp_balance_wk ;
       delete from forecast_balance ;

    /* ??????? */
    open C_CNF;
        CNF_REC := null ;
        fetch C_CNF into CNF_REC ;
    close C_CNF;

--?????
    /* LEVEL_NO????????? */
<<MAIN>>
      wk_level_now := -1 ;
      loop
          select count(*) into wk_llc_cnt from t_mrp_itemcont;
          if wk_llc_cnt = 0 or wk_level_now >20 then
               exit;
          end if;

          wk_level_now := wk_level_now + 1;

         /*???????*/
          open C_ICNT(wk_level_now);
          ICNT_REC := null ;
          loop
              fetch C_ICNT into ICNT_REC ;
              exit when C_ICNT%notfound or C_ICNT%notfound is null;

              /*???? ?? */
               open C_DMD(ICNT_REC.ITEM_NO, ICNT_REC.SECTION_CODE);
               loop
                   fetch C_DMD into DMD_REC ;
                   exit when C_DMD%notfound or C_DMD%notfound is null;

                       wk_demand_qty := DMD_REC.DEMAND_QTY ;      --??????

                       /*???? ?? */
                        open C_SPY(ICNT_REC.ITEM_NO, ICNT_REC.SECTION_CODE);
                        loop
                            fetch C_SPY into SPY_REC ;
                            exit when C_SPY%notfound or C_SPY%notfound is null;

                                wk_supply_qty    := SPY_REC.SUPPLY_QTY ;   --??????
                                wk_supply_remain := SPY_REC.SUPPLY_QTY ;   --?????

                                /* ??????????? */
                                -- ????????
                                If SPY_REC.SUPPLY_TYPE = 'X' Then
                                    If DMD_REC.DEMAND_ST = SPY_REC.SUPPLY_ST Then
                                        wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                        If wk_supply_remain >= 0 Then
                                            wk_supply_qty   := wk_supply_remain ;
                                            wk_allocate_qty := wk_demand_qty ;
                                            wk_demand_qty   := 0 ;
                                        Else
                                            wk_demand_qty   := wk_supply_remain * -1 ;
                                            wk_allocate_qty := wk_supply_qty ;
                                            wk_supply_qty   := 0 ;
                                        End If ;

                                        INSERT INTO forecast_t_mrp_balance_wk(
                                             OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                             DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                             ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                             DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                             SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                             SUPPLY_SUB_DATE
                                        ) VALUES (
                                             sysdate                , DMD_REC.SECTION_CODE   , DMD_REC.ITEM_NO        ,
                                             DMD_REC.DEMAND_NO      , SPY_REC.SUPPLY_NO      , 'A'                    ,
                                             wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                             DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                             SPY_REC.SUPPLY_TYPE    , SPY_REC.SUPPLY_PRIORITY, SPY_REC.SUPPLY_DATE    ,
                                             SPY_REC.SUPPLY_SUB_DATE
                                        ) ;

                                        If wk_supply_qty = 0 Then
                                                delete t_mrp_supply_wk where current of C_SPY ;
                                        Else
                                                update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY ;
                                        End If ;
                                    End If ;

                                ElsIf SPY_REC.SUPPLY_TYPE = 'W' Then
                                        wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                        If wk_supply_remain >= 0 Then
                                            wk_supply_qty   := wk_supply_remain ;
                                            wk_allocate_qty := wk_demand_qty ;
                                            wk_demand_qty   := 0 ;
                                        Else
                                            wk_demand_qty   := wk_supply_remain * -1 ;
                                            wk_allocate_qty := wk_supply_qty ;
                                            wk_supply_qty   := 0 ;
                                        End If ;

                                        INSERT INTO forecast_t_mrp_balance_wk(
                                             OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                             DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                             ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                             DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                             SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                             SUPPLY_SUB_DATE
                                        ) VALUES (
                                             sysdate                , DMD_REC.SECTION_CODE   , DMD_REC.ITEM_NO        ,
                                             DMD_REC.DEMAND_NO      , SPY_REC.SUPPLY_NO      , 'A'                    ,
                                             wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                             DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                             SPY_REC.SUPPLY_TYPE    , SPY_REC.SUPPLY_PRIORITY, SPY_REC.SUPPLY_DATE    ,
                                             SPY_REC.SUPPLY_SUB_DATE
                                        ) ;

                                        If wk_supply_qty = 0 Then
                                                delete t_mrp_supply_wk where current of C_SPY ;
                                        Else
                                                update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY ;
                                        End If ;

                                ElsIf SPY_REC.SUPPLY_TYPE = 'P' Then
                                        wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                        If wk_supply_remain >= 0 Then
                                            wk_supply_qty   := wk_supply_remain ;
                                            wk_allocate_qty := wk_demand_qty ;
                                            wk_demand_qty   := 0 ;
                                        Else
                                            wk_demand_qty   := wk_supply_remain * -1 ;
                                            wk_allocate_qty := wk_supply_qty ;
                                            wk_supply_qty   := 0 ;
                                        End If ;

                                        INSERT INTO forecast_t_mrp_balance_wk(
                                             OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                             DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                             ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                             DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                             SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                             SUPPLY_SUB_DATE
                                        ) VALUES (
                                             sysdate                , DMD_REC.SECTION_CODE   , DMD_REC.ITEM_NO        ,
                                             DMD_REC.DEMAND_NO      , SPY_REC.SUPPLY_NO      , 'A'                    ,
                                             wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                             DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                             SPY_REC.SUPPLY_TYPE    , SPY_REC.SUPPLY_PRIORITY, SPY_REC.SUPPLY_DATE    ,
                                             SPY_REC.SUPPLY_SUB_DATE
                                        ) ;

                                        If wk_supply_qty = 0 Then
                                                delete t_mrp_supply_wk where current of C_SPY ;
                                        Else
                                                update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY ;
                                        End If ;

                                ElsIf SPY_REC.SUPPLY_TYPE = 'M' Then
                                        wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                        If wk_supply_remain >= 0 Then
                                            wk_supply_qty   := wk_supply_remain ;
                                            wk_allocate_qty := wk_demand_qty ;
                                            wk_demand_qty   := 0 ;
                                        Else
                                            wk_demand_qty   := wk_supply_remain * -1 ;
                                            wk_allocate_qty := wk_supply_qty ;
                                            wk_supply_qty   := 0 ;
                                        End If ;

                                        INSERT INTO forecast_t_mrp_balance_wk(
                                             OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                             DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                             ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                             DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                             SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                             SUPPLY_SUB_DATE
                                        ) VALUES (
                                             sysdate                , DMD_REC.SECTION_CODE   , DMD_REC.ITEM_NO        ,
                                             DMD_REC.DEMAND_NO      , SPY_REC.SUPPLY_NO      , 'A'                    ,
                                             wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                             DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                             SPY_REC.SUPPLY_TYPE    , SPY_REC.SUPPLY_PRIORITY, SPY_REC.SUPPLY_DATE    ,
                                             SPY_REC.SUPPLY_SUB_DATE
                                        ) ;

                                        If wk_supply_qty = 0 Then
                                                delete t_mrp_supply_wk where current of C_SPY ;
                                        Else
                                                update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY ;
                                        End If ;

                                ElsIf SPY_REC.SUPPLY_TYPE = 'R' Then
                                        wk_supply_remain := wk_supply_remain - wk_demand_qty ;

                                        If wk_supply_remain >= 0 Then
                                            wk_supply_qty   := wk_supply_remain ;
                                            wk_allocate_qty := wk_demand_qty ;
                                            wk_demand_qty   := 0 ;
                                        Else
                                            wk_demand_qty   := wk_supply_remain * -1 ;
                                            wk_allocate_qty := wk_supply_qty ;
                                            wk_supply_qty   := 0 ;
                                        End If ;

                                        INSERT INTO forecast_t_mrp_balance_wk(
                                             OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                             DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                                             ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                                             DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                             SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                                             SUPPLY_SUB_DATE        , SUPPLY_ST
                                        ) VALUES (
                                             sysdate                , DMD_REC.SECTION_CODE   , DMD_REC.ITEM_NO        ,
                                             DMD_REC.DEMAND_NO      , SPY_REC.SUPPLY_NO      , 'A'                    ,
                                             wk_allocate_qty        , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                                             DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                                             SPY_REC.SUPPLY_TYPE    , SPY_REC.SUPPLY_PRIORITY, SPY_REC.SUPPLY_DATE    ,
                                             SPY_REC.SUPPLY_SUB_DATE,SPY_REC.SUPPLY_ST
                                        ) ;

                                        If wk_supply_qty = 0 Then
                                                delete t_mrp_supply_wk where current of C_SPY ;
                                        Else
                                                update t_mrp_supply_wk set supply_qty = wk_supply_qty where current of C_SPY ;
                                        End If ;

                                Else
                                    null ;
                                End If ;

                                If wk_demand_qty <=0 Then
                                     goto END_SUPPLY ;
                                End If ;

                            end loop supply ;
                            <<END_SUPPLY>>
                        close C_SPY ;


                        /* ????????? */
                        If wk_demand_qty <= 0 Then
                           goto END_DEMAND ;
                        End If ;

                        /* ???????? */
                          INSERT INTO forecast_t_mrp_balance_wk(
                               OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                               DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                               ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                               DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                               SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                               SUPPLY_SUB_DATE
                          ) VALUES (
                               sysdate                , DMD_REC.SECTION_CODE   , DMD_REC.ITEM_NO        ,
                               DMD_REC.DEMAND_NO      , null                   , 'A'                    ,
                               wk_demand_qty          , DMD_REC.DEMAND_ST      , DMD_REC.DEMAND_TYPE    ,
                               DMD_REC.DEMAND_PRIORITY, DMD_REC.DEMAND_DATE    , DMD_REC.DEMAND_SUB_DATE,
                               null                   , null                   , null                   ,
                               null
                          ) ;

                        /*  ?????????????????????????????????????????????? */
                         select max(level_no) into wk_level_no from leveld
                         where item_no = DMD_REC.ITEM_NO ;
                            if wk_level_no is null or DMD_REC.DEMAND_TYPE = 'O'  or DMD_REC.DEMAND_TYPE = 'F' Then
                                goto END_DEMAND ;
                            end If ;

                        /* ???????????? */
                         open C_ITM(DMD_REC.ITEM_NO) ;
                            UITM_REC :=null ;
                            fetch C_ITM into UITM_REC ;
                         close C_ITM ;

                        /* ????? */
                          open C_STR(DMD_REC.ITEM_NO,wk_level_no) ;
                              loop
                                 fetch C_STR into STR_REC ;
                                 exit when C_STR%notfound or C_STR%notfound is null;

                                /* ??????????? */
                                 open C_ITM(STR_REC.LOWER_ITEM_NO) ;
                                    LITM_REC :=null ;
                                    fetch C_ITM into LITM_REC ;
                                 close C_ITM ;

                                    /* ????'D'???????????????????? */
                                     --If LITM_REC.ISSUE_POLICY <> 'D' Then
                                     --    goto STR_LOOP_END ;
                                     --End If ;

                                    /* ??? ????????? */
                                     wk_req_qty := round(wk_demand_qty *
                                                        STR_REC.QUANTITY / nvl(STR_REC.QUANTITY_BASE,1) *
                                                        (1 + (nvl(STR_REC.FAILURE_RATE,0)/100)
                                                           + (nvl(LITM_REC.MANUFACT_FAIL_RATE,0)/100)
                                                           + (nvl(UITM_REC.MANUFACT_FAIL_RATE,0)/100))
                                                        ,4) ;
                                     If LITM_REC.UNIT_STOCK_RATE != LITM_REC.unit_engineer_rate Then
                                        wk_req_qty := wk_req_qty * nvl(LITM_REC.UNIT_STOCK_RATE,1) / nvl(LITM_REC.unit_engineer_rate,1) ;
                                     End If ;

                                    /* ??????? */
                                     wk_LT := nvl(UITM_REC.MANUFACT_LEADTIME,0) + nvl(UITM_REC.ADJUSTMENT_LEADTIME,0) + nvl(LITM_REC.ADJUSTMENT_LEADTIME,0) ;
                                     wk_req_date := DMD_REC.DEMAND_DATE - wk_LT ;

                                    /* ICONT ??????*/
                                     select count(*) into wk_count from t_mrp_itemcont
                                       where item_no = STR_REC.LOWER_ITEM_NO ;

                                     wk_LLC := get_llc(STR_REC.LOWER_ITEM_NO) ;
                                         if wk_count = 0 and wk_LLC > wk_level_now  Then
                                             insert into  t_mrp_itemcont(SECTION_CODE,ITEM_NO,LLC_CODE) VALUES(DMD_REC.SECTION_CODE,STR_REC.LOWER_ITEM_NO,wk_LLC) ;
                                         end If ;

                                  If DMD_REC.DEMAND_TYPE ='Y' or  DMD_REC.DEMAND_TYPE ='S' Then
                                     INSERT INTO t_mrp_demand_wk(
                                          OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                                          DEMAND_ST              , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                                          DEMAND_NO              , DEMAND_QTY             , DEMAND_TYPE            ,
                                          DEMAND_PRIORITY
                                     ) VALUES (
                                          sysdate                , DMD_REC.SECTION_CODE   , STR_REC.LOWER_ITEM_NO  ,
                                          DMD_REC.DEMAND_ST      , wk_req_date            , wk_req_date                   ,
                                          DMD_REC.DEMAND_NO      , wk_req_qty             , 'Y'                    ,
                                          'C'
                                     ) ;
                                    End If ;

                                 <<STR_LOOP_END>>
                                  null ;
                              end loop ;
                          close C_STR ;

                   <<END_DEMAND>>
                    null ;
               end loop demand ;
               close C_DMD ;

               /* ???????? */
               delete from  t_mrp_itemcont where current of C_ICNT ;

          end loop icnt ;
          close C_ICNT ;

     end loop main ;

     /* ??????? */
     open C_SPY2 ;
     loop
     fetch C_SPY2 into SPY_REC ;
     exit when C_SPY2%notfound or C_SPY2%notfound is null;

         INSERT INTO forecast_t_mrp_balance_wk(
              OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
              DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
              ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
              DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
              SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
              SUPPLY_SUB_DATE        , SUPPLY_ST
         ) VALUES (
              sysdate                , SPY_REC.SECTION_CODE   , SPY_REC.ITEM_NO       ,
              null                   , SPY_REC.SUPPLY_NO      , 'A'                    ,
              SPY_REC.SUPPLY_QTY     , SPY_REC.SUPPLY_ST      , null                   ,
              null                   , null                   , null                   ,
              SPY_REC.SUPPLY_TYPE    , SPY_REC.SUPPLY_PRIORITY, SPY_REC.SUPPLY_DATE    ,
              SPY_REC.SUPPLY_SUB_DATE, SPY_REC.SUPPLY_ST  
         ) ;
     end loop ;
     close C_SPY2 ;

     /* ????????forecast_balance??? */
    /* ???? ??????*/
    if CNF_REC.CONFIG_FLAG = '1' Then
         open C_BAL_W2 ;
         loop
         fetch C_BAL_W2 into BWK_SECTION_CODE    ,
                             BWK_ITEM_NO         ,
                             BWK_DEMAND_NUMBER   ,
                             BWK_SUPPLY_NUMBER   ,
                             BWK_ALLOCATE_STATUS ,
                             BWK_ALLOCATE_QTY    ,
                             BWK_ALLOCATE_ST     ,
                             BWK_DEMAND_TYPE     ,
                             BWK_DEMAND_PRIORITY ,
                             BWK_DEMAND_DATE     ,
                             BWK_DEMAND_SUB_DATE ,
                             BWK_SUPPLY_TYPE     ,
                             BWK_SUPPLY_PRIORITY ,
                             BWK_SUPPLY_DATE     ,
                             BWK_SUPPLY_SUB_DATE ,
                             BWK_SUPPLY_ST ;

              exit when C_BAL_W2%notfound or C_BAL_W2%notfound is null;

              BWK_SEQ := BWK_SEQ + 1 ;

              If BWK_SUPPLY_TYPE = 'X' Then
                    BWK_SUPPLY_TYPE := 'H' ;
              Elsif BWK_SUPPLY_TYPE = 'W' Then
                    BWK_SUPPLY_TYPE := 'Z' ;
              End If ;

              insert into forecast_balance(
                   OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                   DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                   ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                   DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                   SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                   SUPPLY_SUB_DATE        , SEQ                    , SUPPLY_ST
              ) values (
                   SYSDATE                , BWK_SECTION_CODE       , BWK_ITEM_NO                ,
                   BWK_DEMAND_NUMBER      , BWK_SUPPLY_NUMBER      , BWK_ALLOCATE_STATUS        ,
                   BWK_ALLOCATE_QTY       , BWK_ALLOCATE_ST        , BWK_DEMAND_TYPE            ,
                   BWK_DEMAND_PRIORITY    , BWK_DEMAND_DATE        , BWK_DEMAND_SUB_DATE        ,
                   BWK_SUPPLY_TYPE        , BWK_SUPPLY_PRIORITY    , BWK_SUPPLY_DATE            ,
                   BWK_SUPPLY_SUB_DATE    , BWK_SEQ                , BWK_SUPPLY_ST              
              ) ;

          end loop ;
          close C_BAL_W2 ;
     else 	
          open C_BAL_W ;
          loop
          fetch C_BAL_W into BWK_SECTION_CODE    ,
                             BWK_ITEM_NO         ,
                             BWK_DEMAND_NUMBER   ,
                             BWK_SUPPLY_NUMBER   ,
                             BWK_ALLOCATE_STATUS ,
                             BWK_ALLOCATE_QTY    ,
                             BWK_ALLOCATE_ST     ,
                             BWK_DEMAND_TYPE     ,
                             BWK_DEMAND_PRIORITY ,
                             BWK_DEMAND_DATE     ,
                             BWK_DEMAND_SUB_DATE ,
                             BWK_SUPPLY_TYPE     ,
                             BWK_SUPPLY_PRIORITY ,
                             BWK_SUPPLY_DATE     ,
                             BWK_SUPPLY_SUB_DATE ,
                             BWK_SUPPLY_ST;

              exit when C_BAL_W%notfound or C_BAL_W%notfound is null;

              BWK_SEQ := BWK_SEQ + 1 ;

              If BWK_SUPPLY_TYPE = 'X' Then
                    BWK_SUPPLY_TYPE := 'H' ;
              Elsif BWK_SUPPLY_TYPE = 'W' Then
                    BWK_SUPPLY_TYPE := 'Z' ;
              End If ;

              insert into forecast_balance(
                   OPERATION_DATE         , SECTION_CODE           , ITEM_NO                ,
                   DEMAND_NUMBER          , SUPPLY_NUMBER          , ALLOCATE_STATUS        ,
                   ALLOCATE_QTY           , ALLOCATE_ST            , DEMAND_TYPE            ,
                   DEMAND_PRIORITY        , DEMAND_DATE            , DEMAND_SUB_DATE        ,
                   SUPPLY_TYPE            , SUPPLY_PRIORITY        , SUPPLY_DATE            ,
                   SUPPLY_SUB_DATE        , SEQ                    , SUPPLY_ST
              ) values (
                   SYSDATE                , BWK_SECTION_CODE       , BWK_ITEM_NO                ,
                   BWK_DEMAND_NUMBER      , BWK_SUPPLY_NUMBER      , BWK_ALLOCATE_STATUS        ,
                   BWK_ALLOCATE_QTY       , BWK_ALLOCATE_ST        , BWK_DEMAND_TYPE            ,
                   BWK_DEMAND_PRIORITY    , BWK_DEMAND_DATE        , BWK_DEMAND_SUB_DATE        ,
                   BWK_SUPPLY_TYPE        , BWK_SUPPLY_PRIORITY    , BWK_SUPPLY_DATE            ,
                   BWK_SUPPLY_SUB_DATE    , BWK_SEQ                , BWK_SUPPLY_ST
              ) ;

          end loop ;
          close C_BAL_W ;
          end if;
  end ;
end T_MRP040 ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."T_REQUIRED" (V_DECIMAL in number default 0)
as
begin
   declare
      ITM_REC item%rowtype ;
      BAL_REC balance%rowtype ;
      BAL_REC_OLD balance%rowtype ;
      TTL_REC required_title%rowtype ;
      IMK_REC itemmaker%rowtype ;
      COM_REC company%rowtype ;

      WK_ITEM_NO_OLD       balance.item_no%type  := 0 ;
      WK_SECTION_CODE_OLD  balance.section_code%type := 0 ;
      WK_COUNT  NUMBER(10) := 0 ;

      WK_THIS_INVENTORY     NUMBER(15,6);
      WK_PROCESS_QTY1       NUMBER(14,4);
      WK_PROCESS_QTY2       NUMBER(14,4);
      WK_INVENTORY_TOTAL    NUMBER(14,4);
      WK_REMAIN             NUMBER(14,4);
      i number(2) ;

    cursor C_BAL
     is
     select b.*
     from balance b,
          item i
     where b.item_no = i.item_no
       and nvl(i.stock_subject_code,0) < '5' and
           nvl(i.order_policy,0) != '2'
     order by b.item_no;

    cursor C_ITM (param in number)
     is
      select *
      from item
       where item_no = param;

    cursor C_TTL (param in number)
     is
      select *
      from required_title
       where sort = param;

    cursor C_IMK (param in number)
     is
      select *
      from itemmaker
      where item_no = param
      order by alter_procedure;

    cursor C_COM (param in number)
     is
      select *
      from company
      where company_code = param
      ;

     /* ??????? */
     type week_date_tab is table of varchar2(10)
        index by binary_integer;
     wk_week_date week_date_tab;
     /* ???13?? */
     type req_qty_tab is table of number(14,4)
        index by binary_integer;
     wk_req_qty req_qty_tab;
     /* ??13?? */
     type pur_qty_tab is table of number(14,4)
        index by binary_integer;
     wk_pur_qty pur_qty_tab;
     /* ???13?? */
     type remain_qty_tab is table of number(14,4)
        index by binary_integer;
     wk_remain_qty remain_qty_tab;
     /* ??13?? */
     type net_qty_tab is table of number(14,4)
        index by binary_integer;
     wk_net_qty net_qty_tab;

   --??????????????
   procedure head_rtn
   is
   begin
     /* ????????? */
      select nvl(trunc(sum(allocate_qty),V_DECIMAL),0) into  WK_THIS_INVENTORY
        from balance
      where item_no = BAL_REC_OLD.ITEM_NO
        and section_code = BAL_REC_OLD.SECTION_CODE
        and supply_type = 'Z';
     /* ?????????????? */
      select nvl(trunc(sum(allocate_qty),V_DECIMAL),0) into WK_PROCESS_QTY1
        from balance
       where item_no = BAL_REC_OLD.ITEM_NO
         and section_code = BAL_REC_OLD.SECTION_CODE
         and supply_type = 'H'
         and demand_type is not null;
     /* ??????????????? */
      select nvl(trunc(sum(allocate_qty),V_DECIMAL),0) into WK_PROCESS_QTY2
        from balance
       where item_no = BAL_REC_OLD.ITEM_NO
         and section_code = BAL_REC_OLD.SECTION_CODE
         and supply_type = 'H'
         and demand_type is null;

     /* ITEM?? */
      ITM_REC := null ;
      open C_ITM(BAL_REC_OLD.ITEM_NO);
         fetch C_ITM into ITM_REC ;
      close C_ITM;

    /* ITEM MAKER?? */
      IMK_REC := null ;
      open C_IMK(BAL_REC_OLD.ITEM_NO);
         fetch C_IMK into IMK_REC ;
      close C_IMK;

      insert into required (
         OPERATION_DATE          , SECTION_CODE          , ITEM_NO                  , ITEM                     ,
         DESCRIPTION             , CATALOG_NO            , UNIT_STOCK               , ORDER_POLICY             ,
         STATION_CODE            , STATION               , PURCHASE_LEADTIME        , MINIMUM_ORDER_LOT        ,
         SPLIT_ORDER_LOT         , REORDER_POINT         , SAFETY_STOCK             , ISSUE_POLICY             ,
         SUPPLIER_CODE           , ESTIMATE_PRICE        , STANDARD_PRICE           , THIS_INVENTORY           ,
         PROCESS_QTY1            , PROCESS_QTY2
       ) values (
         SYSDATE                 , BAL_REC_OLD.SECTION_CODE  , BAL_REC_OLD.ITEM_NO          , ITM_REC.ITEM             ,
         ITM_REC.DESCRIPTION     , ITM_REC.CATALOG_NO    , ITM_REC.UNIT_STOCK       , ITM_REC.ORDER_POLICY     ,
         BAL_REC_OLD.ALLOCATE_ST     , BAL_REC_OLD.ALLOCATE_ST   , IMK_REC.PURCHASE_LEADTIME, IMK_REC.MINIMUM_ORDER_LOT,
         IMK_REC.SPLIT_ORDER_LOT , ITM_REC.REORDER_POINT , ITM_REC.SAFETY_STOCK     , ITM_REC.ISSUE_POLICY     ,
         IMK_REC.SUPPLIER_CODE   , IMK_REC.ESTIMATE_PRICE, ITM_REC.STANDARD_PRICE   , WK_THIS_INVENTORY        ,
         WK_PROCESS_QTY1         , WK_PROCESS_QTY2
       );
   end head_rtn;

--?????
   procedure detail_rtn is
   begin
--???(????
      i := 0;
      <<rup>>
      loop
         if i > 12 then
            exit rup;
         end if;
         i := i + 1;
         wk_req_qty(i) := trunc(wk_req_qty(i),V_DECIMAL);
         wk_pur_qty(i) := trunc(wk_pur_qty(i),V_DECIMAL);
       end loop rup;
--??????
       TTL_REC := null ;
       open C_TTL(10);
          fetch C_TTL into TTL_REC;
       close C_TTL;
       insert into required_d
          (operation_date, section_code, item_no,
           sort, title, this_week,
           week2, week3, week4,
           week5, week6, week7,
           week8, week9, week10,
           week11, week12, week13)
       values
          (sysdate, WK_SECTION_CODE_OLD, WK_ITEM_NO_OLD,
           10, TTL_REC.TITLE, wk_req_qty(1),
           wk_req_qty(2), wk_req_qty(3), wk_req_qty(4),
           wk_req_qty(5), wk_req_qty(6), wk_req_qty(7),
           wk_req_qty(8), wk_req_qty(9), wk_req_qty(10),
           wk_req_qty(11), wk_req_qty(12), wk_req_qty(13));
--?????
       TTL_REC := null ;
       open C_TTL(20);
          fetch C_TTL into TTL_REC;
       close C_TTL;
       insert into required_d
          (operation_date, section_code, item_no,
           sort, title, this_week,
           week2, week3, week4,
           week5, week6, week7,
           week8, week9, week10,
           week11, week12, week13)
       values
          (sysdate, WK_SECTION_CODE_OLD, WK_ITEM_NO_OLD,
           20, TTL_REC.TITLE, wk_pur_qty(1),
           wk_pur_qty(2), wk_pur_qty(3), wk_pur_qty(4),
           wk_pur_qty(5), wk_pur_qty(6), wk_pur_qty(7),
           wk_pur_qty(8), wk_pur_qty(9), wk_pur_qty(10),
           wk_pur_qty(11), wk_pur_qty(12), wk_pur_qty(13));
--?????????
--       WK_INVENTORY_TOTAL := WK_THIS_INVENTORY + WK_PROCESS_QTY1 - nvl(ITM_REC.SAFETY_STOCK,0);
       WK_INVENTORY_TOTAL := nvl(WK_THIS_INVENTORY,0) + nvl(WK_PROCESS_QTY1,0) +  nvl(WK_PROCESS_QTY2,0);
--
       i := 0;
       <<remainset>>
       loop
          if i > 12 then
             exit remainset;
          end if;
          i := i + 1;
--?????
          WK_INVENTORY_TOTAL := WK_INVENTORY_TOTAL + wk_pur_qty(i) - wk_req_qty(i);
          wk_remain_qty(i) := WK_INVENTORY_TOTAL;
--?????
          if i = 1 and wk_remain_qty(i) < 0 then
             wk_net_qty(i) := wk_remain_qty(i) * -1;
          elsif wk_remain_qty(i) < 0 then
             wk_remain := wk_remain_qty(i-1);
             if wk_remain > 0 then
                wk_remain := 0;
             end if;
             wk_net_qty(i) := (wk_remain_qty(i) - wk_remain) * -1;
          end if;
       end loop remainset;
--??????
       TTL_REC := null ;
       open C_TTL(30);
          fetch C_TTL into TTL_REC;
       close C_TTL;
       insert into required_d
          (operation_date, section_code, item_no,
           sort, title, this_week,
           week2, week3, week4,
           week5, week6, week7,
           week8, week9, week10,
           week11, week12, week13)
       values
          (sysdate, WK_SECTION_CODE_OLD, WK_ITEM_NO_OLD,
           30, TTL_REC.TITLE, wk_remain_qty(1),
           wk_remain_qty(2), wk_remain_qty(3), wk_remain_qty(4),
           wk_remain_qty(5), wk_remain_qty(6), wk_remain_qty(7),
           wk_remain_qty(8), wk_remain_qty(9), wk_remain_qty(10),
           wk_remain_qty(11), wk_remain_qty(12), wk_remain_qty(13));
--??????
       TTL_REC := null ;
       open C_TTL(40);
          fetch C_TTL into TTL_REC;
       close C_TTL;
       insert into required_d
          (operation_date, section_code, item_no,
           sort, title, this_week,
           week2, week3, week4,
           week5, week6, week7,
           week8, week9, week10,
           week11, week12, week13)
       values
          (sysdate, WK_SECTION_CODE_OLD, WK_ITEM_NO_OLD,
           40, TTL_REC.TITLE, wk_net_qty(1),
           wk_net_qty(2), wk_net_qty(3), wk_net_qty(4),
           wk_net_qty(5), wk_net_qty(6), wk_net_qty(7),
           wk_net_qty(8), wk_net_qty(9), wk_net_qty(10),
           wk_net_qty(11), wk_net_qty(12), wk_net_qty(13));
   end detail_rtn;


 begin
-- ???
    /* ?????? */
    delete from required;
    delete from required_d;
    delete from required_date;
    delete from required_decimal;

   /* ??????????? */
       insert into required_decimal (operation_date,decimal_point) values (sysdate,v_decimal) ;

   /* ?????? */
    i := 1;
    wk_week_date(i) := to_char(sysdate - (to_number(to_char(sysdate,'d')) -1),'yyyy/mm/dd');
   <<weekset>>
    loop
      if i > 12 then
         exit weekset;
      end if;
      i := i + 1;
      wk_week_date(i) := to_char(to_date(wk_week_date(i-1)) + 7,'yyyy/mm/dd');
    end loop weekset;

    insert into required_date
       (operation_date, this_week, week2,
        week3, week4, week5,
        week6, week7, week8,
        week9, week10, week11,
        week12, week13)
    values
       (sysdate, wk_week_date(1), wk_week_date(2),
        wk_week_date(3), wk_week_date(4), wk_week_date(5),
        wk_week_date(6), wk_week_date(7), wk_week_date(8),
        wk_week_date(9), wk_week_date(10), wk_week_date(11),
        wk_week_date(12), wk_week_date(13));

--???
    /* ??????? */
    WK_COUNT := 0 ;
     open C_BAL ;
       loop
       fetch C_BAL into BAL_REC ;
       exit when C_BAL%notfound or C_BAL%notfound is null;

         WK_COUNT := WK_COUNT + 1 ;

         if WK_COUNT = 1 or BAL_REC.ITEM_NO <> WK_ITEM_NO_OLD then
             if WK_COUNT > 1 then
                 --??????
                    head_rtn;
                 --?????
                    detail_rtn;
             end if;
             WK_ITEM_NO_OLD      := BAL_REC.ITEM_NO;
             WK_SECTION_CODE_OLD := BAL_REC.SECTION_CODE;
             BAL_REC_OLD := BAL_REC ;

             i := 0;
             <<wkclear>>
             loop
                if i > 12 then
                   exit wkclear;
                end if;
                i := i + 1;
                wk_req_qty(i) := 0;
                wk_pur_qty(i) := 0;
                wk_remain_qty(i) := 0;
                wk_net_qty(i) := 0;
             end loop wkclear;
         end if;

            --????????????
           if BAL_REC.DEMAND_TYPE is not null then
                 if BAL_REC.DEMAND_DATE < to_date(wk_week_date(2),'yyyy/mm/dd') then
                     wk_req_qty(1) := wk_req_qty(1) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(3),'yyyy/mm/dd') then
                     wk_req_qty(2) := wk_req_qty(2) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(4),'yyyy/mm/dd') then
                     wk_req_qty(3) := wk_req_qty(3) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(5),'yyyy/mm/dd') then
                     wk_req_qty(4) := wk_req_qty(4) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(6),'yyyy/mm/dd') then
                     wk_req_qty(5) := wk_req_qty(5) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(7),'yyyy/mm/dd') then
                     wk_req_qty(6) := wk_req_qty(6) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(8),'yyyy/mm/dd') then
                     wk_req_qty(7) := wk_req_qty(7) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(9),'yyyy/mm/dd') then
                     wk_req_qty(8) := wk_req_qty(8) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(10),'yyyy/mm/dd') then
                     wk_req_qty(9) := wk_req_qty(9) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(11),'yyyy/mm/dd') then
                     wk_req_qty(10) := wk_req_qty(10) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(12),'yyyy/mm/dd') then
                     wk_req_qty(11) := wk_req_qty(11) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(13),'yyyy/mm/dd') then
                     wk_req_qty(12) := wk_req_qty(12) +  BAL_REC.ALLOCATE_QTY;
                 else
                     wk_req_qty(13) := wk_req_qty(13) +  BAL_REC.ALLOCATE_QTY;
                 end if;
           end if;
           --????????
           if BAL_REC.SUPPLY_TYPE = 'R' then
                 if BAL_REC.SUPPLY_DATE < to_date(wk_week_date(2),'yyyy/mm/dd') then
                    wk_pur_qty(1) := wk_pur_qty(1) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(3),'yyyy/mm/dd')  then
                    wk_pur_qty(2) := wk_pur_qty(2) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(4),'yyyy/mm/dd')  then
                    wk_pur_qty(3) := wk_pur_qty(3) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(5),'yyyy/mm/dd')  then
                    wk_pur_qty(4) := wk_pur_qty(4) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(6),'yyyy/mm/dd')  then
                    wk_pur_qty(5) := wk_pur_qty(5) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(7),'yyyy/mm/dd')  then
                    wk_pur_qty(6) := wk_pur_qty(6) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(8),'yyyy/mm/dd')  then
                    wk_pur_qty(7) := wk_pur_qty(7) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(9),'yyyy/mm/dd')  then
                    wk_pur_qty(8) := wk_pur_qty(8) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(10),'yyyy/mm/dd')  then
                    wk_pur_qty(9) := wk_pur_qty(9) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(11),'yyyy/mm/dd')  then
                    wk_pur_qty(10) := wk_pur_qty(10) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(12),'yyyy/mm/dd')  then
                    wk_pur_qty(11) := wk_pur_qty(11) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(13),'yyyy/mm/dd')  then
                    wk_pur_qty(12) := wk_pur_qty(12) + BAL_REC.ALLOCATE_QTY;
                 else
                    wk_pur_qty(13) := wk_pur_qty(13) + BAL_REC.ALLOCATE_QTY;
                 end if;
           end if;
       end loop ;

        --??????
           head_rtn;
        --?????
           detail_rtn;

     close C_BAL ;
--????
/* -- ?????????????
--??????????
   delete from required
   where item_no in (
      select item_no
      from
         (select item_no, this_week+week2+week3+
                 week4+week5+week6+
                 week7+week8+week9+
                 week10+week11+week12+
                 week13 as qty
           from required_d
          where sort = 10) x
      where qty = 0);
--
   delete from required_d
   where item_no in (
      select item_no
      from
         (select item_no, this_week+week2+week3+
                 week4+week5+week6+
                 week7+week8+week9+
                 week10+week11+week12+
                 week13 as qty
           from required_d
          where sort = 10) x
      where qty = 0);
--??????????
   delete from required
   where item_no in (
      select item_no
      from
         (select item_no, sum(this_week)+sum(week2)+sum(week3)+
                sum(week4)+sum(week5)+sum(week6)+
                sum(week7)+sum(week8)+sum(week9)+
                sum(week10)+sum(week11)+sum(week12)+
                sum(week13) as qty
           from required_d
          group by item_no) x
          where qty = 0);
--
   delete from required_d
   where item_no in (
      select item_no
      from
         (select item_no, sum(this_week)+sum(week2)+sum(week3)+
                sum(week4)+sum(week5)+sum(week6)+
                sum(week7)+sum(week8)+sum(week9)+
                sum(week10)+sum(week11)+sum(week12)+
                sum(week13) as qty
           from required_d
          group by item_no) x
      where qty = 0);
*/

 end ;
end  t_required;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."T_REQUIRED_OLD" 
as
begin
   declare
      ITM_REC item%rowtype ;
      BAL_REC balance%rowtype ;
      BAL_REC_OLD balance%rowtype ;
      TTL_REC required_title%rowtype ;
      IMK_REC itemmaker%rowtype ;
      COM_REC company%rowtype ;

      WK_ITEM_NO_OLD       balance.item_no%type  := 0 ;
      WK_SECTION_CODE_OLD  balance.section_code%type := 0 ;
      WK_COUNT  NUMBER(10) := 0 ;

      WK_THIS_INVENTORY     NUMBER(15,6);
      WK_PROCESS_QTY1       NUMBER(14,4);
      WK_PROCESS_QTY2       NUMBER(14,4);
      WK_INVENTORY_TOTAL    NUMBER(14,4);
      WK_REMAIN             NUMBER(14,4);
      i number(2) ;

    cursor C_BAL
     is
     select b.*
     from balance b,
          item i
     where b.item_no = i.item_no
       and nvl(i.stock_subject_code,0) < '5' and
           nvl(i.order_policy,0) != '2'
     order by b.item_no;

    cursor C_ITM (param in number)
     is
      select *
      from item
       where item_no = param;

    cursor C_TTL (param in number)
     is
      select *
      from required_title
       where sort = param;

    cursor C_IMK (param in number)
     is
      select *
      from itemmaker
      where item_no = param
      order by alter_procedure;

    cursor C_COM (param in number)
     is
      select *
      from company
      where company_code = param
      ;

     /* ??????? */
     type week_date_tab is table of varchar2(10)
        index by binary_integer;
     wk_week_date week_date_tab;
     /* ???13?? */
     type req_qty_tab is table of number(14,4)
        index by binary_integer;
     wk_req_qty req_qty_tab;
     /* ??13?? */
     type pur_qty_tab is table of number(14,4)
        index by binary_integer;
     wk_pur_qty pur_qty_tab;
     /* ???13?? */
     type remain_qty_tab is table of number(14,4)
        index by binary_integer;
     wk_remain_qty remain_qty_tab;
     /* ??13?? */
     type net_qty_tab is table of number(14,4)
        index by binary_integer;
     wk_net_qty net_qty_tab;

   --??????????????
   procedure head_rtn
   is
   begin
     /* ????????? */
      select nvl(trunc(sum(allocate_qty)),0) into  WK_THIS_INVENTORY
        from balance
      where item_no = BAL_REC_OLD.ITEM_NO
        and section_code = BAL_REC_OLD.SECTION_CODE
        and supply_type = 'Z';
     /* ?????????????? */
      select nvl(trunc(sum(allocate_qty)),0) into WK_PROCESS_QTY1
        from balance
       where item_no = BAL_REC_OLD.ITEM_NO
         and section_code = BAL_REC_OLD.SECTION_CODE
         and supply_type = 'H'
         and demand_type is not null;
     /* ??????????????? */
      select nvl(trunc(sum(allocate_qty)),0) into WK_PROCESS_QTY2
        from balance
       where item_no = BAL_REC_OLD.ITEM_NO
         and section_code = BAL_REC_OLD.SECTION_CODE
         and supply_type = 'H'
         and demand_type is null;

     /* ITEM?? */
      ITM_REC := null ;
      open C_ITM(BAL_REC_OLD.ITEM_NO);
         fetch C_ITM into ITM_REC ;
      close C_ITM;

    /* ITEM MAKER?? */
      IMK_REC := null ;
      open C_IMK(BAL_REC_OLD.ITEM_NO);
         fetch C_IMK into IMK_REC ;
      close C_IMK;

      insert into required (
         OPERATION_DATE          , SECTION_CODE          , ITEM_NO                  , ITEM                     ,
         DESCRIPTION             , CATALOG_NO            , UNIT_STOCK               , ORDER_POLICY             ,
         STATION_CODE            , STATION               , PURCHASE_LEADTIME        , MINIMUM_ORDER_LOT        ,
         SPLIT_ORDER_LOT         , REORDER_POINT         , SAFETY_STOCK             , ISSUE_POLICY             ,
         SUPPLIER_CODE           , ESTIMATE_PRICE        , STANDARD_PRICE           , THIS_INVENTORY           ,
         PROCESS_QTY1            , PROCESS_QTY2
       ) values (
         SYSDATE                 , BAL_REC_OLD.SECTION_CODE  , BAL_REC_OLD.ITEM_NO          , ITM_REC.ITEM             ,
         ITM_REC.DESCRIPTION     , ITM_REC.CATALOG_NO    , ITM_REC.UNIT_STOCK       , ITM_REC.ORDER_POLICY     ,
         BAL_REC_OLD.ALLOCATE_ST     , BAL_REC_OLD.ALLOCATE_ST   , IMK_REC.PURCHASE_LEADTIME, IMK_REC.MINIMUM_ORDER_LOT,
         IMK_REC.SPLIT_ORDER_LOT , ITM_REC.REORDER_POINT , ITM_REC.SAFETY_STOCK     , ITM_REC.ISSUE_POLICY     ,
         IMK_REC.SUPPLIER_CODE   , IMK_REC.ESTIMATE_PRICE, ITM_REC.STANDARD_PRICE   , WK_THIS_INVENTORY        ,
         WK_PROCESS_QTY1         , WK_PROCESS_QTY2
       );
   end head_rtn;

--?????
   procedure detail_rtn is
   begin
--???(????
      i := 0;
      <<rup>>
      loop
         if i > 12 then
            exit rup;
         end if;
         i := i + 1;
         wk_req_qty(i) := trunc(wk_req_qty(i));
         wk_pur_qty(i) := trunc(wk_pur_qty(i));
       end loop rup;
--??????
       TTL_REC := null ;
       open C_TTL(10);
          fetch C_TTL into TTL_REC;
       close C_TTL;
       insert into required_d
          (operation_date, section_code, item_no,
           sort, title, this_week,
           week2, week3, week4,
           week5, week6, week7,
           week8, week9, week10,
           week11, week12, week13)
       values
          (sysdate, WK_SECTION_CODE_OLD, WK_ITEM_NO_OLD,
           10, TTL_REC.TITLE, wk_req_qty(1),
           wk_req_qty(2), wk_req_qty(3), wk_req_qty(4),
           wk_req_qty(5), wk_req_qty(6), wk_req_qty(7),
           wk_req_qty(8), wk_req_qty(9), wk_req_qty(10),
           wk_req_qty(11), wk_req_qty(12), wk_req_qty(13));
--?????
       TTL_REC := null ;
       open C_TTL(20);
          fetch C_TTL into TTL_REC;
       close C_TTL;
       insert into required_d
          (operation_date, section_code, item_no,
           sort, title, this_week,
           week2, week3, week4,
           week5, week6, week7,
           week8, week9, week10,
           week11, week12, week13)
       values
          (sysdate, WK_SECTION_CODE_OLD, WK_ITEM_NO_OLD,
           20, TTL_REC.TITLE, wk_pur_qty(1),
           wk_pur_qty(2), wk_pur_qty(3), wk_pur_qty(4),
           wk_pur_qty(5), wk_pur_qty(6), wk_pur_qty(7),
           wk_pur_qty(8), wk_pur_qty(9), wk_pur_qty(10),
           wk_pur_qty(11), wk_pur_qty(12), wk_pur_qty(13));
--?????????
--       WK_INVENTORY_TOTAL := WK_THIS_INVENTORY + WK_PROCESS_QTY1 - nvl(ITM_REC.SAFETY_STOCK,0);
       WK_INVENTORY_TOTAL := nvl(WK_THIS_INVENTORY,0) + nvl(WK_PROCESS_QTY1,0) +  nvl(WK_PROCESS_QTY2,0);
--
       i := 0;
       <<remainset>>
       loop
          if i > 12 then
             exit remainset;
          end if;
          i := i + 1;
--?????
          WK_INVENTORY_TOTAL := WK_INVENTORY_TOTAL + wk_pur_qty(i) - wk_req_qty(i);
          wk_remain_qty(i) := WK_INVENTORY_TOTAL;
--?????
          if i = 1 and wk_remain_qty(i) < 0 then
             wk_net_qty(i) := wk_remain_qty(i) * -1;
          elsif wk_remain_qty(i) < 0 then
             wk_remain := wk_remain_qty(i-1);
             if wk_remain > 0 then
                wk_remain := 0;
             end if;
             wk_net_qty(i) := (wk_remain_qty(i) - wk_remain) * -1;
          end if;
       end loop remainset;
--??????
       TTL_REC := null ;
       open C_TTL(30);
          fetch C_TTL into TTL_REC;
       close C_TTL;
       insert into required_d
          (operation_date, section_code, item_no,
           sort, title, this_week,
           week2, week3, week4,
           week5, week6, week7,
           week8, week9, week10,
           week11, week12, week13)
       values
          (sysdate, WK_SECTION_CODE_OLD, WK_ITEM_NO_OLD,
           30, TTL_REC.TITLE, wk_remain_qty(1),
           wk_remain_qty(2), wk_remain_qty(3), wk_remain_qty(4),
           wk_remain_qty(5), wk_remain_qty(6), wk_remain_qty(7),
           wk_remain_qty(8), wk_remain_qty(9), wk_remain_qty(10),
           wk_remain_qty(11), wk_remain_qty(12), wk_remain_qty(13));
--??????
       TTL_REC := null ;
       open C_TTL(40);
          fetch C_TTL into TTL_REC;
       close C_TTL;
       insert into required_d
          (operation_date, section_code, item_no,
           sort, title, this_week,
           week2, week3, week4,
           week5, week6, week7,
           week8, week9, week10,
           week11, week12, week13)
       values
          (sysdate, WK_SECTION_CODE_OLD, WK_ITEM_NO_OLD,
           40, TTL_REC.TITLE, wk_net_qty(1),
           wk_net_qty(2), wk_net_qty(3), wk_net_qty(4),
           wk_net_qty(5), wk_net_qty(6), wk_net_qty(7),
           wk_net_qty(8), wk_net_qty(9), wk_net_qty(10),
           wk_net_qty(11), wk_net_qty(12), wk_net_qty(13));
   end detail_rtn;


 begin
-- ???
    /* ?????? */
    delete from required;
    delete from required_d;
    delete from required_date;


   /* ?????? */
    i := 1;
    wk_week_date(i) := to_char(sysdate - (to_number(to_char(sysdate,'d')) -1),'yyyy/mm/dd');
   <<weekset>>
    loop
      if i > 12 then
         exit weekset;
      end if;
      i := i + 1;
      wk_week_date(i) := to_char(to_date(wk_week_date(i-1)) + 7,'yyyy/mm/dd');
    end loop weekset;

    insert into required_date
       (operation_date, this_week, week2,
        week3, week4, week5,
        week6, week7, week8,
        week9, week10, week11,
        week12, week13)
    values
       (sysdate, wk_week_date(1), wk_week_date(2),
        wk_week_date(3), wk_week_date(4), wk_week_date(5),
        wk_week_date(6), wk_week_date(7), wk_week_date(8),
        wk_week_date(9), wk_week_date(10), wk_week_date(11),
        wk_week_date(12), wk_week_date(13));

--???
    /* ??????? */
    WK_COUNT := 0 ;
     open C_BAL ;
       loop
       fetch C_BAL into BAL_REC ;
       exit when C_BAL%notfound or C_BAL%notfound is null;

         WK_COUNT := WK_COUNT + 1 ;

         if WK_COUNT = 1 or BAL_REC.ITEM_NO <> WK_ITEM_NO_OLD then
             if WK_COUNT > 1 then
                 --??????
                    head_rtn;
                 --?????
                    detail_rtn;
             end if;
             WK_ITEM_NO_OLD      := BAL_REC.ITEM_NO;
             WK_SECTION_CODE_OLD := BAL_REC.SECTION_CODE;
             BAL_REC_OLD := BAL_REC ;

             i := 0;
             <<wkclear>>
             loop
                if i > 12 then
                   exit wkclear;
                end if;
                i := i + 1;
                wk_req_qty(i) := 0;
                wk_pur_qty(i) := 0;
                wk_remain_qty(i) := 0;
                wk_net_qty(i) := 0;
             end loop wkclear;
         end if;

            --????????????
           if BAL_REC.DEMAND_TYPE is not null then
                 if BAL_REC.DEMAND_DATE < to_date(wk_week_date(2),'yyyy/mm/dd') then
                     wk_req_qty(1) := wk_req_qty(1) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(3),'yyyy/mm/dd') then
                     wk_req_qty(2) := wk_req_qty(2) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(4),'yyyy/mm/dd') then
                     wk_req_qty(3) := wk_req_qty(3) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(5),'yyyy/mm/dd') then
                     wk_req_qty(4) := wk_req_qty(4) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(6),'yyyy/mm/dd') then
                     wk_req_qty(5) := wk_req_qty(5) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(7),'yyyy/mm/dd') then
                     wk_req_qty(6) := wk_req_qty(6) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(8),'yyyy/mm/dd') then
                     wk_req_qty(7) := wk_req_qty(7) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(9),'yyyy/mm/dd') then
                     wk_req_qty(8) := wk_req_qty(8) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(10),'yyyy/mm/dd') then
                     wk_req_qty(9) := wk_req_qty(9) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(11),'yyyy/mm/dd') then
                     wk_req_qty(10) := wk_req_qty(10) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(12),'yyyy/mm/dd') then
                     wk_req_qty(11) := wk_req_qty(11) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(13),'yyyy/mm/dd') then
                     wk_req_qty(12) := wk_req_qty(12) +  BAL_REC.ALLOCATE_QTY;
                 else
                     wk_req_qty(13) := wk_req_qty(13) +  BAL_REC.ALLOCATE_QTY;
                 end if;
           end if;
           --????????
           if BAL_REC.SUPPLY_TYPE = 'R' then
                 if BAL_REC.SUPPLY_DATE < to_date(wk_week_date(2),'yyyy/mm/dd') then
                    wk_pur_qty(1) := wk_pur_qty(1) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(3),'yyyy/mm/dd')  then
                    wk_pur_qty(2) := wk_pur_qty(2) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(4),'yyyy/mm/dd')  then
                    wk_pur_qty(3) := wk_pur_qty(3) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(5),'yyyy/mm/dd')  then
                    wk_pur_qty(4) := wk_pur_qty(4) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(6),'yyyy/mm/dd')  then
                    wk_pur_qty(5) := wk_pur_qty(5) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(7),'yyyy/mm/dd')  then
                    wk_pur_qty(6) := wk_pur_qty(6) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(8),'yyyy/mm/dd')  then
                    wk_pur_qty(7) := wk_pur_qty(7) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(9),'yyyy/mm/dd')  then
                    wk_pur_qty(8) := wk_pur_qty(8) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(10),'yyyy/mm/dd')  then
                    wk_pur_qty(9) := wk_pur_qty(9) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(11),'yyyy/mm/dd')  then
                    wk_pur_qty(10) := wk_pur_qty(10) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(12),'yyyy/mm/dd')  then
                    wk_pur_qty(11) := wk_pur_qty(11) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(13),'yyyy/mm/dd')  then
                    wk_pur_qty(12) := wk_pur_qty(12) + BAL_REC.ALLOCATE_QTY;
                 else
                    wk_pur_qty(13) := wk_pur_qty(13) + BAL_REC.ALLOCATE_QTY;
                 end if;
           end if;
       end loop ;

        --??????
           head_rtn;
        --?????
           detail_rtn;

     close C_BAL ;
--????
/* -- ?????????????
--??????????
   delete from required
   where item_no in (
      select item_no
      from
         (select item_no, this_week+week2+week3+
                 week4+week5+week6+
                 week7+week8+week9+
                 week10+week11+week12+
                 week13 as qty
           from required_d
          where sort = 10) x
      where qty = 0);
--
   delete from required_d
   where item_no in (
      select item_no
      from
         (select item_no, this_week+week2+week3+
                 week4+week5+week6+
                 week7+week8+week9+
                 week10+week11+week12+
                 week13 as qty
           from required_d
          where sort = 10) x
      where qty = 0);
--??????????
   delete from required
   where item_no in (
      select item_no
      from
         (select item_no, sum(this_week)+sum(week2)+sum(week3)+
                sum(week4)+sum(week5)+sum(week6)+
                sum(week7)+sum(week8)+sum(week9)+
                sum(week10)+sum(week11)+sum(week12)+
                sum(week13) as qty
           from required_d
          group by item_no) x
          where qty = 0);
--
   delete from required_d
   where item_no in (
      select item_no
      from
         (select item_no, sum(this_week)+sum(week2)+sum(week3)+
                sum(week4)+sum(week5)+sum(week6)+
                sum(week7)+sum(week8)+sum(week9)+
                sum(week10)+sum(week11)+sum(week12)+
                sum(week13) as qty
           from required_d
          group by item_no) x
      where qty = 0);
*/

 end ;
end  t_required_OLD;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."T_REQUIRED2" (V_DECIMAL in number default 0)
as
begin
  /*
      ???????????? (2002/08/27)
  */
   declare
      ITM_REC item%rowtype ;
      BAL_REC balance%rowtype ;
      BAL_REC_OLD balance%rowtype ;
      TTL_REC required_title%rowtype ;
      IMK_REC itemmaker%rowtype ;
      COM_REC company%rowtype ;

      WK_ITEM_NO_OLD       balance.item_no%type  := 0 ;
      WK_SECTION_CODE_OLD  balance.section_code%type := 0 ;
      WK_COUNT  NUMBER(10) := 0 ;

      WK_THIS_INVENTORY     NUMBER(15,6);
      WK_PROCESS_QTY1       NUMBER(14,4);
      WK_PROCESS_QTY2       NUMBER(14,4);
      WK_INVENTORY_TOTAL    NUMBER(14,4);
      WK_REMAIN             NUMBER(14,4);
      i number(2) ;

    cursor C_BAL
     is
     select b.*
     from balance b,
          item i
     where b.item_no = i.item_no
       and nvl(i.stock_subject_code,0) < '5' and
           nvl(i.order_policy,0) != '2'
     order by b.item_no;

    cursor C_ITM (param in number)
     is
      select *
      from item
       where item_no = param;

    cursor C_TTL (param in number)
     is
      select *
      from required_title
       where sort = param;

    cursor C_IMK (param in number)
     is
      select *
      from itemmaker
      where item_no = param
      order by alter_procedure;

    cursor C_COM (param in number)
     is
      select *
      from company
      where company_code = param
      ;

     /* ??????? */
     type week_date_tab is table of varchar2(10)
        index by binary_integer;
     wk_week_date week_date_tab;
     /* ???13?? */
     type req_qty_tab is table of number(14,4)
        index by binary_integer;
     wk_req_qty req_qty_tab;
     /* ??13?? */
     type pur_qty_tab is table of number(14,4)
        index by binary_integer;
     wk_pur_qty pur_qty_tab;
     /* ???13?? */
     type remain_qty_tab is table of number(14,4)
        index by binary_integer;
     wk_remain_qty remain_qty_tab;
     /* ??13?? */
     type net_qty_tab is table of number(14,4)
        index by binary_integer;
     wk_net_qty net_qty_tab;

   --??????????????
   procedure head_rtn
   is
   begin
     /* ????????? */
      select nvl(trunc(sum(allocate_qty),V_DECIMAL),0) into  WK_THIS_INVENTORY
        from balance
      where item_no = BAL_REC_OLD.ITEM_NO
        and section_code = BAL_REC_OLD.SECTION_CODE
        and supply_type = 'Z';
     /* ?????????????? */
      select nvl(trunc(sum(allocate_qty),V_DECIMAL),0) into WK_PROCESS_QTY1
        from balance
       where item_no = BAL_REC_OLD.ITEM_NO
         and section_code = BAL_REC_OLD.SECTION_CODE
         and supply_type = 'H'
         and demand_type is not null;
     /* ??????????????? */
      select nvl(trunc(sum(allocate_qty),V_DECIMAL),0) into WK_PROCESS_QTY2
        from balance
       where item_no = BAL_REC_OLD.ITEM_NO
         and section_code = BAL_REC_OLD.SECTION_CODE
         and supply_type = 'H'
         and demand_type is null;

     /* ITEM?? */
      ITM_REC := null ;
      open C_ITM(BAL_REC_OLD.ITEM_NO);
         fetch C_ITM into ITM_REC ;
      close C_ITM;

    /* ITEM MAKER?? */
      IMK_REC := null ;
      open C_IMK(BAL_REC_OLD.ITEM_NO);
         fetch C_IMK into IMK_REC ;
      close C_IMK;

      insert into required2 (
         OPERATION_DATE          , SECTION_CODE          , ITEM_NO                  , ITEM                     ,
         DESCRIPTION             , CATALOG_NO            , UNIT_STOCK               , ORDER_POLICY             ,
         STATION_CODE            , STATION               , PURCHASE_LEADTIME        , MINIMUM_ORDER_LOT        ,
         SPLIT_ORDER_LOT         , REORDER_POINT         , SAFETY_STOCK             , ISSUE_POLICY             ,
         SUPPLIER_CODE           , ESTIMATE_PRICE        , STANDARD_PRICE           , THIS_INVENTORY           ,
         PROCESS_QTY1            , PROCESS_QTY2
       ) values (
         SYSDATE                 , BAL_REC_OLD.SECTION_CODE  , BAL_REC_OLD.ITEM_NO          , ITM_REC.ITEM             ,
         ITM_REC.DESCRIPTION     , ITM_REC.CATALOG_NO    , ITM_REC.UNIT_STOCK       , ITM_REC.ORDER_POLICY     ,
         BAL_REC_OLD.ALLOCATE_ST     , BAL_REC_OLD.ALLOCATE_ST   , IMK_REC.PURCHASE_LEADTIME, IMK_REC.MINIMUM_ORDER_LOT,
         IMK_REC.SPLIT_ORDER_LOT , ITM_REC.REORDER_POINT , ITM_REC.SAFETY_STOCK     , ITM_REC.ISSUE_POLICY     ,
         IMK_REC.SUPPLIER_CODE   , IMK_REC.ESTIMATE_PRICE, ITM_REC.STANDARD_PRICE   , WK_THIS_INVENTORY        ,
         WK_PROCESS_QTY1         , WK_PROCESS_QTY2
       );
   end head_rtn;

--?????
   procedure detail_rtn is
   begin
--???(????
      i := 0;
      <<rup>>
      loop
         if i > 12 then
            exit rup;
         end if;
         i := i + 1;
         wk_req_qty(i) := trunc(wk_req_qty(i)+0.5,V_DECIMAL);
         wk_pur_qty(i) := trunc(wk_pur_qty(i)+0.5,V_DECIMAL);
       end loop rup;
--??????
       TTL_REC := null ;
       open C_TTL(10);
          fetch C_TTL into TTL_REC;
       close C_TTL;
       insert into required_d2
          (operation_date, section_code, item_no,
           sort, title, this_week,
           week2, week3, week4,
           week5, week6, week7,
           week8, week9, week10,
           week11, week12, week13)
       values
          (sysdate, WK_SECTION_CODE_OLD, WK_ITEM_NO_OLD,
           10, TTL_REC.TITLE, wk_req_qty(1),
           wk_req_qty(2), wk_req_qty(3), wk_req_qty(4),
           wk_req_qty(5), wk_req_qty(6), wk_req_qty(7),
           wk_req_qty(8), wk_req_qty(9), wk_req_qty(10),
           wk_req_qty(11), wk_req_qty(12), wk_req_qty(13));
--?????
       TTL_REC := null ;
       open C_TTL(20);
          fetch C_TTL into TTL_REC;
       close C_TTL;
       insert into required_d2
          (operation_date, section_code, item_no,
           sort, title, this_week,
           week2, week3, week4,
           week5, week6, week7,
           week8, week9, week10,
           week11, week12, week13)
       values
          (sysdate, WK_SECTION_CODE_OLD, WK_ITEM_NO_OLD,
           20, TTL_REC.TITLE, wk_pur_qty(1),
           wk_pur_qty(2), wk_pur_qty(3), wk_pur_qty(4),
           wk_pur_qty(5), wk_pur_qty(6), wk_pur_qty(7),
           wk_pur_qty(8), wk_pur_qty(9), wk_pur_qty(10),
           wk_pur_qty(11), wk_pur_qty(12), wk_pur_qty(13));
--?????????
--       WK_INVENTORY_TOTAL := WK_THIS_INVENTORY + WK_PROCESS_QTY1 - nvl(ITM_REC.SAFETY_STOCK,0);
       WK_INVENTORY_TOTAL := nvl(WK_THIS_INVENTORY,0) + nvl(WK_PROCESS_QTY1,0) +  nvl(WK_PROCESS_QTY2,0);
--
       i := 0;
       <<remainset>>
       loop
          if i > 12 then
             exit remainset;
          end if;
          i := i + 1;
--?????
          WK_INVENTORY_TOTAL := WK_INVENTORY_TOTAL + wk_pur_qty(i) - wk_req_qty(i);
          wk_remain_qty(i) := WK_INVENTORY_TOTAL;
--?????
          if i = 1 and wk_remain_qty(i) < 0 then
             wk_net_qty(i) := wk_remain_qty(i) * -1;
          elsif wk_remain_qty(i) < 0 then
             wk_remain := wk_remain_qty(i-1);
             if wk_remain > 0 then
                wk_remain := 0;
             end if;
             wk_net_qty(i) := (wk_remain_qty(i) - wk_remain) * -1;
          end if;
       end loop remainset;
--??????
       TTL_REC := null ;
       open C_TTL(30);
          fetch C_TTL into TTL_REC;
       close C_TTL;
       insert into required_d2
          (operation_date, section_code, item_no,
           sort, title, this_week,
           week2, week3, week4,
           week5, week6, week7,
           week8, week9, week10,
           week11, week12, week13)
       values
          (sysdate, WK_SECTION_CODE_OLD, WK_ITEM_NO_OLD,
           30, TTL_REC.TITLE, wk_remain_qty(1),
           wk_remain_qty(2), wk_remain_qty(3), wk_remain_qty(4),
           wk_remain_qty(5), wk_remain_qty(6), wk_remain_qty(7),
           wk_remain_qty(8), wk_remain_qty(9), wk_remain_qty(10),
           wk_remain_qty(11), wk_remain_qty(12), wk_remain_qty(13));
--??????
       TTL_REC := null ;
       open C_TTL(40);
          fetch C_TTL into TTL_REC;
       close C_TTL;
       insert into required_d2
          (operation_date, section_code, item_no,
           sort, title, this_week,
           week2, week3, week4,
           week5, week6, week7,
           week8, week9, week10,
           week11, week12, week13)
       values
          (sysdate, WK_SECTION_CODE_OLD, WK_ITEM_NO_OLD,
           40, TTL_REC.TITLE, wk_net_qty(1),
           wk_net_qty(2), wk_net_qty(3), wk_net_qty(4),
           wk_net_qty(5), wk_net_qty(6), wk_net_qty(7),
           wk_net_qty(8), wk_net_qty(9), wk_net_qty(10),
           wk_net_qty(11), wk_net_qty(12), wk_net_qty(13));
   end detail_rtn;


 begin
-- ???
    /* ?????? */
    delete from required2;
    delete from required_d2;
    delete from required_date2;
    delete from required_decimal2;

   /* ??????????? */
       insert into required_decimal2 (operation_date,decimal_point) values (sysdate,v_decimal) ;

   /* ?????? */
    i := 1;
    wk_week_date(i) := to_char(sysdate,'yyyy/mm/dd');
   <<weekset>>
    loop
      if i > 12 then
         exit weekset;
      end if;
      i := i + 1;
      wk_week_date(i) := to_char(to_date(wk_week_date(i-1)) + 1,'yyyy/mm/dd');
    end loop weekset;

    insert into required_date2
       (operation_date, this_week, week2,
        week3, week4, week5,
        week6, week7, week8,
        week9, week10, week11,
        week12, week13)
    values
       (sysdate, wk_week_date(1), wk_week_date(2),
        wk_week_date(3), wk_week_date(4), wk_week_date(5),
        wk_week_date(6), wk_week_date(7), wk_week_date(8),
        wk_week_date(9), wk_week_date(10), wk_week_date(11),
        wk_week_date(12), wk_week_date(13));

--???
    /* ??????? */
    WK_COUNT := 0 ;
     open C_BAL ;
       loop
       fetch C_BAL into BAL_REC ;
       exit when C_BAL%notfound or C_BAL%notfound is null;

         WK_COUNT := WK_COUNT + 1 ;

         if WK_COUNT = 1 or BAL_REC.ITEM_NO <> WK_ITEM_NO_OLD then
             if WK_COUNT > 1 then
                 --??????
                    head_rtn;
                 --?????
                    detail_rtn;
             end if;
             WK_ITEM_NO_OLD      := BAL_REC.ITEM_NO;
             WK_SECTION_CODE_OLD := BAL_REC.SECTION_CODE;
             BAL_REC_OLD := BAL_REC ;

             i := 0;
             <<wkclear>>
             loop
                if i > 12 then
                   exit wkclear;
                end if;
                i := i + 1;
                wk_req_qty(i) := 0;
                wk_pur_qty(i) := 0;
                wk_remain_qty(i) := 0;
                wk_net_qty(i) := 0;
             end loop wkclear;
         end if;

            --????????????
           if BAL_REC.DEMAND_TYPE is not null then
                 if BAL_REC.DEMAND_DATE < to_date(wk_week_date(2),'yyyy/mm/dd') then
                     wk_req_qty(1) := wk_req_qty(1) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(3),'yyyy/mm/dd') then
                     wk_req_qty(2) := wk_req_qty(2) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(4),'yyyy/mm/dd') then
                     wk_req_qty(3) := wk_req_qty(3) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(5),'yyyy/mm/dd') then
                     wk_req_qty(4) := wk_req_qty(4) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(6),'yyyy/mm/dd') then
                     wk_req_qty(5) := wk_req_qty(5) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(7),'yyyy/mm/dd') then
                     wk_req_qty(6) := wk_req_qty(6) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(8),'yyyy/mm/dd') then
                     wk_req_qty(7) := wk_req_qty(7) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(9),'yyyy/mm/dd') then
                     wk_req_qty(8) := wk_req_qty(8) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(10),'yyyy/mm/dd') then
                     wk_req_qty(9) := wk_req_qty(9) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(11),'yyyy/mm/dd') then
                     wk_req_qty(10) := wk_req_qty(10) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(12),'yyyy/mm/dd') then
                     wk_req_qty(11) := wk_req_qty(11) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(13),'yyyy/mm/dd') then
                     wk_req_qty(12) := wk_req_qty(12) +  BAL_REC.ALLOCATE_QTY;
--                 else
--                     wk_req_qty(13) := wk_req_qty(13) +  BAL_REC.ALLOCATE_QTY;
                 end if;
           end if;
           --????????
           if BAL_REC.SUPPLY_TYPE = 'C' then
                 if BAL_REC.SUPPLY_DATE < to_date(wk_week_date(2),'yyyy/mm/dd') then
                    wk_pur_qty(1) := wk_pur_qty(1) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(3),'yyyy/mm/dd')  then
                    wk_pur_qty(2) := wk_pur_qty(2) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(4),'yyyy/mm/dd')  then
                    wk_pur_qty(3) := wk_pur_qty(3) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(5),'yyyy/mm/dd')  then
                    wk_pur_qty(4) := wk_pur_qty(4) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(6),'yyyy/mm/dd')  then
                    wk_pur_qty(5) := wk_pur_qty(5) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(7),'yyyy/mm/dd')  then
                    wk_pur_qty(6) := wk_pur_qty(6) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(8),'yyyy/mm/dd')  then
                    wk_pur_qty(7) := wk_pur_qty(7) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(9),'yyyy/mm/dd')  then
                    wk_pur_qty(8) := wk_pur_qty(8) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(10),'yyyy/mm/dd')  then
                    wk_pur_qty(9) := wk_pur_qty(9) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(11),'yyyy/mm/dd')  then
                    wk_pur_qty(10) := wk_pur_qty(10) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(12),'yyyy/mm/dd')  then
                    wk_pur_qty(11) := wk_pur_qty(11) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(13),'yyyy/mm/dd')  then
                    wk_pur_qty(12) := wk_pur_qty(12) + BAL_REC.ALLOCATE_QTY;
--                 else
--                    wk_pur_qty(13) := wk_pur_qty(13) + BAL_REC.ALLOCATE_QTY;
                 end if;
           end if;
       end loop ;

        --??????
           head_rtn;
        --?????
           detail_rtn;

     close C_BAL ;
--????
/* -- ?????????????
--??????????
   delete from required2
   where item_no in (
      select item_no
      from
         (select item_no, this_week+week2+week3+
                 week4+week5+week6+
                 week7+week8+week9+
                 week10+week11+week12+
                 week13 as qty
           from required_d
          where sort = 10) x
      where qty = 0);
--
   delete from required_d2
   where item_no in (
      select item_no
      from
         (select item_no, this_week+week2+week3+
                 week4+week5+week6+
                 week7+week8+week9+
                 week10+week11+week12+
                 week13 as qty
           from required_d
          where sort = 10) x
      where qty = 0);
--??????????
   delete from required2
   where item_no in (
      select item_no
      from
         (select item_no, sum(this_week)+sum(week2)+sum(week3)+
                sum(week4)+sum(week5)+sum(week6)+
                sum(week7)+sum(week8)+sum(week9)+
                sum(week10)+sum(week11)+sum(week12)+
                sum(week13) as qty
           from required_d
          group by item_no) x
          where qty = 0);
--
   delete from required_d2
   where item_no in (
      select item_no
      from
         (select item_no, sum(this_week)+sum(week2)+sum(week3)+
                sum(week4)+sum(week5)+sum(week6)+
                sum(week7)+sum(week8)+sum(week9)+
                sum(week10)+sum(week11)+sum(week12)+
                sum(week13) as qty
           from required_d
          group by item_no) x
      where qty = 0);
*/

 end ;
end  t_required2;
/
 -- Unable to Render DDL with DBMS_METADATA using internal generator.
CREATE PROCEDURE        t_required7(v_decimal in number default 0)
as
/*
??????????????
????
*/
begin
   declare
      itm_rec            item%rowtype ;
      bal_rec            forecast_balance%rowtype ;
      bal_rec_old        forecast_balance%rowtype ;
      ttl_rec            required_title%rowtype ;
      imk_rec            itemmaker%rowtype ;
      com_rec            company%rowtype ;

      bal_sup_rec        forecast_balance%rowtype ;
      bal_sup_rec_old    forecast_balance%rowtype ;

      wk_item_no_old       forecast_balance.item_no%type  := 0 ;
      wk_supply_st_old     forecast_balance.supply_st%type  := 0 ;
      wk_section_code_old  forecast_balance.section_code%type := 0 ;
      wk_count  number(10) := 0 ;

      wk_this_inventory     number(15,6);
      wk_process_qty1       number(14,4);
      wk_process_qty2       number(14,4);
      wk_inventory_total    number(14,4);
      wk_remain             number(14,4);
      i number(2) ;

    cursor c_bal           --??????????,?????????????????
     is
     select b.*
     from forecast_balance b,
          item i
     where b.item_no = i.item_no
       and nvl(i.stock_subject_code,0) < '5' and
           nvl(i.order_policy,0) != '2'
     order by b.item_no;

    cursor c_bal_sup           --???????????
     is
     select b.*
     from forecast_balance b,
          item i
     where b.item_no = i.item_no
       and nvl(i.stock_subject_code,0) < '5' and
           nvl(i.order_policy,0) != '2'
       and b.supply_type = 'R'
       and b.supply_st is not null
     order by b.item_no,b.SUPPLY_ST;


    cursor c_itm (param in number)  --???????
     is
      select *
      from item
       where item_no = param;

    cursor c_ttl (param in number)
     is
      select *
      from required_title
       where sort = param;

    cursor c_imk (param in number)  --?????????
     is
      select *
      from itemmaker
      where item_no = param
      order by alter_procedure;

    cursor c_com (param in number)  --???????
     is
      select *
      from company
      where company_code = param
      ;

    cursor c_rit (para1 in number) --???????? ????
     is 
      select supplier_code,supplier_ratio
      from supplier_ratio
      where item_no = para1;

    w_supplier_code2       supplier_ratio.supplier_code%type;
    w_supplier_ratio2      supplier_ratio.supplier_ratio%type;
    w_supplier_code_save   supplier_ratio.supplier_code%type;
    w_supplier_ratio_save  supplier_ratio.supplier_ratio%type;

    cursor c_imk2 (para1 in number,para2 in number)  --?????????
     is
      select       supplier_code  , purchase_leadtime, minimum_order_lot,
                   split_order_lot, estimate_price
      from itemmaker
      where item_no       = para1
        and supplier_code = para2
      order by alter_procedure;

      w_supplier_code     itemmaker.supplier_code%type;
      w_purchase_leadtime itemmaker.purchase_leadtime%type;
      w_minimum_order_lot itemmaker.minimum_order_lot%type;
      w_split_order_lot   itemmaker.split_order_lot%type;
      w_estimate_price    itemmaker.estimate_price%type;

    cursor c_rbs 
    --ITEMMAKER????????????????????????????????
     is
      select a.* from 
          (select * from required_by_supplier) a,
          (select  im.item_no,
                   to_number(im.supplier_code) supplier_code from itemmaker im
            where im.alter_procedure = (select min(alter_procedure) from itemmaker
                                         where item_no in (im.item_no)
                                       ) 
           union 
           select item_no, supplier_code from supplier_ratio
          ) b
       where a.item_no = b.item_no(+)
         and a.supplier_code = b.supplier_code(+)
         and b.item_no is null;

      c_rbs_rec     c_rbs%rowtype;

    cursor c_rbs2 (para1 in number,para2 in number)  --?????????????
     is
      select * 
         from  required_by_supplier
      where item_no       = para1
        and supplier_code = para2;

      c_rbs2_rec        c_rbs2%rowtype;
      
      w_supplier_ratio_add    number(5,2) := 0; 
      w_count     number(10) := 0;
      w_count2    number(10) := 0;

     /* ??????? */
     type week_date_tab is table of varchar2(10)
        index by binary_integer;
     wk_week_date week_date_tab;
     /* ???22?? */
     type req_qty_tab is table of number(14,4)
        index by binary_integer;
     wk_req_qty req_qty_tab;
  
   /* ???????22?? */
     type zreq_qty_tab is table of number(14,4)
        index by binary_integer;
     wk_zreq_qty zreq_qty_tab;

     /* ??22?? */
     type pur_qty_tab is table of number(14,4)
        index by binary_integer;
     wk_pur_qty pur_qty_tab;
     /* ???22?? */
     type remain_qty_tab is table of number(14,4)
        index by binary_integer;
     wk_remain_qty remain_qty_tab;
     /* ??22?? */
     type net_qty_tab is table of number(14,4)
        index by binary_integer;
     wk_net_qty net_qty_tab;
     /* ?????22?? */
     type sup_pur_qty_tab is table of number(14,4)
        index by binary_integer;
     wk_sup_pur_qty sup_pur_qty_tab;

   --??????????????
   procedure head_rtn
   is
   begin

     /* item?? */
      itm_rec := null ;
      open c_itm(bal_rec_old.item_no);
         fetch c_itm into itm_rec ;
      close c_itm;

    /* item maker?? */
      imk_rec := null ;
      open c_imk(bal_rec_old.item_no);
         fetch c_imk into imk_rec ;
      close c_imk;

      insert into required7 (
         operation_date          , section_code          , item_no                  , item                     ,
         description             , catalog_no            , unit_stock               , order_policy             ,
         station_code            , station               , reorder_point            , safety_stock             ,
         issue_policy            , standard_price
       ) values (
         sysdate                 , bal_rec_old.section_code  , bal_rec_old.item_no          , itm_rec.item             ,
         itm_rec.description     , itm_rec.catalog_no        , itm_rec.unit_stock           , itm_rec.order_policy     ,
         bal_rec_old.allocate_st , bal_rec_old.allocate_st   , itm_rec.reorder_point        , itm_rec.safety_stock     ,
         itm_rec.issue_policy    , itm_rec.standard_price
       );
   end head_rtn;

--?????
   procedure detail_rtn is
   begin
--???(????
      i := 0;
      <<rup>>
      loop
         if i > 22 then
            exit rup;
         end if;
         i := i + 1;
         wk_req_qty(i) := trunc(wk_req_qty(i) + 0.5,v_decimal);
         wk_pur_qty(i) := trunc(wk_pur_qty(i) + 0.5,v_decimal);
       end loop rup;

       i := 0;
       <<wkclear2>>
       loop
          if i > 22 then
             exit wkclear2;
          end if;
          i := i + 1;
          wk_pur_qty(i) := 0;
       end loop wkclear2;


     /* ????????? */
      select nvl(trunc(sum(allocate_qty),v_decimal),0) into  wk_this_inventory
        from forecast_balance
      where item_no = bal_rec_old.item_no
        and section_code = bal_rec_old.section_code
        and supply_type = 'Z';
     /* ?????????????? */
      select nvl(trunc(sum(allocate_qty),v_decimal),0) into wk_process_qty1
        from forecast_balance
       where item_no = bal_rec_old.item_no
         and section_code = bal_rec_old.section_code
         and supply_type = 'H'
         and demand_type is not null;
     /* ??????????????? */
      select nvl(trunc(sum(allocate_qty),v_decimal),0) into wk_process_qty2
        from forecast_balance
       where item_no = bal_rec_old.item_no
         and section_code = bal_rec_old.section_code
         and supply_type = 'H'
         and demand_type is null;

                w_count2              := 0;
                w_supplier_code2      := null;
                w_supplier_ratio2     := 0 ;
                w_supplier_ratio_add  := 0;

                /*   ?????????  */
                open c_rit(bal_rec_old.item_no); --????????
                loop
                   fetch c_rit into
                        w_supplier_code2, w_supplier_ratio2;

                   i := 0;
                   <<wkclear2>>
                   loop
                      if i > 22 then
                         exit wkclear2;
                      end if;
                      i := i + 1;
                      wk_net_qty(i) := 0;
                   end loop wkclear2;

                   exit when c_rit%notfound or c_rit%notfound is null;

                   /*  ????????????????????? ?2???????? (???????-1) ?? */
                   if w_count2 > 0  then   -- ????????????

                      /*   ????????????  */
                      open c_imk2(bal_rec_old.item_no,w_supplier_code_save); --????????????
                          fetch c_imk2 into
                                w_supplier_code, w_purchase_leadtime, w_minimum_order_lot,
                                w_split_order_lot, w_estimate_price;
                          if c_imk2%notfound or c_imk2%notfound is null then
                             w_supplier_code     := null;
                             w_purchase_leadtime := 0;
                             w_minimum_order_lot := 0;
                             w_split_order_lot   := 0;
                             w_estimate_price    := 0;
                          end if;
                       close c_imk2;

--????1-1
--??????
                      /*   ????????????????  */
                      c_rbs2_rec  := null;
                      open c_rbs2(bal_rec_old.item_no,w_supplier_code_save); --????????????
                          fetch c_rbs2 into c_rbs2_rec;
--                          if c_rbs2%notfound or c_rbs2%notfound is null then
--                             w_supplier_code     := null;
--                             w_purchase_leadtime := 0;
--                             w_minimum_order_lot := 0;
--                             w_split_order_lot   := 0;
--                             w_estimate_price    := 0;
--                          end if;
                      close c_rbs2;
                      wk_pur_qty(1)  := nvl(c_rbs2_rec.this_week,0);
                      wk_pur_qty(2)  := nvl(c_rbs2_rec.week2,0);
                      wk_pur_qty(3)  := nvl(c_rbs2_rec.week3,0);
                      wk_pur_qty(4)  := nvl(c_rbs2_rec.week4,0);
                      wk_pur_qty(5)  := nvl(c_rbs2_rec.week5,0);
                      wk_pur_qty(6)  := nvl(c_rbs2_rec.week6,0);
                      wk_pur_qty(7)  := nvl(c_rbs2_rec.week7,0);
                      wk_pur_qty(8)  := nvl(c_rbs2_rec.week8,0);
                      wk_pur_qty(9)  := nvl(c_rbs2_rec.week9,0);
                      wk_pur_qty(10) := nvl(c_rbs2_rec.week10,0);
                      wk_pur_qty(11) := nvl(c_rbs2_rec.week11,0);
                      wk_pur_qty(12) := nvl(c_rbs2_rec.week12,0);
                      wk_pur_qty(13) := nvl(c_rbs2_rec.week13,0);
                      wk_pur_qty(14) := nvl(c_rbs2_rec.week14,0);
                      wk_pur_qty(15) := nvl(c_rbs2_rec.week15,0);
                      wk_pur_qty(16) := nvl(c_rbs2_rec.week16,0);
                      wk_pur_qty(17) := nvl(c_rbs2_rec.week17,0);
                      wk_pur_qty(18) := nvl(c_rbs2_rec.week18,0);
                      wk_pur_qty(19) := nvl(c_rbs2_rec.week19,0);
                      wk_pur_qty(20) := nvl(c_rbs2_rec.week20,0);
                      wk_pur_qty(21) := nvl(c_rbs2_rec.week21,0);
                      wk_pur_qty(22) := nvl(c_rbs2_rec.week22,0);

                      z99a03100pp(wk_req_qty(1)  * w_supplier_ratio_save / 100, wk_zreq_qty(1));--?????????????
                      z99a03100pp(wk_req_qty(2)  * w_supplier_ratio_save / 100, wk_zreq_qty(2));--?????????????
                      z99a03100pp(wk_req_qty(3)  * w_supplier_ratio_save / 100, wk_zreq_qty(3));--?????????????
                      z99a03100pp(wk_req_qty(4)  * w_supplier_ratio_save / 100, wk_zreq_qty(4));--?????????????
                      z99a03100pp(wk_req_qty(5)  * w_supplier_ratio_save / 100, wk_zreq_qty(5));--?????????????
                      z99a03100pp(wk_req_qty(6)  * w_supplier_ratio_save / 100, wk_zreq_qty(6));--?????????????
                      z99a03100pp(wk_req_qty(7)  * w_supplier_ratio_save / 100, wk_zreq_qty(7));--?????????????
                      z99a03100pp(wk_req_qty(8)  * w_supplier_ratio_save / 100, wk_zreq_qty(8));--?????????????
                      z99a03100pp(wk_req_qty(9)  * w_supplier_ratio_save / 100, wk_zreq_qty(9));--?????????????
                      z99a03100pp(wk_req_qty(10) * w_supplier_ratio_save / 100, wk_zreq_qty(10));--?????????????
                      z99a03100pp(wk_req_qty(11) * w_supplier_ratio_save / 100, wk_zreq_qty(11));--?????????????
                      z99a03100pp(wk_req_qty(12) * w_supplier_ratio_save / 100, wk_zreq_qty(12));--?????????????
                      z99a03100pp(wk_req_qty(13) * w_supplier_ratio_save / 100, wk_zreq_qty(13));--?????????????
                      z99a03100pp(wk_req_qty(14) * w_supplier_ratio_save / 100, wk_zreq_qty(14));--?????????????
                      z99a03100pp(wk_req_qty(15) * w_supplier_ratio_save / 100, wk_zreq_qty(15));--?????????????
                      z99a03100pp(wk_req_qty(16) * w_supplier_ratio_save / 100, wk_zreq_qty(16));--?????????????
                      z99a03100pp(wk_req_qty(17) * w_supplier_ratio_save / 100, wk_zreq_qty(17));--?????????????
                      z99a03100pp(wk_req_qty(18) * w_supplier_ratio_save / 100, wk_zreq_qty(18));--?????????????
                      z99a03100pp(wk_req_qty(19) * w_supplier_ratio_save / 100, wk_zreq_qty(19));--?????????????
                      z99a03100pp(wk_req_qty(20) * w_supplier_ratio_save / 100, wk_zreq_qty(20));--?????????????
                      z99a03100pp(wk_req_qty(21) * w_supplier_ratio_save / 100, wk_zreq_qty(21));--?????????????
                      z99a03100pp(wk_req_qty(22) * w_supplier_ratio_save / 100, wk_zreq_qty(22));--?????????????

                      ttl_rec := null ;
                      /*   ????????????  */
                      open c_ttl(10);
                         fetch c_ttl into ttl_rec;
                      close c_ttl;

                      /*   ??????????  */
                      insert into required_d7
                                 (operation_date     , section_code    , item_no           ,
                                   sort              , title           , purchase_leadtime ,
                                   minimum_order_lot , split_order_lot , supplier_code     ,
                                   estimate_price    , this_inventory  , process_qty1      ,
                                   process_qty2      , this_week       ,
                                   week2             , week3           , week4             ,
                                   week5             , week6           , week7             ,
                                   week8             , week9           , week10            ,
                                   week11            , week12          , week13            ,
                                   week14            , week15          , week16            ,
                                   week17            , week18          , week19            ,
                                   week20            , week21          , week22            
                                  )
                         values
                                  (sysdate                                     , wk_section_code_old , bal_rec_old.item_no ,
                                   10                                                  , ttl_rec.title       , w_purchase_leadtime ,
                                   w_minimum_order_lot , w_split_order_lot   , w_supplier_code_save     ,
                                   w_estimate_price    , round(wk_this_inventory * w_supplier_ratio_save / 100,0)    , round(wk_process_qty1 * w_supplier_ratio_save / 100,0)    ,
                                   round(wk_process_qty2 * w_supplier_ratio_save / 100,0)    ,
                                   wk_zreq_qty(1)     ,
                                   wk_zreq_qty(2)     ,
                                   wk_zreq_qty(3)     ,
                                   wk_zreq_qty(4)     ,
                                   wk_zreq_qty(5)     ,
                                   wk_zreq_qty(6)     ,
                                   wk_zreq_qty(7)     ,
                                   wk_zreq_qty(8)     ,
                                   wk_zreq_qty(9)     ,
                                   wk_zreq_qty(10)    ,
                                   wk_zreq_qty(11)    ,
                                   wk_zreq_qty(12)    ,
                                   wk_zreq_qty(13)    ,
                                   wk_zreq_qty(14)    ,
                                   wk_zreq_qty(15)    ,
                                   wk_zreq_qty(16)    ,
                                   wk_zreq_qty(17)    ,
                                   wk_zreq_qty(18)    ,
                                   wk_zreq_qty(19)    ,
                                   wk_zreq_qty(20)    ,
                                   wk_zreq_qty(21)    ,
                                   wk_zreq_qty(22)    
                                  );
--?????
                      ttl_rec := null ;

                      /*   ????????????  */
                      open c_ttl(20);
                         fetch c_ttl into ttl_rec;
                      close c_ttl;

                      /*   ??????????  */
                      insert into required_d7
                                 (operation_date     , section_code    , item_no           ,
                                   sort              , title           , purchase_leadtime ,
                                   minimum_order_lot , split_order_lot , supplier_code     ,
                                   estimate_price    , this_inventory  , process_qty1      ,
                                   process_qty2      , this_week       ,
                                   week2             , week3           , week4             ,
                                   week5             , week6           , week7             ,
                                   week8             , week9           , week10            ,
                                   week11            , week12          , week13            ,
                                   week14            , week15          , week16            ,
                                   week17            , week18          , week19            ,
                                   week20            , week21          , week22            
                                  )
                        values
                                  (sysdate                                     , wk_section_code_old , bal_rec_old.item_no ,
                                   20                                                  , ttl_rec.title       , w_purchase_leadtime ,
                                   w_minimum_order_lot , w_split_order_lot   , w_supplier_code_save     ,
                                   w_estimate_price    , round(wk_this_inventory * w_supplier_ratio_save / 100,0)    , round(wk_process_qty1 * w_supplier_ratio_save / 100,0)    ,
                                   round(wk_process_qty2 * w_supplier_ratio_save / 100,0)    ,
                                   wk_pur_qty(1)   ,
                                   wk_pur_qty(2)   ,
                                   wk_pur_qty(3)   ,
                                   wk_pur_qty(4)   ,
                                   wk_pur_qty(5)   ,
                                   wk_pur_qty(6)   ,
                                   wk_pur_qty(7)   ,
                                   wk_pur_qty(8)   ,
                                   wk_pur_qty(9)   ,
                                   wk_pur_qty(10)  ,
                                   wk_pur_qty(11)  ,
                                   wk_pur_qty(12)  ,
                                   wk_pur_qty(13)  ,
                                   wk_pur_qty(14)  ,
                                   wk_pur_qty(15)  ,
                                   wk_pur_qty(16)  ,
                                   wk_pur_qty(17)  ,
                                   wk_pur_qty(18)  ,
                                   wk_pur_qty(19)  ,
                                   wk_pur_qty(20)  ,
                                   wk_pur_qty(21)  ,
                                   wk_pur_qty(22)  
                          );
--?????????

                      wk_inventory_total := nvl(round(wk_this_inventory * w_supplier_ratio_save / 100,0),0) + nvl(round(wk_process_qty1 * w_supplier_ratio_save / 100,0),0) +  nvl(round(wk_process_qty2 * w_supplier_ratio_save / 100,0),0);
--
                      i := 0;
                      <<remainset>>
                      loop
                          if i > 22 then
                                 exit remainset;
                          end if;
                          i := i + 1;
--?????
                          wk_inventory_total := wk_inventory_total + wk_pur_qty(i)  - wk_zreq_qty(i);
                          wk_remain_qty(i) := wk_inventory_total;
--?????
                          if i = 1 and wk_remain_qty(i) < 0 then
                             wk_net_qty(i) := wk_remain_qty(i) * -1;
                          elsif wk_remain_qty(i) < 0 then
                             wk_remain := wk_remain_qty(i-1);
                             if wk_remain > 0 then
                                wk_remain := 0;
                             end if;
                             wk_net_qty(i) := (wk_remain_qty(i) - wk_remain) * -1;
                          end if;
                      end loop remainset;
--??????
                      ttl_rec := null ;
                      /*   ????????????  */
                      open c_ttl(30);
                          fetch c_ttl into ttl_rec;
                      close c_ttl;

                      /*   ??????????  */
                      insert into required_d7
                                 (operation_date     , section_code    , item_no           ,
                                   sort              , title           , purchase_leadtime ,
                                   minimum_order_lot , split_order_lot , supplier_code     ,
                                   estimate_price    , this_inventory  , process_qty1      ,
                                   process_qty2      , this_week       ,
                                   week2             , week3           , week4             ,
                                   week5             , week6           , week7             ,
                                   week8             , week9           , week10            ,
                                   week11            , week12          , week13            ,
                                   week14            , week15          , week16            ,
                                   week17            , week18          , week19            ,
                                   week20            , week21          , week22            
                                  )
                      values
                                  (sysdate             , wk_section_code_old , bal_rec_old.item_no ,
                                   30                  , ttl_rec.title       , w_purchase_leadtime ,
                                   w_minimum_order_lot , w_split_order_lot   , w_supplier_code_save     ,
                                   w_estimate_price    , round(wk_this_inventory * w_supplier_ratio_save / 100,0)    , round(wk_process_qty1 * w_supplier_ratio_save / 100,0)    ,
                                   round(wk_process_qty2 * w_supplier_ratio_save / 100,0)    ,
                                   wk_remain_qty(1)    ,
                                   wk_remain_qty(2)    ,
                                   wk_remain_qty(3)    ,
                                   wk_remain_qty(4)    ,
                                   wk_remain_qty(5)    ,
                                   wk_remain_qty(6)    ,
                                   wk_remain_qty(7)    ,
                                   wk_remain_qty(8)    ,
                                   wk_remain_qty(9)    ,
                                   wk_remain_qty(10)   ,
                                   wk_remain_qty(11)   ,
                                   wk_remain_qty(12)   ,
                                   wk_remain_qty(13)   ,
                                   wk_remain_qty(14)   ,
                                   wk_remain_qty(15)   ,
                                   wk_remain_qty(16)   ,
                                   wk_remain_qty(17)   ,
                                   wk_remain_qty(18)   ,
                                   wk_remain_qty(19)   ,
                                   wk_remain_qty(20)   ,
                                   wk_remain_qty(21)   ,
                                   wk_remain_qty(22)   
                                  );
--??????
                      ttl_rec := null ;
                      /*   ????????????  */
                      open c_ttl(40);
                           fetch c_ttl into ttl_rec;
                      close c_ttl;

                      /*   ??????????  */
                      insert into required_d7
                                 (operation_date     , section_code    , item_no           ,
                                   sort              , title           , purchase_leadtime ,
                                   minimum_order_lot , split_order_lot , supplier_code     ,
                                   estimate_price    , this_inventory  , process_qty1      ,
                                   process_qty2      , this_week       ,
                                   week2             , week3           , week4             ,
                                   week5             , week6           , week7             ,
                                   week8             , week9           , week10            ,
                                   week11            , week12          , week13            ,
                                   week14            , week15          , week16            ,
                                   week17            , week18          , week19            ,
                                   week20            , week21          , week22            
                                  )
                      values
                                  (sysdate             , wk_section_code_old , bal_rec_old.item_no ,
                                   40                  , ttl_rec.title       , w_purchase_leadtime ,
                                   w_minimum_order_lot , w_split_order_lot   , w_supplier_code_save     ,
                                   w_estimate_price    , round(wk_this_inventory * w_supplier_ratio_save / 100,0)    , round(wk_process_qty1 * w_supplier_ratio_save / 100,0)    ,
                                   round(wk_process_qty2 * w_supplier_ratio_save / 100,0)    ,
                                   wk_net_qty(1)    ,
                                   wk_net_qty(2)    ,
                                   wk_net_qty(3)    ,
                                   wk_net_qty(4)    ,
                                   wk_net_qty(5)    ,
                                   wk_net_qty(6)    ,
                                   wk_net_qty(7)    ,
                                   wk_net_qty(8)    ,
                                   wk_net_qty(9)    ,
                                   wk_net_qty(10)   ,
                                   wk_net_qty(11)   ,
                                   wk_net_qty(12)   ,
                                   wk_net_qty(13)   ,
                                   wk_net_qty(14)   ,
                                   wk_net_qty(15)   ,
                                   wk_net_qty(16)   ,
                                   wk_net_qty(17)   ,
                                   wk_net_qty(18)   ,
                                   wk_net_qty(19)   ,
                                   wk_net_qty(20)   ,
                                   wk_net_qty(21)   ,
                                   wk_net_qty(22)   
                                  );
--????1-1
                   end if;
                   /*  ???????   */
                   w_supplier_code_save  := w_supplier_code2;
                   w_supplier_ratio_save := w_supplier_ratio2;
                   /*  ??%??   */
                   w_supplier_ratio_add  := w_supplier_ratio_add + w_supplier_ratio2;
                   w_count2              := w_count2 + 1;
                   w_count               := w_count + 1;
                end loop;
                close c_rit;

--????2-1
                /*  ???????????? */
                if w_count2 = 0  then   -- ??????????????????????

                     /*  ????????????  */
                     open c_imk(bal_rec_old.item_no); --????????????
                         fetch c_imk into imk_rec;
                         if c_imk%notfound or c_imk%notfound is null then
                             imk_rec.supplier_code     := null;
                             imk_rec.purchase_leadtime := 0;
                             imk_rec.minimum_order_lot := 0;
                             imk_rec.split_order_lot   := 0;
                             imk_rec.estimate_price    := 0;
                         end if;
                     close c_imk;
--??????

                     /*  ???????????????  */
                     c_rbs2_rec  := null;
                     open c_rbs2(bal_rec_old.item_no,imk_rec.supplier_code); --??????????
                          fetch c_rbs2 into c_rbs2_rec;
--                          if c_rbs2%notfound or c_rbs2%notfound is null then
--                             w_supplier_code     := null;
--                             w_purchase_leadtime := 0;
--                             w_minimum_order_lot := 0;
--                             w_split_order_lot   := 0;
--                             w_estimate_price    := 0;
--                          end if;
                     close c_rbs2;
                     wk_pur_qty(1)  := nvl(c_rbs2_rec.this_week,0);
                     wk_pur_qty(2)  := nvl(c_rbs2_rec.week2,0);
                     wk_pur_qty(3)  := nvl(c_rbs2_rec.week3,0);
                     wk_pur_qty(4)  := nvl(c_rbs2_rec.week4,0);
                     wk_pur_qty(5)  := nvl(c_rbs2_rec.week5,0);
                     wk_pur_qty(6)  := nvl(c_rbs2_rec.week6,0);
                     wk_pur_qty(7)  := nvl(c_rbs2_rec.week7,0);
                     wk_pur_qty(8)  := nvl(c_rbs2_rec.week8,0);
                     wk_pur_qty(9)  := nvl(c_rbs2_rec.week9,0);
                     wk_pur_qty(10) := nvl(c_rbs2_rec.week10,0);
                     wk_pur_qty(11) := nvl(c_rbs2_rec.week11,0);
                     wk_pur_qty(12) := nvl(c_rbs2_rec.week12,0);
                     wk_pur_qty(13) := nvl(c_rbs2_rec.week13,0);
                     wk_pur_qty(14) := nvl(c_rbs2_rec.week14,0);
                     wk_pur_qty(15) := nvl(c_rbs2_rec.week15,0);
                     wk_pur_qty(16) := nvl(c_rbs2_rec.week16,0);
                     wk_pur_qty(17) := nvl(c_rbs2_rec.week17,0);
                     wk_pur_qty(18) := nvl(c_rbs2_rec.week18,0);
                     wk_pur_qty(19) := nvl(c_rbs2_rec.week19,0);
                     wk_pur_qty(20) := nvl(c_rbs2_rec.week20,0);
                     wk_pur_qty(21) := nvl(c_rbs2_rec.week21,0);
                     wk_pur_qty(22) := nvl(c_rbs2_rec.week22,0);

                     ttl_rec := null ;
                     /*   ????????????  */
                     open c_ttl(10);
                         fetch c_ttl into ttl_rec;
                     close c_ttl;
                      /*   ??????????  */
                     insert into required_d7
                                (operation_date    , section_code    , item_no           ,
                                 sort              , title           , purchase_leadtime ,
                                 minimum_order_lot , split_order_lot , supplier_code     ,
                                 estimate_price    , this_inventory  , process_qty1      ,
                                 process_qty2      , this_week       ,
                                 week2             , week3           , week4             ,
                                 week5             , week6           , week7             ,
                                 week8             , week9           , week10            ,
                                 week11            , week12          , week13            ,
                                 week14            , week15          , week16            ,
                                 week17            , week18          , week19            ,
                                 week20            , week21          , week22            
                                )
                             values
                                (sysdate                   , wk_section_code_old       , bal_rec_old.item_no       ,
                                 10                        , ttl_rec.title             , imk_rec.purchase_leadtime ,
                                 imk_rec.minimum_order_lot , imk_rec.split_order_lot   , imk_rec.supplier_code     ,
                                 imk_rec.estimate_price    , wk_this_inventory         , wk_process_qty1           ,
                                 wk_process_qty2     ,
                                 wk_req_qty(1)  ,
                                 wk_req_qty(2)  ,
                                 wk_req_qty(3)  ,
                                 wk_req_qty(4)  ,
                                 wk_req_qty(5)  ,
                                 wk_req_qty(6)  ,
                                 wk_req_qty(7)  ,
                                 wk_req_qty(8)  ,
                                 wk_req_qty(9)  ,
                                 wk_req_qty(10) ,
                                 wk_req_qty(11) ,
                                 wk_req_qty(12) ,
                                 wk_req_qty(13) ,
                                 wk_req_qty(14) ,
                                 wk_req_qty(15) ,
                                 wk_req_qty(16) ,
                                 wk_req_qty(17) ,
                                 wk_req_qty(18) ,
                                 wk_req_qty(19) ,
                                 wk_req_qty(20) ,
                                 wk_req_qty(21) ,
                                 wk_req_qty(22) 
                                );
--?????
                     ttl_rec := null ;
                     /*   ????????????  */
                     open c_ttl(20);
                         fetch c_ttl into ttl_rec;
                     close c_ttl;
                      /*   ??????????  */
                     insert into required_d7
                                (operation_date    , section_code    , item_no           ,
                                 sort              , title           , purchase_leadtime ,
                                 minimum_order_lot , split_order_lot , supplier_code     ,
                                 estimate_price    , this_inventory  , process_qty1      ,
                                 process_qty2      , this_week       ,
                                 week2             , week3           , week4             ,
                                 week5             , week6           , week7             ,
                                 week8             , week9           , week10            ,
                                 week11            , week12          , week13            ,
                                 week14            , week15          , week16            ,
                                 week17            , week18          , week19            ,
                                 week20            , week21          , week22            
                                )
                             values
                                (sysdate             , wk_section_code_old , bal_rec_old.item_no ,
                                 20                        , ttl_rec.title             , imk_rec.purchase_leadtime ,
                                 imk_rec.minimum_order_lot , imk_rec.split_order_lot   , imk_rec.supplier_code     ,
                                 imk_rec.estimate_price    , wk_this_inventory         , wk_process_qty1           ,
                                 wk_process_qty2     ,
                                 wk_pur_qty(1)  ,
                                 wk_pur_qty(2)  ,
                                 wk_pur_qty(3)  ,
                                 wk_pur_qty(4)  ,
                                 wk_pur_qty(5)  ,
                                 wk_pur_qty(6)  ,
                                 wk_pur_qty(7)  ,
                                 wk_pur_qty(8)  ,
                                 wk_pur_qty(9)  ,
                                 wk_pur_qty(10) ,
                                 wk_pur_qty(11) ,
                                 wk_pur_qty(12) ,
                                 wk_pur_qty(13) , 
                                 wk_pur_qty(14) , 
                                 wk_pur_qty(15) , 
                                 wk_pur_qty(16) , 
                                 wk_pur_qty(17) , 
                                 wk_pur_qty(18) , 
                                 wk_pur_qty(19) , 
                                 wk_pur_qty(20) , 
                                 wk_pur_qty(21) , 
                                 wk_pur_qty(22)  
                                );
--?????????

                     wk_inventory_total := nvl(wk_this_inventory,0) + nvl(wk_process_qty1,0) +  nvl(wk_process_qty2,0);
--
                     i := 0;
                     <<remainset1>>
                     loop
                        if i > 22 then
                           exit remainset1;
                        end if;
                        i := i + 1;
--?????
                        wk_inventory_total := wk_inventory_total + wk_pur_qty(i) - wk_req_qty(i);
                        wk_remain_qty(i) := wk_inventory_total;
--?????
                        if i = 1 and wk_remain_qty(i) < 0 then
                           wk_net_qty(i) := wk_remain_qty(i) * -1;
                        elsif wk_remain_qty(i) < 0 then
                           wk_remain := wk_remain_qty(i-1);
                           if wk_remain > 0 then
                              wk_remain := 0;
                           end if;
                           wk_net_qty(i) := (wk_remain_qty(i) - wk_remain) * -1;
                        end if;
                     end loop remainset1;
--??????
                     ttl_rec := null ;
                     open c_ttl(30);
                        fetch c_ttl into ttl_rec;
                     close c_ttl;
                      /*   ??????????  */
                     insert into required_d7
                                (operation_date    , section_code    , item_no           ,
                                 sort              , title           , purchase_leadtime ,
                                 minimum_order_lot , split_order_lot , supplier_code     ,
                                 estimate_price    , this_inventory  , process_qty1      ,
                                 process_qty2      , this_week       ,
                                 week2             , week3           , week4             ,
                                 week5             , week6           , week7             ,
                                 week8             , week9           , week10            ,
                                 week11            , week12          , week13            ,
                                 week14            , week15          , week16            ,
                                 week17            , week18          , week19            ,
                                 week20            , week21          , week22            
                                 )
                             values
                                (sysdate             , wk_section_code_old , bal_rec_old.item_no ,
                                 30                        , ttl_rec.title             , imk_rec.purchase_leadtime ,
                                 imk_rec.minimum_order_lot , imk_rec.split_order_lot   , imk_rec.supplier_code     ,
                                 imk_rec.estimate_price    , wk_this_inventory         , wk_process_qty1           ,
                                 wk_process_qty2     ,
                                 wk_remain_qty(1)  ,
                                 wk_remain_qty(2)  ,
                                 wk_remain_qty(3)  ,
                                 wk_remain_qty(4)  ,
                                 wk_remain_qty(5)  ,
                                 wk_remain_qty(6)  ,
                                 wk_remain_qty(7)  ,
                                 wk_remain_qty(8)  ,
                                 wk_remain_qty(9)  ,
                                 wk_remain_qty(10) ,
                                 wk_remain_qty(11) ,
                                 wk_remain_qty(12) ,
                                 wk_remain_qty(13) ,
                                 wk_remain_qty(14) ,
                                 wk_remain_qty(15) ,
                                 wk_remain_qty(16) ,
                                 wk_remain_qty(17) ,
                                 wk_remain_qty(18) ,
                                 wk_remain_qty(19) ,
                                 wk_remain_qty(20) ,
                                 wk_remain_qty(21) ,
                                 wk_remain_qty(22) 
                                );
--??????
                     ttl_rec := null ;
                     open c_ttl(40);
                        fetch c_ttl into ttl_rec;
                     close c_ttl;
                      /*   ??????????  */
                     insert into required_d7
                                (operation_date    , section_code    , item_no           ,
                                 sort              , title           , purchase_leadtime ,
                                 minimum_order_lot , split_order_lot , supplier_code     ,
                                 estimate_price    , this_inventory  , process_qty1      ,
                                 process_qty2      , this_week       ,
                                 week2             , week3           , week4             ,
                                 week5             , week6           , week7             ,
                                 week8             , week9           , week10            ,
                                 week11            , week12          , week13            ,
                                 week14            , week15          , week16            ,
                                 week17            , week18          , week19            ,
                                 week20            , week21          , week22            
                                )
                             values
                                (sysdate             , wk_section_code_old , bal_rec_old.item_no ,
                                 40                        , ttl_rec.title             , imk_rec.purchase_leadtime ,
                                 imk_rec.minimum_order_lot , imk_rec.split_order_lot   , imk_rec.supplier_code     ,
                                 imk_rec.estimate_price    , wk_this_inventory         , wk_process_qty1           ,
                                 wk_process_qty2     ,
                                 wk_net_qty(1)  ,
                                 wk_net_qty(2)  ,
                                 wk_net_qty(3)  ,
                                 wk_net_qty(4)  ,
                                 wk_net_qty(5)  ,
                                 wk_net_qty(6)  ,
                                 wk_net_qty(7)  ,
                                 wk_net_qty(8)  ,
                                 wk_net_qty(9)  ,
                                 wk_net_qty(10) ,
                                 wk_net_qty(11) ,
                                 wk_net_qty(12) ,
                                 wk_net_qty(13) ,
                                 wk_net_qty(14) ,
                                 wk_net_qty(15) ,
                                 wk_net_qty(16) ,
                                 wk_net_qty(17) ,
                                 wk_net_qty(18) ,
                                 wk_net_qty(19) ,
                                 wk_net_qty(20) ,
                                 wk_net_qty(21) ,
                                 wk_net_qty(22) 
                                );
--????2-1
                else
                    /*  ????????????????100?????????????) */
                    if  w_supplier_ratio_add = 100 then  

                        /*   ????????????  */
                        open c_imk2(bal_rec_old.item_no,w_supplier_code_save); --????????????
                           fetch c_imk2 into
                                 w_supplier_code, w_purchase_leadtime, w_minimum_order_lot,
                                 w_split_order_lot, w_estimate_price;
                           if c_imk2%notfound or c_imk2%notfound is null then
                              w_supplier_code     := null;
                              w_purchase_leadtime := 0;
                              w_minimum_order_lot := 0;
                              w_split_order_lot   := 0;
                              w_estimate_price    := 0;
                           end if;
                        close c_imk2;
--????3-1
                        /*   ????????????????  */
                        c_rbs2_rec  := null;
                        open c_rbs2(bal_rec_old.item_no,w_supplier_code_save); --????????????
                            fetch c_rbs2 into c_rbs2_rec;
--                            w_supplier_code     := w_supplier_code_save;
--                            if c_rbs2%notfound or c_rbs2%notfound is null then
--                                w_supplier_code     := null;
--                                w_purchase_leadtime := 0;
--                                w_minimum_order_lot := 0;
--                                w_split_order_lot   := 0;
--                                w_estimate_price    := 0;
--                            end if;
                        close c_rbs2;
--                        dbms_output.put_line(bal_rec_old.item_no || '-'|| w_supplier_code_save || '-'|| c_rbs2_rec.this_week );
              
                        wk_pur_qty(1)  := nvl(c_rbs2_rec.this_week,0);
                        wk_pur_qty(2)  := nvl(c_rbs2_rec.week2,0);
                        wk_pur_qty(3)  := nvl(c_rbs2_rec.week3,0);
                        wk_pur_qty(4)  := nvl(c_rbs2_rec.week4,0);
                        wk_pur_qty(5)  := nvl(c_rbs2_rec.week5,0);
                        wk_pur_qty(6)  := nvl(c_rbs2_rec.week6,0);
                        wk_pur_qty(7)  := nvl(c_rbs2_rec.week7,0);
                        wk_pur_qty(8)  := nvl(c_rbs2_rec.week8,0);
                        wk_pur_qty(9)  := nvl(c_rbs2_rec.week9,0);
                        wk_pur_qty(10) := nvl(c_rbs2_rec.week10,0);
                        wk_pur_qty(11) := nvl(c_rbs2_rec.week11,0);
                        wk_pur_qty(12) := nvl(c_rbs2_rec.week12,0);
                        wk_pur_qty(13) := nvl(c_rbs2_rec.week13,0);
                        wk_pur_qty(14) := nvl(c_rbs2_rec.week14,0);
                        wk_pur_qty(15) := nvl(c_rbs2_rec.week15,0);
                        wk_pur_qty(16) := nvl(c_rbs2_rec.week16,0);
                        wk_pur_qty(17) := nvl(c_rbs2_rec.week17,0);
                        wk_pur_qty(18) := nvl(c_rbs2_rec.week18,0);
                        wk_pur_qty(19) := nvl(c_rbs2_rec.week19,0);
                        wk_pur_qty(20) := nvl(c_rbs2_rec.week20,0);
                        wk_pur_qty(21) := nvl(c_rbs2_rec.week21,0);
                        wk_pur_qty(22) := nvl(c_rbs2_rec.week22,0);

                        z99a03100pp(wk_req_qty(1)  * w_supplier_ratio_save / 100, wk_zreq_qty(1));--?????????????
                        z99a03100pp(wk_req_qty(2)  * w_supplier_ratio_save / 100, wk_zreq_qty(2));--?????????????
                        z99a03100pp(wk_req_qty(3)  * w_supplier_ratio_save / 100, wk_zreq_qty(3));--?????????????
                        z99a03100pp(wk_req_qty(4)  * w_supplier_ratio_save / 100, wk_zreq_qty(4));--?????????????
                        z99a03100pp(wk_req_qty(5)  * w_supplier_ratio_save / 100, wk_zreq_qty(5));--?????????????
                        z99a03100pp(wk_req_qty(6)  * w_supplier_ratio_save / 100, wk_zreq_qty(6));--?????????????
                        z99a03100pp(wk_req_qty(7)  * w_supplier_ratio_save / 100, wk_zreq_qty(7));--?????????????
                        z99a03100pp(wk_req_qty(8)  * w_supplier_ratio_save / 100, wk_zreq_qty(8));--?????????????
                        z99a03100pp(wk_req_qty(9)  * w_supplier_ratio_save / 100, wk_zreq_qty(9));--?????????????
                        z99a03100pp(wk_req_qty(10) * w_supplier_ratio_save / 100, wk_zreq_qty(10));--?????????????
                        z99a03100pp(wk_req_qty(11) * w_supplier_ratio_save / 100, wk_zreq_qty(11));--?????????????
                        z99a03100pp(wk_req_qty(12) * w_supplier_ratio_save / 100, wk_zreq_qty(12));--?????????????
                        z99a03100pp(wk_req_qty(13) * w_supplier_ratio_save / 100, wk_zreq_qty(13));--?????????????
                        z99a03100pp(wk_req_qty(14) * w_supplier_ratio_save / 100, wk_zreq_qty(14));--?????????????
                        z99a03100pp(wk_req_qty(15) * w_supplier_ratio_save / 100, wk_zreq_qty(15));--?????????????
                        z99a03100pp(wk_req_qty(16) * w_supplier_ratio_save / 100, wk_zreq_qty(16));--?????????????
                        z99a03100pp(wk_req_qty(17) * w_supplier_ratio_save / 100, wk_zreq_qty(17));--?????????????
                        z99a03100pp(wk_req_qty(18) * w_supplier_ratio_save / 100, wk_zreq_qty(18));--?????????????
                        z99a03100pp(wk_req_qty(19) * w_supplier_ratio_save / 100, wk_zreq_qty(19));--?????????????
                        z99a03100pp(wk_req_qty(20) * w_supplier_ratio_save / 100, wk_zreq_qty(20));--?????????????
                        z99a03100pp(wk_req_qty(21) * w_supplier_ratio_save / 100, wk_zreq_qty(21));--?????????????
                        z99a03100pp(wk_req_qty(22) * w_supplier_ratio_save / 100, wk_zreq_qty(22));--?????????????

                        ttl_rec := null ;
                        open c_ttl(10);
                           fetch c_ttl into ttl_rec;
                        close c_ttl;
                        /*   ??????????  */
                        insert into required_d7
                                   (operation_date    , section_code    , item_no           ,
                                    sort              , title           , purchase_leadtime ,
                                    minimum_order_lot , split_order_lot , supplier_code     ,
                                    estimate_price    , this_inventory  , process_qty1      ,
                                    process_qty2      , this_week       ,
                                    week2             , week3           , week4             ,
                                    week5             , week6           , week7             ,
                                    week8             , week9           , week10            ,
                                    week11            , week12          , week13            ,
                                    week14            , week15          , week16            ,
                                    week17            , week18          , week19            ,
                                    week20            , week21          , week22            
                                   )
                                values
                                   (sysdate             , wk_section_code_old , bal_rec_old.item_no ,
                                    10                  , ttl_rec.title       , w_purchase_leadtime ,
                                    w_minimum_order_lot , w_split_order_lot   , w_supplier_code_save     ,
                                    w_estimate_price    , round(wk_this_inventory * w_supplier_ratio_save / 100,0)    , round(wk_process_qty1 * w_supplier_ratio_save / 100,0)    ,
                                    round(wk_process_qty2 * w_supplier_ratio_save / 100,0)    ,
                                    wk_zreq_qty(1)     ,
                                    wk_zreq_qty(2)     ,
                                    wk_zreq_qty(3)     ,
                                    wk_zreq_qty(4)     ,
                                    wk_zreq_qty(5)     ,
                                    wk_zreq_qty(6)     ,
                                    wk_zreq_qty(7)     ,
                                    wk_zreq_qty(8)     ,
                                    wk_zreq_qty(9)     ,
                                    wk_zreq_qty(10)    ,
                                    wk_zreq_qty(11)    ,
                                    wk_zreq_qty(12)    ,
                                    wk_zreq_qty(13)    ,
                                    wk_zreq_qty(14)    ,
                                    wk_zreq_qty(15)    ,
                                    wk_zreq_qty(16)    ,
                                    wk_zreq_qty(17)    ,
                                    wk_zreq_qty(18)    ,
                                    wk_zreq_qty(19)    ,
                                    wk_zreq_qty(20)    ,
                                    wk_zreq_qty(21)    ,
                                    wk_zreq_qty(22)    
                                   ) ;
--?????
                        ttl_rec := null ;
                        open c_ttl(20);
                           fetch c_ttl into ttl_rec;
                        close c_ttl;
                        /*   ??????????  */
                        insert into required_d7
                                   (operation_date    , section_code    , item_no           ,
                                    sort              , title           , purchase_leadtime ,
                                    minimum_order_lot , split_order_lot , supplier_code     ,
                                    estimate_price    , this_inventory  , process_qty1      ,
                                    process_qty2      , this_week       ,
                                    week2             , week3           , week4             ,
                                    week5             , week6           , week7             ,
                                    week8             , week9           , week10            ,
                                    week11            , week12          , week13            ,
                                    week14            , week15          , week16            ,
                                    week17            , week18          , week19            ,
                                    week20            , week21          , week22            
                                   )
                                values
                                   (sysdate             , wk_section_code_old , bal_rec_old.item_no ,
                                    20                  , ttl_rec.title       , w_purchase_leadtime ,
                                    w_minimum_order_lot , w_split_order_lot   , w_supplier_code_save     ,
                                    w_estimate_price    , round(wk_this_inventory * w_supplier_ratio_save / 100,0)    , round(wk_process_qty1 * w_supplier_ratio_save / 100,0)    ,
                                    round(wk_process_qty2 * w_supplier_ratio_save / 100,0)    ,
                                    wk_pur_qty(1)   ,
                                    wk_pur_qty(2)   ,
                                    wk_pur_qty(3)   ,
                                    wk_pur_qty(4)   ,
                                    wk_pur_qty(5)   ,
                                    wk_pur_qty(6)   ,
                                    wk_pur_qty(7)   ,
                                    wk_pur_qty(8)   ,
                                    wk_pur_qty(9)   ,
                                    wk_pur_qty(10)  ,
                                    wk_pur_qty(11)  ,
                                    wk_pur_qty(12)  ,
                                    wk_pur_qty(13)  ,
                                    wk_pur_qty(14)  ,
                                    wk_pur_qty(15)  ,
                                    wk_pur_qty(16)  ,
                                    wk_pur_qty(17)  ,
                                    wk_pur_qty(18)  ,
                                    wk_pur_qty(19)  ,
                                    wk_pur_qty(20)  ,
                                    wk_pur_qty(21)  ,
                                    wk_pur_qty(22)  
                                   );
--?????????

                      wk_inventory_total := nvl(round(wk_this_inventory * w_supplier_ratio_save / 100,0),0) + nvl(round(wk_process_qty1 * w_supplier_ratio_save / 100,0),0) +  nvl(round(wk_process_qty2 * w_supplier_ratio_save / 100,0),0);
--
                        i := 0;
                        <<remainset2>>
                        loop
                           if i > 22 then
                              exit remainset2;
                           end if;
                           i := i + 1;
--????? 
                           wk_inventory_total := wk_inventory_total + wk_pur_qty(i)   - wk_zreq_qty(i);
                           wk_remain_qty(i) := wk_inventory_total;
--?????
                           if i = 1 and wk_remain_qty(i) < 0 then
                              wk_net_qty(i) := wk_remain_qty(i) * -1;
                           elsif wk_remain_qty(i) < 0 then
                              wk_remain := wk_remain_qty(i-1);
                              if wk_remain > 0 then
                                 wk_remain := 0;
                              end if;
                              wk_net_qty(i) := (wk_remain_qty(i) - wk_remain) * -1;
                           end if;
                        end loop remainset2;
--??????
                        ttl_rec := null ;
                        open c_ttl(30);
                           fetch c_ttl into ttl_rec;
                        close c_ttl;
                        /*   ??????????  */
                        insert into required_d7
                                   (operation_date    , section_code    , item_no           ,
                                    sort              , title           , purchase_leadtime ,
                                    minimum_order_lot , split_order_lot , supplier_code     ,
                                    estimate_price    , this_inventory  , process_qty1      ,
                                    process_qty2      , this_week       ,
                                    week2             , week3           , week4             ,
                                    week5             , week6           , week7             ,
                                    week8             , week9           , week10            ,
                                    week11            , week12          , week13            ,
                                    week14            , week15          , week16            ,
                                    week17            , week18          , week19            ,
                                    week20            , week21          , week22            
                                   )
                                values
                                   (sysdate             , wk_section_code_old , bal_rec_old.item_no ,
                                    30                  , ttl_rec.title       , w_purchase_leadtime ,
                                    w_minimum_order_lot , w_split_order_lot   , w_supplier_code_save     ,
                                    w_estimate_price    , round(wk_this_inventory * w_supplier_ratio_save / 100,0)    , round(wk_process_qty1 * w_supplier_ratio_save / 100,0)    ,
                                    round(wk_process_qty2 * w_supplier_ratio_save / 100,0)    ,
                                    wk_remain_qty(1)    ,
                                    wk_remain_qty(2)    ,
                                    wk_remain_qty(3)    ,
                                    wk_remain_qty(4)    ,
                                    wk_remain_qty(5)    ,
                                    wk_remain_qty(6)    ,
                                    wk_remain_qty(7)    ,
                                    wk_remain_qty(8)    ,
                                    wk_remain_qty(9)    ,
                                    wk_remain_qty(10)   ,
                                    wk_remain_qty(11)   ,
                                    wk_remain_qty(12)   ,
                                    wk_remain_qty(13)   ,
                                    wk_remain_qty(14)   ,
                                    wk_remain_qty(15)   ,
                                    wk_remain_qty(16)   ,
                                    wk_remain_qty(17)   ,
                                    wk_remain_qty(18)   ,
                                    wk_remain_qty(19)   ,
                                    wk_remain_qty(20)   ,
                                    wk_remain_qty(21)   ,
                                    wk_remain_qty(22)   
                                   );
--??????
                        ttl_rec := null ;
                        open c_ttl(40);
                           fetch c_ttl into ttl_rec;
                        close c_ttl;
                        /*   ??????????  */
                        insert into required_d7
                                   (operation_date    , section_code    , item_no           ,
                                    sort              , title           , purchase_leadtime ,
                                    minimum_order_lot , split_order_lot , supplier_code     ,
                                    estimate_price    , this_inventory  , process_qty1      ,
                                    process_qty2      , this_week       ,
                                    week2             , week3           , week4             ,
                                    week5             , week6           , week7             ,
                                    week8             , week9           , week10            ,
                                    week11            , week12          , week13            ,
                                    week14            , week15          , week16            ,
                                    week17            , week18          , week19            ,
                                    week20            , week21          , week22            
                                   )
                                 values
                                   (sysdate             , wk_section_code_old , bal_rec_old.item_no ,
                                    40                  , ttl_rec.title       , w_purchase_leadtime ,
                                    w_minimum_order_lot , w_split_order_lot   , w_supplier_code_save     ,
                                    w_estimate_price    , round(wk_this_inventory * w_supplier_ratio_save / 100,0)    , round(wk_process_qty1 * w_supplier_ratio_save / 100,0)    ,
                                    round(wk_process_qty2 * w_supplier_ratio_save / 100,0)    ,
                                    wk_net_qty(1)    ,
                                    wk_net_qty(2)    ,
                                    wk_net_qty(3)    ,
                                    wk_net_qty(4)    ,
                                    wk_net_qty(5)    ,
                                    wk_net_qty(6)    ,
                                    wk_net_qty(7)    ,
                                    wk_net_qty(8)    ,
                                    wk_net_qty(9)    ,
                                    wk_net_qty(10)   ,
                                    wk_net_qty(11)   ,
                                    wk_net_qty(12)   ,
                                    wk_net_qty(13)   ,
                                    wk_net_qty(14)   ,
                                    wk_net_qty(15)   ,
                                    wk_net_qty(16)   ,
                                    wk_net_qty(17)   ,
                                    wk_net_qty(18)   ,
                                    wk_net_qty(19)   ,
                                    wk_net_qty(20)   ,
                                    wk_net_qty(21)   ,
                                    wk_net_qty(22)   
                           );

--????3-1
                    /*  ????????????????100???????????????) */
                    else   
                        /*  100%????? */
                        w_supplier_ratio_save := w_supplier_ratio_save + (100 -  w_supplier_ratio_add); 
                        /*   ????????????  */
                        open c_imk2(bal_rec_old.item_no,w_supplier_code_save); --????????????
                            fetch c_imk2 into
                                w_supplier_code, w_purchase_leadtime, w_minimum_order_lot,
                                w_split_order_lot, w_estimate_price;
                            if c_imk2%notfound or c_imk2%notfound is null then
                                w_supplier_code     := null;
                                w_purchase_leadtime := 0;
                                w_minimum_order_lot := 0;
                                w_split_order_lot   := 0;
                                w_estimate_price    := 0;
                            end if;
                        close c_imk2;
--????4-1
                        /*   ????????????????  */
                        c_rbs2_rec  := null;
                        open c_rbs2(bal_rec_old.item_no,w_supplier_code_save); --????????????
                            fetch c_rbs2 into c_rbs2_rec;
--                          w_supplier_code     := w_supplier_code_save;
--                          if c_rbs2%notfound or c_rbs2%notfound is null then
--                             w_supplier_code     := null;
--                             w_purchase_leadtime := 0;
--                             w_minimum_order_lot := 0;
--                             w_split_order_lot   := 0;
--                             w_estimate_price    := 0;
--                          end if;
                        close c_rbs2;
                        wk_pur_qty(1)  := nvl(c_rbs2_rec.this_week,0);
                        wk_pur_qty(2)  := nvl(c_rbs2_rec.week2,0);
                        wk_pur_qty(3)  := nvl(c_rbs2_rec.week3,0);
                        wk_pur_qty(4)  := nvl(c_rbs2_rec.week4,0);
                        wk_pur_qty(5)  := nvl(c_rbs2_rec.week5,0);
                        wk_pur_qty(6)  := nvl(c_rbs2_rec.week6,0);
                        wk_pur_qty(7)  := nvl(c_rbs2_rec.week7,0);
                        wk_pur_qty(8)  := nvl(c_rbs2_rec.week8,0);
                        wk_pur_qty(9)  := nvl(c_rbs2_rec.week9,0);
                        wk_pur_qty(10) := nvl(c_rbs2_rec.week10,0);
                        wk_pur_qty(11) := nvl(c_rbs2_rec.week11,0);
                        wk_pur_qty(12) := nvl(c_rbs2_rec.week12,0);
                        wk_pur_qty(13) := nvl(c_rbs2_rec.week13,0);
                        wk_pur_qty(14) := nvl(c_rbs2_rec.week14,0);
                        wk_pur_qty(15) := nvl(c_rbs2_rec.week15,0);
                        wk_pur_qty(16) := nvl(c_rbs2_rec.week16,0);
                        wk_pur_qty(17) := nvl(c_rbs2_rec.week17,0);
                        wk_pur_qty(18) := nvl(c_rbs2_rec.week18,0);
                        wk_pur_qty(19) := nvl(c_rbs2_rec.week19,0);
                        wk_pur_qty(20) := nvl(c_rbs2_rec.week20,0);
                        wk_pur_qty(21) := nvl(c_rbs2_rec.week21,0);
                        wk_pur_qty(22) := nvl(c_rbs2_rec.week22,0);

                        z99a03100pp(wk_req_qty(1)  * w_supplier_ratio_save / 100, wk_zreq_qty(1));--?????????????
                        z99a03100pp(wk_req_qty(2)  * w_supplier_ratio_save / 100, wk_zreq_qty(2));--?????????????
                        z99a03100pp(wk_req_qty(3)  * w_supplier_ratio_save / 100, wk_zreq_qty(3));--?????????????
                        z99a03100pp(wk_req_qty(4)  * w_supplier_ratio_save / 100, wk_zreq_qty(4));--?????????????
                        z99a03100pp(wk_req_qty(5)  * w_supplier_ratio_save / 100, wk_zreq_qty(5));--?????????????
                        z99a03100pp(wk_req_qty(6)  * w_supplier_ratio_save / 100, wk_zreq_qty(6));--?????????????
                        z99a03100pp(wk_req_qty(7)  * w_supplier_ratio_save / 100, wk_zreq_qty(7));--?????????????
                        z99a03100pp(wk_req_qty(8)  * w_supplier_ratio_save / 100, wk_zreq_qty(8));--?????????????
                        z99a03100pp(wk_req_qty(9)  * w_supplier_ratio_save / 100, wk_zreq_qty(9));--?????????????
                        z99a03100pp(wk_req_qty(10) * w_supplier_ratio_save / 100, wk_zreq_qty(10));--?????????????
                        z99a03100pp(wk_req_qty(11) * w_supplier_ratio_save / 100, wk_zreq_qty(11));--?????????????
                        z99a03100pp(wk_req_qty(12) * w_supplier_ratio_save / 100, wk_zreq_qty(12));--?????????????
                        z99a03100pp(wk_req_qty(13) * w_supplier_ratio_save / 100, wk_zreq_qty(13));--?????????????
                        z99a03100pp(wk_req_qty(14) * w_supplier_ratio_save / 100, wk_zreq_qty(14));--?????????????
                        z99a03100pp(wk_req_qty(15) * w_supplier_ratio_save / 100, wk_zreq_qty(15));--?????????????
                        z99a03100pp(wk_req_qty(16) * w_supplier_ratio_save / 100, wk_zreq_qty(16));--?????????????
                        z99a03100pp(wk_req_qty(17) * w_supplier_ratio_save / 100, wk_zreq_qty(17));--?????????????
                        z99a03100pp(wk_req_qty(18) * w_supplier_ratio_save / 100, wk_zreq_qty(18));--?????????????
                        z99a03100pp(wk_req_qty(19) * w_supplier_ratio_save / 100, wk_zreq_qty(19));--?????????????
                        z99a03100pp(wk_req_qty(20) * w_supplier_ratio_save / 100, wk_zreq_qty(20));--?????????????
                        z99a03100pp(wk_req_qty(21) * w_supplier_ratio_save / 100, wk_zreq_qty(21));--?????????????
                        z99a03100pp(wk_req_qty(22) * w_supplier_ratio_save / 100, wk_zreq_qty(22));--?????????????

                        ttl_rec := null ;
                        open c_ttl(10);
                           fetch c_ttl into ttl_rec;
                        close c_ttl;
                        /*   ??????????  */
                        insert into required_d7
                                   (operation_date    , section_code    , item_no           ,
                                    sort              , title           , purchase_leadtime ,
                                    minimum_order_lot , split_order_lot , supplier_code     ,
                                    estimate_price    , this_inventory  , process_qty1      ,
                                    process_qty2      , this_week       ,
                                    week2             , week3           , week4             ,
                                    week5             , week6           , week7             ,
                                    week8             , week9           , week10            ,
                                    week11            , week12          , week13            ,
                                    week14            , week15          , week16            ,
                                    week17            , week18          , week19            ,
                                    week20            , week21          , week22            
                                   )
                                values
                                   (sysdate             , wk_section_code_old , bal_rec_old.item_no ,
                                    10                  , ttl_rec.title       , w_purchase_leadtime ,
                                    w_minimum_order_lot , w_split_order_lot   , w_supplier_code_save     ,
                                    w_estimate_price    , round(wk_this_inventory * w_supplier_ratio_save / 100,0)    , round(wk_process_qty1 * w_supplier_ratio_save / 100,0)    ,
                                    round(wk_process_qty2 * w_supplier_ratio_save / 100,0)    ,
                                    wk_zreq_qty(1)     ,
                                    wk_zreq_qty(2)     ,
                                    wk_zreq_qty(3)     ,
                                    wk_zreq_qty(4)     ,
                                    wk_zreq_qty(5)     ,
                                    wk_zreq_qty(6)     ,
                                    wk_zreq_qty(7)     ,
                                    wk_zreq_qty(8)     ,
                                    wk_zreq_qty(9)     ,
                                    wk_zreq_qty(10)    ,
                                    wk_zreq_qty(11)    ,
                                    wk_zreq_qty(12)    ,
                                    wk_zreq_qty(13)    ,
                                    wk_zreq_qty(14)    ,
                                    wk_zreq_qty(15)    ,
                                    wk_zreq_qty(16)    ,
                                    wk_zreq_qty(17)    ,
                                    wk_zreq_qty(18)    ,
                                    wk_zreq_qty(19)    ,
                                    wk_zreq_qty(20)    ,
                                    wk_zreq_qty(21)    ,
                                    wk_zreq_qty(22)    
                                   );
--?????
                        ttl_rec := null ;
                        open c_ttl(20);
                           fetch c_ttl into ttl_rec;
                        close c_ttl;
                        /*   ??????????  */
                        insert into required_d7
                                   (operation_date    , section_code    , item_no           ,
                                    sort              , title           , purchase_leadtime ,
                                    minimum_order_lot , split_order_lot , supplier_code     ,
                                    estimate_price    , this_inventory  , process_qty1      ,
                                    process_qty2      , this_week       ,
                                    week2             , week3           , week4             ,
                                    week5             , week6           , week7             ,
                                    week8             , week9           , week10            ,
                                    week11            , week12          , week13            ,
                                    week14            , week15          , week16            ,
                                    week17            , week18          , week19            ,
                                    week20            , week21          , week22            
                                   )
                                values
                                   (sysdate             , wk_section_code_old , bal_rec_old.item_no ,
                                    20                  , ttl_rec.title       , w_purchase_leadtime ,
                                    w_minimum_order_lot , w_split_order_lot   , w_supplier_code_save     ,
                                    w_estimate_price    , round(wk_this_inventory * w_supplier_ratio_save / 100,0)    , round(wk_process_qty1 * w_supplier_ratio_save / 100,0)    ,
                                    round(wk_process_qty2 * w_supplier_ratio_save / 100,0)    ,
                                    wk_pur_qty(1)   ,
                                    wk_pur_qty(2)   ,
                                    wk_pur_qty(3)   ,
                                    wk_pur_qty(4)   ,
                                    wk_pur_qty(5)   ,
                                    wk_pur_qty(6)   ,
                                    wk_pur_qty(7)   ,
                                    wk_pur_qty(8)   ,
                                    wk_pur_qty(9)   ,
                                    wk_pur_qty(10)  ,
                                    wk_pur_qty(11)  ,
                                    wk_pur_qty(12)  ,
                                    wk_pur_qty(13)  ,
                                    wk_pur_qty(14)  ,
                                    wk_pur_qty(15)  ,
                                    wk_pur_qty(16)  ,
                                    wk_pur_qty(17)  ,
                                    wk_pur_qty(18)  ,
                                    wk_pur_qty(19)  ,
                                    wk_pur_qty(20)  ,
                                    wk_pur_qty(21)  ,
                                    wk_pur_qty(22)  
                                   );
--?????????
                             
                      wk_inventory_total := nvl(round(wk_this_inventory * w_supplier_ratio_save / 100,0),0) + nvl(round(wk_process_qty1 * w_supplier_ratio_save / 100,0),0) +  nvl(round(wk_process_qty2 * w_supplier_ratio_save / 100,0),0);
--
                        i := 0;
                        <<remainset3>>
                        loop
                           if i > 22 then
                              exit remainset3;
                           end if;
                           i := i + 1;
--?????
                           wk_inventory_total := wk_inventory_total + wk_pur_qty(i)  - wk_zreq_qty(i);
                           wk_remain_qty(i) := wk_inventory_total;
--?????
                           if i = 1 and wk_remain_qty(i) < 0 then
                              wk_net_qty(i) := wk_remain_qty(i) * -1;
                           elsif wk_remain_qty(i) < 0 then
                              wk_remain := wk_remain_qty(i-1);
                              if wk_remain > 0 then
                                 wk_remain := 0;
                              end if;
                              wk_net_qty(i) := (wk_remain_qty(i) - wk_remain) * -1;
                           end if;
                        end loop remainset3;
--??????
                        ttl_rec := null ;
                        open c_ttl(30);
                           fetch c_ttl into ttl_rec;
                        close c_ttl;
                        /*   ??????????  */
                        insert into required_d7
                                   (operation_date    , section_code    , item_no           ,
                                    sort              , title           , purchase_leadtime ,
                                    minimum_order_lot , split_order_lot , supplier_code     ,
                                    estimate_price    , this_inventory  , process_qty1      ,
                                    process_qty2      , this_week       ,
                                    week2             , week3           , week4             ,
                                    week5             , week6           , week7             ,
                                    week8             , week9           , week10            ,
                                    week11            , week12          , week13            ,
                                    week14            , week15          , week16            ,
                                    week17            , week18          , week19            ,
                                    week20            , week21          , week22            
                                   )
                                values
                                   (sysdate             , wk_section_code_old , bal_rec_old.item_no ,
                                    30                  , ttl_rec.title       , w_purchase_leadtime ,
                                    w_minimum_order_lot , w_split_order_lot   , w_supplier_code_save     ,
                                    w_estimate_price    , round(wk_this_inventory * w_supplier_ratio_save / 100,0)    , round(wk_process_qty1 * w_supplier_ratio_save / 100,0)    ,
                                    round(wk_process_qty2 * w_supplier_ratio_save / 100,0)    ,
                                    wk_remain_qty(1)    ,
                                    wk_remain_qty(2)    ,
                                    wk_remain_qty(3)    ,
                                    wk_remain_qty(4)    ,
                                    wk_remain_qty(5)    ,
                                    wk_remain_qty(6)    ,
                                    wk_remain_qty(7)    ,
                                    wk_remain_qty(8)    ,
                                    wk_remain_qty(9)    ,
                                    wk_remain_qty(10)   ,
                                    wk_remain_qty(11)   ,
                                    wk_remain_qty(12)   ,
                                    wk_remain_qty(13)   ,
                                    wk_remain_qty(14)   ,
                                    wk_remain_qty(15)   ,
                                    wk_remain_qty(16)   ,
                                    wk_remain_qty(17)   ,
                                    wk_remain_qty(18)   ,
                                    wk_remain_qty(19)   ,
                                    wk_remain_qty(20)   ,
                                    wk_remain_qty(21)   ,
                                    wk_remain_qty(22)   
                                   );
--??????
                        ttl_rec := null ;
                        open c_ttl(40);
                           fetch c_ttl into ttl_rec;
                        close c_ttl;
                        /*   ??????????  */
                        insert into required_d7
                                   (operation_date    , section_code    , item_no           ,
                                    sort              , title           , purchase_leadtime ,
                                    minimum_order_lot , split_order_lot , supplier_code     ,
                                    estimate_price    , this_inventory  , process_qty1      ,
                                    process_qty2      , this_week       ,
                                    week2             , week3           , week4             ,
                                    week5             , week6           , week7             ,
                                    week8             , week9           , week10            ,
                                    week11            , week12          , week13            ,
                                    week14            , week15          , week16            ,
                                    week17            , week18          , week19            ,
                                    week20            , week21          , week22            
                                   )
                                values
                                   (sysdate             , wk_section_code_old , bal_rec_old.item_no ,
                                    40                  , ttl_rec.title       , w_purchase_leadtime ,
                                    w_minimum_order_lot , w_split_order_lot   , w_supplier_code_save     ,
                                    w_estimate_price    , round(wk_this_inventory * w_supplier_ratio_save / 100,0)    , round(wk_process_qty1 * w_supplier_ratio_save / 100,0)    ,
                                    round(wk_process_qty2 * w_supplier_ratio_save / 100,0)    ,
                                    wk_net_qty(1)    ,
                                    wk_net_qty(2)    ,
                                    wk_net_qty(3)    ,
                                    wk_net_qty(4)    ,
                                    wk_net_qty(5)    ,
                                    wk_net_qty(6)    ,
                                    wk_net_qty(7)    ,
                                    wk_net_qty(8)    ,
                                    wk_net_qty(9)    ,
                                    wk_net_qty(10)   ,
                                    wk_net_qty(11)   ,
                                    wk_net_qty(12)   ,
                                    wk_net_qty(13)   ,
                                    wk_net_qty(14)   ,
                                    wk_net_qty(15)   ,
                                    wk_net_qty(16)   ,
                                    wk_net_qty(17)   ,
                                    wk_net_qty(18)   ,
                                    wk_net_qty(19)   ,
                                    wk_net_qty(20)   ,
                                    wk_net_qty(21)   ,
                                    wk_net_qty(22)   
                                   );

--????4-1
                    end if;               
                end if;

   end detail_rtn;


/***************************************************************************
  ?????????????
 ?SORT???= 50?
*****************************************************************************/
   procedure required_supplier_write_rtn
   is
   begin
      i := 0;
      <<rup2>>
      loop
         if i > 22 then
            exit rup2;
         end if;
         i := i + 1;
--         DBMS_OUTPUT.PUT_LINE('WK-' || wk_sup_pur_qty(i)) ;
         wk_sup_pur_qty(i) := trunc(wk_sup_pur_qty(i),v_decimal);
      end loop rup2;

       /*   ????????????????  */
       insert into required_by_supplier 
          (operation_date    , section_code    , item_no           ,
           sort              , title           , purchase_leadtime ,
           minimum_order_lot , split_order_lot , supplier_code     ,
           estimate_price    , this_inventory  , process_qty1      ,
           process_qty2      , this_week       ,
           week2             , week3           , week4             ,
           week5             , week6           , week7             ,
           week8             , week9           , week10            ,
           week11            , week12          , week13            ,
           week14            , week15          , week16            ,
           week17            , week18          , week19            ,
           week20            , week21          , week22            
          )
       values
          (sysdate             , wk_section_code_old , bal_sup_rec_old.item_no  ,
           50                  , ttl_rec.title       , 0                        ,
           0                   , w_split_order_lot   , bal_sup_rec_old.supply_st,
           0                   , 0                   , 0                        ,
           0                   ,
           wk_sup_pur_qty(1)   ,
           wk_sup_pur_qty(2)   ,
           wk_sup_pur_qty(3)   ,
           wk_sup_pur_qty(4)   ,
           wk_sup_pur_qty(5)   ,
           wk_sup_pur_qty(6)   ,
           wk_sup_pur_qty(7)   ,
           wk_sup_pur_qty(8)   ,
           wk_sup_pur_qty(9)   , 
           wk_sup_pur_qty(10)  ,
           wk_sup_pur_qty(11)  ,
           wk_sup_pur_qty(12)  ,
           wk_sup_pur_qty(13)  ,
           wk_sup_pur_qty(14)  ,
           wk_sup_pur_qty(15)  ,
           wk_sup_pur_qty(16)  ,
           wk_sup_pur_qty(17)  ,
           wk_sup_pur_qty(18)  ,
           wk_sup_pur_qty(19)  ,
           wk_sup_pur_qty(20)  ,
           wk_sup_pur_qty(21)  ,
           wk_sup_pur_qty(22)  
          );
   end required_supplier_write_rtn;

/***************************************************************************


*****************************************************************************/
   procedure required_d7_header_write_rtn
   is
   begin
     declare
    cursor c_imk3 (para1 in number,para2 in number)  --????????
     is
      select       supplier_code  , purchase_leadtime, minimum_order_lot,
                   split_order_lot, estimate_price
      from itemmaker
      where item_no       = para1
        and supplier_code = para2
      order by alter_procedure;
   begin
      open c_rbs; --ITEMMAKER????????????????????????????????
                loop
                   fetch c_rbs into  c_rbs_rec;
                   i := 0;
                   <<wkclear2>>
                   loop
                     if i > 22 then
                        exit wkclear2;
                     end if;
                     i := i + 1;
                     wk_req_qty(i) := 0;
                     wk_pur_qty(i) := 0;
                     wk_remain_qty(i) := 0;
                     wk_net_qty(i) := 0;
                   end loop wkclear2;

                   exit when c_rbs%notfound or c_rbs%notfound is null;
                      /*   ????????????  */
                      open c_imk3(c_rbs_rec.item_no,c_rbs_rec.supplier_code); --????????????
                          fetch c_imk3 into
                                w_supplier_code, w_purchase_leadtime, w_minimum_order_lot,
                                w_split_order_lot, w_estimate_price;
                          if c_imk3%notfound or c_imk3%notfound is null then
                             w_supplier_code     := null;
                             w_purchase_leadtime := 0;
                             w_minimum_order_lot := 0;
                             w_split_order_lot   := 0;
                             w_estimate_price    := 0;
                          end if;
                       close c_imk3;

                       ttl_rec := null ;
                       open c_ttl(10);
                         fetch c_ttl into ttl_rec;
                       close c_ttl;
                       /*   ??????????  */
                       insert into required_d7
                                 (operation_date     , section_code    , item_no           ,
                                   sort              , title           , purchase_leadtime ,
                                   minimum_order_lot , split_order_lot , supplier_code     ,
                                   estimate_price    , this_inventory  , process_qty1      ,
                                   process_qty2      , this_week       ,
                                   week2             , week3           , week4             ,
                                   week5             , week6           , week7             ,
                                   week8             , week9           , week10            ,
                                   week11            , week12          , week13            ,
                                   week14            , week15          , week16            ,
                                   week17            , week18          , week19            ,
                                   week20            , week21          , week22            
                                  )
                         values
                                  (sysdate             , c_rbs_rec.section_code  , c_rbs_rec.item_no       ,
                                   10                  , ttl_rec.title       , nvl(w_purchase_leadtime,0) ,
                                   nvl(w_minimum_order_lot,0) , nvl(w_split_order_lot,0)   , nvl(w_supplier_code,0)     ,
                                   nvl(w_estimate_price,0)    , 0                   , 0                   ,
                                   0    ,
                                   0    ,
                                   0    ,
                                   0    ,
                                   0    ,
                                   0    ,
                                   0    ,
                                   0    ,
                                   0    ,
                                   0    ,
                                   0    ,
                                   0    ,
                                   0    ,
                                   0    ,
                                   0    ,
                                   0    ,
                                   0    ,
                                   0    ,
                                   0    ,
                                   0    ,
                                   0    ,
                                   0    ,
                                   0    
                                  );
--?????
                      ttl_rec := null ;
                      open c_ttl(20);
                         fetch c_ttl into ttl_rec;
                      close c_ttl;
                       /*   ??????????  */
                       insert into required_d7
                                 (operation_date     , section_code    , item_no           ,
                                   sort              , title           , purchase_leadtime ,
                                   minimum_order_lot , split_order_lot , supplier_code     ,
                                   estimate_price    , this_inventory  , process_qty1      ,
                                   process_qty2      , this_week       ,
                                   week2             , week3           , week4             ,
                                   week5             , week6           , week7             ,
                                   week8             , week9           , week10            ,
                                   week11            , week12          , week13            ,
                                   week14            , week15          , week16            ,
                                   week17            , week18          , week19            ,
                                   week20            , week21          , week22            
                                  )
                         values
                                  (sysdate             , c_rbs_rec.section_code  , c_rbs_rec.item_no       ,
                                   20                  , ttl_rec.title       , nvl(w_purchase_leadtime,0) ,
                                   nvl(w_minimum_order_lot,0) , nvl(w_split_order_lot,0)   , nvl(w_supplier_code,0)     ,
                                   nvl(w_estimate_price,0)    , 0                   , 0                   ,
                                   0    , c_rbs_rec.this_week    ,
                                   c_rbs_rec.week2    ,
                                   c_rbs_rec.week3    ,
                                   c_rbs_rec.week4    ,
                                   c_rbs_rec.week5    ,
                                   c_rbs_rec.week6    ,
                                   c_rbs_rec.week7    ,
                                   c_rbs_rec.week8    ,
                                   c_rbs_rec.week9    ,
                                   c_rbs_rec.week10   ,
                                   c_rbs_rec.week11   ,
                                   c_rbs_rec.week12   ,
                                   c_rbs_rec.week13   ,
                                   c_rbs_rec.week14   ,
                                   c_rbs_rec.week15   ,
                                   c_rbs_rec.week16   ,
                                   c_rbs_rec.week17   ,
                                   c_rbs_rec.week18   ,
                                   c_rbs_rec.week19   ,
                                   c_rbs_rec.week20   ,
                                   c_rbs_rec.week21   ,
                                   c_rbs_rec.week22   
                                  );
--?????????

                      wk_inventory_total := 0;
--
                      i := 0;
                      <<remainset2>>
                      loop
                          if i > 22 then
                                 exit remainset2;
                          end if;
                          i := i + 1;
--?????
                          if i=1 then
                             wk_inventory_total := wk_inventory_total + c_rbs_rec.this_week;
                          elsif i=2 then
                             wk_inventory_total := wk_inventory_total + c_rbs_rec.week2;
                          elsif i=3 then
                             wk_inventory_total := wk_inventory_total + c_rbs_rec.week3;
                          elsif i=4 then
                             wk_inventory_total := wk_inventory_total + c_rbs_rec.week4;
                          elsif i=5 then
                             wk_inventory_total := wk_inventory_total + c_rbs_rec.week5;
                          elsif i=6 then
                             wk_inventory_total := wk_inventory_total + c_rbs_rec.week6;
                          elsif i=7 then
                             wk_inventory_total := wk_inventory_total + c_rbs_rec.week7;
                          elsif i=8 then
                             wk_inventory_total := wk_inventory_total + c_rbs_rec.week8;
                          elsif i=9 then
                             wk_inventory_total := wk_inventory_total + c_rbs_rec.week9;
                          elsif i=10 then
                             wk_inventory_total := wk_inventory_total + c_rbs_rec.week10;
                          elsif i=11 then
                             wk_inventory_total := wk_inventory_total + c_rbs_rec.week11;
                          elsif i=12 then
                             wk_inventory_total := wk_inventory_total + c_rbs_rec.week12;
                          elsif i=13 then
                             wk_inventory_total := wk_inventory_total + c_rbs_rec.week13;
                          elsif i=14 then
                             wk_inventory_total := wk_inventory_total + c_rbs_rec.week14;
                          elsif i=15 then
                             wk_inventory_total := wk_inventory_total + c_rbs_rec.week15;
                          elsif i=16 then
                             wk_inventory_total := wk_inventory_total + c_rbs_rec.week16;
                          elsif i=17 then
                             wk_inventory_total := wk_inventory_total + c_rbs_rec.week17;
                          elsif i=18 then
                             wk_inventory_total := wk_inventory_total + c_rbs_rec.week18;
                          elsif i=19 then
                             wk_inventory_total := wk_inventory_total + c_rbs_rec.week19;
                          elsif i=20 then
                             wk_inventory_total := wk_inventory_total + c_rbs_rec.week20;
                          elsif i=21 then
                             wk_inventory_total := wk_inventory_total + c_rbs_rec.week21;
                          elsif i=22 then
                             wk_inventory_total := wk_inventory_total + c_rbs_rec.week22;
                         end if;
                          wk_remain_qty(i) := wk_inventory_total;
--?????
                          if i = 1 and wk_remain_qty(i) < 0 then
                             wk_net_qty(i) := wk_remain_qty(i) * -1;
                          elsif wk_remain_qty(i) < 0 then
                             wk_remain := wk_remain_qty(i-1);
                             if wk_remain > 0 then
                                wk_remain := 0;
                             end if;
                             wk_net_qty(i) := (wk_remain_qty(i) - wk_remain) * -1;
                          end if;
                      end loop remainset2;
--??????
                      ttl_rec := null ;
                      open c_ttl(30);
                          fetch c_ttl into ttl_rec;
                      close c_ttl;
                     /*   ??????????  */
                     insert into required_d7
                                 (operation_date     , section_code    , item_no           ,
                                   sort              , title           , purchase_leadtime ,
                                   minimum_order_lot , split_order_lot , supplier_code     ,
                                   estimate_price    , this_inventory  , process_qty1      ,
                                   process_qty2      , this_week       ,
                                   week2             , week3           , week4             ,
                                   week5             , week6           , week7             ,
                                   week8             , week9           , week10            ,
                                   week11            , week12          , week13            ,
                                   week14            , week15          , week16            ,
                                   week17            , week18          , week19            ,
                                   week20            , week21          , week22            
                                  )
                      values
                                  (sysdate             , c_rbs_rec.section_code  , c_rbs_rec.item_no       ,
                                   30                  , ttl_rec.title       , nvl(w_purchase_leadtime,0) ,
                                   nvl(w_minimum_order_lot,0) , nvl(w_split_order_lot,0)   , nvl(w_supplier_code,0)     ,
                                   nvl(w_estimate_price,0)    , 0                   , 0                   ,
                                   0    ,
                                   wk_remain_qty(1)      ,
                                   wk_remain_qty(2)      ,
                                   wk_remain_qty(3)      ,
                                   wk_remain_qty(4)      ,
                                   wk_remain_qty(5)      ,
                                   wk_remain_qty(6)      ,
                                   wk_remain_qty(7)      ,
                                   wk_remain_qty(8)      ,
                                   wk_remain_qty(9)      ,
                                   wk_remain_qty(10)     ,
                                   wk_remain_qty(11)     ,
                                   wk_remain_qty(12)     ,
                                   wk_remain_qty(13)     ,
                                   wk_remain_qty(14)     ,
                                   wk_remain_qty(15)     ,
                                   wk_remain_qty(16)     ,
                                   wk_remain_qty(17)     ,
                                   wk_remain_qty(18)     ,
                                   wk_remain_qty(19)     ,
                                   wk_remain_qty(20)     ,
                                   wk_remain_qty(21)     ,
                                   wk_remain_qty(22)     
                                  );
--??????
                      ttl_rec := null ;
                      open c_ttl(40);
                           fetch c_ttl into ttl_rec;
                      close c_ttl;
                       /*   ??????????  */
                      insert into required_d7
                                 (operation_date     , section_code    , item_no           ,
                                   sort              , title           , purchase_leadtime ,
                                   minimum_order_lot , split_order_lot , supplier_code     ,
                                   estimate_price    , this_inventory  , process_qty1      ,
                                   process_qty2      , this_week       ,
                                   week2             , week3           , week4             ,
                                   week5             , week6           , week7             ,
                                   week8             , week9           , week10            ,
                                   week11            , week12          , week13            ,
                                   week14            , week15          , week16            ,
                                   week17            , week18          , week19            ,
                                   week20            , week21          , week22            
                                  )
                      values
                                  (sysdate             , c_rbs_rec.section_code  , c_rbs_rec.item_no       ,
                                   40                  , ttl_rec.title       , nvl(w_purchase_leadtime,0) ,
                                   nvl(w_minimum_order_lot,0) , nvl(w_split_order_lot,0)   , nvl(w_supplier_code,0)   ,
                                   nvl(w_estimate_price,0)    , 0                          , 0                        ,
                                   0    ,
                                   wk_net_qty(1)      ,
                                   wk_net_qty(2)      ,
                                   wk_net_qty(3)      ,
                                   wk_net_qty(4)      ,
                                   wk_net_qty(5)      ,
                                   wk_net_qty(6)      ,
                                   wk_net_qty(7)      ,
                                   wk_net_qty(8)      ,
                                   wk_net_qty(9)      ,
                                   wk_net_qty(10)     ,
                                   wk_net_qty(11)     ,
                                   wk_net_qty(12)     ,
                                   wk_net_qty(13)     ,
                                   wk_net_qty(14)     ,
                                   wk_net_qty(15)     ,
                                   wk_net_qty(16)     ,
                                   wk_net_qty(17)     ,
                                   wk_net_qty(18)     ,
                                   wk_net_qty(19)     ,
                                   wk_net_qty(20)     ,
                                   wk_net_qty(21)     ,
                                   wk_net_qty(22)     
                                  );
                end loop;
                close c_rbs;
   end;
   end required_d7_header_write_rtn;

/******************************
     ?????
******************************/
 begin
-- ???
    /* ?????? */
    delete from required7;
    delete from required_d7;
    delete from required_date7;
    delete from required_decimal7;
    delete from required_by_supplier;--????????????

   /* ??????????? */
       insert into required_decimal7 (operation_date,decimal_point) values (sysdate,v_decimal) ;

   /* ?????? */
    i := 1;
    wk_week_date(i) := to_char(sysdate,'yyyy/mm/dd');
   <<weekset>>
    loop
      if i > 22 then
         exit weekset;
      end if;
      i := i + 1;
      wk_week_date(i) := to_char(to_date(wk_week_date(i-1)) + 1,'yyyy/mm/dd');
    end loop weekset;

    insert into required_date7
       (operation_date, this_week, week2,
        week3,  week4,  week5,
        week6,  week7,  week8,
        week9,  week10, week11,
        week12, week13, week14,
        week15, week16, week17,
        week18, week19, week20,
        week21, week22
       )
    values
       (sysdate, wk_week_date(1), wk_week_date(2),
        wk_week_date(3), wk_week_date(4), wk_week_date(5),
        wk_week_date(6), wk_week_date(7), wk_week_date(8),
        wk_week_date(9), wk_week_date(10), wk_week_date(11),
        wk_week_date(12), wk_week_date(13), wk_week_date(14),
        wk_week_date(15), wk_week_date(16), wk_week_date(17),
        wk_week_date(18), wk_week_date(19), wk_week_date(20),
        wk_week_date(21), wk_week_date(22)
       );

--???????????????required_d7???????????)
    wk_count := 0 ;
     open c_bal_sup ;
       loop
       fetch c_bal_sup into bal_sup_rec ;
       exit when c_bal_sup%notfound or c_bal_sup%notfound is null;

         wk_count := wk_count + 1 ;

         if wk_count = 1 or bal_sup_rec.item_no <> wk_item_no_old  or
            bal_sup_rec.supply_st <> wk_supply_st_old     then
             if wk_count > 1 then
--???????????????????????
                    required_supplier_write_rtn;
             end if;
             wk_section_code_old := bal_sup_rec.section_code;
             wk_item_no_old      := bal_sup_rec.item_no;
             wk_supply_st_old    := bal_sup_rec.supply_st;
             bal_sup_rec_old     := bal_sup_rec ;

             i := 0;
             <<wkclear>>
             loop
                if i > 22 then
                   exit wkclear;
                end if;
                i := i + 1;
                wk_sup_pur_qty(i) := 0;
             end loop wkclear;
         end if;
         if bal_sup_rec.supply_date < to_date(wk_week_date(2),'yyyy/mm/dd') then
              wk_sup_pur_qty(1) := wk_sup_pur_qty(1) + bal_sup_rec.allocate_qty;
         elsif bal_sup_rec.supply_date < to_date(wk_week_date(3),'yyyy/mm/dd')  then
              wk_sup_pur_qty(2) := wk_sup_pur_qty(2) + bal_sup_rec.allocate_qty;
         elsif bal_sup_rec.supply_date < to_date(wk_week_date(4),'yyyy/mm/dd')  then
                    wk_sup_pur_qty(3) := wk_sup_pur_qty(3) + bal_sup_rec.allocate_qty;
         elsif bal_sup_rec.supply_date < to_date(wk_week_date(5),'yyyy/mm/dd')  then
            wk_sup_pur_qty(4) := wk_sup_pur_qty(4) + bal_sup_rec.allocate_qty;
         elsif bal_sup_rec.supply_date < to_date(wk_week_date(6),'yyyy/mm/dd')  then
            wk_sup_pur_qty(5) := wk_sup_pur_qty(5) + bal_sup_rec.allocate_qty;
         elsif bal_sup_rec.supply_date < to_date(wk_week_date(7),'yyyy/mm/dd')  then
            wk_sup_pur_qty(6) := wk_sup_pur_qty(6) + bal_sup_rec.allocate_qty;
         elsif bal_sup_rec.supply_date < to_date(wk_week_date(8),'yyyy/mm/dd')  then
            wk_sup_pur_qty(7) := wk_sup_pur_qty(7) + bal_sup_rec.allocate_qty;
         elsif bal_sup_rec.supply_date < to_date(wk_week_date(9),'yyyy/mm/dd')  then
            wk_sup_pur_qty(8) := wk_sup_pur_qty(8) + bal_sup_rec.allocate_qty;
         elsif bal_sup_rec.supply_date < to_date(wk_week_date(10),'yyyy/mm/dd')  then
            wk_sup_pur_qty(9) := wk_sup_pur_qty(9) + bal_sup_rec.allocate_qty;
         elsif bal_sup_rec.supply_date < to_date(wk_week_date(11),'yyyy/mm/dd')  then
            wk_sup_pur_qty(10) := wk_sup_pur_qty(10) + bal_sup_rec.allocate_qty;
         elsif bal_sup_rec.supply_date < to_date(wk_week_date(12),'yyyy/mm/dd')  then
            wk_sup_pur_qty(11) := wk_sup_pur_qty(11) + bal_sup_rec.allocate_qty;
         elsif bal_sup_rec.supply_date < to_date(wk_week_date(13),'yyyy/mm/dd')  then
            wk_sup_pur_qty(12) := wk_sup_pur_qty(12) + bal_sup_rec.allocate_qty;
         elsif bal_sup_rec.supply_date < to_date(wk_week_date(14),'yyyy/mm/dd')  then
            wk_sup_pur_qty(13) := wk_sup_pur_qty(13) + bal_sup_rec.allocate_qty;
         elsif bal_sup_rec.supply_date < to_date(wk_week_date(15),'yyyy/mm/dd')  then
            wk_sup_pur_qty(14) := wk_sup_pur_qty(14) + bal_sup_rec.allocate_qty;
         elsif bal_sup_rec.supply_date < to_date(wk_week_date(16),'yyyy/mm/dd')  then
            wk_sup_pur_qty(15) := wk_sup_pur_qty(15) + bal_sup_rec.allocate_qty;
         elsif bal_sup_rec.supply_date < to_date(wk_week_date(17),'yyyy/mm/dd')  then
            wk_sup_pur_qty(16) := wk_sup_pur_qty(16) + bal_sup_rec.allocate_qty;
         elsif bal_sup_rec.supply_date < to_date(wk_week_date(18),'yyyy/mm/dd')  then
            wk_sup_pur_qty(17) := wk_sup_pur_qty(17) + bal_sup_rec.allocate_qty;
         elsif bal_sup_rec.supply_date < to_date(wk_week_date(19),'yyyy/mm/dd')  then
            wk_sup_pur_qty(18) := wk_sup_pur_qty(18) + bal_sup_rec.allocate_qty;
         elsif bal_sup_rec.supply_date < to_date(wk_week_date(20),'yyyy/mm/dd')  then
            wk_sup_pur_qty(19) := wk_sup_pur_qty(19) + bal_sup_rec.allocate_qty;
         elsif bal_sup_rec.supply_date < to_date(wk_week_date(21),'yyyy/mm/dd')  then
            wk_sup_pur_qty(20) := wk_sup_pur_qty(20) + bal_sup_rec.allocate_qty;
         elsif bal_sup_rec.supply_date < to_date(wk_week_date(22),'yyyy/mm/dd')  then
            wk_sup_pur_qty(21) := wk_sup_pur_qty(21) + bal_sup_rec.allocate_qty;
         else
            wk_sup_pur_qty(22) := wk_sup_pur_qty(22) + bal_sup_rec.allocate_qty;
         end if;
       end loop ;
--???????????????????????
--    DBMS_OUTPUT.PUT_LINE('WK1') ;
    required_supplier_write_rtn;

--?????????????REQUIRED_D7???????????

    required_d7_header_write_rtn;
--???
    /* ??????? */
    wk_count := 0 ;
     open c_bal ;
       loop
       fetch c_bal into bal_rec ;
       exit when c_bal%notfound or c_bal%notfound is null;

         wk_count := wk_count + 1 ;

         if wk_count = 1 or bal_rec.item_no <> wk_item_no_old then
             if wk_count > 1 then
                 --??????
                    head_rtn;
                 --?????
                    detail_rtn;
             end if;
             wk_item_no_old      := bal_rec.item_no;
             wk_section_code_old := bal_rec.section_code;
             bal_rec_old := bal_rec ;

             i := 0;
             <<wkclear1>>
             loop
                if i > 22 then
                   exit wkclear1;
                end if;
                i := i + 1;
                wk_req_qty(i) := 0;
                wk_pur_qty(i) := 0;
                wk_remain_qty(i) := 0;
                wk_net_qty(i) := 0;
             end loop wkclear1;
         end if;

            --????????????
           if bal_rec.demand_type is not null then
                 if bal_rec.demand_date < to_date(wk_week_date(2),'yyyy/mm/dd') then
                     wk_req_qty(1) := wk_req_qty(1) +  bal_rec.allocate_qty;
                 elsif bal_rec.demand_date < to_date(wk_week_date(3),'yyyy/mm/dd') then
                     wk_req_qty(2) := wk_req_qty(2) +  bal_rec.allocate_qty;
                 elsif bal_rec.demand_date < to_date(wk_week_date(4),'yyyy/mm/dd') then
                     wk_req_qty(3) := wk_req_qty(3) +  bal_rec.allocate_qty;
                 elsif bal_rec.demand_date < to_date(wk_week_date(5),'yyyy/mm/dd') then
                     wk_req_qty(4) := wk_req_qty(4) +  bal_rec.allocate_qty;
                 elsif bal_rec.demand_date < to_date(wk_week_date(6),'yyyy/mm/dd') then
                     wk_req_qty(5) := wk_req_qty(5) +  bal_rec.allocate_qty;
                 elsif bal_rec.demand_date < to_date(wk_week_date(7),'yyyy/mm/dd') then
                     wk_req_qty(6) := wk_req_qty(6) +  bal_rec.allocate_qty;
                 elsif bal_rec.demand_date < to_date(wk_week_date(8),'yyyy/mm/dd') then
                     wk_req_qty(7) := wk_req_qty(7) + bal_rec.allocate_qty;
                 elsif bal_rec.demand_date < to_date(wk_week_date(9),'yyyy/mm/dd') then
                     wk_req_qty(8) := wk_req_qty(8) +  bal_rec.allocate_qty;
                 elsif bal_rec.demand_date < to_date(wk_week_date(10),'yyyy/mm/dd') then
                     wk_req_qty(9) := wk_req_qty(9) +  bal_rec.allocate_qty;
                 elsif bal_rec.demand_date < to_date(wk_week_date(11),'yyyy/mm/dd') then
                     wk_req_qty(10) := wk_req_qty(10) + bal_rec.allocate_qty;
                 elsif bal_rec.demand_date < to_date(wk_week_date(12),'yyyy/mm/dd') then
                     wk_req_qty(11) := wk_req_qty(11) +  bal_rec.allocate_qty;
                 elsif bal_rec.demand_date < to_date(wk_week_date(13),'yyyy/mm/dd') then
                     wk_req_qty(12) := wk_req_qty(12) +  bal_rec.allocate_qty;
                 elsif bal_rec.demand_date < to_date(wk_week_date(14),'yyyy/mm/dd') then
                     wk_req_qty(13) := wk_req_qty(13) +  bal_rec.allocate_qty;
                 elsif bal_rec.demand_date < to_date(wk_week_date(15),'yyyy/mm/dd') then
                     wk_req_qty(14) := wk_req_qty(14) +  bal_rec.allocate_qty;
                 elsif bal_rec.demand_date < to_date(wk_week_date(16),'yyyy/mm/dd') then
                     wk_req_qty(15) := wk_req_qty(15) +  bal_rec.allocate_qty;
                 elsif bal_rec.demand_date < to_date(wk_week_date(17),'yyyy/mm/dd') then
                     wk_req_qty(16) := wk_req_qty(16) +  bal_rec.allocate_qty;
                 elsif bal_rec.demand_date < to_date(wk_week_date(18),'yyyy/mm/dd') then
                     wk_req_qty(17) := wk_req_qty(17) +  bal_rec.allocate_qty;
                 elsif bal_rec.demand_date < to_date(wk_week_date(19),'yyyy/mm/dd') then
                     wk_req_qty(18) := wk_req_qty(18) +  bal_rec.allocate_qty;
                 elsif bal_rec.demand_date < to_date(wk_week_date(20),'yyyy/mm/dd') then
                     wk_req_qty(19) := wk_req_qty(19) +  bal_rec.allocate_qty;
                 elsif bal_rec.demand_date < to_date(wk_week_date(21),'yyyy/mm/dd') then
                     wk_req_qty(20) := wk_req_qty(20) +  bal_rec.allocate_qty;
                 elsif bal_rec.demand_date < to_date(wk_week_date(22),'yyyy/mm/dd') then
                     wk_req_qty(21) := wk_req_qty(21) +  bal_rec.allocate_qty;
                 else
                     wk_req_qty(22) := wk_req_qty(22) +  bal_rec.allocate_qty;
                 end if;
           end if;
           --????????
           if bal_rec.supply_type = 'R' then
                 if bal_rec.supply_date < to_date(wk_week_date(2),'yyyy/mm/dd') then
                    wk_pur_qty(1) := wk_pur_qty(1) + bal_rec.allocate_qty;
                 elsif bal_rec.supply_date < to_date(wk_week_date(3),'yyyy/mm/dd')  then
                    wk_pur_qty(2) := wk_pur_qty(2) + bal_rec.allocate_qty;
                 elsif bal_rec.supply_date < to_date(wk_week_date(4),'yyyy/mm/dd')  then
                    wk_pur_qty(3) := wk_pur_qty(3) + bal_rec.allocate_qty;
                 elsif bal_rec.supply_date < to_date(wk_week_date(5),'yyyy/mm/dd')  then
                    wk_pur_qty(4) := wk_pur_qty(4) + bal_rec.allocate_qty;
                 elsif bal_rec.supply_date < to_date(wk_week_date(6),'yyyy/mm/dd')  then
                    wk_pur_qty(5) := wk_pur_qty(5) + bal_rec.allocate_qty;
                 elsif bal_rec.supply_date < to_date(wk_week_date(7),'yyyy/mm/dd')  then
                    wk_pur_qty(6) := wk_pur_qty(6) + bal_rec.allocate_qty;
                 elsif bal_rec.supply_date < to_date(wk_week_date(8),'yyyy/mm/dd')  then
                    wk_pur_qty(7) := wk_pur_qty(7) + bal_rec.allocate_qty;
                 elsif bal_rec.supply_date < to_date(wk_week_date(9),'yyyy/mm/dd')  then
                    wk_pur_qty(8) := wk_pur_qty(8) + bal_rec.allocate_qty;
                 elsif bal_rec.supply_date < to_date(wk_week_date(10),'yyyy/mm/dd')  then
                    wk_pur_qty(9) := wk_pur_qty(9) + bal_rec.allocate_qty;
                 elsif bal_rec.supply_date < to_date(wk_week_date(11),'yyyy/mm/dd')  then
                    wk_pur_qty(10) := wk_pur_qty(10) + bal_rec.allocate_qty;
                 elsif bal_rec.supply_date < to_date(wk_week_date(12),'yyyy/mm/dd')  then
                    wk_pur_qty(11) := wk_pur_qty(11) + bal_rec.allocate_qty;
                 elsif bal_rec.supply_date < to_date(wk_week_date(13),'yyyy/mm/dd')  then
                    wk_pur_qty(12) := wk_pur_qty(12) + bal_rec.allocate_qty;
                 elsif bal_rec.supply_date < to_date(wk_week_date(14),'yyyy/mm/dd')  then
                    wk_pur_qty(13) := wk_pur_qty(13) + bal_rec.allocate_qty;
                 elsif bal_rec.supply_date < to_date(wk_week_date(15),'yyyy/mm/dd')  then
                    wk_pur_qty(14) := wk_pur_qty(14) + bal_rec.allocate_qty;
                 elsif bal_rec.supply_date < to_date(wk_week_date(16),'yyyy/mm/dd')  then
                    wk_pur_qty(15) := wk_pur_qty(15) + bal_rec.allocate_qty;
                 elsif bal_rec.supply_date < to_date(wk_week_date(17),'yyyy/mm/dd')  then
                    wk_pur_qty(16) := wk_pur_qty(16) + bal_rec.allocate_qty;
                 elsif bal_rec.supply_date < to_date(wk_week_date(18),'yyyy/mm/dd')  then
                    wk_pur_qty(17) := wk_pur_qty(17) + bal_rec.allocate_qty;
                 elsif bal_rec.supply_date < to_date(wk_week_date(19),'yyyy/mm/dd')  then
                    wk_pur_qty(18) := wk_pur_qty(18) + bal_rec.allocate_qty;
                 elsif bal_rec.supply_date < to_date(wk_week_date(20),'yyyy/mm/dd')  then
                    wk_pur_qty(19) := wk_pur_qty(19) + bal_rec.allocate_qty;
                 elsif bal_rec.supply_date < to_date(wk_week_date(21),'yyyy/mm/dd')  then
                    wk_pur_qty(20) := wk_pur_qty(20) + bal_rec.allocate_qty;
                 elsif bal_rec.supply_date < to_date(wk_week_date(22),'yyyy/mm/dd')  then
                    wk_pur_qty(21) := wk_pur_qty(21) + bal_rec.allocate_qty;
                 else
                    wk_pur_qty(22) := wk_pur_qty(22) + bal_rec.allocate_qty;
                 end if;
           end if;
       end loop ;

        --??????
           head_rtn;
        --?????
           detail_rtn;

     close c_bal ;

 end ;
end  t_required7;
/


  CREATE OR REPLACE PROCEDURE "PORDER"."T_REQUIRED8" (V_DECIMAL in number default 0)
as
begin
  /*
      ???????????? (2015/11/02)
  */
   declare
      ITM_REC item%rowtype ;
      BAL_REC balance_fi%rowtype ;
      BAL_REC_OLD balance_fi%rowtype ;
      TTL_REC required_title%rowtype ;
      IMK_REC itemmaker%rowtype ;
      COM_REC company%rowtype ;
      WHI_REC whinventory%rowtype ;

      WK_ITEM_NO_OLD       balance_fi.item_no%type  := 0 ;
      WK_SECTION_CODE_OLD  balance_fi.section_code%type := 0 ;
      WK_COUNT  NUMBER(10) := 0 ;

      WK_THIS_INVENTORY     NUMBER(15,6);
      WK_PROCESS_QTY1       NUMBER(14,4);
      WK_PROCESS_QTY2       NUMBER(14,4);
      WK_INVENTORY_TOTAL    NUMBER(14,4);
      WK_REMAIN             NUMBER(14,4);
      i number(2) ;

    cursor C_BAL
     is
     select b.*
     from balance_FI b,
          item i
     where b.item_no = i.item_no
       and nvl(i.stock_subject_code,0) < '5' and
           nvl(i.order_policy,0) != '2'
     order by b.item_no,b.BM_ITEM_NO;

    cursor C_ITM (param in number)
     is
      select *
      from item
       where item_no = param;

    cursor C_TTL (param in number)
     is
      select *
      from required_title
       where sort = param;

    cursor C_IMK (param in number)
     is
      select *
      from itemmaker
      where item_no = param
      order by alter_procedure;

    cursor C_COM (param in number)
     is
      select *
      from company
      where company_code = param
      ;

     /* ??????? */
     type week_date_tab is table of varchar2(10)
        index by binary_integer;
     wk_week_date week_date_tab;
     /* ???63?? */
     type req_qty_tab is table of number(14,4)
        index by binary_integer;
     wk_req_qty req_qty_tab;
     /* ??63?? */
     type pur_qty_tab is table of number(14,4)
        index by binary_integer;
     wk_pur_qty pur_qty_tab;
     /* ???63?? */
     type remain_qty_tab is table of number(14,4)
        index by binary_integer;
     wk_remain_qty remain_qty_tab;
     /* ??63?? */
     type net_qty_tab is table of number(14,4)
        index by binary_integer;
     wk_net_qty net_qty_tab;

     cursor C_WHI
      is
       select  *  from whinventory;


   --??????????????
   procedure head_rtn
   is
   begin
     /* ????????? */
      select nvl(trunc(sum(allocate_qty),V_DECIMAL),0) into  WK_THIS_INVENTORY
        from balance_fi
      where item_no = BAL_REC_OLD.ITEM_NO
        and section_code = BAL_REC_OLD.SECTION_CODE
        and supply_type = 'Z';
     /* ?????????????? */
      select nvl(trunc(sum(allocate_qty),V_DECIMAL),0) into WK_PROCESS_QTY1
        from balance_fi
       where item_no = BAL_REC_OLD.ITEM_NO
         and section_code = BAL_REC_OLD.SECTION_CODE
         and supply_type = 'H'
         and demand_type is not null;
     /* ??????????????? */
      select nvl(trunc(sum(allocate_qty),V_DECIMAL),0) into WK_PROCESS_QTY2
        from balance_fi
       where item_no = BAL_REC_OLD.ITEM_NO
         and section_code = BAL_REC_OLD.SECTION_CODE
         and supply_type = 'H'
         and demand_type is null;

     /* ITEM?? */
      ITM_REC := null ;
      open C_ITM(BAL_REC_OLD.ITEM_NO);
         fetch C_ITM into ITM_REC ;
      close C_ITM;

    /* ITEM MAKER?? */
      IMK_REC := null ;
      open C_IMK(BAL_REC_OLD.ITEM_NO);
         fetch C_IMK into IMK_REC ;
      close C_IMK;

      insert into required8 (
         OPERATION_DATE          , SECTION_CODE          , ITEM_NO                  , ITEM                     ,
         DESCRIPTION             , CATALOG_NO            , UNIT_STOCK               , ORDER_POLICY             ,
         STATION_CODE            , STATION               , PURCHASE_LEADTIME        , MINIMUM_ORDER_LOT        ,
         SPLIT_ORDER_LOT         , REORDER_POINT         , SAFETY_STOCK             , ISSUE_POLICY             ,
         SUPPLIER_CODE           , ESTIMATE_PRICE        , STANDARD_PRICE           , THIS_INVENTORY           ,
         PROCESS_QTY1            , PROCESS_QTY2
       ) values (
         SYSDATE                 , BAL_REC_OLD.SECTION_CODE  , BAL_REC_OLD.ITEM_NO          , ITM_REC.ITEM             ,
         ITM_REC.DESCRIPTION     , ITM_REC.CATALOG_NO    , ITM_REC.UNIT_STOCK       , ITM_REC.ORDER_POLICY     ,
         BAL_REC_OLD.ALLOCATE_ST     , BAL_REC_OLD.ALLOCATE_ST   , IMK_REC.PURCHASE_LEADTIME, IMK_REC.MINIMUM_ORDER_LOT,
         IMK_REC.SPLIT_ORDER_LOT , ITM_REC.REORDER_POINT , ITM_REC.SAFETY_STOCK     , ITM_REC.ISSUE_POLICY     ,
         IMK_REC.SUPPLIER_CODE   , IMK_REC.ESTIMATE_PRICE, ITM_REC.STANDARD_PRICE   , WK_THIS_INVENTORY        ,
         WK_PROCESS_QTY1         , WK_PROCESS_QTY2
       );
   end head_rtn;

--?????
   procedure detail_rtn is
   begin
--???(?????
      i := 0;
      <<rup>>
      loop
         if i > 63 then
            exit rup;
         end if;
         i := i + 1;
         /*????   + 0.9999??trunc???Y.Hagai*/
         wk_req_qty(i) := trunc(wk_req_qty(i) + 0.9999,V_DECIMAL);
         wk_pur_qty(i) := trunc(wk_pur_qty(i) + 0.9999,V_DECIMAL );
       end loop rup;
--??????
       TTL_REC := null ;
       open C_TTL(10);
          fetch C_TTL into TTL_REC;
       close C_TTL;
       insert into required_d8
          (operation_date, section_code, item_no,
           sort, title, this_week,
           week2, week3, week4,
           week5, week6, week7,
           week8, week9, week10,
           week11, week12, week13,
           week14, week15, week16,
           week17, week18, week19,
           week20, week21, week22,
           week23, week24, week25,
           week26, week27, week28,
           week29, week30, week31,
           week32, week33, week34,
           week35, week36, week37,
           week38, week39, week40,
           week41, week42, week43,
           week44, week45, week46,
           week47, week48, week49,
           week50, week51, week52,
           week53, week54, week55,
           week56, week57, week58,
           week59, week60, week61,
           week62, week63  
          )
       values
          (sysdate, WK_SECTION_CODE_OLD, WK_ITEM_NO_OLD,
           10, TTL_REC.TITLE, wk_req_qty(1),
           wk_req_qty(2), wk_req_qty(3), wk_req_qty(4),
           wk_req_qty(5), wk_req_qty(6), wk_req_qty(7),
           wk_req_qty(8), wk_req_qty(9), wk_req_qty(10),
           wk_req_qty(11), wk_req_qty(12), wk_req_qty(13),
           wk_req_qty(14), wk_req_qty(15), wk_req_qty(16),
           wk_req_qty(17), wk_req_qty(18), wk_req_qty(19),
           wk_req_qty(20), wk_req_qty(21), wk_req_qty(22),
           wk_req_qty(23), wk_req_qty(24), wk_req_qty(25),
           wk_req_qty(26), wk_req_qty(27), wk_req_qty(28),
           wk_req_qty(29), wk_req_qty(30), wk_req_qty(31),
           wk_req_qty(32), wk_req_qty(33), wk_req_qty(34),
           wk_req_qty(35), wk_req_qty(36), wk_req_qty(37),
           wk_req_qty(38), wk_req_qty(39), wk_req_qty(40),
           wk_req_qty(41), wk_req_qty(42), wk_req_qty(43),
           wk_req_qty(44), wk_req_qty(45), wk_req_qty(46),
           wk_req_qty(47), wk_req_qty(48), wk_req_qty(49),
           wk_req_qty(50), wk_req_qty(51), wk_req_qty(52),
           wk_req_qty(53), wk_req_qty(54), wk_req_qty(55),
           wk_req_qty(56), wk_req_qty(57), wk_req_qty(58),
           wk_req_qty(59), wk_req_qty(60), wk_req_qty(61),
           wk_req_qty(62), wk_req_qty(63)
           );
--?????
       TTL_REC := null ;
       open C_TTL(20);
          fetch C_TTL into TTL_REC;
       close C_TTL;
       insert into required_d8
          (operation_date, section_code, item_no,
           sort, title, this_week,
           week2, week3, week4,
           week5, week6, week7,
           week8, week9, week10,
           week11, week12, week13,
           week14, week15, week16,
           week17, week18, week19,
           week20, week21, week22,
           week23, week24, week25,
           week26, week27, week28,
           week29, week30, week31,
           week32, week33, week34,
           week35, week36, week37,
           week38, week39, week40,
           week41, week42, week43,
           week44, week45, week46,
           week47, week48, week49,
           week50, week51, week52,
           week53, week54, week55,
           week56, week57, week58,
           week59, week60, week61,
           week62, week63  
          )
       values
          (sysdate, WK_SECTION_CODE_OLD, WK_ITEM_NO_OLD,
           20, TTL_REC.TITLE, wk_pur_qty(1),
           wk_pur_qty(2), wk_pur_qty(3), wk_pur_qty(4),
           wk_pur_qty(5), wk_pur_qty(6), wk_pur_qty(7),
           wk_pur_qty(8), wk_pur_qty(9), wk_pur_qty(10),
           wk_pur_qty(11), wk_pur_qty(12), wk_pur_qty(13),
           wk_pur_qty(14), wk_pur_qty(15), wk_pur_qty(16),
           wk_pur_qty(17), wk_pur_qty(18), wk_pur_qty(19),
           wk_pur_qty(20), wk_pur_qty(21), wk_pur_qty(22),
           wk_pur_qty(23), wk_pur_qty(24), wk_pur_qty(25),
           wk_pur_qty(26), wk_pur_qty(27), wk_pur_qty(28),
           wk_pur_qty(29), wk_pur_qty(30), wk_pur_qty(31),
           wk_pur_qty(32), wk_pur_qty(33), wk_pur_qty(34),
           wk_pur_qty(35), wk_pur_qty(36), wk_pur_qty(37),
           wk_pur_qty(38), wk_pur_qty(39), wk_pur_qty(40),
           wk_pur_qty(41), wk_pur_qty(42), wk_pur_qty(43),
           wk_pur_qty(44), wk_pur_qty(45), wk_pur_qty(46),
           wk_pur_qty(47), wk_pur_qty(48), wk_pur_qty(49),
           wk_pur_qty(50), wk_pur_qty(51), wk_pur_qty(52),
           wk_pur_qty(53), wk_pur_qty(54), wk_pur_qty(55),
           wk_pur_qty(56), wk_pur_qty(57), wk_pur_qty(58),
           wk_pur_qty(59), wk_pur_qty(60), wk_pur_qty(61),
           wk_pur_qty(62), wk_pur_qty(63)
          );
--?????????
--       WK_INVENTORY_TOTAL := WK_THIS_INVENTORY + WK_PROCESS_QTY1 - nvl(ITM_REC.SAFETY_STOCK,0);
       WK_INVENTORY_TOTAL := nvl(WK_THIS_INVENTORY,0) + nvl(WK_PROCESS_QTY1,0) +  nvl(WK_PROCESS_QTY2,0);
--
       i := 0;
       <<remainset>>
       loop
          if i > 63 then
             exit remainset;
          end if;
          i := i + 1;
--?????
          WK_INVENTORY_TOTAL := WK_INVENTORY_TOTAL + wk_pur_qty(i) - wk_req_qty(i);
          wk_remain_qty(i) := WK_INVENTORY_TOTAL;
--?????
          if i = 1 and wk_remain_qty(i) < 0 then
             wk_net_qty(i) := wk_remain_qty(i) * -1;
          elsif wk_remain_qty(i) < 0 then
             wk_remain := wk_remain_qty(i-1);
             if wk_remain > 0 then
                wk_remain := 0;
             end if;
             wk_net_qty(i) := (wk_remain_qty(i) - wk_remain) * -1;
          end if;
       end loop remainset;
--??????
       TTL_REC := null ;
       open C_TTL(30);
          fetch C_TTL into TTL_REC;
       close C_TTL;
       insert into required_d8
          (operation_date, section_code, item_no,
           sort, title, this_week,
           week2, week3, week4,
           week5, week6, week7,
           week8, week9, week10,
           week11, week12, week13,
           week14, week15, week16,
           week17, week18, week19,
           week20, week21, week22,
           week23, week24, week25,
           week26, week27, week28,
           week29, week30, week31,
           week32, week33, week34,
           week35, week36, week37,
           week38, week39, week40,
           week41, week42, week43,
           week44, week45, week46,
           week47, week48, week49,
           week50, week51, week52,
           week53, week54, week55,
           week56, week57, week58,
           week59, week60, week61,
           week62, week63  
          )
       values
          (sysdate, WK_SECTION_CODE_OLD, WK_ITEM_NO_OLD,
           30, TTL_REC.TITLE, wk_remain_qty(1),
           wk_remain_qty(2), wk_remain_qty(3), wk_remain_qty(4),
           wk_remain_qty(5), wk_remain_qty(6), wk_remain_qty(7),
           wk_remain_qty(8), wk_remain_qty(9), wk_remain_qty(10),
           wk_remain_qty(11), wk_remain_qty(12), wk_remain_qty(13),
           wk_remain_qty(14), wk_remain_qty(15), wk_remain_qty(16),
           wk_remain_qty(17), wk_remain_qty(18), wk_remain_qty(19),
           wk_remain_qty(20), wk_remain_qty(21), wk_remain_qty(22),
           wk_remain_qty(23), wk_remain_qty(24), wk_remain_qty(25),
           wk_remain_qty(26), wk_remain_qty(27), wk_remain_qty(28),
           wk_remain_qty(29), wk_remain_qty(30), wk_remain_qty(31),
           wk_remain_qty(32), wk_remain_qty(33), wk_remain_qty(34),
           wk_remain_qty(35), wk_remain_qty(36), wk_remain_qty(37),
           wk_remain_qty(38), wk_remain_qty(39), wk_remain_qty(40),
           wk_remain_qty(41), wk_remain_qty(42), wk_remain_qty(43),
           wk_remain_qty(44), wk_remain_qty(45), wk_remain_qty(46),
           wk_remain_qty(47), wk_remain_qty(48), wk_remain_qty(49),
           wk_remain_qty(50), wk_remain_qty(51), wk_remain_qty(52),
           wk_remain_qty(53), wk_remain_qty(54), wk_remain_qty(55),
           wk_remain_qty(56), wk_remain_qty(57), wk_remain_qty(58),
           wk_remain_qty(59), wk_remain_qty(60), wk_remain_qty(61),
           wk_remain_qty(62), wk_remain_qty(63)
          );
--??????
       TTL_REC := null ;
       open C_TTL(40);
          fetch C_TTL into TTL_REC;
       close C_TTL;
       insert into required_d8
          (operation_date, section_code, item_no,
           sort, title, this_week,
           week2, week3, week4,
           week5, week6, week7,
           week8, week9, week10,
           week11, week12, week13,
           week14, week15, week16,
           week17, week18, week19,
           week20, week21, week22,
           week23, week24, week25,
           week26, week27, week28,
           week29, week30, week31,
           week32, week33, week34,
           week35, week36, week37,
           week38, week39, week40,
           week41, week42, week43,
           week44, week45, week46,
           week47, week48, week49,
           week50, week51, week52,
           week53, week54, week55,
           week56, week57, week58,
           week59, week60, week61,
           week62, week63  
          )
       values
          (sysdate, WK_SECTION_CODE_OLD, WK_ITEM_NO_OLD,
           40, TTL_REC.TITLE, wk_net_qty(1),
           wk_net_qty(2), wk_net_qty(3), wk_net_qty(4),
           wk_net_qty(5), wk_net_qty(6), wk_net_qty(7),
           wk_net_qty(8), wk_net_qty(9), wk_net_qty(10),
           wk_net_qty(11), wk_net_qty(12), wk_net_qty(13),
           wk_net_qty(14), wk_net_qty(15), wk_net_qty(16),
           wk_net_qty(17), wk_net_qty(18), wk_net_qty(19),
           wk_net_qty(20), wk_net_qty(21), wk_net_qty(22),
           wk_net_qty(23), wk_net_qty(24), wk_net_qty(25),
           wk_net_qty(26), wk_net_qty(27), wk_net_qty(28),
           wk_net_qty(29), wk_net_qty(30), wk_net_qty(31),
           wk_net_qty(32), wk_net_qty(33), wk_net_qty(34),
           wk_net_qty(35), wk_net_qty(36), wk_net_qty(37),
           wk_net_qty(38), wk_net_qty(39), wk_net_qty(40),
           wk_net_qty(41), wk_net_qty(42), wk_net_qty(43),
           wk_net_qty(44), wk_net_qty(45), wk_net_qty(46),
           wk_net_qty(47), wk_net_qty(48), wk_net_qty(49),
           wk_net_qty(50), wk_net_qty(51), wk_net_qty(52),
           wk_net_qty(53), wk_net_qty(54), wk_net_qty(55),
           wk_net_qty(56), wk_net_qty(57), wk_net_qty(58),
           wk_net_qty(59), wk_net_qty(60), wk_net_qty(61),
           wk_net_qty(62), wk_net_qty(63)
          );
   end detail_rtn;


 begin
-- ???
    /* ?????? */
    delete from required8;
    delete from required_d8;
    delete from required_date8;
    delete from required_decimal8;

   /* ??????????? */
       insert into required_decimal8 (operation_date,decimal_point) values (sysdate,v_decimal) ;

    /* WHINVETORY?? */
      WHI_REC := null ;
      open C_WHI;
         fetch C_WHI into WHI_REC ;
      close C_WHI;



   /* ?????? */
    i := 1;
    wk_week_date(i) := to_char(to_date(whi_rec.THIS_MONTH || '01','yyyymmdd'),'dd/mm/yyyy');
   <<weekset>>
    loop
      if i > 63 then
         exit weekset;
      end if;
      i := i + 1;
      wk_week_date(i) := to_char(to_date(wk_week_date(i-1),'dd/mm/yyyy') + 1,'dd/mm/yyyy');
    end loop weekset;

    insert into required_date8
       (operation_date, this_week, week2,
        week3, week4, week5,
        week6, week7, week8,
        week9, week10, week11,
        week12, week13,
        week14, week15, week16,
        week17, week18, week19,
        week20, week21, week22,
        week23, week24, week25,
        week26, week27, week28,
        week29, week30, week31,
        week32, week33, week34,
        week35, week36, week37,
        week38, week39, week40,
        week41, week42, week43,
        week44, week45, week46,
        week47, week48, week49,
        week50, week51, week52,
        week53, week54, week55,
        week56, week57, week58,
        week59, week60, week61,
        week62, week63  
          )
    values
       (sysdate, wk_week_date(1), wk_week_date(2),
        wk_week_date(3), wk_week_date(4),   wk_week_date(5),
        wk_week_date(6), wk_week_date(7),   wk_week_date(8),
        wk_week_date(9), wk_week_date(10),  wk_week_date(11),
        wk_week_date(12), wk_week_date(13), wk_week_date(14),
        wk_week_date(15), wk_week_date(16), wk_week_date(17),
        wk_week_date(18), wk_week_date(19), wk_week_date(20),
        wk_week_date(21), wk_week_date(22), wk_week_date(23),
        wk_week_date(24), wk_week_date(25), wk_week_date(26),
        wk_week_date(27), wk_week_date(28), wk_week_date(29),
        wk_week_date(30), wk_week_date(31), wk_week_date(32),
        wk_week_date(33), wk_week_date(34), wk_week_date(35),
        wk_week_date(36), wk_week_date(37), wk_week_date(38),
        wk_week_date(39), wk_week_date(40), wk_week_date(41),
        wk_week_date(42), wk_week_date(43), wk_week_date(44),
        wk_week_date(45), wk_week_date(46), wk_week_date(47),
        wk_week_date(48), wk_week_date(49), wk_week_date(50),
        wk_week_date(51), wk_week_date(52), wk_week_date(53),
        wk_week_date(54), wk_week_date(55), wk_week_date(56),
        wk_week_date(57), wk_week_date(58), wk_week_date(59),
        wk_week_date(60), wk_week_date(61), wk_week_date(62),
        wk_week_date(63)
       );

--???
    /* ??????? */
    WK_COUNT := 0 ;
     open C_BAL ;
       loop
       fetch C_BAL into BAL_REC ;
       exit when C_BAL%notfound or C_BAL%notfound is null;

         WK_COUNT := WK_COUNT + 1 ;

         if WK_COUNT = 1 or BAL_REC.ITEM_NO <> WK_ITEM_NO_OLD then
             if WK_COUNT > 1 then
                 --??????
                    head_rtn;
                 --?????
                    detail_rtn;
             end if;
             WK_ITEM_NO_OLD      := BAL_REC.ITEM_NO;
             WK_SECTION_CODE_OLD := BAL_REC.SECTION_CODE;
             BAL_REC_OLD := BAL_REC ;

             i := 0;
             <<wkclear>>
             loop
                if i > 63 then
                   exit wkclear;
                end if;
                i := i + 1;
                wk_req_qty(i) := 0;
                wk_pur_qty(i) := 0;
                wk_remain_qty(i) := 0;
                wk_net_qty(i) := 0;
             end loop wkclear;
         end if;

            --????????????
           if BAL_REC.DEMAND_TYPE is not null then
                 if BAL_REC.DEMAND_DATE < to_date(wk_week_date(2),'dd/mm/yyyy') then
                     wk_req_qty(1) := wk_req_qty(1) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(3),'dd/mm/yyyy') then
                     wk_req_qty(2) := wk_req_qty(2) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(4),'dd/mm/yyyy') then
                     wk_req_qty(3) := wk_req_qty(3) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(5),'dd/mm/yyyy') then
                     wk_req_qty(4) := wk_req_qty(4) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(6),'dd/mm/yyyy') then
                     wk_req_qty(5) := wk_req_qty(5) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(7),'dd/mm/yyyy') then
                     wk_req_qty(6) := wk_req_qty(6) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(8),'dd/mm/yyyy') then
                     wk_req_qty(7) := wk_req_qty(7) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(9),'dd/mm/yyyy') then
                     wk_req_qty(8) := wk_req_qty(8) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(10),'dd/mm/yyyy') then
                     wk_req_qty(9) := wk_req_qty(9) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(11),'dd/mm/yyyy') then
                     wk_req_qty(10) := wk_req_qty(10) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(12),'dd/mm/yyyy') then
                     wk_req_qty(11) := wk_req_qty(11) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(13),'dd/mm/yyyy') then
                     wk_req_qty(12) := wk_req_qty(12) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(14),'dd/mm/yyyy') then
                     wk_req_qty(13) := wk_req_qty(13) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(15),'dd/mm/yyyy') then
                     wk_req_qty(14) := wk_req_qty(14) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(16),'dd/mm/yyyy') then
                     wk_req_qty(15) := wk_req_qty(15) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(17),'dd/mm/yyyy') then
                     wk_req_qty(16) := wk_req_qty(16) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(18),'dd/mm/yyyy') then
                     wk_req_qty(17) := wk_req_qty(17) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(19),'dd/mm/yyyy') then
                     wk_req_qty(18) := wk_req_qty(18) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(20),'dd/mm/yyyy') then
                     wk_req_qty(19) := wk_req_qty(19) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(21),'dd/mm/yyyy') then
                     wk_req_qty(20) := wk_req_qty(20) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(22),'dd/mm/yyyy') then
                     wk_req_qty(21) := wk_req_qty(21) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(23),'dd/mm/yyyy') then
                     wk_req_qty(22) := wk_req_qty(22) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(24),'dd/mm/yyyy') then
                     wk_req_qty(23) := wk_req_qty(23) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(25),'dd/mm/yyyy') then
                     wk_req_qty(24) := wk_req_qty(24) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(26),'dd/mm/yyyy') then
                     wk_req_qty(25) := wk_req_qty(25) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(27),'dd/mm/yyyy') then
                     wk_req_qty(26) := wk_req_qty(26) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(28),'dd/mm/yyyy') then
                     wk_req_qty(27) := wk_req_qty(27) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(29),'dd/mm/yyyy') then
                     wk_req_qty(28) := wk_req_qty(28) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(30),'dd/mm/yyyy') then
                     wk_req_qty(29) := wk_req_qty(29) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(31),'dd/mm/yyyy') then
                     wk_req_qty(30) := wk_req_qty(30) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(32),'dd/mm/yyyy') then
                     wk_req_qty(31) := wk_req_qty(31) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(33),'dd/mm/yyyy') then
                     wk_req_qty(32) := wk_req_qty(32) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(34),'dd/mm/yyyy') then
                     wk_req_qty(33) := wk_req_qty(33) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(35),'dd/mm/yyyy') then
                     wk_req_qty(34) := wk_req_qty(34) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(36),'dd/mm/yyyy') then
                     wk_req_qty(35) := wk_req_qty(35) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(37),'dd/mm/yyyy') then
                     wk_req_qty(36) := wk_req_qty(36) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(38),'dd/mm/yyyy') then
                     wk_req_qty(37) := wk_req_qty(37) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(39),'dd/mm/yyyy') then
                     wk_req_qty(38) := wk_req_qty(38) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(40),'dd/mm/yyyy') then
                     wk_req_qty(39) := wk_req_qty(39) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(41),'dd/mm/yyyy') then
                     wk_req_qty(40) := wk_req_qty(40) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(42),'dd/mm/yyyy') then
                     wk_req_qty(41) := wk_req_qty(41) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(43),'dd/mm/yyyy') then
                     wk_req_qty(42) := wk_req_qty(42) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(44),'dd/mm/yyyy') then
                     wk_req_qty(43) := wk_req_qty(43) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(45),'dd/mm/yyyy') then
                     wk_req_qty(44) := wk_req_qty(44) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(46),'dd/mm/yyyy') then
                    wk_req_qty(45) := wk_req_qty(45) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(47),'dd/mm/yyyy') then
                     wk_req_qty(46) := wk_req_qty(46) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(48),'dd/mm/yyyy') then
                     wk_req_qty(47) := wk_req_qty(47) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(49),'dd/mm/yyyy') then
                     wk_req_qty(48) := wk_req_qty(48) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(50),'dd/mm/yyyy') then
                     wk_req_qty(49) := wk_req_qty(49) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(51),'dd/mm/yyyy') then
                     wk_req_qty(50) := wk_req_qty(50) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(52),'dd/mm/yyyy') then
                     wk_req_qty(51) := wk_req_qty(51) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(53),'dd/mm/yyyy') then
                     wk_req_qty(52) := wk_req_qty(52) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(54),'dd/mm/yyyy') then
                     wk_req_qty(53) := wk_req_qty(53) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(55),'dd/mm/yyyy') then
                     wk_req_qty(54) := wk_req_qty(54) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(56),'dd/mm/yyyy') then
                     wk_req_qty(55) := wk_req_qty(55) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(57),'dd/mm/yyyy') then
                     wk_req_qty(56) := wk_req_qty(56) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(58),'dd/mm/yyyy') then
                     wk_req_qty(57) := wk_req_qty(57) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(59),'dd/mm/yyyy') then
                     wk_req_qty(58) := wk_req_qty(58) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(60),'dd/mm/yyyy') then
                     wk_req_qty(59) := wk_req_qty(59) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(61),'dd/mm/yyyy') then
                     wk_req_qty(60) := wk_req_qty(60) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(62),'dd/mm/yyyy') then
                     wk_req_qty(61) := wk_req_qty(61) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(63),'dd/mm/yyyy') then
                     wk_req_qty(62) := wk_req_qty(62) + BAL_REC.ALLOCATE_QTY;
                 else
                     wk_req_qty(63) := wk_req_qty(63) +  BAL_REC.ALLOCATE_QTY;
                 end if;
           end if;
           --????????
--           if BAL_REC.SUPPLY_TYPE = 'C' then
           if BAL_REC.SUPPLY_TYPE = 'R' then


                 if BAL_REC.SUPPLY_DATE < to_date(wk_week_date(2),'dd/mm/yyyy') then
                    wk_pur_qty(1) := wk_pur_qty(1) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(3),'dd/mm/yyyy')  then
                    wk_pur_qty(2) := wk_pur_qty(2) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(4),'dd/mm/yyyy')  then
                    wk_pur_qty(3) := wk_pur_qty(3) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(5),'dd/mm/yyyy')  then
                    wk_pur_qty(4) := wk_pur_qty(4) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(6),'dd/mm/yyyy')  then
                    wk_pur_qty(5) := wk_pur_qty(5) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(7),'dd/mm/yyyy')  then
                    wk_pur_qty(6) := wk_pur_qty(6) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(8),'dd/mm/yyyy')  then
                    wk_pur_qty(7) := wk_pur_qty(7) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(9),'dd/mm/yyyy')  then
                    wk_pur_qty(8) := wk_pur_qty(8) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(10),'dd/mm/yyyy')  then
                    wk_pur_qty(9) := wk_pur_qty(9) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(11),'dd/mm/yyyy')  then
                    wk_pur_qty(10) := wk_pur_qty(10) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(12),'dd/mm/yyyy')  then
                    wk_pur_qty(11) := wk_pur_qty(11) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(13),'dd/mm/yyyy')  then
                    wk_pur_qty(12) := wk_pur_qty(12) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(14),'dd/mm/yyyy')  then
                    wk_pur_qty(13) := wk_pur_qty(13) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(15),'dd/mm/yyyy')  then
                    wk_pur_qty(14) := wk_pur_qty(14) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(16),'dd/mm/yyyy')  then
                    wk_pur_qty(15) := wk_pur_qty(15) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(17),'dd/mm/yyyy')  then
                    wk_pur_qty(16) := wk_pur_qty(16) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(18),'dd/mm/yyyy')  then
                    wk_pur_qty(17) := wk_pur_qty(17) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(19),'dd/mm/yyyy')  then
                    wk_pur_qty(18) := wk_pur_qty(18) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(20),'dd/mm/yyyy')  then
                    wk_pur_qty(19) := wk_pur_qty(19) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(21),'dd/mm/yyyy')  then
                    wk_pur_qty(20) := wk_pur_qty(20) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(22),'dd/mm/yyyy')  then
                    wk_pur_qty(21) := wk_pur_qty(21) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(23),'dd/mm/yyyy')  then
                    wk_pur_qty(22) := wk_pur_qty(22) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(24),'dd/mm/yyyy')  then
                    wk_pur_qty(23) := wk_pur_qty(23) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(25),'dd/mm/yyyy')  then
                    wk_pur_qty(24) := wk_pur_qty(24) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(26),'dd/mm/yyyy')  then
                    wk_pur_qty(25) := wk_pur_qty(25) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(27),'dd/mm/yyyy')  then
                    wk_pur_qty(26) := wk_pur_qty(26) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(28),'dd/mm/yyyy')  then
                    wk_pur_qty(27) := wk_pur_qty(27) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(29),'dd/mm/yyyy')  then
                    wk_pur_qty(28) := wk_pur_qty(28) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(30),'dd/mm/yyyy')  then
                    wk_pur_qty(29) := wk_pur_qty(29) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(31),'dd/mm/yyyy')  then
                    wk_pur_qty(30) := wk_pur_qty(30) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(32),'dd/mm/yyyy') then
                    wk_pur_qty(31) := wk_pur_qty(31) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(33),'dd/mm/yyyy') then
                    wk_pur_qty(32) := wk_pur_qty(32) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(34),'dd/mm/yyyy') then
                    wk_pur_qty(33) := wk_pur_qty(33) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(35),'dd/mm/yyyy') then
                    wk_pur_qty(34) := wk_pur_qty(34) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(36),'dd/mm/yyyy') then
                    wk_pur_qty(35) := wk_pur_qty(35) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(37),'dd/mm/yyyy') then
                    wk_pur_qty(36) := wk_pur_qty(36) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(38),'dd/mm/yyyy') then
                    wk_pur_qty(37) := wk_pur_qty(37) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(39),'dd/mm/yyyy') then
                    wk_pur_qty(38) := wk_pur_qty(38) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(40),'dd/mm/yyyy') then
                    wk_pur_qty(39) := wk_pur_qty(39) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(41),'dd/mm/yyyy') then
                    wk_pur_qty(40) := wk_pur_qty(40) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(42),'dd/mm/yyyy') then
                    wk_pur_qty(41) := wk_pur_qty(41) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(43),'dd/mm/yyyy') then
                    wk_pur_qty(42) := wk_pur_qty(42) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(44),'dd/mm/yyyy') then
                    wk_pur_qty(43) := wk_pur_qty(43) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(45),'dd/mm/yyyy') then
                    wk_pur_qty(44) := wk_pur_qty(44) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(46),'dd/mm/yyyy') then
                    wk_pur_qty(45) := wk_pur_qty(45) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(47),'dd/mm/yyyy') then
                    wk_pur_qty(46) := wk_pur_qty(46) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(48),'dd/mm/yyyy') then
                    wk_pur_qty(47) := wk_pur_qty(47) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(49),'dd/mm/yyyy') then
                    wk_pur_qty(48) := wk_pur_qty(48) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(50),'dd/mm/yyyy') then
                    wk_pur_qty(49) := wk_pur_qty(49) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(51),'dd/mm/yyyy') then
                    wk_pur_qty(50) := wk_pur_qty(50) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(52),'dd/mm/yyyy') then
                    wk_pur_qty(51) := wk_pur_qty(51) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(53),'dd/mm/yyyy') then
                    wk_pur_qty(52) := wk_pur_qty(52) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(54),'dd/mm/yyyy') then
                    wk_pur_qty(53) := wk_pur_qty(53) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(55),'dd/mm/yyyy') then
                    wk_pur_qty(54) := wk_pur_qty(54) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(56),'dd/mm/yyyy') then
                    wk_pur_qty(55) := wk_pur_qty(55) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(57),'dd/mm/yyyy') then
                    wk_pur_qty(56) := wk_pur_qty(56) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(58),'dd/mm/yyyy') then
                    wk_pur_qty(57) := wk_pur_qty(57) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(59),'dd/mm/yyyy') then
                    wk_pur_qty(58) := wk_pur_qty(58) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(60),'dd/mm/yyyy') then
                    wk_pur_qty(59) := wk_pur_qty(59) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(61),'dd/mm/yyyy') then
                    wk_pur_qty(60) := wk_pur_qty(60) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(62),'dd/mm/yyyy') then
                    wk_pur_qty(61) := wk_pur_qty(61) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(63),'dd/mm/yyyy') then
                    wk_pur_qty(62) := wk_pur_qty(62) + BAL_REC.ALLOCATE_QTY;
                 else
                    wk_pur_qty(63) := wk_pur_qty(63) + BAL_REC.ALLOCATE_QTY;
                 end if;
           end if;
       end loop ;

        --??????
           head_rtn;
        --?????
           detail_rtn;

     close C_BAL ;
--????
/* -- ?????????????
--??????????
   delete from required2
   where item_no in (
      select item_no
      from
         (select item_no, this_week+week2+week3+
                 week4+week5+week6+
                 week7+week8+week9+
                 week10+week11+week12+
                 week13 as qty
           from required_d
          where sort = 10) x
      where qty = 0);
--
   delete from required_d8
   where item_no in (
      select item_no
      from
         (select item_no, this_week+week2+week3+
                 week4+week5+week6+
                 week7+week8+week9+
                 week10+week11+week12+
                 week13 as qty
           from required_d
          where sort = 10) x
      where qty = 0);
--??????????
   delete from required2
   where item_no in (
      select item_no
      from
         (select item_no, sum(this_week)+sum(week2)+sum(week3)+
                sum(week4)+sum(week5)+sum(week6)+
                sum(week7)+sum(week8)+sum(week9)+
                sum(week10)+sum(week11)+sum(week12)+
                sum(week13) as qty
           from required_d
          group by item_no) x
          where qty = 0);
--
   delete from required_d8
   where item_no in (
      select item_no
      from
         (select item_no, sum(this_week)+sum(week2)+sum(week3)+
                sum(week4)+sum(week5)+sum(week6)+
                sum(week7)+sum(week8)+sum(week9)+
                sum(week10)+sum(week11)+sum(week12)+
                sum(week13) as qty
           from required_d
          group by item_no) x
      where qty = 0);
*/

 end ;
end  t_required8;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."T_REQUIRED9" (V_DECIMAL in number default 0)
as
begin
  /*
      ???????????? (2017/01/23)
  */
   declare
      ITM_REC item%rowtype ;
      BAL_REC balance_fi%rowtype ;
      BAL_REC_OLD balance_fi%rowtype ;
      TTL_REC required_title%rowtype ;
      IMK_REC itemmaker%rowtype ;
      COM_REC company%rowtype ;
      WHI_REC whinventory%rowtype ;

      WK_ITEM_NO_OLD       balance_fi.item_no%type  := 0 ;
      WK_SECTION_CODE_OLD  balance_fi.section_code%type := 0 ;
      WK_COUNT  NUMBER(10) := 0 ;

      WK_THIS_INVENTORY     NUMBER(15,6);
      WK_PROCESS_QTY1       NUMBER(14,4);
      WK_PROCESS_QTY2       NUMBER(14,4);
      WK_INVENTORY_TOTAL    NUMBER(14,4);
      WK_REMAIN             NUMBER(14,4);
      i number(2) ;

    cursor C_BAL
     is
     select b.*
     from balance_FI b,
          item i
     where b.item_no = i.item_no
       and nvl(i.stock_subject_code,0) < '5' and
           nvl(i.order_policy,0) != '2'
     order by b.item_no,b.BM_ITEM_NO;

    cursor C_ITM (param in number)
     is
      select *
      from item
       where item_no = param;

    cursor C_TTL (param in number)
     is
      select *
      from required_title
       where sort = param;

    cursor C_IMK (param in number)
     is
      select *
      from itemmaker
      where item_no = param
      order by alter_procedure;

    cursor C_COM (param in number)
     is
      select *
      from company
      where company_code = param
      ;

     /* ??????? */
     type week_date_tab is table of varchar2(10)
        index by binary_integer;
     wk_week_date week_date_tab;
     /* ???94?? */
     type req_qty_tab is table of number(14,4)
        index by binary_integer;
     wk_req_qty req_qty_tab;
     /* ??94?? */
     type pur_qty_tab is table of number(14,4)
        index by binary_integer;
     wk_pur_qty pur_qty_tab;
     /* ???94?? */
     type remain_qty_tab is table of number(14,4)
        index by binary_integer;
     wk_remain_qty remain_qty_tab;
     /* ??94?? */
     type net_qty_tab is table of number(14,4)
        index by binary_integer;
     wk_net_qty net_qty_tab;

     cursor C_WHI
      is
       select  *  from whinventory;


   --??????????????
   procedure head_rtn
   is
   begin
     /* ????????? */
      select nvl(trunc(sum(allocate_qty),V_DECIMAL),0) into  WK_THIS_INVENTORY
        from balance_fi
      where item_no = BAL_REC_OLD.ITEM_NO
        and section_code = BAL_REC_OLD.SECTION_CODE
        and supply_type = 'Z';
     /* ?????????????? */
      select nvl(trunc(sum(allocate_qty),V_DECIMAL),0) into WK_PROCESS_QTY1
        from balance_fi
       where item_no = BAL_REC_OLD.ITEM_NO
         and section_code = BAL_REC_OLD.SECTION_CODE
         and supply_type = 'H'
         and demand_type is not null;
     /* ??????????????? */
      select nvl(trunc(sum(allocate_qty),V_DECIMAL),0) into WK_PROCESS_QTY2
        from balance_fi
       where item_no = BAL_REC_OLD.ITEM_NO
         and section_code = BAL_REC_OLD.SECTION_CODE
         and supply_type = 'H'
         and demand_type is null;

     /* ITEM?? */
      ITM_REC := null ;
      open C_ITM(BAL_REC_OLD.ITEM_NO);
         fetch C_ITM into ITM_REC ;
      close C_ITM;

    /* ITEM MAKER?? */
      IMK_REC := null ;
      open C_IMK(BAL_REC_OLD.ITEM_NO);
         fetch C_IMK into IMK_REC ;
      close C_IMK;

      insert into required9 (
         OPERATION_DATE          , SECTION_CODE          , ITEM_NO                  , ITEM                     ,
         DESCRIPTION             , CATALOG_NO            , UNIT_STOCK               , ORDER_POLICY             ,
         STATION_CODE            , STATION               , PURCHASE_LEADTIME        , MINIMUM_ORDER_LOT        ,
         SPLIT_ORDER_LOT         , REORDER_POINT         , SAFETY_STOCK             , ISSUE_POLICY             ,
         SUPPLIER_CODE           , ESTIMATE_PRICE        , STANDARD_PRICE           , THIS_INVENTORY           ,
         PROCESS_QTY1            , PROCESS_QTY2
       ) values (
         SYSDATE                 , BAL_REC_OLD.SECTION_CODE  , BAL_REC_OLD.ITEM_NO          , ITM_REC.ITEM             ,
         ITM_REC.DESCRIPTION     , ITM_REC.CATALOG_NO    , ITM_REC.UNIT_STOCK       , ITM_REC.ORDER_POLICY     ,
         BAL_REC_OLD.ALLOCATE_ST     , BAL_REC_OLD.ALLOCATE_ST   , IMK_REC.PURCHASE_LEADTIME, IMK_REC.MINIMUM_ORDER_LOT,
         IMK_REC.SPLIT_ORDER_LOT , ITM_REC.REORDER_POINT , ITM_REC.SAFETY_STOCK     , ITM_REC.ISSUE_POLICY     ,
         IMK_REC.SUPPLIER_CODE   , IMK_REC.ESTIMATE_PRICE, ITM_REC.STANDARD_PRICE   , WK_THIS_INVENTORY        ,
         WK_PROCESS_QTY1         , WK_PROCESS_QTY2
       );
   end head_rtn;

--?????
   procedure detail_rtn is
   begin
--???(?????
      i := 0;
      <<rup>>
      loop
         if i > 94 then
            exit rup;
         end if;
         i := i + 1;
         /*????   + 0.9999??trunc???Y.Hagai*/
         wk_req_qty(i) := trunc(wk_req_qty(i) + 0.9999,V_DECIMAL);
         wk_pur_qty(i) := trunc(wk_pur_qty(i) + 0.9999,V_DECIMAL );
       end loop rup;
--??????
       TTL_REC := null ;
       open C_TTL(10);
          fetch C_TTL into TTL_REC;
       close C_TTL;
       insert into required_d9
          (operation_date, section_code, item_no,
           sort, title, this_week,
           week2, week3, week4,
           week5, week6, week7,
           week8, week9, week10,
           week11, week12, week13,
           week14, week15, week16,
           week17, week18, week19,
           week20, week21, week22,
           week23, week24, week25,
           week26, week27, week28,
           week29, week30, week31,
           week32, week33, week34,
           week35, week36, week37,
           week38, week39, week40,
           week41, week42, week43,
           week44, week45, week46,
           week47, week48, week49,
           week50, week51, week52,
           week53, week54, week55,
           week56, week57, week58,
           week59, week60, week61,
           week62, week63, week64,
           week65, week66, week67,
           week68, week69, week70,
           week71, week72, week73,
           week74, week75, week76,
           week77, week78, week79,
           week80, week81, week82,
           week83, week84, week85,
           week86, week87, week88,
           week89, week90, week91,
           week92, week93, week94
          )
       values
          (sysdate, WK_SECTION_CODE_OLD, WK_ITEM_NO_OLD,
           10, TTL_REC.TITLE, wk_req_qty(1),
           wk_req_qty(2), wk_req_qty(3), wk_req_qty(4),
           wk_req_qty(5), wk_req_qty(6), wk_req_qty(7),
           wk_req_qty(8), wk_req_qty(9), wk_req_qty(10),
           wk_req_qty(11), wk_req_qty(12), wk_req_qty(13),
           wk_req_qty(14), wk_req_qty(15), wk_req_qty(16),
           wk_req_qty(17), wk_req_qty(18), wk_req_qty(19),
           wk_req_qty(20), wk_req_qty(21), wk_req_qty(22),
           wk_req_qty(23), wk_req_qty(24), wk_req_qty(25),
           wk_req_qty(26), wk_req_qty(27), wk_req_qty(28),
           wk_req_qty(29), wk_req_qty(30), wk_req_qty(31),
           wk_req_qty(32), wk_req_qty(33), wk_req_qty(34),
           wk_req_qty(35), wk_req_qty(36), wk_req_qty(37),
           wk_req_qty(38), wk_req_qty(39), wk_req_qty(40),
           wk_req_qty(41), wk_req_qty(42), wk_req_qty(43),
           wk_req_qty(44), wk_req_qty(45), wk_req_qty(46),
           wk_req_qty(47), wk_req_qty(48), wk_req_qty(49),
           wk_req_qty(50), wk_req_qty(51), wk_req_qty(52),
           wk_req_qty(53), wk_req_qty(54), wk_req_qty(55),
           wk_req_qty(56), wk_req_qty(57), wk_req_qty(58),
           wk_req_qty(59), wk_req_qty(60), wk_req_qty(61),
           wk_req_qty(62), wk_req_qty(63), wk_req_qty(64),
           wk_req_qty(65), wk_req_qty(66), wk_req_qty(67),
           wk_req_qty(68), wk_req_qty(69), wk_req_qty(70),
           wk_req_qty(71), wk_req_qty(72), wk_req_qty(73),
           wk_req_qty(74), wk_req_qty(75), wk_req_qty(76),
           wk_req_qty(77), wk_req_qty(78), wk_req_qty(79),
           wk_req_qty(80), wk_req_qty(81), wk_req_qty(82),
           wk_req_qty(83), wk_req_qty(84), wk_req_qty(85),
           wk_req_qty(86), wk_req_qty(87), wk_req_qty(88),
           wk_req_qty(89), wk_req_qty(90), wk_req_qty(91),
           wk_req_qty(92), wk_req_qty(93), wk_req_qty(94)
           );
--?????
       TTL_REC := null ;
       open C_TTL(20);
          fetch C_TTL into TTL_REC;
       close C_TTL;
       insert into required_d9
          (operation_date, section_code, item_no,
           sort, title, this_week,
           week2, week3, week4,
           week5, week6, week7,
           week8, week9, week10,
           week11, week12, week13,
           week14, week15, week16,
           week17, week18, week19,
           week20, week21, week22,
           week23, week24, week25,
           week26, week27, week28,
           week29, week30, week31,
           week32, week33, week34,
           week35, week36, week37,
           week38, week39, week40,
           week41, week42, week43,
           week44, week45, week46,
           week47, week48, week49,
           week50, week51, week52,
           week53, week54, week55,
           week56, week57, week58,
           week59, week60, week61,
           week62, week63, week64,
           week65, week66, week67,
           week68, week69, week70,
           week71, week72, week73,
           week74, week75, week76,
           week77, week78, week79,
           week80, week81, week82,
           week83, week84, week85,
           week86, week87, week88,
           week89, week90, week91,
           week92, week93, week94
          )
       values
          (sysdate, WK_SECTION_CODE_OLD, WK_ITEM_NO_OLD,
           20, TTL_REC.TITLE, wk_pur_qty(1),
           wk_pur_qty(2), wk_pur_qty(3), wk_pur_qty(4),
           wk_pur_qty(5), wk_pur_qty(6), wk_pur_qty(7),
           wk_pur_qty(8), wk_pur_qty(9), wk_pur_qty(10),
           wk_pur_qty(11), wk_pur_qty(12), wk_pur_qty(13),
           wk_pur_qty(14), wk_pur_qty(15), wk_pur_qty(16),
           wk_pur_qty(17), wk_pur_qty(18), wk_pur_qty(19),
           wk_pur_qty(20), wk_pur_qty(21), wk_pur_qty(22),
           wk_pur_qty(23), wk_pur_qty(24), wk_pur_qty(25),
           wk_pur_qty(26), wk_pur_qty(27), wk_pur_qty(28),
           wk_pur_qty(29), wk_pur_qty(30), wk_pur_qty(31),
           wk_pur_qty(32), wk_pur_qty(33), wk_pur_qty(34),
           wk_pur_qty(35), wk_pur_qty(36), wk_pur_qty(37),
           wk_pur_qty(38), wk_pur_qty(39), wk_pur_qty(40),
           wk_pur_qty(41), wk_pur_qty(42), wk_pur_qty(43),
           wk_pur_qty(44), wk_pur_qty(45), wk_pur_qty(46),
           wk_pur_qty(47), wk_pur_qty(48), wk_pur_qty(49),
           wk_pur_qty(50), wk_pur_qty(51), wk_pur_qty(52),
           wk_pur_qty(53), wk_pur_qty(54), wk_pur_qty(55),
           wk_pur_qty(56), wk_pur_qty(57), wk_pur_qty(58),
           wk_pur_qty(59), wk_pur_qty(60), wk_pur_qty(61),
           wk_pur_qty(62), wk_pur_qty(63), wk_pur_qty(64),
           wk_pur_qty(65), wk_pur_qty(66), wk_pur_qty(67),
           wk_pur_qty(68), wk_pur_qty(69), wk_pur_qty(70),
           wk_pur_qty(71), wk_pur_qty(72), wk_pur_qty(73),
           wk_pur_qty(74), wk_pur_qty(75), wk_pur_qty(76),
           wk_pur_qty(77), wk_pur_qty(78), wk_pur_qty(79),
           wk_pur_qty(80), wk_pur_qty(81), wk_pur_qty(82),
           wk_pur_qty(83), wk_pur_qty(84), wk_pur_qty(85),
           wk_pur_qty(86), wk_pur_qty(87), wk_pur_qty(88),
           wk_pur_qty(89), wk_pur_qty(90), wk_pur_qty(91),
           wk_pur_qty(92), wk_pur_qty(93), wk_pur_qty(94)
          );
--?????????
--       WK_INVENTORY_TOTAL := WK_THIS_INVENTORY + WK_PROCESS_QTY1 - nvl(ITM_REC.SAFETY_STOCK,0);
       WK_INVENTORY_TOTAL := nvl(WK_THIS_INVENTORY,0) + nvl(WK_PROCESS_QTY1,0) +  nvl(WK_PROCESS_QTY2,0);
--
       i := 0;
       <<remainset>>
       loop
          if i > 94 then
             exit remainset;
          end if;
          i := i + 1;
--?????
          WK_INVENTORY_TOTAL := WK_INVENTORY_TOTAL + wk_pur_qty(i) - wk_req_qty(i);
          wk_remain_qty(i) := WK_INVENTORY_TOTAL;
--?????
          if i = 1 and wk_remain_qty(i) < 0 then
             wk_net_qty(i) := wk_remain_qty(i) * -1;
          elsif wk_remain_qty(i) < 0 then
             wk_remain := wk_remain_qty(i-1);
             if wk_remain > 0 then
                wk_remain := 0;
             end if;
             wk_net_qty(i) := (wk_remain_qty(i) - wk_remain) * -1;
          end if;
       end loop remainset;
--??????
       TTL_REC := null ;
       open C_TTL(30);
          fetch C_TTL into TTL_REC;
       close C_TTL;
       insert into required_d9
          (operation_date, section_code, item_no,
           sort, title, this_week,
           week2, week3, week4,
           week5, week6, week7,
           week8, week9, week10,
           week11, week12, week13,
           week14, week15, week16,
           week17, week18, week19,
           week20, week21, week22,
           week23, week24, week25,
           week26, week27, week28,
           week29, week30, week31,
           week32, week33, week34,
           week35, week36, week37,
           week38, week39, week40,
           week41, week42, week43,
           week44, week45, week46,
           week47, week48, week49,
           week50, week51, week52,
           week53, week54, week55,
           week56, week57, week58,
           week59, week60, week61,
           week62, week63, week64,
           week65, week66, week67,
           week68, week69, week70,
           week71, week72, week73,
           week74, week75, week76,
           week77, week78, week79,
           week80, week81, week82,
           week83, week84, week85,
           week86, week87, week88,
           week89, week90, week91,
           week92, week93, week94
          )
       values
          (sysdate, WK_SECTION_CODE_OLD, WK_ITEM_NO_OLD,
           30, TTL_REC.TITLE, wk_remain_qty(1),
           wk_remain_qty(2), wk_remain_qty(3), wk_remain_qty(4),
           wk_remain_qty(5), wk_remain_qty(6), wk_remain_qty(7),
           wk_remain_qty(8), wk_remain_qty(9), wk_remain_qty(10),
           wk_remain_qty(11), wk_remain_qty(12), wk_remain_qty(13),
           wk_remain_qty(14), wk_remain_qty(15), wk_remain_qty(16),
           wk_remain_qty(17), wk_remain_qty(18), wk_remain_qty(19),
           wk_remain_qty(20), wk_remain_qty(21), wk_remain_qty(22),
           wk_remain_qty(23), wk_remain_qty(24), wk_remain_qty(25),
           wk_remain_qty(26), wk_remain_qty(27), wk_remain_qty(28),
           wk_remain_qty(29), wk_remain_qty(30), wk_remain_qty(31),
           wk_remain_qty(32), wk_remain_qty(33), wk_remain_qty(34),
           wk_remain_qty(35), wk_remain_qty(36), wk_remain_qty(37),
           wk_remain_qty(38), wk_remain_qty(39), wk_remain_qty(40),
           wk_remain_qty(41), wk_remain_qty(42), wk_remain_qty(43),
           wk_remain_qty(44), wk_remain_qty(45), wk_remain_qty(46),
           wk_remain_qty(47), wk_remain_qty(48), wk_remain_qty(49),
           wk_remain_qty(50), wk_remain_qty(51), wk_remain_qty(52),
           wk_remain_qty(53), wk_remain_qty(54), wk_remain_qty(55),
           wk_remain_qty(56), wk_remain_qty(57), wk_remain_qty(58),
           wk_remain_qty(59), wk_remain_qty(60), wk_remain_qty(61),
           wk_remain_qty(62), wk_remain_qty(63), wk_remain_qty(64),
           wk_remain_qty(65), wk_remain_qty(66), wk_remain_qty(67),
           wk_remain_qty(68), wk_remain_qty(69), wk_remain_qty(70),
           wk_remain_qty(71), wk_remain_qty(72), wk_remain_qty(73),
           wk_remain_qty(74), wk_remain_qty(75), wk_remain_qty(76),
           wk_remain_qty(77), wk_remain_qty(78), wk_remain_qty(79),
           wk_remain_qty(80), wk_remain_qty(81), wk_remain_qty(82),
           wk_remain_qty(83), wk_remain_qty(84), wk_remain_qty(85),
           wk_remain_qty(86), wk_remain_qty(87), wk_remain_qty(88),
           wk_remain_qty(89), wk_remain_qty(90), wk_remain_qty(91),
           wk_remain_qty(92), wk_remain_qty(93), wk_remain_qty(94)
          );
--??????
       TTL_REC := null ;
       open C_TTL(40);
          fetch C_TTL into TTL_REC;
       close C_TTL;
       insert into required_d9
          (operation_date, section_code, item_no,
           sort, title, this_week,
           week2, week3, week4,
           week5, week6, week7,
           week8, week9, week10,
           week11, week12, week13,
           week14, week15, week16,
           week17, week18, week19,
           week20, week21, week22,
           week23, week24, week25,
           week26, week27, week28,
           week29, week30, week31,
           week32, week33, week34,
           week35, week36, week37,
           week38, week39, week40,
           week41, week42, week43,
           week44, week45, week46,
           week47, week48, week49,
           week50, week51, week52,
           week53, week54, week55,
           week56, week57, week58,
           week59, week60, week61,
           week62, week63, week64,
           week65, week66, week67,
           week68, week69, week70,
           week71, week72, week73,
           week74, week75, week76,
           week77, week78, week79,
           week80, week81, week82,
           week83, week84, week85,
           week86, week87, week88,
           week89, week90, week91,
           week92, week93, week94
          )
       values
          (sysdate, WK_SECTION_CODE_OLD, WK_ITEM_NO_OLD,
           40, TTL_REC.TITLE, wk_net_qty(1),
           wk_net_qty(2), wk_net_qty(3), wk_net_qty(4),
           wk_net_qty(5), wk_net_qty(6), wk_net_qty(7),
           wk_net_qty(8), wk_net_qty(9), wk_net_qty(10),
           wk_net_qty(11), wk_net_qty(12), wk_net_qty(13),
           wk_net_qty(14), wk_net_qty(15), wk_net_qty(16),
           wk_net_qty(17), wk_net_qty(18), wk_net_qty(19),
           wk_net_qty(20), wk_net_qty(21), wk_net_qty(22),
           wk_net_qty(23), wk_net_qty(24), wk_net_qty(25),
           wk_net_qty(26), wk_net_qty(27), wk_net_qty(28),
           wk_net_qty(29), wk_net_qty(30), wk_net_qty(31),
           wk_net_qty(32), wk_net_qty(33), wk_net_qty(34),
           wk_net_qty(35), wk_net_qty(36), wk_net_qty(37),
           wk_net_qty(38), wk_net_qty(39), wk_net_qty(40),
           wk_net_qty(41), wk_net_qty(42), wk_net_qty(43),
           wk_net_qty(44), wk_net_qty(45), wk_net_qty(46),
           wk_net_qty(47), wk_net_qty(48), wk_net_qty(49),
           wk_net_qty(50), wk_net_qty(51), wk_net_qty(52),
           wk_net_qty(53), wk_net_qty(54), wk_net_qty(55),
           wk_net_qty(56), wk_net_qty(57), wk_net_qty(58),
           wk_net_qty(59), wk_net_qty(60), wk_net_qty(61),
           wk_net_qty(62), wk_net_qty(63), wk_net_qty(61),
           wk_net_qty(65), wk_net_qty(66), wk_net_qty(67),
           wk_net_qty(68), wk_net_qty(69), wk_net_qty(70),
           wk_net_qty(71), wk_net_qty(72), wk_net_qty(73),
           wk_net_qty(74), wk_net_qty(75), wk_net_qty(76),
           wk_net_qty(77), wk_net_qty(78), wk_net_qty(79),
           wk_net_qty(80), wk_net_qty(81), wk_net_qty(82),
           wk_net_qty(83), wk_net_qty(84), wk_net_qty(85),
           wk_net_qty(86), wk_net_qty(87), wk_net_qty(88),
           wk_net_qty(89), wk_net_qty(90), wk_net_qty(91),
           wk_net_qty(92), wk_net_qty(93), wk_net_qty(94)
          );
   end detail_rtn;


 begin
-- ???
    /* ?????? */
    delete from required9;
    delete from required_d9;
    delete from required_date9;
    delete from required_decimal9;

   /* ??????????? */
       insert into required_decimal9 (operation_date,decimal_point) values (sysdate,v_decimal) ;

    /* WHINVETORY?? */
      WHI_REC := null ;
      open C_WHI;
         fetch C_WHI into WHI_REC ;
      close C_WHI;



   /* ?????? */
    i := 1;
    wk_week_date(i) := to_char(to_date(whi_rec.THIS_MONTH || '01','yyyymmdd'),'dd/mm/yyyy');
   <<weekset>>
    loop
      if i > 94 then
         exit weekset;
      end if;
      i := i + 1;
      wk_week_date(i) := to_char(to_date(wk_week_date(i-1),'dd/mm/yyyy') + 1,'dd/mm/yyyy');
    end loop weekset;

    insert into required_date9
       (operation_date, this_week, week2,
        week3, week4, week5,
        week6, week7, week8,
        week9, week10, week11,
        week12, week13,
        week14, week15, week16,
        week17, week18, week19,
        week20, week21, week22,
        week23, week24, week25,
        week26, week27, week28,
        week29, week30, week31,
        week32, week33, week34,
        week35, week36, week37,
        week38, week39, week40,
        week41, week42, week43,
        week44, week45, week46,
        week47, week48, week49,
        week50, week51, week52,
        week53, week54, week55,
        week56, week57, week58,
        week59, week60, week61,
        week62, week63, week64,
        week65, week66, week67,
        week68, week69, week70,
        week71, week72, week73,
        week74, week75, week76,
        week77, week78, week79,
        week80, week81, week82,
        week83, week84, week85,
        week86, week87, week88,
        week89, week90, week91,
        week92, week93, week94
          )
    values
       (sysdate, wk_week_date(1), wk_week_date(2),
        wk_week_date(3), wk_week_date(4),   wk_week_date(5),
        wk_week_date(6), wk_week_date(7),   wk_week_date(8),
        wk_week_date(9), wk_week_date(10),  wk_week_date(11),
        wk_week_date(12), wk_week_date(13), wk_week_date(14),
        wk_week_date(15), wk_week_date(16), wk_week_date(17),
        wk_week_date(18), wk_week_date(19), wk_week_date(20),
        wk_week_date(21), wk_week_date(22), wk_week_date(23),
        wk_week_date(24), wk_week_date(25), wk_week_date(26),
        wk_week_date(27), wk_week_date(28), wk_week_date(29),
        wk_week_date(30), wk_week_date(31), wk_week_date(32),
        wk_week_date(33), wk_week_date(34), wk_week_date(35),
        wk_week_date(36), wk_week_date(37), wk_week_date(38),
        wk_week_date(39), wk_week_date(40), wk_week_date(41),
        wk_week_date(42), wk_week_date(43), wk_week_date(44),
        wk_week_date(45), wk_week_date(46), wk_week_date(47),
        wk_week_date(48), wk_week_date(49), wk_week_date(50),
        wk_week_date(51), wk_week_date(52), wk_week_date(53),
        wk_week_date(54), wk_week_date(55), wk_week_date(56),
        wk_week_date(57), wk_week_date(58), wk_week_date(59),
        wk_week_date(60), wk_week_date(61), wk_week_date(62),
        wk_week_date(63), wk_week_date(64), wk_week_date(65),
        wk_week_date(66), wk_week_date(67), wk_week_date(68),
        wk_week_date(69), wk_week_date(70), wk_week_date(71),
        wk_week_date(72), wk_week_date(73), wk_week_date(74),
        wk_week_date(75), wk_week_date(76), wk_week_date(77),
        wk_week_date(78), wk_week_date(79), wk_week_date(80),
        wk_week_date(81), wk_week_date(82), wk_week_date(83),
        wk_week_date(84), wk_week_date(85), wk_week_date(86),
        wk_week_date(87), wk_week_date(88), wk_week_date(89),
        wk_week_date(90), wk_week_date(91), wk_week_date(92),
        wk_week_date(93), wk_week_date(94)
       );

--???
    /* ??????? */
    WK_COUNT := 0 ;
     open C_BAL ;
       loop
       fetch C_BAL into BAL_REC ;
       exit when C_BAL%notfound or C_BAL%notfound is null;

         WK_COUNT := WK_COUNT + 1 ;

         if WK_COUNT = 1 or BAL_REC.ITEM_NO <> WK_ITEM_NO_OLD then
             if WK_COUNT > 1 then
                 --??????
                    head_rtn;
                 --?????
                    detail_rtn;
             end if;
             WK_ITEM_NO_OLD      := BAL_REC.ITEM_NO;
             WK_SECTION_CODE_OLD := BAL_REC.SECTION_CODE;
             BAL_REC_OLD := BAL_REC ;

             i := 0;
             <<wkclear>>
             loop
                if i > 94 then
                   exit wkclear;
                end if;
                i := i + 1;
                wk_req_qty(i) := 0;
                wk_pur_qty(i) := 0;
                wk_remain_qty(i) := 0;
                wk_net_qty(i) := 0;
             end loop wkclear;
         end if;

            --????????????
           if BAL_REC.DEMAND_TYPE is not null then
                 if BAL_REC.DEMAND_DATE < to_date(wk_week_date(2),'dd/mm/yyyy') then
                     wk_req_qty(1) := wk_req_qty(1) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(3),'dd/mm/yyyy') then
                     wk_req_qty(2) := wk_req_qty(2) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(4),'dd/mm/yyyy') then
                     wk_req_qty(3) := wk_req_qty(3) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(5),'dd/mm/yyyy') then
                     wk_req_qty(4) := wk_req_qty(4) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(6),'dd/mm/yyyy') then
                     wk_req_qty(5) := wk_req_qty(5) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(7),'dd/mm/yyyy') then
                     wk_req_qty(6) := wk_req_qty(6) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(8),'dd/mm/yyyy') then
                     wk_req_qty(7) := wk_req_qty(7) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(9),'dd/mm/yyyy') then
                     wk_req_qty(8) := wk_req_qty(8) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(10),'dd/mm/yyyy') then
                     wk_req_qty(9) := wk_req_qty(9) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(11),'dd/mm/yyyy') then
                     wk_req_qty(10) := wk_req_qty(10) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(12),'dd/mm/yyyy') then
                     wk_req_qty(11) := wk_req_qty(11) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(13),'dd/mm/yyyy') then
                     wk_req_qty(12) := wk_req_qty(12) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(14),'dd/mm/yyyy') then
                     wk_req_qty(13) := wk_req_qty(13) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(15),'dd/mm/yyyy') then
                     wk_req_qty(14) := wk_req_qty(14) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(16),'dd/mm/yyyy') then
                     wk_req_qty(15) := wk_req_qty(15) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(17),'dd/mm/yyyy') then
                     wk_req_qty(16) := wk_req_qty(16) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(18),'dd/mm/yyyy') then
                     wk_req_qty(17) := wk_req_qty(17) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(19),'dd/mm/yyyy') then
                     wk_req_qty(18) := wk_req_qty(18) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(20),'dd/mm/yyyy') then
                     wk_req_qty(19) := wk_req_qty(19) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(21),'dd/mm/yyyy') then
                     wk_req_qty(20) := wk_req_qty(20) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(22),'dd/mm/yyyy') then
                     wk_req_qty(21) := wk_req_qty(21) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(23),'dd/mm/yyyy') then
                     wk_req_qty(22) := wk_req_qty(22) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(24),'dd/mm/yyyy') then
                     wk_req_qty(23) := wk_req_qty(23) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(25),'dd/mm/yyyy') then
                     wk_req_qty(24) := wk_req_qty(24) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(26),'dd/mm/yyyy') then
                     wk_req_qty(25) := wk_req_qty(25) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(27),'dd/mm/yyyy') then
                     wk_req_qty(26) := wk_req_qty(26) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(28),'dd/mm/yyyy') then
                     wk_req_qty(27) := wk_req_qty(27) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(29),'dd/mm/yyyy') then
                     wk_req_qty(28) := wk_req_qty(28) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(30),'dd/mm/yyyy') then
                     wk_req_qty(29) := wk_req_qty(29) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(31),'dd/mm/yyyy') then
                     wk_req_qty(30) := wk_req_qty(30) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(32),'dd/mm/yyyy') then
                     wk_req_qty(31) := wk_req_qty(31) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(33),'dd/mm/yyyy') then
                     wk_req_qty(32) := wk_req_qty(32) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(34),'dd/mm/yyyy') then
                     wk_req_qty(33) := wk_req_qty(33) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(35),'dd/mm/yyyy') then
                     wk_req_qty(34) := wk_req_qty(34) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(36),'dd/mm/yyyy') then
                     wk_req_qty(35) := wk_req_qty(35) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(37),'dd/mm/yyyy') then
                     wk_req_qty(36) := wk_req_qty(36) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(38),'dd/mm/yyyy') then
                     wk_req_qty(37) := wk_req_qty(37) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(39),'dd/mm/yyyy') then
                     wk_req_qty(38) := wk_req_qty(38) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(40),'dd/mm/yyyy') then
                     wk_req_qty(39) := wk_req_qty(39) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(41),'dd/mm/yyyy') then
                     wk_req_qty(40) := wk_req_qty(40) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(42),'dd/mm/yyyy') then
                     wk_req_qty(41) := wk_req_qty(41) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(43),'dd/mm/yyyy') then
                     wk_req_qty(42) := wk_req_qty(42) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(44),'dd/mm/yyyy') then
                     wk_req_qty(43) := wk_req_qty(43) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(45),'dd/mm/yyyy') then
                     wk_req_qty(44) := wk_req_qty(44) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(46),'dd/mm/yyyy') then
                    wk_req_qty(45) := wk_req_qty(45) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(47),'dd/mm/yyyy') then
                     wk_req_qty(46) := wk_req_qty(46) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(48),'dd/mm/yyyy') then
                     wk_req_qty(47) := wk_req_qty(47) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(49),'dd/mm/yyyy') then
                     wk_req_qty(48) := wk_req_qty(48) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(50),'dd/mm/yyyy') then
                     wk_req_qty(49) := wk_req_qty(49) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(51),'dd/mm/yyyy') then
                     wk_req_qty(50) := wk_req_qty(50) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(52),'dd/mm/yyyy') then
                     wk_req_qty(51) := wk_req_qty(51) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(53),'dd/mm/yyyy') then
                     wk_req_qty(52) := wk_req_qty(52) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(54),'dd/mm/yyyy') then
                     wk_req_qty(53) := wk_req_qty(53) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(55),'dd/mm/yyyy') then
                     wk_req_qty(54) := wk_req_qty(54) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(56),'dd/mm/yyyy') then
                     wk_req_qty(55) := wk_req_qty(55) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(57),'dd/mm/yyyy') then
                     wk_req_qty(56) := wk_req_qty(56) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(58),'dd/mm/yyyy') then
                     wk_req_qty(57) := wk_req_qty(57) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(59),'dd/mm/yyyy') then
                     wk_req_qty(58) := wk_req_qty(58) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(60),'dd/mm/yyyy') then
                     wk_req_qty(59) := wk_req_qty(59) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(61),'dd/mm/yyyy') then
                     wk_req_qty(60) := wk_req_qty(60) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(62),'dd/mm/yyyy') then
                     wk_req_qty(61) := wk_req_qty(61) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(63),'dd/mm/yyyy') then
                     wk_req_qty(62) := wk_req_qty(62) + BAL_REC.ALLOCATE_QTY;
--
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(64),'dd/mm/yyyy') then
                     wk_req_qty(63) := wk_req_qty(63) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(65),'dd/mm/yyyy') then
                     wk_req_qty(64) := wk_req_qty(64) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(66),'dd/mm/yyyy') then
                     wk_req_qty(65) := wk_req_qty(65) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(67),'dd/mm/yyyy') then
                     wk_req_qty(66) := wk_req_qty(66) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(68),'dd/mm/yyyy') then
                     wk_req_qty(67) := wk_req_qty(67) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(69),'dd/mm/yyyy') then
                     wk_req_qty(68) := wk_req_qty(68) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(70),'dd/mm/yyyy') then
                     wk_req_qty(69) := wk_req_qty(69) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(71),'dd/mm/yyyy') then
                     wk_req_qty(70) := wk_req_qty(70) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(72),'dd/mm/yyyy') then
                     wk_req_qty(71) := wk_req_qty(71) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(73),'dd/mm/yyyy') then
                     wk_req_qty(72) := wk_req_qty(72) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(74),'dd/mm/yyyy') then
                     wk_req_qty(73) := wk_req_qty(73) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(75),'dd/mm/yyyy') then
                     wk_req_qty(74) := wk_req_qty(74) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(76),'dd/mm/yyyy') then
                     wk_req_qty(75) := wk_req_qty(75) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(77),'dd/mm/yyyy') then
                     wk_req_qty(76) := wk_req_qty(76) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(78),'dd/mm/yyyy') then
                     wk_req_qty(77) := wk_req_qty(77) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(79),'dd/mm/yyyy') then
                     wk_req_qty(78) := wk_req_qty(78) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(80),'dd/mm/yyyy') then
                     wk_req_qty(79) := wk_req_qty(79) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(81),'dd/mm/yyyy') then
                     wk_req_qty(80) := wk_req_qty(80) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(82),'dd/mm/yyyy') then
                     wk_req_qty(81) := wk_req_qty(81) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(83),'dd/mm/yyyy') then
                     wk_req_qty(82) := wk_req_qty(82) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(84),'dd/mm/yyyy') then
                     wk_req_qty(83) := wk_req_qty(83) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(85),'dd/mm/yyyy') then
                     wk_req_qty(84) := wk_req_qty(84) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(86),'dd/mm/yyyy') then
                     wk_req_qty(85) := wk_req_qty(85) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(87),'dd/mm/yyyy') then
                     wk_req_qty(86) := wk_req_qty(86) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(88),'dd/mm/yyyy') then
                     wk_req_qty(87) := wk_req_qty(87) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(89),'dd/mm/yyyy') then
                     wk_req_qty(88) := wk_req_qty(88) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(90),'dd/mm/yyyy') then
                     wk_req_qty(89) := wk_req_qty(89) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(91),'dd/mm/yyyy') then
                     wk_req_qty(90) := wk_req_qty(90) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(92),'dd/mm/yyyy') then
                     wk_req_qty(91) := wk_req_qty(91) +  BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(93),'dd/mm/yyyy') then
                     wk_req_qty(92) := wk_req_qty(92) +  BAL_REC.ALLOCATE_QTY;
--
                 elsif BAL_REC.DEMAND_DATE < to_date(wk_week_date(94),'dd/mm/yyyy') then
                     wk_req_qty(93) := wk_req_qty(93) + BAL_REC.ALLOCATE_QTY;
                 else
                     wk_req_qty(94) := wk_req_qty(94) +  BAL_REC.ALLOCATE_QTY;
                 end if;
           end if;
           --????????
--           if BAL_REC.SUPPLY_TYPE = 'C' then
           if BAL_REC.SUPPLY_TYPE = 'R' then


                 if BAL_REC.SUPPLY_DATE < to_date(wk_week_date(2),'dd/mm/yyyy') then
                    wk_pur_qty(1) := wk_pur_qty(1) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(3),'dd/mm/yyyy')  then
                    wk_pur_qty(2) := wk_pur_qty(2) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(4),'dd/mm/yyyy')  then
                    wk_pur_qty(3) := wk_pur_qty(3) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(5),'dd/mm/yyyy')  then
                    wk_pur_qty(4) := wk_pur_qty(4) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(6),'dd/mm/yyyy')  then
                    wk_pur_qty(5) := wk_pur_qty(5) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(7),'dd/mm/yyyy')  then
                    wk_pur_qty(6) := wk_pur_qty(6) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(8),'dd/mm/yyyy')  then
                    wk_pur_qty(7) := wk_pur_qty(7) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(9),'dd/mm/yyyy')  then
                    wk_pur_qty(8) := wk_pur_qty(8) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(10),'dd/mm/yyyy')  then
                    wk_pur_qty(9) := wk_pur_qty(9) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(11),'dd/mm/yyyy')  then
                    wk_pur_qty(10) := wk_pur_qty(10) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(12),'dd/mm/yyyy')  then
                    wk_pur_qty(11) := wk_pur_qty(11) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(13),'dd/mm/yyyy')  then
                    wk_pur_qty(12) := wk_pur_qty(12) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(14),'dd/mm/yyyy')  then
                    wk_pur_qty(13) := wk_pur_qty(13) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(15),'dd/mm/yyyy')  then
                    wk_pur_qty(14) := wk_pur_qty(14) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(16),'dd/mm/yyyy')  then
                    wk_pur_qty(15) := wk_pur_qty(15) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(17),'dd/mm/yyyy')  then
                    wk_pur_qty(16) := wk_pur_qty(16) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(18),'dd/mm/yyyy')  then
                    wk_pur_qty(17) := wk_pur_qty(17) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(19),'dd/mm/yyyy')  then
                    wk_pur_qty(18) := wk_pur_qty(18) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(20),'dd/mm/yyyy')  then
                    wk_pur_qty(19) := wk_pur_qty(19) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(21),'dd/mm/yyyy')  then
                    wk_pur_qty(20) := wk_pur_qty(20) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(22),'dd/mm/yyyy')  then
                    wk_pur_qty(21) := wk_pur_qty(21) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(23),'dd/mm/yyyy')  then
                    wk_pur_qty(22) := wk_pur_qty(22) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(24),'dd/mm/yyyy')  then
                    wk_pur_qty(23) := wk_pur_qty(23) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(25),'dd/mm/yyyy')  then
                    wk_pur_qty(24) := wk_pur_qty(24) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(26),'dd/mm/yyyy')  then
                    wk_pur_qty(25) := wk_pur_qty(25) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(27),'dd/mm/yyyy')  then
                    wk_pur_qty(26) := wk_pur_qty(26) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(28),'dd/mm/yyyy')  then
                    wk_pur_qty(27) := wk_pur_qty(27) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(29),'dd/mm/yyyy')  then
                    wk_pur_qty(28) := wk_pur_qty(28) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(30),'dd/mm/yyyy')  then
                    wk_pur_qty(29) := wk_pur_qty(29) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(31),'dd/mm/yyyy')  then
                    wk_pur_qty(30) := wk_pur_qty(30) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(32),'dd/mm/yyyy') then
                    wk_pur_qty(31) := wk_pur_qty(31) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(33),'dd/mm/yyyy') then
                    wk_pur_qty(32) := wk_pur_qty(32) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(34),'dd/mm/yyyy') then
                    wk_pur_qty(33) := wk_pur_qty(33) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(35),'dd/mm/yyyy') then
                    wk_pur_qty(34) := wk_pur_qty(34) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(36),'dd/mm/yyyy') then
                    wk_pur_qty(35) := wk_pur_qty(35) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(37),'dd/mm/yyyy') then
                    wk_pur_qty(36) := wk_pur_qty(36) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(38),'dd/mm/yyyy') then
                    wk_pur_qty(37) := wk_pur_qty(37) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(39),'dd/mm/yyyy') then
                    wk_pur_qty(38) := wk_pur_qty(38) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(40),'dd/mm/yyyy') then
                    wk_pur_qty(39) := wk_pur_qty(39) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(41),'dd/mm/yyyy') then
                    wk_pur_qty(40) := wk_pur_qty(40) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(42),'dd/mm/yyyy') then
                    wk_pur_qty(41) := wk_pur_qty(41) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(43),'dd/mm/yyyy') then
                    wk_pur_qty(42) := wk_pur_qty(42) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(44),'dd/mm/yyyy') then
                    wk_pur_qty(43) := wk_pur_qty(43) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(45),'dd/mm/yyyy') then
                    wk_pur_qty(44) := wk_pur_qty(44) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(46),'dd/mm/yyyy') then
                    wk_pur_qty(45) := wk_pur_qty(45) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(47),'dd/mm/yyyy') then
                    wk_pur_qty(46) := wk_pur_qty(46) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(48),'dd/mm/yyyy') then
                    wk_pur_qty(47) := wk_pur_qty(47) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(49),'dd/mm/yyyy') then
                    wk_pur_qty(48) := wk_pur_qty(48) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(50),'dd/mm/yyyy') then
                    wk_pur_qty(49) := wk_pur_qty(49) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(51),'dd/mm/yyyy') then
                    wk_pur_qty(50) := wk_pur_qty(50) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(52),'dd/mm/yyyy') then
                    wk_pur_qty(51) := wk_pur_qty(51) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(53),'dd/mm/yyyy') then
                    wk_pur_qty(52) := wk_pur_qty(52) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(54),'dd/mm/yyyy') then
                    wk_pur_qty(53) := wk_pur_qty(53) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(55),'dd/mm/yyyy') then
                    wk_pur_qty(54) := wk_pur_qty(54) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(56),'dd/mm/yyyy') then
                    wk_pur_qty(55) := wk_pur_qty(55) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(57),'dd/mm/yyyy') then
                    wk_pur_qty(56) := wk_pur_qty(56) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(58),'dd/mm/yyyy') then
                    wk_pur_qty(57) := wk_pur_qty(57) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(59),'dd/mm/yyyy') then
                    wk_pur_qty(58) := wk_pur_qty(58) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(60),'dd/mm/yyyy') then
                    wk_pur_qty(59) := wk_pur_qty(59) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(61),'dd/mm/yyyy') then
                    wk_pur_qty(60) := wk_pur_qty(60) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(62),'dd/mm/yyyy') then
                    wk_pur_qty(61) := wk_pur_qty(61) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(63),'dd/mm/yyyy') then
                    wk_pur_qty(62) := wk_pur_qty(62) + BAL_REC.ALLOCATE_QTY;
--
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(64),'dd/mm/yyyy')  then
                    wk_pur_qty(63) := wk_pur_qty(63) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(65),'dd/mm/yyyy')  then
                    wk_pur_qty(64) := wk_pur_qty(64) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(66),'dd/mm/yyyy')  then
                    wk_pur_qty(65) := wk_pur_qty(65) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(67),'dd/mm/yyyy')  then
                    wk_pur_qty(66) := wk_pur_qty(66) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(68),'dd/mm/yyyy')  then
                    wk_pur_qty(67) := wk_pur_qty(67) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(69),'dd/mm/yyyy')  then
                    wk_pur_qty(68) := wk_pur_qty(68) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(70),'dd/mm/yyyy')  then
                    wk_pur_qty(69) := wk_pur_qty(69) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(71),'dd/mm/yyyy')  then
                    wk_pur_qty(70) := wk_pur_qty(70) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(72),'dd/mm/yyyy')  then
                    wk_pur_qty(71) := wk_pur_qty(71) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(73),'dd/mm/yyyy')  then
                    wk_pur_qty(72) := wk_pur_qty(72) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(74),'dd/mm/yyyy')  then
                    wk_pur_qty(73) := wk_pur_qty(73) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(75),'dd/mm/yyyy')  then
                    wk_pur_qty(74) := wk_pur_qty(74) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(76),'dd/mm/yyyy')  then
                    wk_pur_qty(75) := wk_pur_qty(75) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(77),'dd/mm/yyyy')  then
                    wk_pur_qty(76) := wk_pur_qty(76) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(78),'dd/mm/yyyy')  then
                    wk_pur_qty(77) := wk_pur_qty(77) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(79),'dd/mm/yyyy')  then
                    wk_pur_qty(78) := wk_pur_qty(78) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(80),'dd/mm/yyyy')  then
                    wk_pur_qty(79) := wk_pur_qty(79) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(81),'dd/mm/yyyy')  then
                    wk_pur_qty(80) := wk_pur_qty(80) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(82),'dd/mm/yyyy') then
                    wk_pur_qty(81) := wk_pur_qty(81) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(83),'dd/mm/yyyy') then
                    wk_pur_qty(82) := wk_pur_qty(82) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(84),'dd/mm/yyyy') then
                    wk_pur_qty(83) := wk_pur_qty(83) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(85),'dd/mm/yyyy') then
                    wk_pur_qty(84) := wk_pur_qty(84) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(86),'dd/mm/yyyy') then
                    wk_pur_qty(85) := wk_pur_qty(85) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(87),'dd/mm/yyyy') then
                    wk_pur_qty(86) := wk_pur_qty(86) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(88),'dd/mm/yyyy') then
                    wk_pur_qty(87) := wk_pur_qty(87) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(89),'dd/mm/yyyy') then
                    wk_pur_qty(88) := wk_pur_qty(88) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(90),'dd/mm/yyyy') then
                    wk_pur_qty(89) := wk_pur_qty(89) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(91),'dd/mm/yyyy') then
                    wk_pur_qty(90) := wk_pur_qty(90) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(92),'dd/mm/yyyy') then
                    wk_pur_qty(91) := wk_pur_qty(91) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(93),'dd/mm/yyyy') then
                    wk_pur_qty(92) := wk_pur_qty(92) + BAL_REC.ALLOCATE_QTY;
                 elsif BAL_REC.SUPPLY_DATE < to_date(wk_week_date(94),'dd/mm/yyyy') then
                    wk_pur_qty(93) := wk_pur_qty(93) + BAL_REC.ALLOCATE_QTY;
--
                 else
                    wk_pur_qty(94) := wk_pur_qty(94) + BAL_REC.ALLOCATE_QTY;
                 end if;
           end if;
       end loop ;

        --??????
           head_rtn;
        --?????
           detail_rtn;

     close C_BAL ;

 end ;
end  T_REQUIRED9;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."T_TEIJI" 
as
begin
   declare
  cursor C0
   is
    select b.section_code, b.item_no,
           b.demand_number, b.supply_number,
           b.allocate_status, b.allocate_qty, b.allocate_st,
           b.demand_type, b.demand_priority, b.demand_date,
           b.demand_sub_date, b.supply_type, b.supply_priority,
           b.supply_date, b.supply_sub_date
      from balance b, item i
     where b.demand_type is not null and
           b.supply_type is null and
           b.item_no = i.item_no and
           i.stock_subject_code < '5';
--
  wk_section_code_b		balance.section_code%type;
  wk_item_no_b			balance.item_no%type;
  wk_demand_number_b	balance.demand_number%type;
  wk_supply_number_b	balance.supply_number%type;
  wk_allocate_status_b	balance.allocate_status%type;
  wk_allocate_qty_b		balance.allocate_qty%type;
  wk_allocate_st_b		balance.allocate_st%type;
  wk_demand_type_b		balance.demand_type%type;
  wk_demand_priority_b	balance.demand_priority%type;
  wk_demand_date_b		balance.demand_date%type;
  wk_demand_sub_date_b	balance.demand_sub_date%type;
  wk_supply_type_b		balance.supply_type%type;
  wk_supply_priority_b	balance.supply_priority%type;
  wk_supply_date_b		balance.supply_date%type;
  wk_supply_sub_date_b	balance.supply_sub_date%type;

 cursor C1
   is
    select b.section_code, b.item_no, allocate_qty,
           demand_type, to_char(demand_date,'yyyy/mm/dd'), supply_type,
           to_char(supply_date,'yyyy/mm/dd'), substr(allocate_st,1,1),
           station_code, station
      from teiji_wk b
     order by b.item_no, station_code;
--
  wk_section_code		balance.section_code%type;
  wk_item_no			balance.item_no%type;
  wk_allocate_qty		balance.allocate_qty%type;
  wk_demand_type		balance.demand_type%type;
  wk_demand_date		varchar2(10);
  wk_supply_type		balance.supply_type%type;
  wk_supply_date		varchar2(10);
  wk_allocate_st		varchar2(1);
--
  cursor C2 (para in number)
   is
    select  unit_stock, supplier_code, item, description, catalog_no
    from item
     where item_no = para;
--
  wk_unit_stock			item.unit_stock%type;
  wk_supplier_code		item.supplier_code%type;
  wk_item				item.item%type;
  wk_description		item.description%type;
  wk_catalog_no			item.catalog_no%type;
--
  cursor C3 (para in number)
   is
    select i.supplier_code, c.company
    from itemmaker i, company c
     where i.item_no = para and
           i.supplier_code = c.company_code
    order by i.alter_procedure;
--
  wk_station_code		itemmaker.supplier_code%type;
  wk_station			company.company%type;
--
--
  cursor C4 (para in number)
   is
    select title
    from teiji_title
     where sort = para;
--
  wk_title		teiji_title.title%type;
--
--?????????????
  type week_date_tab is table of varchar2(10)
     index by binary_integer;
  wk_week_date week_date_tab;
--??????
  type req_qty_tab is table of number(14,4)
     index by binary_integer;
  wk_req_qty req_qty_tab;
--?????
  type pur_qty_tab is table of number(14,4)
     index by binary_integer;
  wk_pur_qty pur_qty_tab;
--
  i							number(2);
  wk_cntinp					number(5);
  wk_item_no2				balance.item_no%type;
  wk_section_code2			balance.section_code%type;
  wk_allocate_st2			varchar2(10);
  wk_station_code2			itemmaker.supplier_code%type;
  wk_station2				company.company%type;
  wk_this_inventory			number(15,6);
  wk_remainder_qty			number(15,6);
  wk_delivery_date			date;
  wk_behind	 				number(14,4);
  wk_today7					varchar2(10);
  wk_titledate				varchar2(10);
--
--??????????????
   procedure head_rtn is
   begin
--
      open C2(wk_item_no2);
         fetch C2 into   wk_unit_stock,  wk_supplier_code, wk_item, wk_description, wk_catalog_no;
      close C2;

      insert into teiji
         (operation_date, section_code, item_no,
          item, description, catalog_no,
          unit_stock, station_code, station,
          supplier_code
          )
      values
         (sysdate, wk_section_code2, wk_item_no2,
          wk_item, wk_description, wk_catalog_no,
          wk_unit_stock, wk_station_code2, wk_station2,
          wk_supplier_code
          );
   end head_rtn;
--
--?????
   procedure detail_rtn is
   begin
--???(????
      i := 0;
      <<rup>>
      loop
         if i > 7 then
            exit rup;
         end if;
         i := i + 1;
         wk_req_qty(i) := trunc(wk_req_qty(i));
         wk_pur_qty(i) := trunc(wk_pur_qty(i));
      end loop rup;
--?????
       open C4(10);
          fetch C4 into wk_title;
          if C4%notfound or C4%notfound is null then
             wk_title := null;
          end if;
       close C4;
--
       insert into teiji_d
          (operation_date, section_code, item_no,
           station_code, sort, title,
           behind, this_week, week2,
           week3, week4, week5,
           week6, week7, week8)
       values
          (sysdate, wk_section_code2, wk_item_no2,
           wk_station_code2, 10, wk_title,
           wk_behind, wk_pur_qty(1), wk_pur_qty(2),
           wk_pur_qty(3), wk_pur_qty(4), wk_pur_qty(5),
           wk_pur_qty(6), wk_pur_qty(7), wk_pur_qty(8));
--
--??????
       open C4(20);
          fetch C4 into wk_title;
          if C4%notfound or C4%notfound is null then
             wk_title := null;
          end if;
       close C4;
      insert into teiji_d
         (operation_date, section_code, item_no,
           station_code, sort, title, this_week, week2,
           week3, week4, week5,
           week6, week7, week8)
      values
         (sysdate, wk_section_code2, wk_item_no2,
          wk_station_code2, 20, wk_title, wk_req_qty(1), wk_req_qty(2),
          wk_req_qty(3), wk_req_qty(4), wk_req_qty(5),
          wk_req_qty(6), wk_req_qty(7), wk_req_qty(8));
--
   end detail_rtn;
--
--
   begin
    DBMS_OUTPUT.PUT_LINE('start time = ' ||
                          to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'));
    delete from teiji;
    delete from teiji_d;
    delete from teiji_date;
    delete from teiji_wk;
    insert into teiji_wk
    select b.operation_date, b.section_code, b.item_no,
-- 2006/04/07          lpad(to_char(o.supplier_code),6,'0'), c.company, b.demand_number,
           to_char(o.supplier_code), c.company, b.demand_number,
           b.supply_number,
           b.allocate_status, b.allocate_qty, b.allocate_st,
           b.demand_type, b.demand_priority, b.demand_date,
           b.demand_sub_date, b.supply_type, b.supply_priority,
           b.supply_date, b.supply_sub_date
      from balance b, po_header o, company c
     where b.supply_type = 'R' and
           rtrim(b.supply_number) = rtrim(o.po_no) and
-- 2006/04/07          lpad(to_char(o.supplier_code),6,'0') = c.company_code;
           to_char(o.supplier_code) = c.company_code;
--
   <<demandset>>
    open C0;
    loop
      fetch C0 into
	wk_section_code_b, wk_item_no_b, wk_demand_number_b,
	wk_supply_number_b, wk_allocate_status_b, wk_allocate_qty_b,
	wk_allocate_st_b, wk_demand_type_b, wk_demand_priority_b,
	wk_demand_date_b, wk_demand_sub_date_b, wk_supply_type_b,
	wk_supply_priority_b, wk_supply_date_b, wk_supply_sub_date_b;
      exit when C0%notfound or C0%notfound is null;
      open C3(wk_item_no_b);
         fetch C3 into
             wk_station_code, wk_station;
         if C3%notfound or C3%notfound is null then
            wk_station_code := null;
            wk_station := null;
         end if;
      close C3;
      insert into teiji_wk
          (operation_date, section_code, item_no,
           station_code, station, demand_number, supply_number,
           allocate_status, allocate_qty, allocate_st,
           demand_type, demand_priority, demand_date,
           demand_sub_date, supply_type, supply_priority,
           supply_date, supply_sub_date)
       values
          (sysdate, wk_section_code_b, wk_item_no_b,
           wk_station_code, wk_station, wk_demand_number_b, wk_supply_number_b,
           wk_allocate_status_b, wk_allocate_qty_b, wk_allocate_st_b,
           wk_demand_type_b, wk_demand_priority_b, wk_demand_date_b,
           wk_demand_sub_date_b, wk_supply_type_b, wk_supply_priority_b,
           wk_supply_date_b, wk_supply_sub_date_b);
   end loop demandset;
--
--??????
    i := 1;
--    wk_week_date(i) := to_char(sysdate - (to_number(to_char(sysdate,'d')) -2),
    wk_week_date(i) := to_char(sysdate - (to_number(to_char(sysdate,'d')) -1),
                       'yyyy/mm/dd');
   <<weekset>>
    loop
      if i > 8 then
         exit weekset;
      end if;
      i := i + 1;
      wk_week_date(i) := to_char(to_date(wk_week_date(i-1)) + 7,'yyyy/mm/dd');
    end loop weekset;
    insert into teiji_date
       (operation_date, this_week, week2,
        week3, week4, week5,
        week6, week7, week8)
    values
       (sysdate, wk_week_date(1), wk_week_date(2),
        wk_week_date(3), wk_week_date(4), wk_week_date(5),
        wk_week_date(6), wk_week_date(7), wk_week_date(8));
--
    wk_cntinp := 0;
    wk_item_no2 := 0;
    open C1;
    loop
      fetch C1 into
	 wk_section_code, wk_item_no, wk_allocate_qty,
	 wk_demand_type, wk_demand_date, wk_supply_type,
         wk_supply_date, wk_allocate_st,
         wk_station_code, wk_station;
      exit when C1%notfound or C1%notfound is null;
--
      wk_cntinp := wk_cntinp + 1;
      if wk_cntinp = 1 or
         wk_item_no <> wk_item_no2 or
         wk_station_code <> wk_station_code2 then
         if wk_cntinp > 1 then
--??????
            head_rtn;
--?????
            detail_rtn;
         end if;
         wk_item_no2      := wk_item_no;
         wk_station_code2 := wk_station_code;
         wk_section_code2 := wk_section_code;
         wk_allocate_st2  := wk_allocate_st;
         wk_station2      := wk_station;
         wk_behind        := 0;
         i := 0;
         <<wkclear>>
         loop
            if i > 8 then
               exit wkclear;
            end if;
            i := i + 1;
            wk_req_qty(i) := 0;
            wk_pur_qty(i) := 0;
         end loop wkclear;
      end if;
--????????????
      if wk_supply_type is null then
         if wk_demand_date < wk_week_date(2) then
            wk_req_qty(1) := wk_req_qty(1) + wk_allocate_qty;
         elsif wk_demand_date < wk_week_date(3) then
            wk_req_qty(2) := wk_req_qty(2) + wk_allocate_qty;
         elsif wk_demand_date < wk_week_date(4) then
            wk_req_qty(3) := wk_req_qty(3) + wk_allocate_qty;
         elsif wk_demand_date < wk_week_date(5) then
            wk_req_qty(4) := wk_req_qty(4) + wk_allocate_qty;
         elsif wk_demand_date < wk_week_date(6) then
            wk_req_qty(5) := wk_req_qty(5) + wk_allocate_qty;
         elsif wk_demand_date < wk_week_date(7) then
            wk_req_qty(6) := wk_req_qty(6) + wk_allocate_qty;
         elsif wk_demand_date < wk_week_date(8) then
            wk_req_qty(7) := wk_req_qty(7) + wk_allocate_qty;
         elsif wk_demand_date < wk_week_date(9) then
            wk_req_qty(8) := wk_req_qty(8) + wk_allocate_qty;
         end if;
      end if;
--????????
      if wk_supply_type = 'R' then
         if wk_supply_date < wk_week_date(1) then
            wk_behind     := wk_behind + wk_allocate_qty;
         elsif wk_week_date(1) <= wk_supply_date and
            wk_supply_date  < wk_week_date(2) then
            wk_pur_qty(1) := wk_pur_qty(1) + wk_allocate_qty;
         elsif wk_supply_date < wk_week_date(3) then
            wk_pur_qty(2) := wk_pur_qty(2) + wk_allocate_qty;
         elsif wk_supply_date < wk_week_date(4) then
            wk_pur_qty(3) := wk_pur_qty(3) + wk_allocate_qty;
         elsif wk_supply_date < wk_week_date(5) then
            wk_pur_qty(4) := wk_pur_qty(4) + wk_allocate_qty;
         elsif wk_supply_date < wk_week_date(6) then
            wk_pur_qty(5) := wk_pur_qty(5) + wk_allocate_qty;
         elsif wk_supply_date < wk_week_date(7) then
            wk_pur_qty(6) := wk_pur_qty(6) + wk_allocate_qty;
         elsif wk_supply_date < wk_week_date(8) then
            wk_pur_qty(7) := wk_pur_qty(7) + wk_allocate_qty;
         elsif wk_demand_date < wk_week_date(9) then
            wk_pur_qty(8) := wk_pur_qty(8) + wk_allocate_qty;
         end if;
      end if;
    end loop;
    close C1;
--??????
    if wk_cntinp > 0 then
       head_rtn;
--?????
       detail_rtn;
    end if;
--
    delete from teiji
    where nvl(substr(station_code,1,1),'0') >= 'A' and
          nvl(substr(station_code,1,1),'0') <= 'Z';
    delete from teiji_d
     where nvl(substr(station_code,1,1),'0') >= 'A' and
           nvl(substr(station_code,1,1),'0') <= 'Z';
--
    commit;
    DBMS_OUTPUT.PUT_LINE('end time = ' ||
                          to_char(sysdate,'yyyy/mm/dd hh24:mi:ss'));
   end;
end t_teiji;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."T_TEIJI2" 
as
begin
   declare
  cursor C0
   is
    select b.section_code, b.item_no,
           b.demand_number, b.supply_number,
           b.allocate_status, b.allocate_qty, b.allocate_st,
           b.demand_type, b.demand_priority, b.demand_date,
           b.demand_sub_date, b.supply_type, b.supply_priority,
           b.supply_date, b.supply_sub_date
      from balance b, item i
     where b.demand_type is not null and
           b.supply_type is null and
           b.item_no = i.item_no and
           i.stock_subject_code < '5';
--
  wk_section_code_b		balance.section_code%type;
  wk_item_no_b			balance.item_no%type;
  wk_demand_number_b	balance.demand_number%type;
  wk_supply_number_b	balance.supply_number%type;
  wk_allocate_status_b	balance.allocate_status%type;
  wk_allocate_qty_b		balance.allocate_qty%type;
  wk_allocate_st_b		balance.allocate_st%type;
  wk_demand_type_b		balance.demand_type%type;
  wk_demand_priority_b	balance.demand_priority%type;
  wk_demand_date_b		balance.demand_date%type;
  wk_demand_sub_date_b	balance.demand_sub_date%type;
  wk_supply_type_b		balance.supply_type%type;
  wk_supply_priority_b	balance.supply_priority%type;
  wk_supply_date_b		balance.supply_date%type;
  wk_supply_sub_date_b	balance.supply_sub_date%type;

 cursor C1
   is
    select b.section_code, b.item_no, allocate_qty,
           demand_type, to_char(demand_date,'yyyy/mm/dd'), supply_type,
           to_char(supply_date,'yyyy/mm/dd'), substr(allocate_st,1,1),
           station_code, station
      from teiji_wk2 b
     order by b.item_no, station_code;
--
  wk_section_code		balance.section_code%type;
  wk_item_no			balance.item_no%type;
  wk_allocate_qty		balance.allocate_qty%type;
  wk_demand_type		balance.demand_type%type;
  wk_demand_date		varchar2(10);
  wk_supply_type		balance.supply_type%type;
  wk_supply_date		varchar2(10);
  wk_allocate_st		varchar2(1);
--
  cursor C2 (para in number)
   is
    select  unit_stock, supplier_code, item, description, catalog_no
    from item
     where item_no = para;
--
  wk_unit_stock			item.unit_stock%type;
  wk_supplier_code		item.supplier_code%type;
  wk_item				item.item%type;
  wk_description		item.description%type;
  wk_catalog_no			item.catalog_no%type;
--
  cursor C3 (para in number)
   is
    select i.supplier_code, c.company
    from itemmaker i, company c
     where i.item_no = para and
           i.supplier_code = c.company_code
    order by i.alter_procedure;
--
  wk_station_code		itemmaker.supplier_code%type;
  wk_station			company.company%type;
--
--
  cursor C4 (para in number)
   is
    select title
    from teiji_title2
     where sort = para;
--
  wk_title		teiji_title2.title%type;
--
--??????????
  type month_date_tab is table of varchar2(10)
     index by binary_integer;
  wk_month_date month_date_tab;
--???????
  type req_qty_tab is table of number(14,4)
     index by binary_integer;
  wk_req_qty req_qty_tab;
--??????
  type pur_qty_tab is table of number(14,4)
     index by binary_integer;
  wk_pur_qty pur_qty_tab;
--
  i							number(2);
  wk_cntinp					number(5);
  wk_item_no2				balance.item_no%type;
  wk_section_code2			balance.section_code%type;
  wk_allocate_st2			varchar2(10);
  wk_station_code2			itemmaker.supplier_code%type;
  wk_station2				company.company%type;
  wk_this_inventory			number(15,6);
  wk_remainder_qty			number(15,6);
  wk_delivery_date			date;
  wk_behind	 				number(14,4);
  wk_today7					varchar2(10);
  wk_titledate				varchar2(10);
--
--??????????????
   procedure head_rtn is
   begin
--
      open C2(wk_item_no2);
         fetch C2 into   wk_unit_stock,  wk_supplier_code, wk_item, wk_description, wk_catalog_no;
      close C2;

      insert into teiji2
         (operation_date, section_code, item_no,
          item, description, catalog_no,
          unit_stock, station_code, station,
          supplier_code
          )
      values
         (sysdate, wk_section_code2, wk_item_no2,
          wk_item, wk_description, wk_catalog_no,
          wk_unit_stock, wk_station_code2, wk_station2,
          wk_supplier_code
          );
   end head_rtn;
--
--?????
   procedure detail_rtn is
   begin
--???(????
      i := 0;
      <<rup>>
      loop
         if i > 2 then
            exit rup;
         end if;
         i := i + 1;
         wk_req_qty(i) := trunc(wk_req_qty(i));
         wk_pur_qty(i) := trunc(wk_pur_qty(i));
      end loop rup;
--?????
       open C4(10);
          fetch C4 into wk_title;
          if C4%notfound or C4%notfound is null then
             wk_title := null;
          end if;
       close C4;
--
       insert into teiji_d2
          (operation_date, section_code, item_no,
           station_code, sort, title,
           behind, this_month, month2,
           month3)
       values
          (sysdate, wk_section_code2, wk_item_no2,
           wk_station_code2, 10, wk_title,
           wk_behind, wk_pur_qty(1), wk_pur_qty(2),
           wk_pur_qty(3));
--
--??????
       open C4(20);
          fetch C4 into wk_title;
          if C4%notfound or C4%notfound is null then
             wk_title := null;
          end if;
       close C4;
      insert into teiji_d2
         (operation_date, section_code, item_no,
           station_code, sort, title, this_month, month2,
           month3)
      values
         (sysdate, wk_section_code2, wk_item_no2,
          wk_station_code2, 20, wk_title, wk_req_qty(1), wk_req_qty(2),
          wk_req_qty(3));
--
   end detail_rtn;
--
--
   begin
    delete from teiji2;
    delete from teiji_d2;
    delete from teiji_date2;
    delete from teiji_wk2;
    insert into teiji_wk2
    select b.operation_date, b.section_code, b.item_no,
-- 2006/04/07          lpad(to_char(o.supplier_code),6,'0'), c.company, b.demand_number,
           to_char(o.supplier_code), c.company, b.demand_number,
           b.supply_number,
           b.allocate_status, b.allocate_qty, b.allocate_st,
           b.demand_type, b.demand_priority, b.demand_date,
           b.demand_sub_date, b.supply_type, b.supply_priority,
           b.supply_date, b.supply_sub_date
      from balance b, po_header o, company c
     where b.supply_type = 'R' and
           rtrim(b.supply_number) = rtrim(o.po_no) and
-- 2006/04/07          lpad(to_char(o.supplier_code),6,'0') = c.company_code;
           to_char(o.supplier_code) = c.company_code;
--
   <<demandset>>
    open C0;
    loop
      fetch C0 into
	wk_section_code_b, wk_item_no_b, wk_demand_number_b,
	wk_supply_number_b, wk_allocate_status_b, wk_allocate_qty_b,
	wk_allocate_st_b, wk_demand_type_b, wk_demand_priority_b,
	wk_demand_date_b, wk_demand_sub_date_b, wk_supply_type_b,
	wk_supply_priority_b, wk_supply_date_b, wk_supply_sub_date_b;
      exit when C0%notfound or C0%notfound is null;
      open C3(wk_item_no_b);
         fetch C3 into
             wk_station_code, wk_station;
         if C3%notfound or C3%notfound is null then
            wk_station_code := null;
            wk_station := null;
         end if;
      close C3;
      insert into teiji_wk2
          (operation_date, section_code, item_no,
           station_code, station, demand_number, supply_number,
           allocate_status, allocate_qty, allocate_st,
           demand_type, demand_priority, demand_date,
           demand_sub_date, supply_type, supply_priority,
           supply_date, supply_sub_date)
       values
          (sysdate, wk_section_code_b, wk_item_no_b,
           wk_station_code, wk_station, wk_demand_number_b, wk_supply_number_b,
           wk_allocate_status_b, wk_allocate_qty_b, wk_allocate_st_b,
           wk_demand_type_b, wk_demand_priority_b, wk_demand_date_b,
           wk_demand_sub_date_b, wk_supply_type_b, wk_supply_priority_b,
           wk_supply_date_b, wk_supply_sub_date_b);
   end loop demandset;
--
--??????
    i := 1;
    wk_month_date(i) := to_char(trunc(sysdate,'mm'), 'yyyy/mm/dd');
   <<monthset>>
    loop
      if i > 3 then
         exit monthset;
      end if;
      i := i + 1;
      wk_month_date(i) := to_char(add_months(to_date(wk_month_date(i-1)),1),'yyyy/mm/dd');
    end loop monthset;
    insert into teiji_date2
       (operation_date, this_month, month2,
        month3)
    values
       (sysdate, wk_month_date(1), wk_month_date(2),
        wk_month_date(3));
--
    wk_cntinp := 0;
    wk_item_no2 := 0;
    open C1;
    loop
      fetch C1 into
	 wk_section_code, wk_item_no, wk_allocate_qty,
	 wk_demand_type, wk_demand_date, wk_supply_type,
         wk_supply_date, wk_allocate_st,
         wk_station_code, wk_station;
      exit when C1%notfound or C1%notfound is null;
--
      wk_cntinp := wk_cntinp + 1;
      if wk_cntinp = 1 or
         wk_item_no <> wk_item_no2 or
         wk_station_code <> wk_station_code2 then
         if wk_cntinp > 1 then
--??????
            head_rtn;
--?????
            detail_rtn;
         end if;
         wk_item_no2      := wk_item_no;
         wk_station_code2 := wk_station_code;
         wk_section_code2 := wk_section_code;
         wk_allocate_st2  := wk_allocate_st;
         wk_station2      := wk_station;
         wk_behind        := 0;
         i := 0;
         <<wkclear>>
         loop
            if i > 3 then
               exit wkclear;
            end if;
            i := i + 1;
            wk_req_qty(i) := 0;
            wk_pur_qty(i) := 0;
         end loop wkclear;
      end if;
--????????????
      if wk_supply_type is null then
         if wk_demand_date < wk_month_date(2) then
            wk_req_qty(1) := wk_req_qty(1) + wk_allocate_qty;
         elsif wk_demand_date < wk_month_date(3) then
            wk_req_qty(2) := wk_req_qty(2) + wk_allocate_qty;
         elsif wk_demand_date < wk_month_date(4) then
            wk_req_qty(3) := wk_req_qty(3) + wk_allocate_qty;
         end if;
      end if;
--????????
      if wk_supply_type = 'R' then
         if wk_supply_date < wk_month_date(1) then
            wk_behind     := wk_behind + wk_allocate_qty;
         elsif wk_month_date(1) <= wk_supply_date and
            wk_supply_date  < wk_month_date(2) then
            wk_pur_qty(1) := wk_pur_qty(1) + wk_allocate_qty;
         elsif wk_supply_date < wk_month_date(3) then
            wk_pur_qty(2) := wk_pur_qty(2) + wk_allocate_qty;
         elsif wk_supply_date < wk_month_date(4) then
            wk_pur_qty(3) := wk_pur_qty(3) + wk_allocate_qty;
         end if;
      end if;
    end loop;
    close C1;
--??????
    if wk_cntinp > 0 then
       head_rtn;
--?????
       detail_rtn;
    end if;
--
    delete from teiji2
    where nvl(substr(station_code,1,1),'0') >= 'A' and
          nvl(substr(station_code,1,1),'0') <= 'Z';
    delete from teiji_d2
     where nvl(substr(station_code,1,1),'0') >= 'A' and
           nvl(substr(station_code,1,1),'0') <= 'Z';
--
   end;
end t_teiji2;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."T_TEIJI3" 
as
begin
   declare
  cursor C0
   is
    select b.section_code, b.item_no,
           b.demand_number, b.supply_number,
           b.allocate_status, b.allocate_qty, b.allocate_st,
           b.demand_type, b.demand_priority, b.demand_date,
           b.demand_sub_date, b.supply_type, b.supply_priority,
           b.supply_date, b.supply_sub_date
      from balance b, item i
     where b.demand_type is not null and
           b.supply_type is null and
           b.item_no = i.item_no and
           i.stock_subject_code < '5';
--
  wk_section_code_b		balance.section_code%type;
  wk_item_no_b			balance.item_no%type;
  wk_demand_number_b	balance.demand_number%type;
  wk_supply_number_b	balance.supply_number%type;
  wk_allocate_status_b	balance.allocate_status%type;
  wk_allocate_qty_b		balance.allocate_qty%type;
  wk_allocate_st_b		balance.allocate_st%type;
  wk_demand_type_b		balance.demand_type%type;
  wk_demand_priority_b	balance.demand_priority%type;
  wk_demand_date_b		balance.demand_date%type;
  wk_demand_sub_date_b	balance.demand_sub_date%type;
  wk_supply_type_b		balance.supply_type%type;
  wk_supply_priority_b	balance.supply_priority%type;
  wk_supply_date_b		balance.supply_date%type;
  wk_supply_sub_date_b	balance.supply_sub_date%type;

 cursor C1
   is
    select b.section_code, b.item_no, allocate_qty,
           demand_type, to_char(demand_date,'yyyy/mm/dd'), supply_type,
           to_char(supply_date,'yyyy/mm/dd'), substr(allocate_st,1,1),
           station_code, station
      from teiji_wk3 b
     order by b.item_no, station_code;
--
  wk_section_code		balance.section_code%type;
  wk_item_no			balance.item_no%type;
  wk_allocate_qty		balance.allocate_qty%type;
  wk_demand_type		balance.demand_type%type;
  wk_demand_date		varchar2(10);
  wk_supply_type		balance.supply_type%type;
  wk_supply_date		varchar2(10);
  wk_allocate_st		varchar2(1);
--
  cursor C2 (para in number)
   is
    select  unit_stock, supplier_code, item, description, catalog_no
    from item
     where item_no = para;
--
  wk_unit_stock			item.unit_stock%type;
  wk_supplier_code		item.supplier_code%type;
  wk_item				item.item%type;
  wk_description		item.description%type;
  wk_catalog_no			item.catalog_no%type;
--
  cursor C3 (para in number)
   is
    select i.supplier_code, c.company
    from itemmaker i, company c
     where i.item_no = para and
           i.supplier_code = c.company_code
    order by i.alter_procedure;
--
  wk_station_code		itemmaker.supplier_code%type;
  wk_station			company.company%type;
--
--
  cursor C4 (para in number)
   is
    select title
    from teiji_title3
     where sort = para;
--
  wk_title		teiji_title3.title%type;
--
--??????????
  type month_date_tab is table of varchar2(10)
     index by binary_integer;
  wk_month_date month_date_tab;
--???????
  type req_qty_tab is table of number(14,4)
     index by binary_integer;
  wk_req_qty req_qty_tab;
--??????
  type pur_qty_tab is table of number(14,4)
     index by binary_integer;
  wk_pur_qty pur_qty_tab;
--
  i							number(2);
  wk_cntinp					number(5);
  wk_item_no2				balance.item_no%type;
  wk_section_code2			balance.section_code%type;
  wk_allocate_st2			varchar2(10);
  wk_station_code2			itemmaker.supplier_code%type;
  wk_station2				company.company%type;
  wk_this_inventory			number(15,6);
  wk_remainder_qty			number(15,6);
  wk_delivery_date			date;
  wk_behind	 				number(14,4);
  wk_today7					varchar2(10);
  wk_titledate				varchar2(10);
--
--??????????????
   procedure head_rtn is
   begin
--
      open C2(wk_item_no2);
         fetch C2 into   wk_unit_stock,  wk_supplier_code, wk_item, wk_description, wk_catalog_no;
      close C2;

      insert into teiji3
         (operation_date, section_code, item_no,
          item, description, catalog_no,
          unit_stock, station_code, station,
          supplier_code
          )
      values
         (sysdate, wk_section_code2, wk_item_no2,
          wk_item, wk_description, wk_catalog_no,
          wk_unit_stock, wk_station_code2, wk_station2,
          wk_supplier_code
          );
   end head_rtn;
--
--?????
   procedure detail_rtn is
   begin
--???(????
      i := 0;
      <<rup>>
      loop
         if i > 3 then
            exit rup;
         end if;
         i := i + 1;
         wk_req_qty(i) := trunc(wk_req_qty(i));
         wk_pur_qty(i) := trunc(wk_pur_qty(i));
      end loop rup;
--?????
       open C4(10);
          fetch C4 into wk_title;
          if C4%notfound or C4%notfound is null then
             wk_title := null;
          end if;
       close C4;
--
       insert into teiji_d3
          (operation_date, section_code, item_no,
           station_code, sort, title,
           behind, this_month, month2,
           month3,month4)
       values
          (sysdate, wk_section_code2, wk_item_no2,
           wk_station_code2, 10, wk_title,
           wk_behind, wk_pur_qty(1), wk_pur_qty(2),
           wk_pur_qty(3),wk_pur_qty(4));
--
--??????
       open C4(20);
          fetch C4 into wk_title;
          if C4%notfound or C4%notfound is null then
             wk_title := null;
          end if;
       close C4;
      insert into teiji_d3
         (operation_date, section_code, item_no,
           station_code, sort, title, this_month, month2,
           month3,month4)
      values
         (sysdate, wk_section_code2, wk_item_no2,
          wk_station_code2, 20, wk_title, wk_req_qty(1), wk_req_qty(2),
          wk_req_qty(3),wk_req_qty(4));
--
   end detail_rtn;
--
--
   begin
    delete from teiji3;
    delete from teiji_d3;
    delete from teiji_date3;
    delete from teiji_wk3;
    insert into teiji_wk3
    select b.operation_date, b.section_code, b.item_no,
-- 2006/04/07          lpad(to_char(o.supplier_code),6,'0'), c.company, b.demand_number,
           to_char(o.supplier_code), c.company, b.demand_number,
           b.supply_number,
           b.allocate_status, b.allocate_qty, b.allocate_st,
           b.demand_type, b.demand_priority, b.demand_date,
           b.demand_sub_date, b.supply_type, b.supply_priority,
           b.supply_date, b.supply_sub_date
      from balance b, po_header o, company c
     where b.supply_type = 'R' and
           rtrim(b.supply_number) = rtrim(o.po_no) and
--  2006/04/07         lpad(to_char(o.supplier_code),6,'0') = c.company_code;
           to_char(o.supplier_code) = c.company_code;
--
   <<demandset>>
    open C0;
    loop
      fetch C0 into
	wk_section_code_b, wk_item_no_b, wk_demand_number_b,
	wk_supply_number_b, wk_allocate_status_b, wk_allocate_qty_b,
	wk_allocate_st_b, wk_demand_type_b, wk_demand_priority_b,
	wk_demand_date_b, wk_demand_sub_date_b, wk_supply_type_b,
	wk_supply_priority_b, wk_supply_date_b, wk_supply_sub_date_b;
      exit when C0%notfound or C0%notfound is null;
      open C3(wk_item_no_b);
         fetch C3 into
             wk_station_code, wk_station;
         if C3%notfound or C3%notfound is null then
            wk_station_code := null;
            wk_station := null;
         end if;
      close C3;
      insert into teiji_wk3
          (operation_date, section_code, item_no,
           station_code, station, demand_number, supply_number,
           allocate_status, allocate_qty, allocate_st,
           demand_type, demand_priority, demand_date,
           demand_sub_date, supply_type, supply_priority,
           supply_date, supply_sub_date)
       values
          (sysdate, wk_section_code_b, wk_item_no_b,
           wk_station_code, wk_station, wk_demand_number_b, wk_supply_number_b,
           wk_allocate_status_b, wk_allocate_qty_b, wk_allocate_st_b,
           wk_demand_type_b, wk_demand_priority_b, wk_demand_date_b,
           wk_demand_sub_date_b, wk_supply_type_b, wk_supply_priority_b,
           wk_supply_date_b, wk_supply_sub_date_b);
   end loop demandset;
--
--??????
    i := 1;
    wk_month_date(i) := to_char(trunc(sysdate,'mm'), 'yyyy/mm/dd');
   <<monthset>>
    loop
      if i > 4 then
         exit monthset;
      end if;
      i := i + 1;
      wk_month_date(i) := to_char(add_months(to_date(wk_month_date(i-1)),1),'yyyy/mm/dd');
    end loop monthset;
    insert into teiji_date3
       (operation_date, this_month, month2,
        month3,month4)
    values
       (sysdate, wk_month_date(1), wk_month_date(2),
        wk_month_date(3),wk_month_date(4));
--
    wk_cntinp := 0;
    wk_item_no2 := 0;
    open C1;
    loop
      fetch C1 into
	 wk_section_code, wk_item_no, wk_allocate_qty,
	 wk_demand_type, wk_demand_date, wk_supply_type,
         wk_supply_date, wk_allocate_st,
         wk_station_code, wk_station;
      exit when C1%notfound or C1%notfound is null;
--
      wk_cntinp := wk_cntinp + 1;
      if wk_cntinp = 1 or
         wk_item_no <> wk_item_no2 or
         wk_station_code <> wk_station_code2 then
         if wk_cntinp > 1 then
--??????
            head_rtn;
--?????
            detail_rtn;
         end if;
         wk_item_no2      := wk_item_no;
         wk_station_code2 := wk_station_code;
         wk_section_code2 := wk_section_code;
         wk_allocate_st2  := wk_allocate_st;
         wk_station2      := wk_station;
         wk_behind        := 0;
         i := 0;
         <<wkclear>>
         loop
            if i > 4 then
               exit wkclear;
            end if;
            i := i + 1;
            wk_req_qty(i) := 0;
            wk_pur_qty(i) := 0;
         end loop wkclear;
      end if;
--????????????
      if wk_supply_type is null then
         if wk_demand_date < wk_month_date(2) then
            wk_req_qty(1) := wk_req_qty(1) + wk_allocate_qty;
         elsif wk_demand_date < wk_month_date(3) then
            wk_req_qty(2) := wk_req_qty(2) + wk_allocate_qty;
         elsif wk_demand_date < wk_month_date(4) then
            wk_req_qty(3) := wk_req_qty(3) + wk_allocate_qty;
         elsif wk_demand_date < wk_month_date(5) then
            wk_req_qty(4) := wk_req_qty(4) + wk_allocate_qty;
         end if;
      end if;
--????????
      if wk_supply_type = 'R' then
         if wk_supply_date < wk_month_date(1) then
            wk_behind     := wk_behind + wk_allocate_qty;
         elsif wk_month_date(1) <= wk_supply_date and
            wk_supply_date  < wk_month_date(2) then
            wk_pur_qty(1) := wk_pur_qty(1) + wk_allocate_qty;
         elsif wk_supply_date < wk_month_date(3) then
            wk_pur_qty(2) := wk_pur_qty(2) + wk_allocate_qty;
         elsif wk_supply_date < wk_month_date(4) then
            wk_pur_qty(3) := wk_pur_qty(3) + wk_allocate_qty;
         elsif wk_supply_date < wk_month_date(5) then
            wk_pur_qty(4) := wk_pur_qty(4) + wk_allocate_qty;
         end if;
      end if;
    end loop;
    close C1;
--??????
    if wk_cntinp > 0 then
       head_rtn;
--?????
       detail_rtn;
    end if;
--
    delete from teiji3
    where nvl(substr(station_code,1,1),'0') >= 'A' and
          nvl(substr(station_code,1,1),'0') <= 'Z';
    delete from teiji_d3
     where nvl(substr(station_code,1,1),'0') >= 'A' and
           nvl(substr(station_code,1,1),'0') <= 'Z';
--
   end;
end t_teiji3;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."TEST_UP3" 
is
begin
  declare
  TRN_REC transaction%rowtype ;
  ITM_REC item%rowtype ;
  STR_REC structure%rowtype ;
  SLP_REC sliptype%rowtype ;
  P_RET_NO number(3) ;
  V_TABLE_POSITION number(8) ;
   cursor C1
   is
   select t.* from transaction t,sliptype s where to_char(t.slip_date,'yyyymm')='200204'
   and  t.slip_type = s.slip_type
   and  s.table_position in (3,4) and  s.stock_type = 'M'
 ;

   cursor C2
   is
   select t.* from transaction t,sliptype s where to_char(t.slip_date,'yyyymm')='200204'
   and  t.slip_type = s.slip_type
   and  s.table_position in (1,2) and  s.stock_type = 'G'
 ;

   cursor C3(PARAM1 in  number)
   is
   select * from item  where item_no = PARAM1
 ;

   cursor C4(PARAM1 in  number)
   is
   select * from structure  where upper_item_no = PARAM1
   ;

   cursor C5(PARAM1 in  number)
   is
   select * from sliptype  where slip_type = PARAM1
   ;

  begin
     open C1  ;
       loop
          fetch C1 into TRN_REC ;
          exit when C1%notfound or C1%notfound is null;

          open C3(TRN_REC.item_no) ;
             fetch C3 into ITM_REC ;
          close C3 ;
          open C5(TRN_REC.slip_type) ;
             fetch C5 into SLP_REC ;
          close C5 ;

          if SLP_REC.TABLE_POSITION = 3 then
              v_table_position := 1 ;
          else
              v_table_position := 2 ;
          end if ;

          if ITM_REC.ISSUE_POLICY = 'D' Then
              pcinventory_set(
                   TRN_REC.item_no,
                   TRN_REC.SLIP_DATE    ,
                   TRN_REC.SLIP_QUANTITY    ,
                   V_TABLE_POSITION   ,
                   P_RET_NO,
                   TRN_REC.SECTION_CODE,
                   TRN_REC.COMPANY_CODE
             ) ;
          end if ;
       end loop ;
     close C1;
     open C2  ;
       loop
          fetch C2 into TRN_REC ;
          exit when C2%notfound or C2%notfound is null;

            open C5(TRN_REC.slip_type) ;
              fetch C5 into SLP_REC ;
            close C5 ;

            if SLP_REC.TABLE_POSITION =1 then
                v_table_position := 3 ;
            else
                v_table_position := 4 ;
            end if ;

             open C4(TRN_REC.ITEM_NO) ;
               loop
               fetch C4 into STR_REC ;
                exit when C4%notfound or C4%notfound is null;
                   open C3(STR_REC.lower_item_no) ;
                     fetch C3 into ITM_REC ;
                   close C3 ;
                 if ITM_REC.ISSUE_POLICY = 'D' Then
                    pcinventory_set(
                      STR_REC.lower_item_no,
                      TRN_REC.SLIP_DATE    ,
                      TRN_REC.SLIP_QUANTITY  *  STR_REC.QUANTITY / nvl(STR_REC.quantity_base,1) * ITM_REC.UNIT_STOCK_RATE / ITM_REC.UNIT_ENGINEER_RATE,
                      V_TABLE_POSITION   ,
                      P_RET_NO,
                      TRN_REC.SECTION_CODE,
                      TRN_REC.COMPANY_CODE
                    ) ;
                end if ;
                null ;
                end loop ;
            close C4;
               null ;
        end loop ;
      close C2;
  end ;
end test_up3 ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."UPDATE_CASEMARK_FROM_DENCHI" 
/****************************************************************
  ???          ?2015/05/20
  ???          ?Y.Hagai
*****************************************************************/
as
begin
  declare
     cursor C1 is 
       select CUSTOMER_PO_NO,CUSTOMER_LINE_NO 
         from GRPODR_IN 
      order by CUSTOMER_PO_NO, CUSTOMER_LINE_NO
       for update;


     C1_REC			C1%ROWTYPE := null;

     cursor C2(PARA1 in varchar2,PARA2 in varchar2) is
      select    a.CUSTOMER_PO_no	CUSTOMER_PO_no,
                a.CONTRACT_NO		CONTRACT_NO,
                a.CONTRACT_LINE_NO	CONTRACT_LINE_NO,
                c.CASE_MARK_NO		CASE_MARK_NO,
                c.CASE_MARK		CASE_MARK
        from dorder@MARUKI_DENCHI.WORLD a,
             contract_c@MARUKI_DENCHI.WORLD c
       WHERE a.CONTRACT_NO = c.CONTRACT_NO (+)
         and a.CONTRACT_LINE_NO = c.CASE_MARK_NO (+) 
         and a.CUSTOMER_PO_NO= PARA1
         and a.CUSTOMER_LINE_NO = PARA2;

     C2_REC			C2%ROWTYPE := null;

  begin


     open C1 ;
        loop
        fetch C1 into C1_REC ;
        exit when C1%notfound or C1%notfound is null;
           open C2(C1_REC.CUSTOMER_PO_NO,C1_REC.CUSTOMER_LINE_NO) ;
             fetch C2 into C2_REC ;
             if C2%notfound or C2%notfound is null then
               null;
              else
              update GRPODR_IN
                 set CASE_MARK = C2_REC.CASE_MARK
                 WHERE current of c1;
              end if;
          close C2;

       <<LOOPEND>>
           null ;
        end loop ;
      close C1 ;
 
  end ;


end UPDATE_CASEMARK_FROM_DENCHI ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."UPDATE_ITEM_FROM_BS" 
/****************************************************************
  ITEM????GRADE_CODE,CUSTOMER_TYPE,PACKAGE_TYPE?????
  ???          ?2014/11/01
  ???          ?Y.Hagai
*****************************************************************/
as
begin
  declare
     cursor C1 is 
       select ITEM_NO 
         from ITEM 
        where stock_subject_code in (4,5)
          and item_no >= 10000
          and item_no <= 99999
          and delete_type is null
       order by ITEM_NO
       for update;


     C1_REC			C1%ROWTYPE := null;

     cursor C2(PARA in number) is
       SELECT GRADE_CODE, ??????, ??????,??
        FROM s00bhshv_tbl
       WHERE ?C = PARA
         and ???? is null
         and ?C < 111600;

     C2_REC			C2%ROWTYPE := null;

  begin

  delete from s00bhshv_tbl;
  insert into s00bhshv_tbl (????, ?????, ??, ?C, ????C, ??, ????, ?????????, ??????, ?C, 
	???C, ??C??, ????, POSC, ??????, ????C, TOV??, TOV??, TOV??, ??????, 
	??C??, ??????, ????, ????NO, ??1, ??????, ??????, ??1, ??2, ??3, ????, 
	???, ????, ?????, ????, ??????, ??, ?????, ????, ?????, ?????, ?????, 
	????, ?????, ?????, ???????, ??????, ???????, ???????, ?????, ??????, 
	??, ????????, ??????NO, ?????, ???NO, ????C, ??, ?????, ?????, 
	??NO????, ??????, ??????, ?????, ???, ?????????, ??????1, ??????2, 
	??????3, ??????4, ??????5, ???????, ITFC, ?????, ????, ?????, ?????, 
	??2, NET??, GROSS??, ??, ???????1, ???????2, ?GC1, ?GC2, ????1, ????2, 
	????????1, ????????2, TOV??, TOV??, ????1, ????2, ????3, ?????, ??????, 
	??????, ??JAN??, PB??, ITFC1, ITFC2, ITFC3, ??3, ???C, ?????, ????, 
	????, ????, E_????, E_TOV??, E_TOV??, E_TOV??, E_??????, E_????, 
	E_????C, E_??C??, E_TOV??, E_TOV??, IP_ADDRESS, EMPLOYEE_CODE, 
	GRADE_CODE, GTIN1, GTIN2, GTIN3, ????????, ????????, ??????, ??????, 
	E_????????, E_????????, E_??????, E_??????, ??????, ??????, ??C????, 
	??C????, E_??C????, E_??C????)
  select ????, ?????, ??, ?C, ????C, ??, ????, ?????????, ??????, ?C, 
	???C, ??C??, ????, POSC, ??????, ????C, TOV??, TOV??, TOV??, ??????, 
	??C??, ??????, ????, ????NO, ??1, ??????, ??????, ??1, ??2, ??3, ????, 
	???, ????, ?????, ????, ??????, ??, ?????, ????, ?????, ?????, ?????, 
	????, ?????, ?????, ???????, ??????, ???????, ???????, ?????, ??????, 
	??, ????????, ??????NO, ?????, ???NO, ????C, ??, ?????, ?????, 
	??NO????, ??????, ??????, ?????, ???, ?????????, ??????1, ??????2, 
	??????3, ??????4, ??????5, ???????, ITFC, ?????, ????, ?????, ?????, 
	??2, NET??, GROSS??, ??, ???????1, ???????2, ?GC1, ?GC2, ????1, ????2, 
	????????1, ????????2, TOV??, TOV??, ????1, ????2, ????3, ?????, ??????, 
	??????, ??JAN??, PB??, ITFC1, ITFC2, ITFC3, ??3, ???C, ?????, ????, 
	????, ????, E_????, E_TOV??, E_TOV??, E_TOV??, E_??????, E_????, 
	E_????C, E_??C??, E_TOV??, E_TOV??, IP_ADDRESS, EMPLOYEE_CODE, 
	GRADE_CODE, GTIN1, GTIN2, GTIN3, ????????, ????????, ??????, ??????, 
	E_????????, E_????????, E_??????, E_??????, ??????, ??????, ??C????, 
	??C????, E_??C????, E_??C????
  from S00BHSHV_TBL@MARUKI_BS.WORLD
  WHERE ???? IS NULL;

     open C1 ;
        loop
        fetch C1 into C1_REC ;
        exit when C1%notfound or C1%notfound is null;
           open C2(C1_REC.ITEM_NO) ;
             fetch C2 into C2_REC ;
             if C2%notfound or C2%notfound is null then
               null;
              else
                  update item
                   set ITEM = C2_REC.??
                   WHERE current of c1;

               if C2_REC.GRADE_CODE is not NULL then  
                  update item
                   set GRADE_CODE = C2_REC.GRADE_CODE
                   WHERE current of c1;
               end if;
               if C2_REC.?????? is not NULL then  
                  update item
                   set CUSTOMER_TYPE = C2_REC.??????
                   WHERE current of c1;
               end if;
               if C2_REC.?????? is not NULL then  
                  update item
                   set  PACKAGE_TYPE = C2_REC.??????
                   WHERE current of c1;
               end if;

              end if;
          close C2;

       <<LOOPEND>>
           null ;
        end loop ;
      close C1 ;
 

  delete from SALES_CHANNELS_CLASS;
  insert into SALES_CHANNELS_CLASS (DELETE_TYPE, CLASS_CODE, CLASS_1, CLASS_2, CLASS_3, CLASS_4, 
	CLASS_5, UNIT_MEASURE, DAYS_TYPE, UPTO_DATE, REG_DATE)
  select DELETE_TYPE, CLASS_CODE, CLASS_1, CLASS_2, CLASS_3, CLASS_4, 
	CLASS_5, UNIT_MEASURE, DAYS_TYPE, UPTO_DATE, REG_DATE
  from class@MARUKI_BS.WORLD;

  delete from GORDER_CURRENCY_RATE;
  insert into GORDER_CURRENCY_RATE (COMPANY_CODE, EX_DATE, CURR_CODE, YEN_RATE, UPTO_DATE, REG_DATE, 
	US_RATE)
  select COMPANY_CODE, EX_DATE, CURR_CODE, YEN_RATE, UPTO_DATE, REG_DATE, 
	US_RATE
   from GORDER_CURRENCY_RATE@MARUKI_BS.WORLD;


  end ;


end UPDATE_ITEM_FROM_BS ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."UPLOAD_MT_ONETIME" ( out_result out number,  out_err_point out varchar2 )
IS
/*
======================================================================

?????  ?FI) PGLOSAS
?      ?  ??????(MT_ONETIME_WK)?????TRANSACTION?WHINVENTORY?????
?      ?  ???
?  ?  ?  ?out_result ???? (0:???9:????out_err_point ???????


????
----------------------------------------------------------------------
  Ver    Date        Author          Memo
----------------------------------------------------------------------
  1.0    2016/01/05  NTTk)Hino       ????
======================================================================
*/
	
BEGIN
    declare

		-- ??????
		wk_sysdate_d  date := sysdate;
		
		
	begin
		-- ???
		out_result    := 9;   -- ???
		out_err_point := '';  -- ???
		
		
		out_err_point := 'insert ITEM';
		-- ------------------------------------------------
		-- TRANSACTION <Insert>
		-- ------------------------------------------------
		insert into TRANSACTION
		     (
		      OPERATION_DATE,
		      SECTION_CODE,
		      ITEM_NO,
		      ITEM_CODE,
		      ITEM_NAME,
		      ITEM_DESCRIPTION,
		      STOCK_SUBJECT_CODE,
		      ACCOUNTING_MONTH,
		      SLIP_DATE,
		      SLIP_TYPE,
		      SLIP_NO,
		      SLIP_QUANTITY,
		      SLIP_PRICE,
		      SLIP_AMOUNT,
		      CURR_CODE,
		      STANDARD_PRICE,
		      STANDARD_AMOUNT,
		      COMPANY_CODE,
		      COST_PROCESS_CODE,
		      COST_SUBJECT_CODE,
		      UNIT_STOCK
		     )
		select
		      wk_sysdate_d,            -- OPERATION_DATE
		      100,                     -- SECTION_CODE
		      m.ITEM_NO,               -- ITEM_NO
		      null,                    -- ITEM_CODE
		      i.ITEM,                  -- ITEM_NAME
		      i.DESCRIPTION,           -- ITEM_DESCRIPTION
		      i.STOCK_SUBJECT_CODE,             -- STOCK_SUBJECT_CODE
		      substr(m.SLIP_DATE, 1, 6),        -- ACCOUNTING_MONTH
		      to_date(m.SLIP_DATE, 'yyyymmdd'), -- SLIP_DATE
		      m.SLIP_TYPE,             -- SLIP_TYPE
		      m.SLIP_NO,               -- SLIP_NO
		      m.SLIP_QUANTITY,         -- SLIP_QUANTITY
		      i.STANDARD_PRICE,        -- SLIP_PRICE
		      m.SLIP_QUANTITY * nvl(i.STANDARD_PRICE, 0), -- SLIP_AMOUNT
		      1,                       -- CURR_CODE
		      i.STANDARD_PRICE,        -- STANDARD_PRICE
		      m.SLIP_QUANTITY * nvl(i.STANDARD_PRICE, 0), -- STANDARD_AMOUNT
		      100001,                  -- COMPANY_CODE
		      m.COST_PROCESS_CODE,     -- COST_PROCESS_CODE
		      i.COST_SUBJECT_CODE,     -- COST_SUBJECT_CODE
		      i.UNIT_STOCK             -- UNIT_STOCK
		from  MT_ONETIME_WK m,
		      ITEM i
		where m.ITEM_NO   = i.ITEM_NO (+)
		;
		
		
		out_err_point := 'Update WHINVENTORY (TABLE_POSITION=2)';
		-- ------------------------------------------------
		-- WHINVENTORY (TABLE_POSITION=2) <Update>
		-- ------------------------------------------------
		update WHINVENTORY u
		set    ( u.OTHER_RECEIVE2,
		         u.LAST_INVENTORY,
		         u.THIS_INVENTORY,
		         u.OPERATION_DATE )
		         = ( 
		            select  (w.OTHER_RECEIVE2 + m.SLIP_QUANTITY) as OTHER_RECEIVE2,
		                    (w.LAST_INVENTORY + m.SLIP_QUANTITY) as LAST_INVENTORY,
		                    (w.THIS_INVENTORY + m.SLIP_QUANTITY) as THIS_INVENTORY,
		                    wk_sysdate_d as OPERATION_DATE
		            from    MT_ONETIME_WK m,
		                    SLIPTYPE s,
		                    WHINVENTORY w
		            where   m.SLIP_TYPE = s.SLIP_TYPE
		              and   s.TABLE_POSITION = 2 
		              and   m.ITEM_NO   = w.ITEM_NO
		              and   w.ITEM_NO   = u.ITEM_NO
		           )
		where exists (
		            select  1
		            from    MT_ONETIME_WK m,
		                    SLIPTYPE s
		            where   m.SLIP_TYPE = s.SLIP_TYPE
		              and   s.TABLE_POSITION = 2 
		              and   m.ITEM_NO   = u.ITEM_NO
		)
		;
		
		
		out_err_point := 'Update WHINVENTORY (TABLE_POSITION=3)';
		-- ------------------------------------------------
		-- WHINVENTORY (TABLE_POSITION=3) <Update>
		-- ------------------------------------------------
		update WHINVENTORY u
		set    ( u.ISSUE2,
		         u.LAST_INVENTORY,
		         u.THIS_INVENTORY,
		         u.OPERATION_DATE )
		         = ( 
		            select  (w.ISSUE2 + m.SLIP_QUANTITY) as ISSUE2,
		                    (w.LAST_INVENTORY - m.SLIP_QUANTITY) as LAST_INVENTORY,
		                    (w.THIS_INVENTORY - m.SLIP_QUANTITY) as THIS_INVENTORY,
		                    wk_sysdate_d as OPERATION_DATE
		            from    MT_ONETIME_WK m,
		                    SLIPTYPE s,
		                    WHINVENTORY w
		            where   m.SLIP_TYPE = s.SLIP_TYPE
		              and   s.TABLE_POSITION = 3 
		              and   m.ITEM_NO   = w.ITEM_NO
		              and   w.ITEM_NO   = u.ITEM_NO
		           )
		where exists (
		            select  1
		            from    MT_ONETIME_WK m,
		                    SLIPTYPE s
		            where   m.SLIP_TYPE = s.SLIP_TYPE
		              and   s.TABLE_POSITION = 3 
		              and   m.ITEM_NO   = u.ITEM_NO
		)
		;
		
		
		out_err_point := 'Insert WHINVENTORY (TABLE_POSITION=2)';
		-- ------------------------------------------------
		-- WHINVENTORY (TABLE_POSITION=2) <Insert>
		-- ------------------------------------------------
		insert into WHINVENTORY
		     (
		      OPERATION_DATE,
		      SECTION_CODE,
		      ITEM_NO,
		      THIS_MONTH,
		      RECEIVE1,
		      OTHER_RECEIVE1,
		      ISSUE1,
		      OTHER_ISSUE1,
		      STOCKTAKING_ADJUST1,
		      THIS_INVENTORY,
		      LAST_MONTH,
		      RECEIVE2,
		      OTHER_RECEIVE2,
		      ISSUE2,
		      OTHER_ISSUE2,
		      STOCKTAKING_ADJUST2,
		      LAST_INVENTORY,
		      LAST2_INVENTORY,
		      ITEM_TYPE2
		     )
		select
		      wk_sysdate_d,              -- OPERATION_DATE
		      100,                       -- SECTION_CODE
		      m.ITEM_NO,                 -- ITEM_NO
		      to_char(add_months(to_date(m.SLIP_DATE, 'yyyymmdd'), 1), 'yyyymm'), -- THIS_MONTH
		      0,                         -- RECEIVE1
		      0,                         -- OTHER_RECEIVE1
		      0,                         -- ISSUE1
		      0,                         -- OTHER_ISSUE1
		      0,                         -- STOCKTAKING_ADJUST1
		      m.SLIP_QUANTITY,           -- THIS_INVENTORY
		      substr(m.SLIP_DATE, 1, 6), -- LAST_MONTH
		      0,                         -- RECEIVE2
		      m.SLIP_QUANTITY,           -- OTHER_RECEIVE2
		      0,                         -- ISSUE2,
		      0,                         -- OTHER_ISSUE2,
		      0,                         -- STOCKTAKING_ADJUST2,
		      m.SLIP_QUANTITY,           -- LAST_INVENTORY
		      0,                         -- LAST2_INVENTORY,
		      null                       -- ITEM_TYPE2
		from  MT_ONETIME_WK m,
		      SLIPTYPE s,
		      WHINVENTORY w
		where m.SLIP_TYPE = s.SLIP_TYPE
		  and s.TABLE_POSITION = 2
		  and m.ITEM_NO   = w.ITEM_NO (+)
		  and w.ITEM_NO   is null
		;
		
		
		out_err_point := 'Insert WHINVENTORY (TABLE_POSITION=3)';
		-- ------------------------------------------------
		-- WHINVENTORY (TABLE_POSITION=3) <Insert>
		-- ------------------------------------------------
		insert into WHINVENTORY
		     (
		      OPERATION_DATE,
		      SECTION_CODE,
		      ITEM_NO,
		      THIS_MONTH,
		      RECEIVE1,
		      OTHER_RECEIVE1,
		      ISSUE1,
		      OTHER_ISSUE1,
		      STOCKTAKING_ADJUST1,
		      THIS_INVENTORY,
		      LAST_MONTH,
		      RECEIVE2,
		      OTHER_RECEIVE2,
		      ISSUE2,
		      OTHER_ISSUE2,
		      STOCKTAKING_ADJUST2,
		      LAST_INVENTORY,
		      LAST2_INVENTORY,
		      ITEM_TYPE2
		     )
		select
		      wk_sysdate_d,               -- OPERATION_DATE
		      100,                        -- SECTION_CODE
		      m.ITEM_NO,                  -- ITEM_NO
		      to_char(add_months(to_date(m.SLIP_DATE, 'yyyymmdd'), 1), 'yyyymm'), -- THIS_MONTH
		      0,                          -- RECEIVE1
		      0,                          -- OTHER_RECEIVE1
		      0,                          -- ISSUE1
		      0,                          -- OTHER_ISSUE1
		      0,                          -- STOCKTAKING_ADJUST1
		      m.SLIP_QUANTITY * (-1),     -- THIS_INVENTORY
		      substr(m.SLIP_DATE, 1, 6),  -- LAST_MONTH
		      0,                          -- RECEIVE2
		      0,                          -- OTHER_RECEIVE2
		      m.SLIP_QUANTITY,            -- ISSUE2,
		      0,                          -- OTHER_ISSUE2,
		      0,                          -- STOCKTAKING_ADJUST2,
		      m.SLIP_QUANTITY * (-1),     -- LAST_INVENTORY
		      0,                          -- LAST2_INVENTORY,
		      null                        -- ITEM_TYPE2
		from  MT_ONETIME_WK m,
		      SLIPTYPE s,
		      WHINVENTORY w
		where m.SLIP_TYPE = s.SLIP_TYPE
		  and s.TABLE_POSITION = 3
		  and m.ITEM_NO   = w.ITEM_NO (+)
		  and w.ITEM_NO   is null
		;
		
		
		-- ************************************************************
		--  ??????
		-- ************************************************************
		dbms_output.put_line('RESULT   : SUCCESS');
		out_result := 0; -- ??
		
		--commit;

	exception
		when others then
			-- ************************************************************
			--  ??????
			-- ************************************************************
			dbms_output.put_line('RESULT   : ERROR!');
			dbms_output.put_line('ERR_POINT?' || out_err_point);
			dbms_output.put_line('SQLERRM  ?' || SQLERRM);
			
			rollback;
	end;
	
END UPLOAD_MT_ONETIME;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."WHINVENTORY_ADJUST_SET" (
--    v_slip_date in date,               -- ?? ????????????????? -2?
    v_ret_no    in out number          -- ???????????????
)
/*
2014/09/11 Y.HAGAI 
*/
is
begin
  declare
   WHI_REC whinventory%rowtype ;
   ITM_REC item%rowtype ;

   v_month  date ;

   v_section_code        whinventory.section_code%TYPE          :=0 ;
   v_receive1            whinventory.receive1%TYPE              :=0 ;
   v_other_receive1      whinventory.other_receive1%TYPE        :=0 ;
   v_issue1              whinventory.issue1%TYPE                :=0 ;
   v_other_issue1        whinventory.other_issue1%TYPE          :=0 ;
   v_stocktaking_adjust1 whinventory.stocktaking_adjust1%TYPE   :=0 ;
   v_this_inventory      whinventory.this_inventory%TYPE        :=0 ;
   v_receive2            whinventory.receive2%TYPE              :=0 ;
   v_other_receive2      whinventory.other_receive2%TYPE        :=0 ;
   v_issue2              whinventory.issue2%TYPE                :=0 ;
   v_other_issue2        whinventory.other_issue2%TYPE          :=0 ;
   v_stocktaking_adjust2 whinventory.stocktaking_adjust2%TYPE   :=0 ;
   v_last_inventory      whinventory.last_inventory%TYPE        :=0 ;

    cursor C0 is
     select *
     from whphysical_up_wk;
     C0_REC			C0%ROWTYPE := null;

    cursor C1(PARAM1 in number,PARAM2 in number) is
     select *
     from whinventory
     where item_no = PARAM1
       and section_code = PARAM2
     for update ;

    cursor C2 is
     select nvl(to_date(max(this_month),'yyyymm'),trunc(sysdate))
     from whinventory  ;

    cursor C3(PARAM1 in number) is
     select *
     from item
     where item_no = PARAM1 ;

    cursor C4 is
     select *
     from item
     where item_no = C0_REC.item_no ;

  begin
      v_ret_no := 0 ;

      open C0 ;
         loop
            fetch C0 into C0_REC ;
            exit when C0%notfound or C0%notfound is null;

      /* ??????*/
      open C3(C0_REC.ITEM_NO) ;
         fetch C3 into ITM_REC ;
      close C3 ;

      If ITM_REC.item_no is null Then
          v_ret_no := -1 ;
          goto LAST ;
      End If ;

      /* ?????? */
      If C0_REC.SECTION_CODE is null Then
           v_ret_no := -5 ;
           goto LAST ;
      End If ;


      /* ????????*/
      open C2 ;
         fetch C2 into v_month ;
      close C2 ;

      /* ????????*/
      If  to_date(C0_REC.STOCK_TAKING_MONTH,'yyyymm') != trunc(v_month,'mm') and   to_date(C0_REC.STOCK_TAKING_MONTH,'yyyymm') != trunc(add_months(v_month,-1),'mm') Then
          v_ret_no := -2 ;
          goto LAST ;
      End If ;


      /* ?????? */
      open C1(C0_REC.ITEM_NO,C0_REC.SECTION_CODE) ;
          fetch C1 into WHI_REC;

          If to_char(C0_REC.STOCK_TAKING_MONTH) = to_char(v_month,'yyyymm') Then                    --???
                        v_stocktaking_adjust1 :=  C0_REC.QUANTITY ;

          ElsIf to_char(C0_REC.STOCK_TAKING_MONTH) = to_char(add_months(v_month,-1),'yyyymm') Then  --???
                        v_stocktaking_adjust2 := C0_REC.QUANTITY ;
          Else 
             v_ret_no := -9 ;
          End If ;


          If C1%notfound Then
             -- ?????
           insert into whinventory(
               operation_date,
               section_code,
               item_no,
               location,
               this_month,
               receive1,
               other_receive1,
               issue1,
               other_issue1,
               stocktaking_adjust1,
               this_inventory,
               last_month,
               receive2,
               other_receive2,
               issue2,
               other_issue2,
               stocktaking_adjust2,
               last_inventory,
               last2_inventory
            ) VALUES (
               sysdate,
               C0_REC.section_code,
               C0_REC.item_no,
               null,
               to_char(v_month,'yyyymm'),
               0,
               0,
               0,
               0,
               nvl(v_stocktaking_adjust1,0),
               0,
               to_char(add_months(v_month,-1),'yyyymm'),
               0,
               0,
               0,
               0,
               nvl(v_stocktaking_adjust2,0),
               0,
               0
            ) ;

          Else
             -- ???
            update whinventory set
               operation_date        = sysdate,
               stocktaking_adjust1   = stocktaking_adjust1 + nvl(v_stocktaking_adjust1,0),
               stocktaking_adjust2   = stocktaking_adjust2 + nvl(v_stocktaking_adjust2,0)
            where item_no = C0_REC.item_no
              and section_code = C0_REC.section_code
            ;
          End If ;


      close C1 ;
 <<LAST>>
   null ;

         end loop ;
      close C0 ;
      


 <<LAST2>>
   null ;

  end ;
end WHINVENTORY_ADJUST_SET ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."WHINVENTORY_FI_SET" (
    V_ITEM_NO			in number,						-- ???? (?????????? -1)
    V_SLIP_DATE			in date,						-- ?? ?????????????????? -2?
    V_SLIP_QTY			in number,						-- ??
    V_TABLE_POSITION	in varchar2,					-- 1:??,2:???,3:??,4:???
    V_RET_NO			in out number,					-- ???????????????
    V_SEC_CODE			in number		DEFAULT NULL	-- ?????(????????????????????? null???? -5)
)
is
begin
  declare
   WHI_REC WHINVENTORY_FI%rowtype ;
   ITM_REC item%rowtype ;

   V_DATE					date ;

   V_SECTION_CODE			WHINVENTORY_FI.section_code%TYPE          :=V_SEC_CODE ;
   V_RECEIVE1				WHINVENTORY_FI.receive1%TYPE              :=0 ;
   V_OTHER_RECEIVE1			WHINVENTORY_FI.other_receive1%TYPE        :=0 ;
   V_ISSUE1					WHINVENTORY_FI.issue1%TYPE                :=0 ;
   V_OTHER_ISSUE1			WHINVENTORY_FI.other_issue1%TYPE          :=0 ;
   V_STOCKTAKING_ADJUST1	WHINVENTORY_FI.stocktaking_adjust1%TYPE   :=0 ;
   V_THIS_INVENTORY			WHINVENTORY_FI.this_inventory%TYPE        :=0 ;
   V_RECEIVE2				WHINVENTORY_FI.receive2%TYPE              :=0 ;
   V_OTHER_RECEIVE2			WHINVENTORY_FI.other_receive2%TYPE        :=0 ;
   V_ISSUE2					WHINVENTORY_FI.issue2%TYPE                :=0 ;
   V_OTHER_ISSUE2			WHINVENTORY_FI.other_issue2%TYPE          :=0 ;
   V_STOCKTAKING_ADJUST2	WHINVENTORY_FI.stocktaking_adjust2%TYPE   :=0 ;
   V_LAST_INVENTORY			WHINVENTORY_FI.last_inventory%TYPE        :=0 ;

    cursor C1(PARAM1 in number,PARAM2 in number) is
     SELECT * FROM WHINVENTORY_FI
     where item_no = PARAM1
       and section_code = PARAM2
     for update ;

    cursor C2 is
     SELECT nvl(to_date(max(this_month),'yyyymm'),trunc(sysdate))
     FROM WHINVENTORY_FI  ;

    cursor C3 is
     SELECT *
     FROM item
     where item_no = V_ITEM_NO ;

  begin
      V_RET_NO := 0 ;

      /* ??????*/
      open C3 ;
         fetch C3 into ITM_REC ;
      close C3 ;
      If ITM_REC.item_no is null Then
          V_RET_NO := -1 ;
          goto LAST ;
      End If ;

      /* ?????? */
      If V_SECTION_CODE is null Then
          V_SECTION_CODE := ITM_REC.SECTION_CODE ;
          If V_SECTION_CODE is null Then
               V_RET_NO := -5 ;
               goto LAST ;
          End If ;
      End If ;

      /* ????????*/
      open C2 ;
         fetch C2 into V_DATE ;
      close C2 ;

      /* ????????*/
      If  trunc(V_SLIP_DATE,'mm') != trunc(V_DATE,'mm') and  trunc(V_SLIP_DATE,'mm') != trunc(add_months(V_DATE,-1),'mm') Then
          V_RET_NO := -2 ;
          goto LAST ;
      End If ;


      /* ?????? */
      open C1(V_ITEM_NO,V_SECTION_CODE) ;
          fetch C1 into WHI_REC;
          If to_char(V_SLIP_DATE,'yyyymm') = to_char(V_DATE,'yyyymm') Then                    --???
               If    V_TABLE_POSITION = 1 Then  V_RECEIVE1            := V_SLIP_QTY ; V_THIS_INVENTORY :=  V_SLIP_QTY ;
               ElsIf V_TABLE_POSITION = 2 Then  V_OTHER_RECEIVE1      := V_SLIP_QTY ; V_THIS_INVENTORY :=  V_SLIP_QTY ;
               ElsIf V_TABLE_POSITION = 3 Then  V_ISSUE1              := V_SLIP_QTY ; V_THIS_INVENTORY := -V_SLIP_QTY ;
               ElsIf V_TABLE_POSITION = 4 Then  V_OTHER_ISSUE1        := V_SLIP_QTY ; V_THIS_INVENTORY := -V_SLIP_QTY ;
               End If ;
          ElsIf to_char(V_SLIP_DATE,'yyyymm') = to_char(add_months(V_DATE,-1),'yyyymm') Then  --???
               If    V_TABLE_POSITION = 1 Then  V_RECEIVE2            := V_SLIP_QTY ; V_THIS_INVENTORY :=  V_SLIP_QTY ; V_LAST_INVENTORY :=  V_SLIP_QTY ;
               ElsIf V_TABLE_POSITION = 2 Then  V_OTHER_RECEIVE2      := V_SLIP_QTY ; V_THIS_INVENTORY :=  V_SLIP_QTY ; V_LAST_INVENTORY :=  V_SLIP_QTY ;
               ElsIf V_TABLE_POSITION = 3 Then  V_ISSUE2              := V_SLIP_QTY ; V_THIS_INVENTORY := -V_SLIP_QTY ; V_LAST_INVENTORY := -V_SLIP_QTY ;
               ElsIf V_TABLE_POSITION = 4 Then  V_OTHER_ISSUE2        := V_SLIP_QTY ; V_THIS_INVENTORY := -V_SLIP_QTY ; V_LAST_INVENTORY := -V_SLIP_QTY ;
               End If ;
          End If ;

          If C1%notfound Then
             -- ?????
            insert into WHINVENTORY_FI(
               operation_date,
               section_code,
               item_no,
               location,
               this_month,
               receive1,
               other_receive1,
               issue1,
               other_issue1,
               stocktaking_adjust1,
               this_inventory,
               last_month,
               receive2,
               other_receive2,
               issue2,
               other_issue2,
               stocktaking_adjust2,
               last_inventory,
               last2_inventory
            ) VALUES (
               sysdate,
               V_SECTION_CODE,
               V_ITEM_NO,
               null,
               to_char(V_DATE,'yyyymm'),
               nvl(V_RECEIVE1,0),
               nvl(V_OTHER_RECEIVE1,0),
               nvl(V_ISSUE1,0),
               nvl(V_OTHER_ISSUE1,0),
               nvl(V_STOCKTAKING_ADJUST1,0),
               nvl(V_THIS_INVENTORY,0),
               to_char(add_months(V_DATE,-1),'yyyymm'),
               nvl(V_RECEIVE2,0),
               nvl(V_OTHER_RECEIVE2,0),
               nvl(V_ISSUE2,0),
               nvl(V_OTHER_ISSUE2,0),
               nvl(V_STOCKTAKING_ADJUST2,0),
               nvl(V_LAST_INVENTORY,0),
               0
            ) ;
          Else
             -- ???
            update WHINVENTORY_FI set
               operation_date        = sysdate,
               receive1              = receive1            + nvl(V_RECEIVE1           ,0),
               other_receive1        = other_receive1      + nvl(V_OTHER_RECEIVE1     ,0),
               issue1                = issue1              + nvl(V_ISSUE1             ,0),
               other_issue1          = other_issue1        + nvl(V_OTHER_ISSUE1       ,0),
               stocktaking_adjust1   = stocktaking_adjust1 + nvl(V_STOCKTAKING_ADJUST1,0),
               this_inventory        = this_inventory      + nvl(V_THIS_INVENTORY     ,0),
               receive2              = receive2            + nvl(V_RECEIVE2           ,0),
               other_receive2        = other_receive2      + nvl(V_OTHER_RECEIVE2     ,0),
               issue2                = issue2              + nvl(V_ISSUE2             ,0),
               other_issue2          = other_issue2        + nvl(V_OTHER_ISSUE2       ,0),
               stocktaking_adjust2   = stocktaking_adjust2 + nvl(V_STOCKTAKING_ADJUST2,0),
               last_inventory        = last_inventory      + nvl(V_LAST_INVENTORY     ,0)
            where item_no = V_ITEM_NO
              and section_code = V_SECTION_CODE
            ;


          End If ;
      close C1 ;

 <<LAST>>
   null ;

  end ;
end WHINVENTORY_FI_SET ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."WHINVENTORY_FI_SLIDE" (para_wh in number, para_today in date,
                            para_check_flag out number) is
begin
declare
       cursor wh is --whinventory fetch
             select this_month, receive1, other_receive1,
                    issue1, other_issue1, stocktaking_adjust1,
                    this_inventory, last_month, receive2,
                    other_receive2, issue2, other_issue2,
                    stocktaking_adjust2, last_inventory,
                    last2_inventory
               from whinventory_fi
               for update of
                    this_month, receive1, other_receive1,
                    issue1, other_issue1, stocktaking_adjust1,
                    this_inventory, last_month, receive2,
                    other_receive2, issue2, other_issue2,
                    stocktaking_adjust2, last_inventory, last2_inventory,
                    operation_date;
       w_this_month          whinventory_fi.this_month%type; --variable start
       w_receive1            whinventory_fi.receive1%type;
       w_other_receive1      whinventory_fi.other_receive1%type;
       w_issue1              whinventory_fi.issue1%type;
       w_other_issue1        whinventory_fi.other_issue1%type;
       w_stocktaking_adjust1 whinventory_fi.stocktaking_adjust1%type;
       w_this_inventory      whinventory_fi.this_inventory%type;
       w_last_month          whinventory_fi.last_month%type;
       w_receive2            whinventory_fi.receive2%type;
       w_other_receive2      whinventory_fi.other_receive2%type;
       w_issue2              whinventory_fi.issue2%type;
       w_other_issue2        whinventory_fi.other_issue2%type;
       w_stocktaking_adjust2 whinventory_fi.stocktaking_adjust2%type;
       w_last_inventory      whinventory_fi.last_inventory%type;
       w_last2_inventory     whinventory_fi.last2_inventory%type;
       w_operation_date      whinventory_fi.operation_date%type; --variable end
     begin
     para_check_flag := 0;
     open wh;
     loop
         fetch wh into
                    w_this_month, w_receive1, w_other_receive1,
                    w_issue1, w_other_issue1, w_stocktaking_adjust1,
                    w_this_inventory, w_last_month, w_receive2,
                    w_other_receive2, w_issue2, w_other_issue2,
                    w_stocktaking_adjust2, w_last_inventory, w_last2_inventory;
         exit when wh%notfound or wh%notfound is null;
         if w_this_month <> para_wh then --month changed?
           w_last2_inventory := w_last_inventory; --value slide start
           w_last_month := w_this_month;
           w_receive2 := w_receive1;
           w_other_receive2 := w_other_receive1;
           w_issue2 := w_issue1;
           w_other_issue2 := w_other_issue1;
           w_stocktaking_adjust2 := w_stocktaking_adjust1;
           w_last_inventory := w_this_inventory;
           w_this_month := para_wh;
           w_receive1 := 0;
           w_other_receive1 := 0;
           w_issue1 := 0;
           w_other_issue1 := 0;
           w_stocktaking_adjust1 := 0;
           w_this_inventory := w_this_inventory;
           w_operation_date := para_today;
           if (w_receive2 = 0 or w_receive2 is null) and
              (w_other_receive2 = 0 or w_other_receive2 is null) and
              (w_issue2 = 0 or w_issue2 is null) and
              (w_other_issue2 = 0 or w_other_issue2 is null) and
              (w_stocktaking_adjust2 = 0 or w_stocktaking_adjust2 is null) and
              (w_last_inventory = 0 or w_last_inventory is null) and
              (w_last2_inventory = 0 or w_last2_inventory is null) then
             delete from whinventory_fi
              where current of wh; --delete no_move_data for two monthes
           else
             update whinventory_fi
                set operation_date = w_operation_date,
                    this_month = w_this_month,
                    receive1 = w_receive1,
                    other_receive1 = w_other_receive1,
                    issue1 = w_issue1,
                    other_issue1 = w_other_issue1,
                    stocktaking_adjust1 = w_stocktaking_adjust1,
                    this_inventory = w_this_inventory,
                    last_month = w_last_month,
                    receive2 = w_receive2,
                    other_receive2 = w_other_receive2,
                    issue2 = w_issue2,
                    other_issue2 = w_other_issue2,
                    stocktaking_adjust2 = w_stocktaking_adjust2,
                    last_inventory = w_last_inventory,
                    last2_inventory = w_last2_inventory
              where current of wh; --slide update
           end if;
         end if;
     end loop;
     exception
      when others then
       null;
       para_check_flag := 1;
       if wh%isopen then
        close wh;
       end if;
     end;
end whinventory_fi_slide;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."WHINVENTORY_SET" (
    v_item_no   in number,             -- ???? (?????????? -1)
    v_slip_date in date,               -- ?? ????????????????? -2?
    v_slip_qty  in number,             -- ??
    v_table_position in varchar2,           -- 1:??,2:???,3:??,4:???
    v_ret_no    in out number,         -- ???????????????
    v_sec_code  in number DEFAULT NULL -- ?????(????????????????????? null???? -5)
)
is
begin
  declare
   WHI_REC whinventory%rowtype ;
   ITM_REC item%rowtype ;

   v_date  date ;

   v_section_code        whinventory.section_code%TYPE          :=v_sec_code ;
   v_receive1            whinventory.receive1%TYPE              :=0 ;
   v_other_receive1      whinventory.other_receive1%TYPE        :=0 ;
   v_issue1              whinventory.issue1%TYPE                :=0 ;
   v_other_issue1        whinventory.other_issue1%TYPE          :=0 ;
   v_stocktaking_adjust1 whinventory.stocktaking_adjust1%TYPE   :=0 ;
   v_this_inventory      whinventory.this_inventory%TYPE        :=0 ;
   v_receive2            whinventory.receive2%TYPE              :=0 ;
   v_other_receive2      whinventory.other_receive2%TYPE        :=0 ;
   v_issue2              whinventory.issue2%TYPE                :=0 ;
   v_other_issue2        whinventory.other_issue2%TYPE          :=0 ;
   v_stocktaking_adjust2 whinventory.stocktaking_adjust2%TYPE   :=0 ;
   v_last_inventory      whinventory.last_inventory%TYPE        :=0 ;

    cursor C1(PARAM1 in number,PARAM2 in number) is
     select *
     from whinventory
     where item_no = PARAM1
       and section_code = PARAM2
     for update ;

    cursor C2 is
     select nvl(to_date(max(this_month),'yyyymm'),trunc(sysdate))
     from whinventory  ;

    cursor C3 is
     select *
     from item
     where item_no = v_item_no ;

  begin
      v_ret_no := 0 ;

      /* ??????*/
      open C3 ;
         fetch C3 into ITM_REC ;
      close C3 ;
      If ITM_REC.item_no is null Then
          v_ret_no := -1 ;
          goto LAST ;
      End If ;

      /* ?????? */
      If v_section_code is null Then
          v_section_code := ITM_REC.SECTION_CODE ;
          If v_section_code is null Then
               v_ret_no := -5 ;
               goto LAST ;
          End If ;
      End If ;

      /* ????????*/
      open C2 ;
         fetch C2 into v_date ;
      close C2 ;

      /* ????????*/
      If  trunc(v_slip_date,'mm') != trunc(v_date,'mm') and  trunc(v_slip_date,'mm') != trunc(add_months(v_date,-1),'mm') Then
          v_ret_no := -2 ;
          goto LAST ;
      End If ;


      /* ?????? */
      open C1(v_item_no,v_section_code) ;
          fetch C1 into WHI_REC;
          If to_char(v_slip_date,'yyyymm') = to_char(v_date,'yyyymm') Then                    --???
               If    v_table_position = 1 Then  v_receive1            := v_slip_qty ; v_this_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 2 Then  v_other_receive1      := v_slip_qty ; v_this_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 3 Then  v_issue1              := v_slip_qty ; v_this_inventory := -v_slip_qty ;
               ElsIf v_table_position = 4 Then  v_other_issue1        := v_slip_qty ; v_this_inventory := -v_slip_qty ;
               End If ;
          ElsIf to_char(v_slip_date,'yyyymm') = to_char(add_months(v_date,-1),'yyyymm') Then  --???
               If    v_table_position = 1 Then  v_receive2            := v_slip_qty ; v_this_inventory :=  v_slip_qty ; v_last_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 2 Then  v_other_receive2      := v_slip_qty ; v_this_inventory :=  v_slip_qty ; v_last_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 3 Then  v_issue2              := v_slip_qty ; v_this_inventory := -v_slip_qty ; v_last_inventory := -v_slip_qty ;
               ElsIf v_table_position = 4 Then  v_other_issue2        := v_slip_qty ; v_this_inventory := -v_slip_qty ; v_last_inventory := -v_slip_qty ;
               End If ;
          End If ;

          If C1%notfound Then
             -- ?????
            insert into whinventory(
               operation_date,
               section_code,
               item_no,
               location,
               this_month,
               receive1,
               other_receive1,
               issue1,
               other_issue1,
               stocktaking_adjust1,
               this_inventory,
               last_month,
               receive2,
               other_receive2,
               issue2,
               other_issue2,
               stocktaking_adjust2,
               last_inventory,
               last2_inventory
            ) VALUES (
               sysdate,
               v_section_code,
               v_item_no,
               null,
               to_char(v_date,'yyyymm'),
               nvl(v_receive1,0),
               nvl(v_other_receive1,0),
               nvl(v_issue1,0),
               nvl(v_other_issue1,0),
               nvl(v_stocktaking_adjust1,0),
               nvl(v_this_inventory,0),
               to_char(add_months(v_date,-1),'yyyymm'),
               nvl(v_receive2,0),
               nvl(v_other_receive2,0),
               nvl(v_issue2,0),
               nvl(v_other_issue2,0),
               nvl(v_stocktaking_adjust2,0),
               nvl(v_last_inventory,0),
               0
            ) ;
          Else
             -- ???
            update whinventory set
               operation_date        = sysdate,
               receive1              = receive1            + nvl(v_receive1           ,0),
               other_receive1        = other_receive1      + nvl(v_other_receive1     ,0),
               issue1                = issue1              + nvl(v_issue1             ,0),
               other_issue1          = other_issue1        + nvl(v_other_issue1       ,0),
               stocktaking_adjust1   = stocktaking_adjust1 + nvl(v_stocktaking_adjust1,0),
               this_inventory        = this_inventory      + nvl(v_this_inventory     ,0),
               receive2              = receive2            + nvl(v_receive2           ,0),
               other_receive2        = other_receive2      + nvl(v_other_receive2     ,0),
               issue2                = issue2              + nvl(v_issue2             ,0),
               other_issue2          = other_issue2        + nvl(v_other_issue2       ,0),
               stocktaking_adjust2   = stocktaking_adjust2 + nvl(v_stocktaking_adjust2,0),
               last_inventory        = last_inventory      + nvl(v_last_inventory     ,0)
            where item_no = v_item_no
              and section_code = v_section_code
            ;


          End If ;
          If    v_table_position = 1 Then              update item  set  receive_date        = v_slip_date where item_no = v_item_no and (receive_date < v_slip_date or receive_date is null);
          ElsIf v_table_position = 2 Then              update item  set  receive_date        = v_slip_date where item_no = v_item_no and (receive_date < v_slip_date or receive_date is null);
          ElsIf v_table_position = 3 Then              update item  set  issue_date          = v_slip_date where item_no = v_item_no and (issue_date < v_slip_date or issue_date is null);
          ElsIf v_table_position = 4 Then              update item  set  issue_date          = v_slip_date where item_no = v_item_no and (issue_date < v_slip_date or issue_date is null); 
          End If ;
      close C1 ;

 <<LAST>>
   null ;

  end ;
end whinventory_set ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."WHINVENTORY_SLIDE" (para_wh in number, para_today in date,
                            para_check_flag out number) is
begin
declare
       cursor wh is --whinventory fetch
             select this_month, receive1, other_receive1,
                    issue1, other_issue1, stocktaking_adjust1,
                    this_inventory, last_month, receive2,
                    other_receive2, issue2, other_issue2,
                    stocktaking_adjust2, last_inventory,
                    last2_inventory
               from whinventory
               for update of
                    this_month, receive1, other_receive1,
                    issue1, other_issue1, stocktaking_adjust1,
                    this_inventory, last_month, receive2,
                    other_receive2, issue2, other_issue2,
                    stocktaking_adjust2, last_inventory, last2_inventory,
                    operation_date;
       w_this_month          whinventory.this_month%type; --variable start
       w_receive1            whinventory.receive1%type;
       w_other_receive1      whinventory.other_receive1%type;
       w_issue1              whinventory.issue1%type;
       w_other_issue1        whinventory.other_issue1%type;
       w_stocktaking_adjust1 whinventory.stocktaking_adjust1%type;
       w_this_inventory      whinventory.this_inventory%type;
       w_last_month          whinventory.last_month%type;
       w_receive2            whinventory.receive2%type;
       w_other_receive2      whinventory.other_receive2%type;
       w_issue2              whinventory.issue2%type;
       w_other_issue2        whinventory.other_issue2%type;
       w_stocktaking_adjust2 whinventory.stocktaking_adjust2%type;
       w_last_inventory      whinventory.last_inventory%type;
       w_last2_inventory     whinventory.last2_inventory%type;
       w_operation_date      whinventory.operation_date%type; --variable end
     begin
     para_check_flag := 0;
     open wh;
     loop
         fetch wh into
                    w_this_month, w_receive1, w_other_receive1,
                    w_issue1, w_other_issue1, w_stocktaking_adjust1,
                    w_this_inventory, w_last_month, w_receive2,
                    w_other_receive2, w_issue2, w_other_issue2,
                    w_stocktaking_adjust2, w_last_inventory, w_last2_inventory;
         exit when wh%notfound or wh%notfound is null;
         if w_this_month <> para_wh then --month changed?
           w_last2_inventory := w_last_inventory; --value slide start
           w_last_month := w_this_month;
           w_receive2 := w_receive1;
           w_other_receive2 := w_other_receive1;
           w_issue2 := w_issue1;
           w_other_issue2 := w_other_issue1;
           w_stocktaking_adjust2 := w_stocktaking_adjust1;
           w_last_inventory := w_this_inventory;
           w_this_month := para_wh;
           w_receive1 := 0;
           w_other_receive1 := 0;
           w_issue1 := 0;
           w_other_issue1 := 0;
           w_stocktaking_adjust1 := 0;
           w_this_inventory := w_this_inventory;
           w_operation_date := para_today;
           if (w_receive2 = 0 or w_receive2 is null) and
              (w_other_receive2 = 0 or w_other_receive2 is null) and
              (w_issue2 = 0 or w_issue2 is null) and
              (w_other_issue2 = 0 or w_other_issue2 is null) and
              (w_stocktaking_adjust2 = 0 or w_stocktaking_adjust2 is null) and
              (w_last_inventory = 0 or w_last_inventory is null) and
              (w_last2_inventory = 0 or w_last2_inventory is null) then
             delete from whinventory
              where current of wh; --delete no_move_data for two monthes
           else
             update whinventory
                set operation_date = w_operation_date,
                    this_month = w_this_month,
                    receive1 = w_receive1,
                    other_receive1 = w_other_receive1,
                    issue1 = w_issue1,
                    other_issue1 = w_other_issue1,
                    stocktaking_adjust1 = w_stocktaking_adjust1,
                    this_inventory = w_this_inventory,
                    last_month = w_last_month,
                    receive2 = w_receive2,
                    other_receive2 = w_other_receive2,
                    issue2 = w_issue2,
                    other_issue2 = w_other_issue2,
                    stocktaking_adjust2 = w_stocktaking_adjust2,
                    last_inventory = w_last_inventory,
                    last2_inventory = w_last2_inventory
              where current of wh; --slide update
           end if;
         end if;
     end loop;
     exception
      when others then
       null;
       para_check_flag := 1;
       if wh%isopen then
        close wh;
       end if;
     end;
end whinventory_slide;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."WIPINVENTORY_SET" (
    v_item_no   in number,             -- ???? (?????????? -1)
    v_slip_date in date,               -- ?? ????????????????? -2?
    v_slip_qty  in number,             -- ??
    v_table_position in varchar2,      -- 1:??,2:???,3:??,4:???,9:??(*??*)
                                       -- ??????SLIP_QTY?????????(???Adjust???)??????????
    v_ret_no    in out number,         -- ???????????????
    v_sec_code  in number,             -- ????? (????????? -5)
    v_st_code  in number              -- ????? (????????? -7)

)
is
begin
  declare
   WHI_REC WIPINVENTORY%rowtype ;
   ITM_REC item%rowtype ;

   v_date  date ;
   v_sabun  wipinventory.stocktaking_adjust1%TYPE   :=0 ;

   v_section_code        wipinventory.section_code%TYPE          :=v_sec_code ;
   v_station_code        wipinventory.station_code%TYPE          :=v_st_code ;
   v_receive1            wipinventory.receive1%TYPE              :=0 ;
   v_other_receive1      wipinventory.other_receive1%TYPE        :=0 ;
   v_issue1              wipinventory.issue1%TYPE                :=0 ;
   v_other_issue1        wipinventory.other_issue1%TYPE          :=0 ;
   v_stocktaking_adjust1 wipinventory.stocktaking_adjust1%TYPE   :=0 ;
   v_this_inventory      wipinventory.this_inventory%TYPE        :=0 ;
   v_receive2            wipinventory.receive2%TYPE              :=0 ;
   v_other_receive2      wipinventory.other_receive2%TYPE        :=0 ;
   v_issue2              wipinventory.issue2%TYPE                :=0 ;
   v_other_issue2        wipinventory.other_issue2%TYPE          :=0 ;
   v_stocktaking_adjust2 wipinventory.stocktaking_adjust2%TYPE   :=0 ;
   v_last_inventory      wipinventory.last_inventory%TYPE        :=0 ;

    cursor C1 is
     select *
     from WIPINVENTORY
     where item_no = v_item_no
       and section_code = v_sec_code
       and station_code = v_st_code
     for update ;

    cursor C2 is
     select nvl(to_date(max(this_month),'yyyymm'),trunc(sysdate))
     from WIPINVENTORY  ;

    cursor C3 is
     select *
     from item
     where item_no = v_item_no ;

  begin
      v_ret_no := 0 ;

      /* ??????*/
      open C3 ;
         fetch C3 into ITM_REC ;
      close C3 ;
      If ITM_REC.item_no is null Then
          v_ret_no := -1 ;
          goto LAST ;
      End If ;

      /* ?????? */
      If v_section_code is null Then
           v_ret_no := -5 ;
           goto LAST ;
      End If ;

      /* ???????? */
      If v_station_code is null Then
           v_ret_no := -7 ;
           goto LAST ;
      End If ;

      /* ????????*/
      open C2 ;
         fetch C2 into v_date ;
      close C2 ;
      /* ????????*/
      If  trunc(v_slip_date,'mm') != trunc(v_date,'mm') and  trunc(v_slip_date,'mm') != trunc(add_months(v_date,-1),'mm') Then
          v_ret_no := -2 ;
          goto LAST ;
      End If ;


      /* ?????? */
      open C1 ;
          fetch C1 into WHI_REC;

          If to_char(v_slip_date,'yyyymm') = to_char(v_date,'yyyymm') Then                    --???
               If    v_table_position = 1 Then  v_receive1            := v_slip_qty ; v_this_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 2 Then  v_other_receive1      := v_slip_qty ; v_this_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 3 Then  v_issue1              := v_slip_qty ; v_this_inventory := -v_slip_qty ;
               ElsIf v_table_position = 4 Then  v_other_issue1        := v_slip_qty ; v_this_inventory := -v_slip_qty ;
               ElsIf v_table_position = 9 Then
                        v_sabun  := v_slip_qty - nvl(WHI_REC.this_inventory,0) ;
                        v_stocktaking_adjust1 := v_sabun ; v_this_inventory := v_sabun ;
               End If ;
          ElsIf to_char(v_slip_date,'yyyymm') = to_char(add_months(v_date,-1),'yyyymm') Then  --???
               If    v_table_position = 1 Then  v_receive2            := v_slip_qty ; v_this_inventory :=  v_slip_qty ; v_last_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 2 Then  v_other_receive2      := v_slip_qty ; v_this_inventory :=  v_slip_qty ; v_last_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 3 Then  v_issue2              := v_slip_qty ; v_this_inventory := -v_slip_qty ; v_last_inventory := -v_slip_qty ;
               ElsIf v_table_position = 4 Then  v_other_issue2        := v_slip_qty ; v_this_inventory := -v_slip_qty ; v_last_inventory := -v_slip_qty ;
               ElsIf v_table_position = 9 Then
                        v_sabun  := v_slip_qty - nvl(WHI_REC.last_inventory,0) ;
                        v_stocktaking_adjust2 := v_sabun ; v_this_inventory := v_sabun  ; v_last_inventory :=  v_sabun ;
               End If ;
          Else
             v_ret_no := -9 ;
          End If ;

          If C1%notfound Then
             -- ?????
            insert into WIPINVENTORY(
               operation_date,
               section_code,
               item_no,
               location,
               this_month,
               receive1,
               other_receive1,
               issue1,
               other_issue1,
               stocktaking_adjust1,
               this_inventory,
               last_month,
               receive2,
               other_receive2,
               issue2,
               other_issue2,
               stocktaking_adjust2,
               last_inventory,
               last2_inventory,
               station_code
            ) VALUES (
               sysdate,
               V_section_code,
               v_item_no,
               null,
               to_char(v_date,'yyyymm'),
               nvl(v_receive1,0),
               nvl(v_other_receive1,0),
               nvl(v_issue1,0),
               nvl(v_other_issue1,0),
               nvl(v_stocktaking_adjust1,0),
               nvl(v_this_inventory,0),
               to_char(add_months(v_date,-1),'yyyymm'),
               nvl(v_receive2,0),
               nvl(v_other_receive2,0),
               nvl(v_issue2,0),
               nvl(v_other_issue2,0),
               nvl(v_stocktaking_adjust2,0),
               nvl(v_last_inventory,0),
               0,
               v_station_code
            ) ;
          Else
             -- ???
            update WIPINVENTORY set
               operation_date        = sysdate,
               receive1              = receive1            + nvl(v_receive1           ,0),
               other_receive1        = other_receive1      + nvl(v_other_receive1     ,0),
               issue1                = issue1              + nvl(v_issue1             ,0),
               other_issue1          = other_issue1        + nvl(v_other_issue1       ,0),
               stocktaking_adjust1   = stocktaking_adjust1 + nvl(v_stocktaking_adjust1,0),
               this_inventory        = this_inventory      + nvl(v_this_inventory     ,0),
               receive2              = receive2            + nvl(v_receive2           ,0),
               other_receive2        = other_receive2      + nvl(v_other_receive2     ,0),
               issue2                = issue2              + nvl(v_issue2             ,0),
               other_issue2          = other_issue2        + nvl(v_other_issue2       ,0),
               stocktaking_adjust2   = stocktaking_adjust2 + nvl(v_stocktaking_adjust2,0),
               last_inventory        = last_inventory      + nvl(v_last_inventory     ,0)
            where item_no = v_item_no
              and section_code = v_section_code
              and nvl(station_code,0) = nvl(v_station_code,0)
            ;


          End If ;
      close C1 ;

 <<LAST>>
   null ;

  end ;
end WIPINVENTORY_SET ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."WIPINVENTORY_SLIDE" (para_pc in number, para_today in date,
                            para_check_flag out number) is
begin
declare
       cursor pc is --wipinventory fetch
             select this_month, receive1, other_receive1,
                    issue1, other_issue1, stocktaking_adjust1,
                    this_inventory, last_month, receive2,
                    other_receive2, issue2, other_issue2,
                    stocktaking_adjust2, last_inventory, last2_inventory
               from wipinventory
               for update of
                    this_month, receive1, other_receive1,
                    issue1, other_issue1, stocktaking_adjust1,
                    this_inventory, last_month, receive2,
                    other_receive2, issue2, other_issue2,
                    stocktaking_adjust2, last_inventory, last2_inventory,
                    operation_date;
       w_this_month          wipinventory.this_month%type; --variable start
       w_receive1            wipinventory.receive1%type;
       w_other_receive1      wipinventory.other_receive1%type;
       w_issue1              wipinventory.issue1%type;
       w_other_issue1        wipinventory.other_issue1%type;
       w_stocktaking_adjust1 wipinventory.stocktaking_adjust1%type;
       w_this_inventory      wipinventory.this_inventory%type;
       w_last_month          wipinventory.last_month%type;
       w_receive2            wipinventory.receive2%type;
       w_other_receive2      wipinventory.other_receive2%type;
       w_issue2              wipinventory.issue2%type;
       w_other_issue2        wipinventory.other_issue2%type;
       w_stocktaking_adjust2 wipinventory.stocktaking_adjust2%type;
       w_last_inventory      wipinventory.last_inventory%type;
       w_last2_inventory     wipinventory.last2_inventory%type;
       w_operation_date      whinventory.operation_date%type; --variable end
     begin
     para_check_flag := 0;
     open pc;
     loop
         fetch pc into
                    w_this_month, w_receive1, w_other_receive1,
                    w_issue1, w_other_issue1, w_stocktaking_adjust1,
                    w_this_inventory, w_last_month, w_receive2,
                    w_other_receive2, w_issue2, w_other_issue2,
                    w_stocktaking_adjust2, w_last_inventory, w_last2_inventory;
         exit when pc%notfound or pc%notfound is null;
         if w_this_month <> para_pc then --month changed?
           w_last2_inventory := w_last_inventory; --value slide start
           w_last_month := w_this_month;
           w_receive2 := w_receive1;
           w_other_receive2 := w_other_receive1;
           w_issue2 := w_issue1;
           w_other_issue2 := w_other_issue1;
           w_stocktaking_adjust2 := w_stocktaking_adjust1;
           w_last_inventory := w_this_inventory;
           w_this_month := para_pc;
           w_receive1 := 0;
           w_other_receive1 := 0;
           w_issue1 := 0;
           w_other_issue1 := 0;
           w_stocktaking_adjust1 := 0;
           w_this_inventory := w_this_inventory;
           w_operation_date := para_today;
           if (w_receive2 = 0 or w_receive2 is null) and
              (w_other_receive2 = 0 or w_other_receive2 is null) and
              (w_issue2 = 0 or w_issue2 is null) and
              (w_other_issue2 = 0 or w_other_issue2 is null) and
              (w_stocktaking_adjust2 = 0 or w_stocktaking_adjust2 is null) and
              (w_last_inventory = 0 or w_last_inventory is null) and
              (w_last2_inventory = 0 or w_last2_inventory is null) then
             delete from wipinventory
              where current of pc; --delete no_move_data for two monthes
           else
             update wipinventory
                set operation_date = w_operation_date,
                    this_month = w_this_month,
                    receive1 = w_receive1,
                    other_receive1 = w_other_receive1,
                    issue1 = w_issue1,
                    other_issue1 = w_other_issue1,
                    stocktaking_adjust1 = w_stocktaking_adjust1,
                    this_inventory = w_this_inventory,
                    last_month = w_last_month,
                    receive2 = w_receive2,
                    other_receive2 = w_other_receive2,
                    issue2 = w_issue2,
                    other_issue2 = w_other_issue2,
                    stocktaking_adjust2 = w_stocktaking_adjust2,
                    last_inventory = w_last_inventory,
                    last2_inventory = w_last2_inventory
              where current of pc; --slide update
           end if;
         end if;
     end loop;
     exception
      when others then
       null;
       para_check_flag := 1;
       if pc%isopen then
        close pc;
       end if;
     close pc;
     end;
end wipinventory_slide;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."WIPPHYSICAL_FI_SET" (V_MONTH in date)
is
begin
  declare
   ITM_REC   item%rowtype ;
   LITM_REC  item%rowtype ;
   PHY_REC   WIPPHYSICAL%rowtype ;
   STR_REC   structure%rowtype ;
   CNF_REC   configuration%rowtype ;
   SBSTR_REC substructure%rowtype ;
   pc_this_month   pcinventory.this_month%type;


   v_ret_no  number ;
   v_level_no  number(2);

    cursor C1(PARAM1 in number) is
     select *
     from WIPPHYSICAL where stock_taking_month = PARAM1 and item_no is not null
     ;

    /* CONFIGURATION ?? */
    cursor C2  is
     select * from CONFIGURATION where CONFIG_KEY = 'FL_WIP_INVENTORY';

    cursor C3(PARAM1 in number) is
     select *
     from item where item_no = PARAM1 ;



    /* ?????????? */
    cursor C8 is
     select p.item_no,p.section_code,p.station_code,p.this_month,
            sum(p.physical_quantity) physical_quantity
     from  WIPPHYSICAL_wk p
     group by p.item_no,p.section_code,p.station_code,p.this_month
     ;
     C8_REC			C8%ROWTYPE := null;

     cursor C9 is
     select max(this_month) this_month
      from pcinventory  ;

     C9_REC			C9%ROWTYPE := null;

  begin
      v_ret_no := 0 ;


    /* PCINVENTORY???????? */
      open C9 ;
         fetch C9 into C9_REC ;
      close C9 ;
 
      delete from WIPPHYSICAL_wk ;

      open C1(to_char(V_month,'yyyymm')) ;
        loop
        fetch C1 into PHY_REC ;
        exit when C1%notfound or C1%notfound is null;

              /* ?????? */
              open C3(PHY_REC.ITEM_NO) ;
                 fetch C3 into ITM_REC ;
              close C3 ;
              If ITM_REC.item_no is null Then
                  v_ret_no := -1 ;
                  goto LOOP_END ;
              End If ;


              /*?????????*/
              insert into WIPPHYSICAL_wk (
                      operation_date       ,
                      section_code         ,
                      item_no              ,
                      station_code         ,
                      this_month           ,
                      physical_quantity
                      )values(
                       sysdate              ,
                       PHY_REC.section_code ,
                       PHY_REC.item_no,
                       PHY_REC.station_code ,
                       PHY_REC.STOCK_TAKING_MONTH,
                       PHY_REC.PHYSICAL_QUANTITY
                      ) ;

        <<LOOP_END>>
          null ;
        end loop ;
      close C1 ;


      open C8 ;
         loop
            fetch C8 into C8_REC ;
            exit when C8%notfound or C8%notfound is null;

                  WIPINVENTORY_set(
                     C8_REC.ITEM_NO,
                     TO_DATE(C8_REC.THIS_MONTH,'YYYYMM'),
                     C8_REC.PHYSICAL_QUANTITY,
                     9,
                     V_RET_NO,
                     C8_REC.SECTION_CODE,
                     C8_REC.STATION_CODE
                   ) ;
         end loop ;
      close C8 ;


 <<LAST>>
   null ;
	DBMS_OUTPUT.PUT_LINE('LAST');

  end ;
end WIPPHYSICAL_FI_SET ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."WIPPHYSICAL_SET" (V_MONTH in date)
is
begin
  declare
   ITM_REC   item%rowtype ;
   LITM_REC  item%rowtype ;
   PHY_REC   WIPPHYSICAL%rowtype ;
   STR_REC   structure%rowtype ;
   CNF_REC   configuration%rowtype ;
   SBSTR_REC substructure%rowtype ;
   pc_this_month   pcinventory.this_month%type;


   v_ret_no  number ;
   v_level_no  number(2);

    cursor C1(PARAM1 in number) is
     select *
     from WIPPHYSICAL where stock_taking_month = PARAM1 and item_no is not null
     ;

    /* CONFIGURATION ?? */
    cursor C2  is
     select * from CONFIGURATION where CONFIG_KEY = 'FL_WIP_INVENTORY';

    cursor C3(PARAM1 in number) is
     select *
     from item where item_no = PARAM1 ;


    /* ???????? */
    cursor C4(PARAM1 in varchar2) is
     select *
     from substructure  where rtrim(in_process_code) = rtrim(PARAM1) ;

    /* ?????? */
    cursor C5(PARAM1 in number,PARAM2 in varchar2,PARAM3 in number) is
     select *
     from structure where upper_item_no = PARAM1
                      and rtrim(reference_number) = rtrim(PARAM2)
                      and level_no   =  PARAM3;

    /* ????? */
    cursor C6(PARAM1 in number) is
     select max(level_no)
     from leveld where LEVEL_CONT_KEY = PARAM1;

    /* ?????????? */
    cursor C7 is
     select p.item_no,p.section_code,p.station_code,p.this_month,
            sum(p.physical_quantity) physical_quantity
     from  PCPHYSICAL_wk p
     group by p.item_no,p.section_code,p.station_code,p.this_month
     ;
     C7_REC			C7%ROWTYPE := null;

    /* ?????????? */
    cursor C8 is
     select p.item_no,p.section_code,p.station_code,p.this_month,
            sum(p.physical_quantity) physical_quantity
     from  WIPPHYSICAL_wk p
     group by p.item_no,p.section_code,p.station_code,p.this_month
     ;
     C8_REC			C8%ROWTYPE := null;

     cursor C9 is
     select max(this_month) this_month
      from pcinventory  ;

     C9_REC			C9%ROWTYPE := null;

  begin
      v_ret_no := 0 ;

    /* ??????? */
    open C2;
        CNF_REC := null ;
        fetch C2 into CNF_REC ;
    close C2;

    /* PCINVENTORY???????? */
      open C9 ;
         fetch C9 into C9_REC ;
      close C9 ;
 
      delete from WIPPHYSICAL_wk ;
      delete from PCPHYSICAL_wk ;

      open C1(to_char(V_month,'yyyymm')) ;
        loop
        fetch C1 into PHY_REC ;
        exit when C1%notfound or C1%notfound is null;

              /* ?????? */
              open C3(PHY_REC.ITEM_NO) ;
                 fetch C3 into ITM_REC ;
              close C3 ;
              If ITM_REC.item_no is null Then
                  v_ret_no := -1 ;
                  goto LOOP_END ;
              End If ;

             /* IN_PROCESS_CODE???????????????????? */
             /* SUBSTRUCTURE???????????? */
              If replace(PHY_REC.IN_PROCESS_CODE,' ','') is not null Then
                  open C4(PHY_REC.IN_PROCESS_CODE) ;
                      loop
                      fetch C4 into SBSTR_REC ;

                      /* SUBSTRUCTURE????????????,????? */
                      If C4%notfound or C4%notfound is null then
                          If C4%rowcount  = 0   then
                              insert into pcphysical_wk (
                                  operation_date       ,
                                  section_code         ,
                                  item_no              ,
                                  station_code         ,
                                  this_month           ,
                                  physical_quantity
                              )values(
                                  sysdate              ,
                                  PHY_REC.section_code ,
                                  PHY_REC.item_no,
                                  PHY_REC.station_code ,
                                  PHY_REC.STOCK_TAKING_MONTH,
                                  PHY_REC.PHYSICAL_QUANTITY
                              ) ;
                          End If;
                      goto LOOP_END_C4 ;
                      Else
                           /* ?????? */
                          v_level_no  := 0;
                          open C6(ITM_REC.ITEM_NO) ;
                               fetch C6 into v_level_no ;
                          close C6 ;
--LEVELD????????????,?????
                          If v_level_no is null then
                               insert into pcphysical_wk (
                                     operation_date       ,
                                     section_code         ,
                                     item_no              ,
                                     station_code         ,
                                     this_month           ,
                                     physical_quantity
                                )values(
                                     sysdate              ,
                                     PHY_REC.section_code ,
                                     PHY_REC.item_no,
                                     PHY_REC.station_code ,
                                     PHY_REC.STOCK_TAKING_MONTH,
                                     PHY_REC.PHYSICAL_QUANTITY
                                ) ;
                          Else
                               /* STRUCTURE????? */
                               open C5(ITM_REC.ITEM_NO,SBSTR_REC.REFERENCE_NUMBER,v_level_no) ;
                                    loop
                                    fetch C5 into STR_REC ;
                                    exit when C5%notfound or C5%notfound is null;

                                        open C3(STR_REC.LOWER_ITEM_NO) ;
                                             fetch C3 into LITM_REC ;
                                        close C3 ;

                                        insert into pcphysical_wk (
                                              operation_date       ,
                                              section_code         ,
                                              item_no              ,
                                              station_code         ,
                                              this_month           ,
                                              physical_quantity
                                        )values(
                                              sysdate              ,
                                              PHY_REC.section_code ,
                                              STR_REC.lower_item_no,
                                              PHY_REC.station_code ,
                                              PHY_REC.STOCK_TAKING_MONTH,
                                              round(PHY_REC.PHYSICAL_QUANTITY * STR_REC.QUANTITY / nvl(decode(STR_REC.QUANTITY_BASE,0,1,STR_REC.QUANTITY_BASE),1) * LITM_REC.UNIT_STOCK_RATE / nvl(decode(LITM_REC.UNIT_ENGINEER_RATE,0,1,LITM_REC.UNIT_ENGINEER_RATE),1),6)
                                        ) ;

                                    end loop ;
                              close C5 ;
                          End If ;
                      End If ;
                      end loop ;
                   <<LOOP_END_C4>>
                  close C4 ;
              Else
                         insert into pcphysical_wk (
                             operation_date       ,
                             section_code         ,
                             item_no              ,
                             station_code         ,
                             this_month           ,
                             physical_quantity
                         )values(
                             sysdate              ,
                             PHY_REC.section_code ,
                             PHY_REC.item_no,
                             PHY_REC.station_code ,
                             PHY_REC.STOCK_TAKING_MONTH,
                             PHY_REC.PHYSICAL_QUANTITY
                         ) ;

              End If ;


              /*?????????*/
              insert into WIPPHYSICAL_wk (
                      operation_date       ,
                      section_code         ,
                      item_no              ,
                      station_code         ,
                      this_month           ,
                      physical_quantity
                      )values(
                       sysdate              ,
                       PHY_REC.section_code ,
                       PHY_REC.item_no,
                       PHY_REC.station_code ,
                       PHY_REC.STOCK_TAKING_MONTH,
                       PHY_REC.PHYSICAL_QUANTITY
                      ) ;

        <<LOOP_END>>
          null ;
        end loop ;
      close C1 ;

     if  C9_REC.this_month = PHY_REC.STOCK_TAKING_MONTH then
         /* ????????0???? */
          insert into pcphysical_wk (
                         operation_date       ,
                         section_code         ,
                         item_no              ,
                         station_code         ,
                         this_month           ,
                         physical_quantity
                      )
                 select
                         sysdate              ,
                         section_code         ,
                         item_no              ,
                         station_code         ,
                         this_month           ,
                         0
                from pcinventory ;
     else
      insert into pcphysical_wk (
                     operation_date       ,
                     section_code         ,
                     item_no              ,
                     station_code         ,
                     this_month           ,
                     physical_quantity
                  )
             select
                     sysdate              ,
                     section_code         ,
                     item_no              ,
                     station_code         ,
                     last_month           ,
                     0
            from pcinventory ;
       end if;

       if  C9_REC.this_month = PHY_REC.STOCK_TAKING_MONTH then
         /* ????????0???? */
      insert into WIPPHYSICAL_wk (
                     operation_date       ,
                     section_code         ,
                     item_no              ,
                     station_code         ,
                     this_month           ,
                     physical_quantity
                  )
             select
                     sysdate              ,
                     section_code         ,
                     item_no              ,
                     station_code         ,
                     decode(this_month,C9_REC.this_month,this_month,last_month)           ,
                     0
            from PCINVENTORY ;
        else
          insert into WIPPHYSICAL_wk (
                         operation_date       ,
                         section_code         ,
                         item_no              ,
                         station_code         ,
                         this_month           ,
                         physical_quantity
                      )
                 select
                         sysdate              ,
                         section_code         ,
                         item_no              ,
                         station_code         ,
                         decode(this_month,C9_REC.this_month,this_month,last_month)           ,
                         0
                from PCINVENTORY ;
          end if;
/* PCINVENTORY??????? */
      open C7 ;
         loop
            fetch C7 into C7_REC ;
            exit when C7%notfound or C7%notfound is null;
                PCINVENTORY_set(
                   C7_REC.ITEM_NO,
                   TO_DATE(C7_REC.THIS_MONTH,'YYYYMM'),
                   C7_REC.PHYSICAL_QUANTITY,
                   9,
                   V_RET_NO,
                   C7_REC.SECTION_CODE,
                   C7_REC.STATION_CODE
                ) ;

         end loop ;
      close C7 ;

/* WIPINVENTORY??????? */
      open C8 ;
         loop
            fetch C8 into C8_REC ;
            exit when C8%notfound or C8%notfound is null;

               /* ??????? (FL????)*/
               if CNF_REC.CONFIG_FLAG = 1 Then
                  WIPINVENTORY_set(
                     C8_REC.ITEM_NO,
                     TO_DATE(C8_REC.THIS_MONTH,'YYYYMM'),
                     C8_REC.PHYSICAL_QUANTITY,
                     9,
                     V_RET_NO,
                     C8_REC.SECTION_CODE,
                     C8_REC.STATION_CODE
                   ) ;
                end if;
         end loop ;
      close C8 ;


 <<LAST>>
   null ;
	DBMS_OUTPUT.PUT_LINE('LAST');

  end ;
end WIPPHYSICAL_SET ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."YUSENINVENTORY_SET" (
    v_item_no   in number,             -- ???? (?????????? -1)
    v_slip_date in date,               -- ?? ????????????????? -2?
    v_slip_qty  in number,             -- ??
    v_table_position in varchar2,           -- 1:??,2:???,3:??,4:???
    v_ret_no    in out number,         -- ???????????????
    v_sec_code  in number DEFAULT NULL -- ?????(????????????????????? null???? -5)
)
is
begin
  declare
   WHI_REC YUSENINVENTORY%rowtype ;
   ITM_REC item%rowtype ;

   v_date  date ;

   v_section_code        YUSENINVENTORY.section_code%TYPE          :=v_sec_code ;
   v_receive1            YUSENINVENTORY.receive1%TYPE              :=0 ;
   v_other_receive1      YUSENINVENTORY.other_receive1%TYPE        :=0 ;
   v_issue1              YUSENINVENTORY.issue1%TYPE                :=0 ;
   v_other_issue1        YUSENINVENTORY.other_issue1%TYPE          :=0 ;
   v_stocktaking_adjust1 YUSENINVENTORY.stocktaking_adjust1%TYPE   :=0 ;
   v_this_inventory      YUSENINVENTORY.this_inventory%TYPE        :=0 ;
   v_receive2            YUSENINVENTORY.receive2%TYPE              :=0 ;
   v_other_receive2      YUSENINVENTORY.other_receive2%TYPE        :=0 ;
   v_issue2              YUSENINVENTORY.issue2%TYPE                :=0 ;
   v_other_issue2        YUSENINVENTORY.other_issue2%TYPE          :=0 ;
   v_stocktaking_adjust2 YUSENINVENTORY.stocktaking_adjust2%TYPE   :=0 ;
   v_last_inventory      YUSENINVENTORY.last_inventory%TYPE        :=0 ;

    cursor C1(PARAM1 in number,PARAM2 in number) is
     select *
     from YUSENINVENTORY
     where item_no = PARAM1
       and section_code = PARAM2
     for update ;

    cursor C2 is
     select nvl(to_date(max(this_month),'yyyymm'),trunc(sysdate))
     from YUSENINVENTORY  ;

    cursor C3 is
     select *
     from item
     where item_no = v_item_no ;

  begin
      v_ret_no := 0 ;

      /* ??????*/
      open C3 ;
         fetch C3 into ITM_REC ;
      close C3 ;
      If ITM_REC.item_no is null Then
          v_ret_no := -1 ;
          goto LAST ;
      End If ;

      /* ?????? */
      If v_section_code is null Then
          v_section_code := ITM_REC.SECTION_CODE ;
          If v_section_code is null Then
               v_ret_no := -5 ;
               goto LAST ;
          End If ;
      End If ;

      /* ????????*/
      open C2 ;
         fetch C2 into v_date ;
      close C2 ;

      /* ????????*/
      If  trunc(v_slip_date,'mm') != trunc(v_date,'mm') and  trunc(v_slip_date,'mm') != trunc(add_months(v_date,-1),'mm') Then
          v_ret_no := -2 ;
          goto LAST ;
      End If ;


      /* ?????? */
      open C1(v_item_no,v_section_code) ;
          fetch C1 into WHI_REC;
          If to_char(v_slip_date,'yyyymm') = to_char(v_date,'yyyymm') Then                    --???
               If    v_table_position = 1 Then  v_receive1            := v_slip_qty ; v_this_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 2 Then  v_other_receive1      := v_slip_qty ; v_this_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 3 Then  v_issue1              := v_slip_qty ; v_this_inventory := -v_slip_qty ;
               ElsIf v_table_position = 4 Then  v_other_issue1        := v_slip_qty ; v_this_inventory := -v_slip_qty ;
               End If ;
          ElsIf to_char(v_slip_date,'yyyymm') = to_char(add_months(v_date,-1),'yyyymm') Then  --???
               If    v_table_position = 1 Then  v_receive2            := v_slip_qty ; v_this_inventory :=  v_slip_qty ; v_last_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 2 Then  v_other_receive2      := v_slip_qty ; v_this_inventory :=  v_slip_qty ; v_last_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 3 Then  v_issue2              := v_slip_qty ; v_this_inventory := -v_slip_qty ; v_last_inventory := -v_slip_qty ;
               ElsIf v_table_position = 4 Then  v_other_issue2        := v_slip_qty ; v_this_inventory := -v_slip_qty ; v_last_inventory := -v_slip_qty ;
               End If ;
          End If ;

          If C1%notfound Then
             -- ?????
            insert into YUSENINVENTORY(
               operation_date,
               section_code,
               item_no,
               location,
               this_month,
               receive1,
               other_receive1,
               issue1,
               other_issue1,
               stocktaking_adjust1,
               this_inventory,
               last_month,
               receive2,
               other_receive2,
               issue2,
               other_issue2,
               stocktaking_adjust2,
               last_inventory,
               last2_inventory
            ) VALUES (
               sysdate,
               v_section_code,
               v_item_no,
               null,
               to_char(v_date,'yyyymm'),
               nvl(v_receive1,0),
               nvl(v_other_receive1,0),
               nvl(v_issue1,0),
               nvl(v_other_issue1,0),
               nvl(v_stocktaking_adjust1,0),
               nvl(v_this_inventory,0),
               to_char(add_months(v_date,-1),'yyyymm'),
               nvl(v_receive2,0),
               nvl(v_other_receive2,0),
               nvl(v_issue2,0),
               nvl(v_other_issue2,0),
               nvl(v_stocktaking_adjust2,0),
               nvl(v_last_inventory,0),
               0
            ) ;
          Else
             -- ???
            update YUSENINVENTORY set
               operation_date        = sysdate,
               receive1              = receive1            + nvl(v_receive1           ,0),
               other_receive1        = other_receive1      + nvl(v_other_receive1     ,0),
               issue1                = issue1              + nvl(v_issue1             ,0),
               other_issue1          = other_issue1        + nvl(v_other_issue1       ,0),
               stocktaking_adjust1   = stocktaking_adjust1 + nvl(v_stocktaking_adjust1,0),
               this_inventory        = this_inventory      + nvl(v_this_inventory     ,0),
               receive2              = receive2            + nvl(v_receive2           ,0),
               other_receive2        = other_receive2      + nvl(v_other_receive2     ,0),
               issue2                = issue2              + nvl(v_issue2             ,0),
               other_issue2          = other_issue2        + nvl(v_other_issue2       ,0),
               stocktaking_adjust2   = stocktaking_adjust2 + nvl(v_stocktaking_adjust2,0),
               last_inventory        = last_inventory      + nvl(v_last_inventory     ,0)
            where item_no = v_item_no
              and section_code = v_section_code
            ;


          End If ;
          If    v_table_position = 1 Then              update item  set  receive_date        = v_slip_date where item_no = v_item_no and (receive_date < v_slip_date or receive_date is null);
          ElsIf v_table_position = 2 Then              update item  set  receive_date        = v_slip_date where item_no = v_item_no and (receive_date < v_slip_date or receive_date is null);
          ElsIf v_table_position = 3 Then              update item  set  issue_date          = v_slip_date where item_no = v_item_no and (issue_date < v_slip_date or issue_date is null);
          ElsIf v_table_position = 4 Then              update item  set  issue_date          = v_slip_date where item_no = v_item_no and (issue_date < v_slip_date or issue_date is null); 
          End If ;
      close C1 ;

 <<LAST>>
   null ;

  end ;
end YUSENINVENTORY_set ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."Z99A02951PP" 
/*----------------------------------------------------------------------
  PROCEDURE: ???? P-GLOSAS? (Z99A02951PP)
?
  ????:
      Return_Code: ????:0, ????:0??
      Return_Msg:  ????????
----------------------------------------------------------------------
  2014/12/23  H.Suzuki      ????
----------------------------------------------------------------------*/
(
	Return_Code OUT number,
	Return_Msg  OUT varchar2
) as
/*
declare
	Return_Code number(5)      := 0;
	Return_Msg  varchar2(2048) := null;
*/
/*---------- ???? ----------*/
	subtype ty_bom_qty		is number(30,15);
	subtype ty_fail_rate	is number(13,10);
/*---------- ?? ----------*/
	--????
	start_time		constant date	:= sysdate;
/*---------- ???? ----------*/
	--????
	cursor csr_product is
		select b.SECTION_CODE, s.SHORT_NAME, b.ITEM_NO, b.DESCRIPTION
		     , b.ITEM, b.DRAWING_NO, b.DRAWING_REV, a.LEVEL_NO
		  from LEVELD a
		  join ITEM b
		    on b.ITEM_NO  = a.LEVEL_CONT_KEY
		  left join SECTION s
		    on s.SECTION_CODE = b.SECTION_CODE
		 where a.LEVEL_NO = ( select max(x.LEVEL_NO) from LEVELD x where x.LEVEL_CONT_KEY = b.ITEM_NO)
		   and b.SECTION_CODE = '100'
	;
	r_product csr_product%rowtype;
	--?????
	cursor csr_parts(p_product_key in number) is
--		select connect_by_root x.UPPER_ITEM_NO as ITEM_NO
--		     , level as HIER, connect_by_isLeaf as IS_LEAF
		select p_product_key as ITEM_NO
		     , level as HIER
		     , case when level < lead(level) over(order by rownum) then 0 else 1 end as IS_LEAF
		     , replace(sys_connect_by_path(x.REFERENCE_NUMBER, ':'), ':') as SORT_KEY
		     , x.UPPER_ITEM_NO, x.LEVEL_NO, x.LINE_NO, x.REFERENCE_NUMBER
		     , x.LOWER_ITEM_NO, x.QUANTITY, x.QUANTITY_BASE, x.FAILURE_RATE
		     , x.USER_SUPPLY_FLAG, x.SUBCON_SUPPLY_FLAG
		     , x.ITEM_TYPE2, x.DESCRIPTION, x.ITEM, x.CATALOG_NO
		     , x.DRAWING_NO, x.DRAWING_REV, x.DRAWING_NO_REV
		     , x.ORDER_POLICY, x.ISSUE_POLICY, x.UNIT_ENGINEERING, x.UNIT_STOCK
		     , x.UNIT_ENGINEER_RATE, x.UNIT_STOCK_RATE, x.MANUFACT_FAIL_RATE
		     , x.SUPPLIER_CODE, x.INSPECTION_FLAG, x.ITEM_FLAG
		     , x.MANUFACT_LEADTIME, x.CAT_RECORD_FLAG
		  from (
				select a.*
				     , c.ITEM_TYPE2, c.DESCRIPTION, c.ITEM, c.CATALOG_NO, c.DRAWING_NO, c.DRAWING_REV
				     , rpad(c.DRAWING_NO, 20, ' ') || nvl(c.DRAWING_REV, ' ') as DRAWING_NO_REV
				     , c.ORDER_POLICY, c.ISSUE_POLICY, c.UNIT_ENGINEERING, c.UNIT_STOCK
				     , nvl(c.MANUFACT_FAIL_RATE, 0) as MANUFACT_FAIL_RATE
				     , nvl(c.UNIT_ENGINEER_RATE, 1) as UNIT_ENGINEER_RATE
				     , nvl(c.UNIT_STOCK_RATE,    1) as UNIT_STOCK_RATE
				     , nvl(c.MANUFACT_LEADTIME,  0) as MANUFACT_LEADTIME
				     , c.SUPPLIER_CODE, c.MAK, null as SHIPTO_CODE, null as BUYER_CODE
				     , null as INSPECTION_FLAG, c.ITEM_FLAG, ' ' as CAT_RECORD_FLAG
				  from STRUCTURE a
				  join ITEM c
				    on c.ITEM_NO = a.LOWER_ITEM_NO
				 where a.LEVEL_NO = nvl((select max(LEVEL_NO) from LEVELD b
										  where b.ITEM_NO = a.UPPER_ITEM_NO), a.LEVEL_NO)
		       ) x
		start with x.UPPER_ITEM_NO = p_product_key
		connect by prior x.LOWER_ITEM_NO = x.UPPER_ITEM_NO
	;
	r_parts csr_parts%rowtype;
	--?????
	cursor csr_itemmaker(p_item_number in number) is
		select d.ITEM_NO, d.SUPPLIER_CODE, d.ESTIMATE_PRICE
		  from ITEMMAKER d
		 where d.ITEM_NO = p_item_number
		 order by ITEM_NO, ALTER_PROCEDURE, LINE_NO
	;
	r_itemmaker csr_itemmaker%rowtype;
	--?????
	cursor csr_unit(p_unit_cd in number) is
		select u.UNIT_CODE, u.UNIT
		  from UNIT u
		 where u.UNIT_CODE = p_unit_cd
	;
	r_unit csr_unit%rowtype;
/*---------- ?? ----------*/
	l_today			date := trunc(start_time, 'j');
	l_regDate		P91BMLIST_FI.OPERATION_DATE%type	:= start_time;
	l_ipAddr		P91BMLIST_FI.IP_ADDRESS%type		:= '1.1.1.1';
	l_employee		P91BMLIST_FI.EMPLOYEE_CODE%type		:= '99999';
	r_bmlist		P91BMLIST_FI%rowtype;
	r_bmhead		P91BMLIST_FI%rowtype;
	r_empty			P91BMLIST_FI%rowtype;
/*---------- ?? ----------*/
	--????
	procedure process_start is
	begin
		null;
		DBMS_OUTPUT.ENABLE(1000000);
		DBMS_OUTPUT.PUT_LINE('Z99A02951PP??  ' || to_char(start_time, 'YYYY/MM/DD hh24:mi:ss'));
	end process_start;
	--????
	procedure process_end is
	begin
		null;
		DBMS_OUTPUT.PUT('Z99A02951PP??  ' || to_char(sysdate, 'YYYY/MM/DD hh24:mi:ss'));
		DBMS_OUTPUT.PUT_LINE(' ( spent ' || to_char(trunc((sysdate - start_time) * 86400, 3)) || 'sec )');
	end process_end;
	--??????
	procedure check_point(p_msg in varchar2) is
	begin
		null;
		--DBMS_OUTPUT.PUT_LINE(p_msg || ' >> ' || to_char(trunc((sysdate - start_time) * 86400, 3)) || 'sec');
	end check_point;
	--???????
	procedure echo(p_msg in varchar2) is
	begin
		null;
		--DBMS_OUTPUT.PUT_LINE(p_msg);
	end echo;
/*---------- ?? ----------*/
	--?????
	--	p_level				??????
	--	p_demand_qty		???????
	--	p_fail_rate			???????
	--	p_leadtime			????????
	--	p_internal			true:???  false:???
	procedure expand_bom(p_level in number,
						 p_demand_qty in number, p_fail_rate in number,
						 p_leadtime in number, p_internal in boolean) is
		l_qty		ty_bom_qty;
		l_uqty		ty_bom_qty;
		l_dqty		ty_bom_qty;
		l_rate		ty_fail_rate;
		l_leadtime	P91BMLIST_FI.BOM_LEADTIME%type;
		l_acc_flg	P91BMLIST_FI.ACCOUNT_FLAG%type;
		l_internal	boolean;
	begin
		loop
			exit when csr_parts%notfound;
			exit when r_parts.HIER <> p_level;
			r_bmlist					:= r_bmhead;
			r_bmlist.SORT_KEY1			:= substr(r_parts.SORT_KEY, 1, 100);
			r_bmlist.LEVEL_CODE			:= r_parts.HIER;
			r_bmlist.REFERENCE_NUMBER	:= r_parts.REFERENCE_NUMBER;
			r_bmlist.UPPER_ITEM_NUMBER	:= r_parts.UPPER_ITEM_NO;
			r_bmlist.LOWER_ITEM_NUMBER	:= r_parts.LOWER_ITEM_NO;
			r_bmlist.ITEM_TYPE2			:= r_parts.ITEM_TYPE2;
			r_bmlist.ITEM_NAME			:= substr(r_parts.DESCRIPTION, 1, 30);
			r_bmlist.CATALOG_NO			:= r_parts.CATALOG_NO;
			r_bmlist.ITEM_DESCRIPTION	:= substr(r_parts.ITEM, 1, 30);
			r_bmlist.DRAWING_NO			:= r_parts.DRAWING_NO;
			r_bmlist.DRAWING_REV		:= r_parts.DRAWING_REV;
			r_bmlist.ORDER_POLICY		:= r_parts.ORDER_POLICY;
			r_bmlist.ISSUE_POLICY		:= r_parts.ISSUE_POLICY;
			r_bmlist.UNIT_ENGINEER_CODE	:= r_parts.UNIT_ENGINEERING;
			r_bmlist.UNIT_STOCK_CODE	:= r_parts.UNIT_STOCK;
			r_bmlist.UNIT_ENGINEER_RATE	:= r_parts.UNIT_ENGINEER_RATE;
			r_bmlist.UNIT_STOCK_RATE	:= r_parts.UNIT_STOCK_RATE;
			r_bmlist.QUANTITY			:= r_parts.QUANTITY;
			r_bmlist.QUANTITY_BASE		:= r_parts.QUANTITY_BASE;
			r_bmlist.FAILURE_RATE		:= r_parts.FAILURE_RATE;
			r_bmlist.USER_SUPPLY_FLAG	:= r_parts.USER_SUPPLY_FLAG;
			r_bmlist.SUBCON_SUPPLY_FLAG	:= r_parts.SUBCON_SUPPLY_FLAG;
			r_bmlist.VALID_LEVEL		:= r_parts.LEVEL_NO;
			r_bmlist.INVALID_LEVEL		:= r_parts.LEVEL_NO;
			r_bmlist.ITEM_FLAG			:= r_parts.ITEM_FLAG;
			if r_parts.HIER > 1 then
				r_bmlist.VALID_LEVEL	:= 0;
			end if;
			--??????
			open  csr_itemmaker(r_parts.LOWER_ITEM_NO);
			fetch csr_itemmaker into r_itemmaker;
			if csr_itemmaker%found then
				r_bmlist.STATION_CODE	:= r_itemmaker.SUPPLIER_CODE;
				r_bmlist.ESTIMATE_PRICE	:= r_itemmaker.ESTIMATE_PRICE;
			end if;
			close csr_itemmaker;
			--??????
			open  csr_unit(r_parts.UNIT_ENGINEERING);
			fetch csr_unit into r_unit;
			if csr_unit%found then
				r_bmlist.UNIT_ENGINEERING := r_unit.UNIT;
			end if;
			close csr_unit;
			--??????
			open  csr_unit(r_parts.UNIT_STOCK);
			fetch csr_unit into r_unit;
			if csr_unit%found then
				r_bmlist.UNIT_STOCK		:= r_unit.UNIT;
			end if;
			close csr_unit;
			--??
			l_uqty := r_parts.QUANTITY;
			l_dqty := r_parts.QUANTITY_BASE;
			--???? (?????????)
			if nvl(l_dqty, 0) = 0 then
				l_dqty := null;
			elsif r_parts.UNIT_STOCK_RATE = 0 and r_parts.UNIT_ENGINEER_RATE = 0 then
				--l_dqty := null;
				null;
			elsif r_parts.UNIT_STOCK_RATE = 0 or r_parts.UNIT_ENGINEER_RATE = 0 then
				l_dqty := null;
			elsif r_parts.UNIT_STOCK_RATE <> r_parts.UNIT_ENGINEER_RATE then
				l_dqty := l_dqty * r_parts.UNIT_ENGINEER_RATE / r_parts.UNIT_STOCK_RATE;
			end if;
			--??? = (1 + ???????) * (1 + ??????? + ??????) - 1
			--l_rate := ( ( 1 + p_fail_rate / 100 ) * ( 1 + r_parts.FAILURE_RATE / 100 + r_parts.MANUFACT_FAIL_RATE / 100 ) - 1 ) * 100;
			l_rate := r_parts.FAILURE_RATE + r_parts.MANUFACT_FAIL_RATE;
			l_rate := p_fail_rate + l_rate + p_fail_rate * l_rate / 100;
			--????? = ??????? * ?????
			l_qty := p_demand_qty * l_uqty / l_dqty;
			r_bmlist.BOM_QTY			:= trunc(l_qty, 12);
			r_bmlist.BOM_FAIL_RATE		:= round(l_rate, 3);
			--??????
			l_leadtime := p_leadtime + r_parts.MANUFACT_LEADTIME;
			r_bmlist.MANUFACT_LEADTIME	:= r_parts.MANUFACT_LEADTIME;
			r_bmlist.BOM_LEADTIME		:= p_leadtime;
			--?????
			if not p_internal then
				--?????
				l_acc_flg  := ' ';
				l_internal := false;
			elsif r_parts.IS_LEAF = 1 then
				--??
				l_acc_flg  := 'Y';
				l_internal := true;
			--	elsif r_parts.MAKE = 'Y' then
			--		--?????
			--		l_acc_flg  := ' ';
			--		l_internal := true;
			--	else
			--		--?????
			--		l_acc_flg  := 'Y';
			--		l_internal := false;
			else
				--???
				l_acc_flg  := ' ';
				l_internal := true;
			end if;
			r_bmlist.ACCOUNT_FLAG		:= l_acc_flg;
			--?????
			if r_parts.IS_LEAF = 1 then
				r_bmlist.PARTS_FLAG		:= 'Y';
			else
				r_bmlist.PARTS_FLAG		:= ' ';
			end if;
			--????
			if r_parts.HIER = 1 or r_parts.CAT_RECORD_FLAG <> '1' then
				insert into P91BMLIST_FI values r_bmlist;
			end if;
			fetch csr_parts into r_parts;
			exit when csr_parts%notfound;
			--?????
			if r_parts.HIER = p_level + 1 then
				expand_bom(p_level + 1, l_qty, l_rate, l_leadtime, l_internal);
			end if;
		end loop;
	end expand_bom;
	--???????
	procedure expand_product(p_product_key in number) is
	begin
		echo('' || to_char(p_product_key, 'FM00000000'));
		r_bmhead					:= r_empty;
		r_bmhead.SECTION_CODE		:= r_product.SECTION_CODE;
		r_bmhead.SECTION_NAME		:= r_product.SHORT_NAME;
		r_bmhead.BM_ITEM_NUMBER		:= r_product.ITEM_NO;
		r_bmhead.BM_ITEM_NAME		:= substrb(r_product.DESCRIPTION,1,30);
		r_bmhead.BM_CATALOG_NO		:= r_product.ITEM;
		r_bmhead.BM_DRAWING_NO		:= r_product.DRAWING_NO;
		r_bmhead.BM_DRAWING_REV		:= r_product.DRAWING_REV;
		r_bmhead.BM_LEVEL_NO		:= r_product.LEVEL_NO;
		r_bmhead.OPERATION_DATE		:= l_regDate;
		r_bmhead.IP_ADDRESS			:= l_ipAddr;
		r_bmhead.EMPLOYEE_CODE		:= l_employee;
		open  csr_parts(p_product_key);
		fetch csr_parts into r_parts;
		expand_bom(1, 1, 0, 0, true);
		if csr_parts%found then 
			close csr_parts;
			raise_application_error(-20911, 'Incorrect BOM structure.');
		end if;
		close csr_parts;
		check_point('    expanded');
	exception
	when others then
		if csr_parts%isopen then
			close csr_parts;
		end if;
		raise_application_error(-20999, sqlerrm || '  EDPKEY=' || to_char(p_product_key, 'FM00000000'));
	end expand_product;
/*---------- ??? ----------*/
begin
	process_start();
	Return_Code := -1;
	Return_Msg  := null;
	--???????
	check_point('???????');
	delete from P91BMLIST_FI;
	--??????
	open csr_product;
	loop
		fetch csr_product into r_product;
		exit when csr_product%notfound;
		expand_product(r_product.ITEM_NO);
	end loop;
	close csr_product;
--????/??????
--	check_point('????');
--	commit work;
	Return_Code := 0;
	Return_Msg  := null;
	process_end();
	echo('ReturnCode: ' || to_char(Return_Code));
exception
when others then
--	rollback work;
	if csr_product%isopen then
		close csr_product;
	end if;
	Return_Code := sqlcode;
	Return_Msg  := sqlerrm;
	if Return_Code = 0 then
		Return_Code := -32768;
	end if;
	echo('ReturnCode: ' || to_char(Return_Code));
	echo('message:    ' || Return_Msg);
end;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."Z99A02951PP_TEST" 
/*----------------------------------------------------------------------
  PROCEDURE: ???? P-GLOSAS? (Z99A02951PP)
?
  ????:
      Return_Code: ????:0, ????:0??
      Return_Msg:  ????????
----------------------------------------------------------------------
  2014/12/23  H.Suzuki      ????
----------------------------------------------------------------------*/
(
	Return_Code OUT number,
	Return_Msg  OUT varchar2
) as
/*
declare
	Return_Code number(5)      := 0;
	Return_Msg  varchar2(2048) := null;
*/
/*---------- ???? ----------*/
	subtype ty_bom_qty		is number(30,15);
	subtype ty_fail_rate	is number(13,10);
/*---------- ?? ----------*/
	--????
	start_time		constant date	:= sysdate;
/*---------- ???? ----------*/
	--????
	cursor csr_product is
		select b.SECTION_CODE, s.SHORT_NAME, b.ITEM_NO, b.DESCRIPTION
		     , b.ITEM, b.DRAWING_NO, b.DRAWING_REV, a.LEVEL_NO
		  from LEVELD a
		  join ITEM_HAGAI b
		    on b.ITEM_NO  = a.LEVEL_CONT_KEY
		  left join SECTION s
		    on s.SECTION_CODE = b.SECTION_CODE
		 where a.LEVEL_NO = ( select max(x.LEVEL_NO) from LEVELD x where x.LEVEL_CONT_KEY = b.ITEM_NO)
		   and b.SECTION_CODE = '100'
	;
	r_product csr_product%rowtype;
	--?????
	cursor csr_parts(p_product_key in number) is
--		select connect_by_root x.UPPER_ITEM_NO as ITEM_NO
--		     , level as HIER, connect_by_isLeaf as IS_LEAF
		select p_product_key as ITEM_NO
		     , level as HIER
		     , case when level < lead(level) over(order by rownum) then 0 else 1 end as IS_LEAF
		     , replace(sys_connect_by_path(x.REFERENCE_NUMBER, ':'), ':') as SORT_KEY
		     , x.UPPER_ITEM_NO, x.LEVEL_NO, x.LINE_NO, x.REFERENCE_NUMBER
		     , x.LOWER_ITEM_NO, x.QUANTITY, x.QUANTITY_BASE, x.FAILURE_RATE
		     , x.USER_SUPPLY_FLAG, x.SUBCON_SUPPLY_FLAG
		     , x.ITEM_TYPE2, x.DESCRIPTION, x.ITEM, x.CATALOG_NO
		     , x.DRAWING_NO, x.DRAWING_REV, x.DRAWING_NO_REV
		     , x.ORDER_POLICY, x.ISSUE_POLICY, x.UNIT_ENGINEERING, x.UNIT_STOCK
		     , x.UNIT_ENGINEER_RATE, x.UNIT_STOCK_RATE, x.MANUFACT_FAIL_RATE
		     , x.SUPPLIER_CODE, x.INSPECTION_FLAG, x.ITEM_FLAG
		     , x.MANUFACT_LEADTIME, x.CAT_RECORD_FLAG
		  from (
				select a.*
				     , c.ITEM_TYPE2, c.DESCRIPTION, c.ITEM, c.CATALOG_NO, c.DRAWING_NO, c.DRAWING_REV
				     , rpad(c.DRAWING_NO, 20, ' ') || nvl(c.DRAWING_REV, ' ') as DRAWING_NO_REV
				     , c.ORDER_POLICY, c.ISSUE_POLICY, c.UNIT_ENGINEERING, c.UNIT_STOCK
				     , nvl(c.MANUFACT_FAIL_RATE, 0) as MANUFACT_FAIL_RATE
				     , nvl(c.UNIT_ENGINEER_RATE, 1) as UNIT_ENGINEER_RATE
				     , nvl(c.UNIT_STOCK_RATE,    1) as UNIT_STOCK_RATE
				     , nvl(c.MANUFACT_LEADTIME,  0) as MANUFACT_LEADTIME
				     , c.SUPPLIER_CODE, c.MAK, null as SHIPTO_CODE, null as BUYER_CODE
				     , null as INSPECTION_FLAG, c.ITEM_FLAG, ' ' as CAT_RECORD_FLAG
				  from STRUCTURE a
				  join ITEM_HAGAI c
				    on c.ITEM_NO = a.LOWER_ITEM_NO
				 where a.LEVEL_NO = nvl((select max(LEVEL_NO) from LEVELD b
										  where b.ITEM_NO = a.UPPER_ITEM_NO), a.LEVEL_NO)
		       ) x
		start with x.UPPER_ITEM_NO = p_product_key
		connect by prior x.LOWER_ITEM_NO = x.UPPER_ITEM_NO
	;
	r_parts csr_parts%rowtype;
	--?????
	cursor csr_itemmaker(p_item_number in number) is
		select d.ITEM_NO, d.SUPPLIER_CODE, d.ESTIMATE_PRICE
		  from ITEMMAKER d
		 where d.ITEM_NO = p_item_number
		 order by ITEM_NO, ALTER_PROCEDURE, LINE_NO
	;
	r_itemmaker csr_itemmaker%rowtype;
	--?????
	cursor csr_unit(p_unit_cd in number) is
		select u.UNIT_CODE, u.UNIT
		  from UNIT u
		 where u.UNIT_CODE = p_unit_cd
	;
	r_unit csr_unit%rowtype;
/*---------- ?? ----------*/
	l_today			date := trunc(start_time, 'j');
	l_regDate		P91BMLIST_FI.OPERATION_DATE%type	:= start_time;
	l_ipAddr		P91BMLIST_FI.IP_ADDRESS%type		:= '1.1.1.1';
	l_employee		P91BMLIST_FI.EMPLOYEE_CODE%type		:= '99999';
	r_bmlist		P91BMLIST_FI%rowtype;
	r_bmhead		P91BMLIST_FI%rowtype;
	r_empty			P91BMLIST_FI%rowtype;
/*---------- ?? ----------*/
	--????
	procedure process_start is
	begin
		null;
		DBMS_OUTPUT.ENABLE(1000000);
		DBMS_OUTPUT.PUT_LINE('Z99A02951PP??  ' || to_char(start_time, 'YYYY/MM/DD hh24:mi:ss'));
	end process_start;
	--????
	procedure process_end is
	begin
		null;
		DBMS_OUTPUT.PUT('Z99A02951PP??  ' || to_char(sysdate, 'YYYY/MM/DD hh24:mi:ss'));
		DBMS_OUTPUT.PUT_LINE(' ( spent ' || to_char(trunc((sysdate - start_time) * 86400, 3)) || 'sec )');
	end process_end;
	--??????
	procedure check_point(p_msg in varchar2) is
	begin
		null;
		--DBMS_OUTPUT.PUT_LINE(p_msg || ' >> ' || to_char(trunc((sysdate - start_time) * 86400, 3)) || 'sec');
	end check_point;
	--???????
	procedure echo(p_msg in varchar2) is
	begin
		null;
		--DBMS_OUTPUT.PUT_LINE(p_msg);
	end echo;
/*---------- ?? ----------*/
	--?????
	--	p_level				??????
	--	p_demand_qty		???????
	--	p_fail_rate			???????
	--	p_leadtime			????????
	--	p_internal			true:???  false:???
	procedure expand_bom(p_level in number,
						 p_demand_qty in number, p_fail_rate in number,
						 p_leadtime in number, p_internal in boolean) is
		l_qty		ty_bom_qty;
		l_uqty		ty_bom_qty;
		l_dqty		ty_bom_qty;
		l_rate		ty_fail_rate;
		l_leadtime	P91BMLIST_FI.BOM_LEADTIME%type;
		l_acc_flg	P91BMLIST_FI.ACCOUNT_FLAG%type;
		l_internal	boolean;
	begin
		loop
			exit when csr_parts%notfound;
			exit when r_parts.HIER <> p_level;
			r_bmlist					:= r_bmhead;
			r_bmlist.SORT_KEY1			:= substr(r_parts.SORT_KEY, 1, 100);
			r_bmlist.LEVEL_CODE			:= r_parts.HIER;
			r_bmlist.REFERENCE_NUMBER	:= r_parts.REFERENCE_NUMBER;
			r_bmlist.UPPER_ITEM_NUMBER	:= r_parts.UPPER_ITEM_NO;
			r_bmlist.LOWER_ITEM_NUMBER	:= r_parts.LOWER_ITEM_NO;
			r_bmlist.ITEM_TYPE2			:= r_parts.ITEM_TYPE2;
			r_bmlist.ITEM_NAME			:= r_parts.DESCRIPTION;
			r_bmlist.CATALOG_NO			:= r_parts.CATALOG_NO;
			r_bmlist.ITEM_DESCRIPTION	:= substr(r_parts.ITEM, 1, 30);
			r_bmlist.DRAWING_NO			:= r_parts.DRAWING_NO;
			r_bmlist.DRAWING_REV		:= r_parts.DRAWING_REV;
			r_bmlist.ORDER_POLICY		:= r_parts.ORDER_POLICY;
			r_bmlist.ISSUE_POLICY		:= r_parts.ISSUE_POLICY;
			r_bmlist.UNIT_ENGINEER_CODE	:= r_parts.UNIT_ENGINEERING;
			r_bmlist.UNIT_STOCK_CODE	:= r_parts.UNIT_STOCK;
			r_bmlist.UNIT_ENGINEER_RATE	:= r_parts.UNIT_ENGINEER_RATE;
			r_bmlist.UNIT_STOCK_RATE	:= r_parts.UNIT_STOCK_RATE;
			r_bmlist.QUANTITY			:= r_parts.QUANTITY;
			r_bmlist.QUANTITY_BASE		:= r_parts.QUANTITY_BASE;
			r_bmlist.FAILURE_RATE		:= r_parts.FAILURE_RATE;
			r_bmlist.USER_SUPPLY_FLAG	:= r_parts.USER_SUPPLY_FLAG;
			r_bmlist.SUBCON_SUPPLY_FLAG	:= r_parts.SUBCON_SUPPLY_FLAG;
			r_bmlist.VALID_LEVEL		:= r_parts.LEVEL_NO;
			r_bmlist.INVALID_LEVEL		:= r_parts.LEVEL_NO;
			r_bmlist.ITEM_FLAG			:= r_parts.ITEM_FLAG;
			if r_parts.HIER > 1 then
				r_bmlist.VALID_LEVEL	:= 0;
			end if;
			--??????
			open  csr_itemmaker(r_parts.LOWER_ITEM_NO);
			fetch csr_itemmaker into r_itemmaker;
			if csr_itemmaker%found then
				r_bmlist.STATION_CODE	:= r_itemmaker.SUPPLIER_CODE;
				r_bmlist.ESTIMATE_PRICE	:= r_itemmaker.ESTIMATE_PRICE;
			end if;
			close csr_itemmaker;
			--??????
			open  csr_unit(r_parts.UNIT_ENGINEERING);
			fetch csr_unit into r_unit;
			if csr_unit%found then
				r_bmlist.UNIT_ENGINEERING := r_unit.UNIT;
			end if;
			close csr_unit;
			--??????
			open  csr_unit(r_parts.UNIT_STOCK);
			fetch csr_unit into r_unit;
			if csr_unit%found then
				r_bmlist.UNIT_STOCK		:= r_unit.UNIT;
			end if;
			close csr_unit;
			--??
			l_uqty := r_parts.QUANTITY;
			l_dqty := r_parts.QUANTITY_BASE;
			--???? (?????????)
			if nvl(l_dqty, 0) = 0 then
				l_dqty := null;
			elsif r_parts.UNIT_STOCK_RATE = 0 and r_parts.UNIT_ENGINEER_RATE = 0 then
				--l_dqty := null;
				null;
			elsif r_parts.UNIT_STOCK_RATE = 0 or r_parts.UNIT_ENGINEER_RATE = 0 then
				l_dqty := null;
			elsif r_parts.UNIT_STOCK_RATE <> r_parts.UNIT_ENGINEER_RATE then
				l_dqty := l_dqty * r_parts.UNIT_ENGINEER_RATE / r_parts.UNIT_STOCK_RATE;
			end if;
			--??? = (1 + ???????) * (1 + ??????? + ??????) - 1
			--l_rate := ( ( 1 + p_fail_rate / 100 ) * ( 1 + r_parts.FAILURE_RATE / 100 + r_parts.MANUFACT_FAIL_RATE / 100 ) - 1 ) * 100;
			l_rate := r_parts.FAILURE_RATE + r_parts.MANUFACT_FAIL_RATE;
			l_rate := p_fail_rate + l_rate + p_fail_rate * l_rate / 100;
			--????? = ??????? * ?????
			l_qty := p_demand_qty * l_uqty / l_dqty;
			r_bmlist.BOM_QTY			:= trunc(l_qty, 12);
			r_bmlist.BOM_FAIL_RATE		:= round(l_rate, 3);
			--??????
			l_leadtime := p_leadtime + r_parts.MANUFACT_LEADTIME;
			r_bmlist.MANUFACT_LEADTIME	:= r_parts.MANUFACT_LEADTIME;
			r_bmlist.BOM_LEADTIME		:= p_leadtime;
			--?????
			if not p_internal then
				--?????
				l_acc_flg  := ' ';
				l_internal := false;
			elsif r_parts.IS_LEAF = 1 then
				--??
				l_acc_flg  := 'Y';
				l_internal := true;
			--	elsif r_parts.MAKE = 'Y' then
			--		--?????
			--		l_acc_flg  := ' ';
			--		l_internal := true;
			--	else
			--		--?????
			--		l_acc_flg  := 'Y';
			--		l_internal := false;
			else
				--???
				l_acc_flg  := ' ';
				l_internal := true;
			end if;
			r_bmlist.ACCOUNT_FLAG		:= l_acc_flg;
			--?????
			if r_parts.IS_LEAF = 1 then
				r_bmlist.PARTS_FLAG		:= 'Y';
			else
				r_bmlist.PARTS_FLAG		:= ' ';
			end if;
			--????
			if r_parts.HIER = 1 or r_parts.CAT_RECORD_FLAG <> '1' then
				insert into P91BMLIST_FI values r_bmlist;
			end if;
			fetch csr_parts into r_parts;
			exit when csr_parts%notfound;
			--?????
			if r_parts.HIER = p_level + 1 then
				expand_bom(p_level + 1, l_qty, l_rate, l_leadtime, l_internal);
			end if;
		end loop;
	end expand_bom;
	--???????
	procedure expand_product(p_product_key in number) is
	begin
		echo('' || to_char(p_product_key, 'FM00000000'));
		r_bmhead					:= r_empty;
		r_bmhead.SECTION_CODE		:= r_product.SECTION_CODE;
		r_bmhead.SECTION_NAME		:= r_product.SHORT_NAME;
		r_bmhead.BM_ITEM_NUMBER		:= r_product.ITEM_NO;
		r_bmhead.BM_ITEM_NAME		:= r_product.DESCRIPTION;
		r_bmhead.BM_CATALOG_NO		:= r_product.ITEM;
		r_bmhead.BM_DRAWING_NO		:= r_product.DRAWING_NO;
		r_bmhead.BM_DRAWING_REV		:= r_product.DRAWING_REV;
		r_bmhead.BM_LEVEL_NO		:= r_product.LEVEL_NO;
		r_bmhead.OPERATION_DATE		:= l_regDate;
		r_bmhead.IP_ADDRESS			:= l_ipAddr;
		r_bmhead.EMPLOYEE_CODE		:= l_employee;
		open  csr_parts(p_product_key);
		fetch csr_parts into r_parts;
		expand_bom(1, 1, 0, 0, true);
		if csr_parts%found then 
			close csr_parts;
			raise_application_error(-20911, 'Incorrect BOM structure.');
		end if;
		close csr_parts;
		check_point('    expanded');
	exception
	when others then
		if csr_parts%isopen then
			close csr_parts;
		end if;
		raise_application_error(-20999, sqlerrm || '  EDPKEY=' || to_char(p_product_key, 'FM00000000'));
	end expand_product;
/*---------- ??? ----------*/
begin
	process_start();
	Return_Code := -1;
	Return_Msg  := null;
	--???????
	check_point('???????');
	delete from P91BMLIST_FI;
	--??????
	open csr_product;
	loop
		fetch csr_product into r_product;
		exit when csr_product%notfound;
		expand_product(r_product.ITEM_NO);
	end loop;
	close csr_product;
--????/??????
--	check_point('????');
--	commit work;
	Return_Code := 0;
	Return_Msg  := null;
	process_end();
	echo('ReturnCode: ' || to_char(Return_Code));
exception
when others then
--	rollback work;
	if csr_product%isopen then
		close csr_product;
	end if;
	Return_Code := sqlcode;
	Return_Msg  := sqlerrm;
	if Return_Code = 0 then
		Return_Code := -32768;
	end if;
	echo('ReturnCode: ' || to_char(Return_Code));
	echo('message:    ' || Return_Msg);
end;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."Z99A03100PP" (para_inumber in number,
                                         para_onumber out number)
as
-- ???? 2001/12/28 m.kamiyama
--  + ???0.99?????????????
--  - ???0.99?????????????
begin
if para_inumber <> 0 then
 if para_inumber > 0 then
  para_onumber := trunc(para_inumber + 0.99);
 end if;
 if para_inumber < 0 then
  para_onumber := trunc(para_inumber - 0.99);
 end if;
else
 para_onumber := 0;
end if;
end z99a03100pp;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_CALC_MPS" is


c_qty number;
c_qty_d number;
c_Date date;
c_item VARCHAR(100);
c_po_no VARCHAR(100);
c_po_line_no VARCHAR(100);
c_po_no_d VARCHAR(100);
c_po_line_no_d VARCHAR(100);


cursor c_mps is
select distinct r.po_no, r.po_line_no,  r.qty - nvl(qty_prod,nvl(cc.production,0)) - nvl(sum(s.mps_qty),0) Qty
from mps_header r
left outer join (select * from mps_details where mps_date > (select trim(sysdate+90) from dual)) s
on r.po_line_no = s.po_line_no and r.po_no = s.po_no
left outer join (select sum(slip_quantity) Production, wo_no from production_income group by wo_no) cc
on r.work_order = cc.wo_no
left outer join (select wo_no,nvl(sum(qty_prod),0) qty_prod from 
                    (select distinct wo_no,plt_no,qty_prod,qty_order from ztb_m_plan where upload = 1 ) group by wo_no)dd
on r.work_order = dd.wo_no
where r.status is not null --and r.work_order = '0010194-LR03C1-1'--and r.po_no = '0010194'--and r.po_no = '18FI075' and r.po_line_no = 1
      and r.po_no|| r.po_line_no not in (
        select distinct r.po_no|| r.po_line_no 
        from mps_header r
        left outer join mps_details s
        on r.po_no = s.po_no and r.po_line_no = s.po_line_no
        where s.po_no is null
      )
group by r.po_no, r.po_line_no,production,r.qty,qty_prod
having r.qty - nvl(cc.production,0) - nvl(sum(s.mps_qty),0) > 0;

cursor c_mps_insert (param1 in varchar,param2 varchar) is
select po_no, po_line_no, mps_date, mps_qty from mps_details
where po_no = trim(param1) and po_line_no = trim(param2)
and mps_date between (select trim(sysdate+1) from dual) and (select trim(sysdate+90) from dual)
order by mps_date;
      
begin
  delete ztb_mps_details;
   open c_mps;
    loop
      fetch c_mps into c_po_no,c_po_line_no,c_qty;
      exit when c_mps%notfound;
        begin
            
          open c_mps_insert(c_po_no,c_po_line_no);
            loop
              fetch c_mps_insert into c_po_no_d,c_po_line_no_d,c_date,c_qty_d;
              if c_mps_insert%notfound then
                  insert into ztb_mps_details (po_no,po_line_no,mps_date,mps_qty,upload_date)
                  select c_po_no,c_po_line_no,sysdate + 1,c_qty,sysdate from dual;  
                exit;
              end if;
              begin
                if c_qty > c_qty_d THEN
                  insert into ztb_mps_details (po_no,po_line_no,mps_date,mps_qty,upload_date)
                  select c_po_no_d,c_po_line_no_d,c_Date,c_qty_d,sysdate from dual;  
                  c_qty := c_qty - c_qty_d;
                ELSIF  c_qty <= c_qty_d THEN   
                  insert into ztb_mps_details (po_no,po_line_no,mps_date,mps_qty,upload_date)
                  select c_po_no_d,c_po_line_no_d,c_Date,c_qty,sysdate from dual;  
                  c_qty := 0;
                end if;
              end;
            end loop;
          close c_mps_insert;
            
        end;
    end loop;
   close c_mps;


end;
  
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_FG_CREATE_FIFO" 

is 


c_this_inventory varchar(100); 
c_item_no varchar(100); 
v_number number := 0;
I number := 1;

c_item_no2 varchar(100); 
c_wo_no varchar(100);
c_date varchar(100);
c_qty number;


CURSOR C_Item IS
select w.item_no, this_inventory from whinventory w
where this_inventory > 0 and ((item_no between 10000 and 99999) or(item_no between 70000000 and 79999999 ))  
order by w.item_no desc;

  
    
    
--    select t.item_no,w.this_inventory from item t 
--    inner join whinventory w
--    on t.item_no = w.item_no
--    where  t.cost_subject_code = '136010' --and t.item_no = '1110057'
--    and  t.item not in ('SCRAP NPS','SCRAP GEL LR','SCRAP GEL LR','A. DISK AFT DEGREASE','AFTER TP','HALF BATTERY','LABELED BATTERY','NAKED BATTERY','AFTER TP','PACKED BATTERY','CCR AFTER PLATING','BATTERY AFTER WEIGHT CHECKER','SCRAP BLACK MIX LR')
--    order by item;
--      

CURSOR C_GR(PARAM1 IN VARCHAR2) IS
select transaction.item_no,nvl(wo_no, slip_no) as wo_no,slip_date,slip_quantity 
from production_income transaction 
left outer join (select distinct work_no from answer left outer join indication on answer.answer_no = indication.answer_no where commit_Date is null)answer 
on transaction.wo_no = answer.work_no
where transaction.slip_type = '80' 
and transaction.item_no  = PARAM1 and transaction.slip_no not like '%FG%'   
order by transaction.slip_date desc;

--select item_no,nvl(wo_no, slip_no) as wo_no,slip_date,slip_quantity from transaction where slip_type = '80' 
--and item_no  = PARAM1 and slip_no not like '%FG%'
--    and nvl(wo_no, slip_no) not in (select work_no from answer an 
--                        inner join indication ind on an.answer_no = ind.answer_no
--                        where  an.item_no = PARAM1 and commit_Date is not null and work_no is not null)
--order by slip_date desc;


      
BEGIN
v_number := 0;
delete from ztb_FG_fifo;


OPEN C_Item; 
   LOOP 
   FETCH C_Item into c_item_no,c_this_inventory; 
      EXIT WHEN C_Item%notfound; 
      begin
      v_number := 0;
      v_number := c_this_inventory;
      
      
      --Cursor c_GR
      open C_GR(c_item_no);
      LOOP
      FETCH C_GR into c_item_no2,c_wo_no,c_date,c_qty;
          EXIT WHEN C_GR%notfound; 
          begin
          
          if v_number - c_qty > 0 then 
            v_number := v_number  - c_qty;
            insert into ztb_FG_fifo (item_no, wo_no, tanggal,qty) values (c_item_no,c_wo_no,c_date ,c_qty);
            commit;
          else 
            insert into ztb_FG_fifo (item_no, wo_no, tanggal,qty) values (c_item_no,c_wo_no,c_date,v_number);
            v_number := 0;
            commit;
            EXIT ;
          end if;
          i := i+1;
          end;
      END LOOP;
      CLOSE C_GR; 
      
      end;
END LOOP; 
CLOSE C_Item; 


END;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_FG_KURAIRE" (p IN NUMBER, x IN OUT NUMBER, y OUT NUMBER)
IS
BEGIN
   x:=x * p;
   y:=4 * p;
END;



/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_GR_DELETE" (
  V_GR_NO IN VARCHAR
)
IS

--declare varibale
c_Quantity varchar(100); 
c_po_no varchar(100); 
c_po_Line_no varchar(100); 
c_gr_date varchar(100); 
c_item_no varchar(100); 
v_this_month varchar(20);
v_month varchar(10);
v_month2 varchar(10);
v_issue_to_code varchar(20):='100001';
v_ret_no number:=0;
v_sec_no number:=100;
v_table_position number:=1;

--Cursor GR
CURSOR c_gr_det is 
SELECT s.po_no,
       s.po_line_no,
       s.qty,
       s.item_no,
       r.gr_date
from gr_details s
inner join gr_header r
on s.gr_no = r.gr_no
where  s.gr_no = V_GR_NO  ; 



--SELECT gr_qty, item_no,gr_date, (select table_position from sliptype where sliptype.slip_type = ztb_gr_temp.slip_type) 
--FROM ztb_gr_temp
--where  gr_sts = 'DETAILS';

BEGIN

--Cek Bulan
select distinct trim(to_char(gr_date,'yyyymm')) into v_month from gr_header where gr_no = V_GR_NO;
select distinct trim(this_month) into v_month2 from whinventory ;


-- UPDATE PO_DETAILS
OPEN c_gr_det; 
   LOOP 
  -- FETCH c_gr_det into c_po_no,c_po_Line_no,c_Quantity,c_gr_date,c_item_no; 
  FETCH c_gr_det into c_po_no,c_po_Line_no,c_Quantity,c_item_no,c_gr_date;  
  
      EXIT WHEN c_gr_det%notfound; 
      begin
    
      update po_details set bal_qty = bal_qty + c_Quantity,
                                gr_qty = gr_qty - c_quantity
      where po_no = c_po_no and line_no = c_po_Line_no and gr_qty - c_quantity >= 0;
      
      --whinventory_set(c_item_no,c_gr_date, c_quantity, v_table_position,v_ret_no,v_sec_no);
      --pcinventory_set(c_item_no,c_gr_date, c_quantity, v_table_position,v_ret_no,v_sec_no,v_issue_to_code);
      
      --INSERT ZSP_WH_ITEM_FIFO USER=2, NAME: UENG, DATE: 30-07-2017
      ZSP_WH_ITEM_FIFO (c_item_no);
      
      IF v_month = v_month2  then
        update whinventory set this_inventory = this_inventory - c_Quantity , 
                                    receive1 = receive1  - c_Quantity  
        where item_no = c_item_no;
      ELSE
         update whinventory set this_inventory = this_inventory - c_Quantity , 
                                     receive2 = receive2  - c_Quantity , 
                                     last_inventory = last_inventory - c_Quantity 
         where item_no = c_item_no;
      END IF;
      commit;
      end;
     
END LOOP; 
CLOSE c_gr_det;  



--DELETE TRANSACTION
delete from transaction where slip_no = V_GR_NO;
--DELETE ACCOUNT_PAYABLE
delete from account_payable where gr_no = V_GR_NO and type=1 ;
--DELETE FDAC_PURCHASE_TRN
delete from fdac_purchase_trn where invoice_no = V_GR_NO;
--DELETE GR_HEADER
delete from gr_header where gr_no = V_GR_NO;
--DELETE GR_DETAILS
delete from gr_details where gr_no = V_GR_NO;

commit;
END ;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_INSERT_GR" 
(
    V_USER IN VARCHAR
)
is

c_po_no varchar(100); 
c_po_Line_no varchar(100); 
c_Quantity varchar(100); 
c_item_no varchar(100); 
c_slip_Date varchar(100); 
c_slip_type varchar(100);
v_issue_to_code varchar(20):='100001';
v_ret_no number:=0;
v_sec_no number:=100;
v_gr_no_x number:=100;


CURSOR c_gr_detail is 
  SELECT distinct po_no,po_line_no,gr_qty, item_no,gr_date, (select table_position from sliptype where sliptype.slip_type = ztb_gr_temp.slip_type) 
  --case h.slip_type when '20' then 1 when '05' then 2 when '21' then 3 when '25' then 4 end   
  FROM ztb_gr_temp
  where  gr_sts = 'DETAILS' and person_code = V_USER; --and gr_no||line_no not in (select gr_no||line_no from gr_details);
  
BEGIN


-- INSERT AP
insert into account_payable (
customer_code, 
bl_no,         
type,                  
payment_date,  
amt,                   
bl_date,       
curr_code,     
rate,          
amt_f,         
reg_date,      
upto_date,     
pdays,         
pdesc,         
gr_no)   
select distinct ztb_gr_temp.supplier_code, 
       gr_no,
       '1',
       gr_date, 
       amt_l,
       due_date,
       curr_code, 
       ex_rate,
       amt_o,
       (select sysdate from dual),
       (select sysdate from dual),
       pdays,
       pdesc,
       gr_no
from ztb_gr_temp 	where gr_sts = 'HEADER' and person_code = V_USER; --and gr_no not in (select gr_no from gr_header);



-- INSERT GR_HEADER
insert into gr_header (
gr_no,  		
gr_date,  		
inv_date,  	
supplier_code,
inv_no,  		
curr_code,  
ex_rate,  		
pdays,  		
pdesc,  		
due_date,  	
remark,  		
amt_o,  		
amt_l,  		
person_code,
slip_type
) 

select distinct gr_no, 
       gr_date,
       gr_date,
       supplier_code,
       gr_no,
       curr_code,
       ex_rate,
       pdays,
       pdesc,
       due_date,
       remark,
       amt_o,
       amt_l,
       person_code, 
       slip_type      
from ztb_gr_temp 	where gr_sts = 'HEADER' and person_code = V_USER; --and gr_no not in (select gr_no from gr_header);




-- INSERT FDAC_PURCHASE_TRN
insert into fdac_purchase_trn (
DATA_TYPE,			
COMPANY_CODE,		
VENDOR_CODE,		
ITEM_NO,			
DATA_DATE,			
QUANTITY,			
PP,				
PP_CURR_CODE,		
PURCHASE_AMOUNT,	
ITEM_TYPE,			
DATA_SOURCE_TYPE,	
CONSUMPTION_TAX,	
NEW_PP,			
LAST_PP,			
CHECK_NO,			
INVOICE_NO,		
OPERATION_DATE,	
INFO_TYPE,			
PURCHASE_DATE,		
PO_DATE,			
PO_NO,				
LINE_NO,			
OPERATION_TYPE,	
ITEM,				
SRC_CLASS_CODE,	
SECTION_CODE,		
PERSON_CODE,		
VENDOR,			
BUY_COUNTRY_CODE
)
select distinct '130',
        '88475',
        ztb_gr_temp.supplier_code,
        item.item_no,
        gr_Date,
        ztb_gr_temp.gr_qty,
        s.u_price,
        ztb_gr_temp.curr_code,
        ztb_gr_temp.amt_o,
        item.stock_subject_code,
        'PGL-FI',
        0,
        0,
        0,
         substr(gr_no,0,23),
         substr(gr_no,0,23),
        (select sysdate from dual),
        0,
        ztb_gr_temp.po_date,
        ztb_gr_temp.po_date,
        ztb_gr_temp.po_no,
        ztb_gr_temp.po_line_no,
        0,
        ztb_gr_temp.description,
        item.class_code,
        '88475',
        'FI99999',
        ztb_gr_temp.supplier_code, 
        ztb_gr_temp.buy_country_code
from  ztb_gr_temp 
inner join item
on item.item_no = ztb_gr_temp.item_no
inner join po_details s
on ztb_gr_temp.po_no = s.po_no and ztb_gr_temp.po_line_no = s.line_no
where gr_sts = 'DETAILS' and person_code = V_USER; --and gr_no||line_no not in (select gr_no||line_no from gr_details);


-- INSERT TRANSACTION
insert into transaction( operation_date,
                         section_code,
                         item_no,
                         item_name,
                         item_description,
                         stock_subject_code,
                         accounting_month,
                         slip_date,
                         slip_type,
                         slip_no,
                         slip_quantity,
                         slip_price,
                         slip_amount,
                         curr_code,
                         standard_price,
                         standard_amount,
                         company_code,
                         cost_process_code,
                         cost_subject_code,
                         suppliers_price,
                         order_number,
                         line_no,
                         purchase_quantity,
                         purchase_price,
                         purchase_amount,
                         purchase_unit,
                         unit_stock
                      ) 
      
select distinct (select sysdate from dual),
        100,
        ztb_gr_temp.item_no,
        ztb_gr_temp.item_name,
        substr(item.description,0,30) as description,
        item.stock_subject_code,
        to_char(ztb_gr_temp.gr_Date,'yyyymm'),
        gr_date, 
        ztb_gr_temp.slip_type, 
        gr_no,
        ztb_gr_temp.gr_qty,
        ztb_gr_temp.gr_u_price,
        ztb_gr_temp.amt_l,
        ztb_gr_temp.curr_code,
        item.standard_price,
        ztb_gr_temp.gr_qty * item.standard_price,
        ztb_gr_temp.supplier_code,
        ztb_gr_temp.cost_process_code,
        ztb_gr_temp.cost_subject_code,
        ztb_gr_temp.suppliers_price,
        ztb_gr_temp.po_no,
        ztb_gr_temp.po_line_no,
        ztb_gr_temp.gr_qty,
        ztb_gr_temp.gr_u_price,
        ztb_gr_temp.amt_l,
        ztb_gr_temp.gr_uom_q,
        ztb_gr_temp.gr_uom_q
from  ztb_gr_temp 
inner join item
on item.item_no = ztb_gr_temp.item_no
inner join po_details s
on ztb_gr_temp.po_no = s.po_no and ztb_gr_temp.po_line_no = s.line_no
where gr_sts = 'DETAILS' and person_code = V_USER; --and ztb_gr_temp.gr_no||ztb_gr_temp.line_no not in (select gr_no||line_no from gr_details);

commit;
--Insert WH Inventory
OPEN c_gr_detail; 
   LOOP 
   FETCH c_gr_detail into c_po_no, c_po_line_no,c_Quantity,c_item_no,c_slip_Date,c_slip_type; 
      EXIT WHEN c_gr_detail%notfound; 
      begin
      
      update po_details set bal_qty = bal_qty - c_Quantity,
                                gr_qty = gr_qty + c_quantity
      where trim(po_no) = trim(c_po_no) and trim(line_no) = trim(c_po_Line_no) and bal_qty >= 0 ;
      
      whinventory_set(c_item_no,c_slip_date, c_quantity, c_slip_type,v_ret_no,v_sec_no);
      pcinventory_set(c_item_no,c_slip_date, c_quantity, c_slip_type,v_ret_no,v_sec_no,v_issue_to_code);
      
      --INSERT ZSP_WH_ITEM_FIFO USER=2, NAME: UENG, DATE: 30-07-2017
      -- ZSP_WH_ITEM_FIFO (c_item_no);
      commit;
      end;
     
END LOOP;
CLOSE c_gr_detail; 



-- INSERT GR_DETAILS
insert into gr_details (
gr_no,	
line_no,	
item_no,	
origin_code,
po_no,		
po_line_no,
qty,		
uom_q,		
u_price,	
amt_o,		
amt_l,		
loc1,		
loc_qty1,
upto_date,
reg_date	
)
select distinct gr_no, 
       ztb_gr_temp.line_no, 
       ztb_gr_temp.item_no, 
       ztb_gr_temp.origin_code,
       ztb_gr_temp.po_no, 
       ztb_gr_temp.po_line_no,
       ztb_gr_temp.gr_qty, 
       item.uom_q, 
       s.u_price,
       ztb_gr_temp.amt_o, 
       ztb_gr_temp.amt_l, 
       '88475', 
       ztb_gr_temp.gr_qty,
       (select sysdate from dual),
       (select sysdate from dual)
from ztb_gr_temp 	
inner join item
on item.item_no = ztb_gr_temp.item_no
inner join po_details s
on ztb_gr_temp.po_no = s.po_no and ztb_gr_temp.po_line_no = s.line_no
where gr_sts = 'DETAILS' and person_code = V_USER; --and gr_no||line_no not in (select gr_no||line_no from gr_details);



update ztb_gr_temp set gr_sts = 'EXISTS' 
where gr_sts <> 'EXISTS' and person_code = V_USER;--and gr_no in (select gr_no from gr_header where gr_Date > '01-JAN-18');

commit;
end;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_INSERT_MT" (
    V_SLIP_NO IN VARCHAR,
    V_PERSON_CODE IN VARCHAR
)
IS

V_Slip_Type number := 0;
v_receive1 number:=0;
v_other_receive1 number:=0;
v_issue1 number:=0;
v_receive1 number:=0;
v_receive1 number:=0;
v_ret_no number:=0;
v_sec_no number:=100;
v_issue_to_code varchar(20):='100001';
v_oke number := 0;

c_Quantity varchar(100); 
c_item_no varchar(100); 
c_slip_Date varchar(100); 
c_slip_type varchar(100);

--Cursor Untuk Iterasi Detail
CURSOR c_mte is 
SELECT d.qty, d.item_no,h.slip_date, (select sliptype.table_position from sliptype where sliptype.slip_type = h.slip_type) 
--case h.slip_type when '20' then 1 when '05' then 2 when '21' then 3 when '25' then 4 end   
FROM mte_header h
inner join mte_details d 
on h.slip_no = d.slip_no where approval_date is null and h.slip_no = v_slip_no  ; 

Begin
--cek isi material dengan inventory
select COUNT(1) into v_oke
from ( select this_inventory
from mte_details md
inner join whinventory w
on md.item_no = w.item_no
where slip_no = V_SLIP_NO and substr(V_SLIP_NO, 0, 3) != 'RMT'
group by md.item_no,this_inventory
having  this_inventory < sum(md.qty)
)aa;

IF v_oke <> 1 Then 
  ----Insert Transaction
  insert into transaction( operation_date,
                         section_code,
                         item_no,
                         item_name,
                         item_description,
                         stock_subject_code,
                         accounting_month,
                         slip_date,
                         slip_type,
                         slip_no,
                         slip_quantity,
                         slip_price,
                         slip_amount,
                         curr_code,
                         standard_price,
                         standard_amount,
                         company_code,
                         cost_process_code,
                         cost_subject_code,
                         unit_stock,
                         wo_no,
                         item_type2,
                         rack_addr
                      ) 
  select sysdate,
       h.section_code,
       d.item_no,
       id.item,
       substr(id.description,0,29),
       id.stock_subject_code,
       to_char(h.slip_date,'yyyymm'),
       h.slip_date,
       h.slip_type,
       h.slip_no,
       d.qty,
       id.standard_price,
       round(nvl(id.standard_price,0) * nvl(d.qty,0),6) ,
       nvl(id.curr_code,1),
       id.standard_price,
       round(nvl(id.standard_price,0) * nvl(d.qty,0),6) ,
       h.company_code,
       d.cost_process_code,
       id.cost_subject_code,
       id.uom_q, 
       d.wo_no,
       d.item_type2, 
       d.rack_addr
  from mte_header  h 
     inner join mte_details d
     on h.slip_no = d.slip_no
     inner join item id 
     on d.item_no = id.item_no  
  where h.slip_no= V_SLIP_NO AND h.approval_date is null AND h.approval_person_code is null;
  commit;

  --Insert WH Inventory
  OPEN c_mte; 
    LOOP 
    FETCH c_mte into c_Quantity,c_item_no,c_slip_Date,c_slip_type; 
      EXIT WHEN c_mte%notfound; 
      begin
      whinventory_set(c_item_no,c_slip_date, c_quantity, c_slip_type,v_ret_no,v_sec_no);
      pcinventory_set(c_item_no,c_slip_date, c_quantity, c_slip_type,v_ret_no,v_sec_no,v_issue_to_code);
      
      --INSERT ZSP_WH_ITEM_FIFO USER=2, NAME: UENG, DATE: 30-07-2017
      ZSP_WH_ITEM_FIFO (c_item_no);
      commit;
      end;
  END LOOP; 
  CLOSE c_mte;  

  --Update Approval Coda and Approval Person
  update mte_header set 
  approval_date = sysdate,
  approval_person_code = V_PERSON_CODE 
  where slip_no = V_SLIP_NO;
  commit;

else
  insert into ZTB_MESSAGE (type_pesan,isi_pesan, operation_date) values ('MT',v_slip_no, sysdate);
  commit; 
end if;

END ;
 


     
                         
                         
    
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_INSERT_PO" 
(
     v_supplier_code in ztb_po_header.supplier_code%TYPE,
     v_PO_no IN ztb_po_header.PO_NO%TYPE,
	   V_PO_DATE IN ztb_po_header.PO_Date%TYPE
   )
is

v_hitungPO number;
v_hitungLinePO number;
v_PO_amt_L number;
v_PO_Amt_o number;

begin

insert into ztb_po_header(po_no, 
                          supplier_code,
                          po_date)
values (v_po_no, 
        v_supplier_code,
        V_PO_DATE);

end;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_INSERT_PO_1" (
    V_PO_NO IN varchar,
    V_SUPPLIER_CODE IN varchar,
    V_PO_DATE IN date,
    V_CURR_CODE IN varchar, 
    V_EX_RATE  IN varchar, 
    V_TTERM IN varchar,
    V_PDAYS IN varchar,
    V_PDESC IN varchar,
    V_REQ IN varchar,
    V_REMARK1 IN varchar,
    V_MARKS1 IN varchar,
    V_ATTN IN varchar,
    V_PERSON_CODE IN varchar,
    V_ITEM_NO IN varchar,
    V_PBY IN varchar,
    V_SHIPTO_CODE IN varchar,
    V_TRANSPORT IN varchar,
    V_DI_OUTPUT_TYPE IN varchar,
    V_PRF_NO IN varchar, 
    V_PRF_LINE_NO IN varchar,
    V_ORIGIN_CODE IN varchar,
    V_QTY IN varchar,
    V_UOM_Q IN varchar,
    V_U_PRICE IN varchar,
    V_D_AMT_O IN varchar,
    V_D_AMT_L IN varchar, 
    V_ETA IN varchar,
    V_SCHEDULE IN varchar,
    V_BAL_QTY IN varchar,
    V_CARVED_STAMP IN varchar,
    V_FROM NUMBER,
    V_TO NUMBER
)as 

v_hitungPO number;

begin


delete from po_details where po_no = v_po_no  and line_no = v_from;

insert into po_details (po_no,
                       line_no,
                       prf_no,
                      prf_line_no,
                        item_no,
                        origin_code,
                        qty,
                        uom_q,
                        u_price,
                        amt_o ,
                        amt_l,
                        eta,
                        schedule,
                        gr_qty,
                        sh_qty,
                        pret_qty,
                        bal_qty,
                        upto_date,
                        reg_date,
                        carved_stamp
)values ( v_po_no ,
           v_from ,
             v_prf_no,
         v_prf_line_no,
         v_item_no,
          v_origin_code,
          v_qty,
          v_uom_q,
          v_u_price,
          v_d_amt_o ,
          v_d_amt_l,
          v_eta,
          v_schedule,
          0,
          0,
          0,
          v_bal_qty,
          sysdate,
          sysdate,
          v_carved_stamp
);

update PRF_DETAILS set REMAINDER_QTY = QTY - V_QTY, UPTO_DATE = sysdate	where PRF_NO = v_prf_no and LINE_NO = v_prf_line_no;

COMMIT;

select nvl(count(po_no),0) into v_hitungpo from po_details where po_no = v_po_no;


if v_hitungPO = 1 THEN
 
  
  insert into po_header (supplier_code, 
                             po_no,
                             po_date,
                             curr_code,
                             ex_rate,
                             tterm,
                             pdays,
                             pdesc,
                             req, 
                             remark1,
                             marks1,
                             attn,
                             person_code,
                             pby,
                             upto_Date,
                             reg_date,
                             section_code,
                             shipto_code,
                             transport,
                             di_output_type
                             ) 
  values (v_supplier_code,
          v_po_no,
          v_po_date,
          v_curr_code,
          v_ex_rate,
          v_tterm,
          v_pdays,
          v_pdesc, 
          v_req,
          V_MARKS1 ,
          V_REMARK1,
          v_attn,
          v_person_code,
          v_tterm,
          sysdate,
          sysdate,
          100,
          v_shipto_code,
          v_transport,
          v_di_output_type
          );

  
commit;

end if;

update po_header set amt_o = nvl(amt_o,0) + v_d_amt_o,amt_l = nvl(amt_l,0) + v_d_amt_l where po_no = v_po_no;

commit;


end;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_KANBAN_PRINT" (
    V_USER IN VARCHAR,
    V_WO_NO in varchar,
    V_TYPE in VARCHAR
) is  

c_wo_no varchar(100); 
c_pallet varchar(100); 
c_flag number := 1;

cursor c_run_packing is
select work_order,
       ceil(r.qty/ pi.pallet_unit_number) Pallet
from mps_header r
inner join item i on r.item_no = i.item_no
inner join packing_information pi on i.pi_no = pi.pi_no
where work_order = V_WO_NO;




BEGIN

  delete from  ztb_kanban_print_temp where user_name = v_user;
  open c_run_packing;
      LOOP
      FETCH c_run_packing into c_wo_no,c_pallet;
          EXIT WHEN c_run_packing%notfound; 
          begin
            while c_flag <= c_pallet 
            loop
                insert into ztb_kanban_print_temp (USER_NAME, wo_no, plt_no, tanggal)
                select V_USER,
                       c_wo_no,
                       c_flag, 
                       case when V_TYPE = 'PACKING' Then 
                          (select  max(tanggal) from ztb_kanban_print where wo_no = c_wo_no and plt_no = c_flag) 
                       else (select  max(tanggal) from ztb_kanban_print_label where wo_no = c_wo_no and plt_no = c_flag)  end tanggal
                from dual;
                c_flag := c_flag + 1;
            end loop;
          end;
      END LOOP;
  CLOSE c_run_packing; 


END;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_MRP_MATERIAL" is

v_1 VARCHAR(100) := 0;
v_4 VARCHAR(100) := 0;
v_8 VARCHAR(100) := 0;
v_tot integer := 0;
v_uom varchar(10) := '';
v_Month_Diff integer := 0;
v_month VARCHAR(10) := '';
c_item_no VARCHAR(10) := '';
c_description VARCHAR(100) := '';
c_item_type VARCHAR(100) := '';
v_str VARCHAR(32000) := '';
v_rata varchar(20) := 0;
v_Date date := sysdate;
v_from VARCHAR(10) := 0;
v_to VARCHAR(10) := 90;
v_plan number := 0;
v_purchase number :=0;
v_arrival number := 0;
v_rata1 number := 0;
v_rata2 number := 0;
v_rata3 number := 0;
v_rata4 number := 0;
v_inventory VARCHAR(100) := 0;
v_month1 date := sysdate;
v_month2 date := add_months(sysdate,1);
v_month3 date := add_months(sysdate,1);
v_ito VARCHAR(100) := 0;
v_ito_max VARCHAR(100) := 0;
v_ito_min VARCHAR(100) := 0;
v_outstanding VARCHAR(100) := 0;
 v_plan1 Number := 0;
              v_plan2 Number := 0;
              v_plan3 Number := 0;
              v_plan4 Number := 0;
              v_plan5 Number := 0;
              v_plan6 Number := 0; 
              v_plan7 Number := 0;
              v_plan8 Number := 0;
              v_plan9 Number := 0;
              v_plan10 Number := 0;
              v_plan11 Number := 0;
              v_plan12 Number := 0;
              v_plan13 Number := 0;
              v_plan14 Number := 0;
              v_plan15 Number := 0;
              v_plan16 Number := 0; 
              v_plan17 Number := 0;
              v_plan18 Number := 0;
              v_plan19 Number := 0;
              v_plan20 Number := 0;
              v_plan21 Number := 0;
              v_plan22 Number := 0;
              v_plan23 Number := 0;
              v_plan24 Number := 0;
              v_plan25 Number := 0;
              v_plan26 Number := 0; 
              v_plan27 Number := 0;
              v_plan28 Number := 0;
              v_plan29 Number := 0;
              v_plan30 Number := 0;
              v_plan31 Number := 0;
              v_plan32 Number := 0;
              v_plan33 Number := 0;
              v_plan34 Number := 0;
              v_plan35 Number := 0;
              v_plan36 Number := 0; 
              v_plan37 Number := 0;
              v_plan38 Number := 0;
              v_plan39 Number := 0;
              v_plan40 Number := 0;
              v_plan41 Number := 0;
              v_plan42 Number := 0;
              v_plan43 Number := 0;
              v_plan44 Number := 0;
              v_plan45 Number := 0;
              v_plan46 Number := 0; 
              v_plan47 Number := 0;
              v_plan48 Number := 0;
              v_plan49 Number := 0;
              v_plan50 Number := 0;
              v_plan51 Number := 0;
              v_plan52 Number := 0;
              v_plan53 Number := 0;
              v_plan54 Number := 0;
              v_plan55 Number := 0;
              v_plan56 Number := 0; 
              v_plan57 Number := 0;
              v_plan58 Number := 0;
              v_plan59 Number := 0;
              v_plan60 Number := 0;
              v_plan61 Number := 0;
              v_plan62 Number := 0;
              v_plan63 Number := 0;
              v_plan64 Number := 0;
              v_plan65 Number := 0;
              v_plan66 Number := 0; 
              v_plan67 Number := 0;
              v_plan68 Number := 0;
              v_plan69 Number := 0;
              v_plan70 Number := 0;
              v_plan71 Number := 0;
              v_plan72 Number := 0;
              v_plan73 Number := 0;
              v_plan74 Number := 0;
              v_plan75 Number := 0;
              v_plan76 Number := 0; 
              v_plan77 Number := 0;
              v_plan78 Number := 0;
              v_plan79 Number := 0;
              v_plan80 Number := 0;
              v_plan81 Number := 0;
              v_plan82 Number := 0;
              v_plan83 Number := 0;
              v_plan84 Number := 0;
              v_plan85 Number := 0;
              v_plan86 Number := 0; 
              v_plan87 Number := 0;
              v_plan88 Number := 0;
              v_plan89 Number := 0;
              v_plan90 Number := 0;
                  v_purchase1 Number := 0;
               v_purchase2 Number := 0;
              v_purchase3 Number := 0;
              v_purchase4 Number := 0;
              v_purchase5 Number := 0;
              v_purchase6 Number := 0; 
              v_purchase7 Number := 0;
              v_purchase8 Number := 0;
              v_purchase9 Number := 0;
              v_purchase10 Number := 0;
              v_purchase11 Number := 0;
              v_purchase12 Number := 0;
              v_purchase13 Number := 0;
              v_purchase14 Number := 0;
              v_purchase15 Number := 0;
              v_purchase16 Number := 0; 
              v_purchase17 Number := 0;
              v_purchase18 Number := 0;
              v_purchase19 Number := 0;
              v_purchase20 Number := 0;
              v_purchase21 Number := 0;
              v_purchase22 Number := 0;
              v_purchase23 Number := 0;
              v_purchase24 Number := 0;
              v_purchase25 Number := 0;
              v_purchase26 Number := 0; 
              v_purchase27 Number := 0;
              v_purchase28 Number := 0;
              v_purchase29 Number := 0;
              v_purchase30 Number := 0;
              v_purchase31 Number := 0;
              v_purchase32 Number := 0;
              v_purchase33 Number := 0;
              v_purchase34 Number := 0;
              v_purchase35 Number := 0;
              v_purchase36 Number := 0; 
              v_purchase37 Number := 0;
              v_purchase38 Number := 0;
              v_purchase39 Number := 0;
              v_purchase40 Number := 0;
              v_purchase41 Number := 0;
              v_purchase42 Number := 0;
              v_purchase43 Number := 0;
              v_purchase44 Number := 0;
              v_purchase45 Number := 0;
              v_purchase46 Number := 0; 
              v_purchase47 Number := 0;
              v_purchase48 Number := 0;
              v_purchase49 Number := 0;
              v_purchase50 Number := 0;
              v_purchase51 Number := 0;
              v_purchase52 Number := 0;
              v_purchase53 Number := 0;
              v_purchase54 Number := 0;
              v_purchase55 Number := 0;
              v_purchase56 Number := 0; 
              v_purchase57 Number := 0;
              v_purchase58 Number := 0;
              v_purchase59 Number := 0;
              v_purchase60 Number := 0;
              v_purchase61 Number := 0;
              v_purchase62 Number := 0;
              v_purchase63 Number := 0;
              v_purchase64 Number := 0;
              v_purchase65 Number := 0;
              v_purchase66 Number := 0; 
              v_purchase67 Number := 0;
              v_purchase68 Number := 0;
              v_purchase69 Number := 0;
              v_purchase70 Number := 0;
              v_purchase71 Number := 0;
              v_purchase72 Number := 0;
              v_purchase73 Number := 0;
              v_purchase74 Number := 0;
              v_purchase75 Number := 0;
              v_purchase76 Number := 0; 
              v_purchase77 Number := 0;
              v_purchase78 Number := 0;
              v_purchase79 Number := 0;
              v_purchase80 Number := 0;
              v_purchase81 Number := 0;
              v_purchase82 Number := 0;
              v_purchase83 Number := 0;
              v_purchase84 Number := 0;
              v_purchase85 Number := 0;
              v_purchase86 Number := 0; 
              v_purchase87 Number := 0;
              v_purchase88 Number := 0;
              v_purchase89 Number := 0;
              v_purchase90 Number := 0;
              v_arrival1 Number := 0;
               v_arrival2 Number := 0;
              v_arrival3 Number := 0;
              v_arrival4 Number := 0;
              v_arrival5 Number := 0;
              v_arrival6 Number := 0; 
              v_arrival7 Number := 0;
              v_arrival8 Number := 0;
              v_arrival9 Number := 0;
              v_arrival10 Number := 0;
              v_arrival11 Number := 0;
              v_arrival12 Number := 0;
              v_arrival13 Number := 0;
              v_arrival14 Number := 0;
              v_arrival15 Number := 0;
              v_arrival16 Number := 0; 
              v_arrival17 Number := 0;
              v_arrival18 Number := 0;
              v_arrival19 Number := 0;
              v_arrival20 Number := 0;
              v_arrival21 Number := 0;
              v_arrival22 Number := 0;
              v_arrival23 Number := 0;
              v_arrival24 Number := 0;
              v_arrival25 Number := 0;
              v_arrival26 Number := 0; 
              v_arrival27 Number := 0;
              v_arrival28 Number := 0;
              v_arrival29 Number := 0;
              v_arrival30 Number := 0;
              v_arrival31 Number := 0;
              v_arrival32 Number := 0;
              v_arrival33 Number := 0;
              v_arrival34 Number := 0;
              v_arrival35 Number := 0;
              v_arrival36 Number := 0; 
              v_arrival37 Number := 0;
              v_arrival38 Number := 0;
              v_arrival39 Number := 0;
              v_arrival40 Number := 0;
              v_arrival41 Number := 0;
              v_arrival42 Number := 0;
              v_arrival43 Number := 0;
              v_arrival44 Number := 0;
              v_arrival45 Number := 0;
              v_arrival46 Number := 0; 
              v_arrival47 Number := 0;
              v_arrival48 Number := 0;
              v_arrival49 Number := 0;
              v_arrival50 Number := 0;
              v_arrival51 Number := 0;
              v_arrival52 Number := 0;
              v_arrival53 Number := 0;
              v_arrival54 Number := 0;
              v_arrival55 Number := 0;
              v_arrival56 Number := 0; 
              v_arrival57 Number := 0;
              v_arrival58 Number := 0;
              v_arrival59 Number := 0;
              v_arrival60 Number := 0;
              v_arrival61 Number := 0;
              v_arrival62 Number := 0;
              v_arrival63 Number := 0;
              v_arrival64 Number := 0;
              v_arrival65 Number := 0;
              v_arrival66 Number := 0; 
              v_arrival67 Number := 0;
              v_arrival68 Number := 0;
              v_arrival69 Number := 0;
              v_arrival70 Number := 0;
              v_arrival71 Number := 0;
              v_arrival72 Number := 0;
              v_arrival73 Number := 0;
              v_arrival74 Number := 0;
              v_arrival75 Number := 0;
              v_arrival76 Number := 0; 
              v_arrival77 Number := 0;
              v_arrival78 Number := 0;
              v_arrival79 Number := 0;
              v_arrival80 Number := 0;
              v_arrival81 Number := 0;
              v_arrival82 Number := 0;
              v_arrival83 Number := 0;
              v_arrival84 Number := 0;
              v_arrival85 Number := 0;
              v_arrival86 Number := 0; 
              v_arrival87 Number := 0;
              v_arrival88 Number := 0;
              v_arrival89 Number := 0;
              v_arrival90 Number := 0;


CURSOR c_item is 
  SELECT distinct z.item_no,aa.description,aa.item_type
  FROM ztb_material_konversi z inner join (select item_no, description,
    case Item_no 
        when 1170140 then 'CC ROD LR6'
        when 1130031 then 'CC ROD LR6'
        when 1170133 Then 'KOH'
        when 1170037 then 'KOH'
        when 1110064 then 'GASKET LR03'
        when 1110026 then 'GASKET LR03'
        when 1120007 then 'WASHER LR6'
        when 1120026 then 'WASHER LR6'
        when 1120028 Then 'GASKET LR6'
        when 1120041 Then 'GASKET LR6'
        when 1130025 then 'GASKET LR6'
        when 1110031 then 'WASHER LR03'
        when 1110006 then 'WASHER LR03'
        when 1170113 then 'EMD TOSOH HH T2'
        when 1170130 then 'EMD TOSOH HH T2'
        when 1170118 then 'ZINC POWDER'
        when 1170120 then 'ZINC POWDER'
        when 1110060 then 'CATH CAN LR03 (COATED)  (S)'
        when 1110065 then 'CATH CAN LR03 (COATED)  (S)'
        when 1170155 then 'CATH CAN LR6(COAT)2.0'
        when 1120045 then 'CATH CAN LR6(COAT)2.0'
        when 1170161 then 'CARBOXIL/AQUPEC'
        when 1170139 then 'CARBOXIL/AQUPEC'
        else description end item_type
  from item )aa on z.item_no = aa.item_no
 where z.item_no not in (
--'1130014',
--'1150006',
--'1150007',
'1170003',
--'1170004',
'1170008',
--'1170014',
'1170021',
--'1170025',
'1170026',
--'1170039',
'1170045',
'1170047',
--'1170071',
--'1170072',
--'1170093',
--'1170094',
--'1170097',
'1170109',
--'1170112',
--'1170119',
'1170129',
'1170135'
--'1170139',
--'1170141',
--'1170160'
)
;--where z.item_no = '1150002';

begin

delete from ztb_mrp_data;

OPEN c_item; 
   LOOP 
   FETCH c_item into c_item_no,c_description,c_item_type; 
      EXIT WHEN c_item%notfound; 
      begin


          v_from :=0;
          v_inventory := 0;
        
        
        
        select trim(sysdate) into v_date from dual;
        select nvl(min_days,0),nvl(max_days,0) into v_ito_min,v_ito_max from ztb_config_rm where item_no = c_item_no;

        
        --Rata2 Bulan 1
        select nvl(sum(total)/count(tanggal),0) into v_rata1 from (
               select tanggal,sum(qty * konversi / 1000) as total, to_char(TO_DATE(tahun ||'-'|| bulan, 'YYYY-MM'), 'YYYY-MM')--,count(tanggal)
               from ztb_assy_plan aa
               inner join ztb_material_konversi bb
               on aa.cell_type = bb.cell_type and aa.assy_line = bb.assy_line
               where item_no = c_item_no  and to_char(TO_DATE(tahun ||'-'|| bulan, 'YYYY-MM'), 'YYYY-MM') = trim(to_char(v_date,'YYYY-MM'))
               and used = 1
               --and revisi  = (select max(revisi) from ztb_assy_plan where to_char(TO_DATE(tahun ||'-'|| bulan, 'YYYY-MM'), 'YYYY-MM') = trim(to_char(v_date,'YYYY-MM')))
               and bb.cell_type is not null
               group by bulan, tahun,tanggal
               )aa;
        
        
        --Rata2 Bulan 2
        select nvl(sum(total)/count(tanggal),0)  into v_rata2 from (
               select tanggal,sum(qty * konversi / 1000) as total, to_char(TO_DATE(tahun ||'-'|| bulan, 'YYYY-MM'), 'YYYY-MM')--,count(tanggal)
               from ztb_assy_plan aa
               inner join ztb_material_konversi bb
               on aa.cell_type = bb.cell_type and aa.assy_line = bb.assy_line
               where item_no = c_item_no  and to_char(TO_DATE(tahun ||'-'|| bulan, 'YYYY-MM'), 'YYYY-MM') = trim(to_char(add_months(v_date,1),'YYYY-MM'))
               and used = 1
               --and revisi  = (select max(revisi) from ztb_assy_plan where to_char(TO_DATE(tahun ||'-'|| bulan, 'YYYY-MM'), 'YYYY-MM') = trim(to_char(add_months(v_date,1),'YYYY-MM')))
            and bb.cell_type is not null
               group by bulan, tahun,tanggal
               )aa;
        
        --Rata2 Bulan3
        select nvl(sum(total)/count(tanggal),0)  into v_rata3 from (
               select tanggal,sum(qty * konversi / 1000) as total, to_char(TO_DATE(tahun ||'-'|| bulan, 'YYYY-MM'), 'YYYY-MM')--,count(tanggal)
               from ztb_assy_plan aa
               inner join ztb_material_konversi bb
               on aa.cell_type = bb.cell_type and aa.assy_line = bb.assy_line
               where item_no = c_item_no  and to_char(TO_DATE(tahun ||'-'|| bulan, 'YYYY-MM'), 'YYYY-MM') = trim(to_char(add_months(v_date,2),'YYYY-MM'))
               and used = 1
               --and revisi  = (select max(revisi) from ztb_assy_plan where to_char(TO_DATE(tahun ||'-'|| bulan, 'YYYY-MM'), 'YYYY-MM') = trim(to_char(add_months(v_date,2),'YYYY-MM')))
               and bb.cell_type is not null
               group by bulan, tahun,tanggal
               )aa;
               
        --Rata2 Bulan4
        select nvl(sum(total)/count(tanggal),0)  into v_rata4 from (
               select tanggal,sum(qty * konversi / 1000) as total, to_char(TO_DATE(tahun ||'-'|| bulan, 'YYYY-MM'), 'YYYY-MM')--,count(tanggal)
               from ztb_assy_plan aa
               inner join ztb_material_konversi bb
               on aa.cell_type = bb.cell_type and aa.assy_line = bb.assy_line
               where item_no = c_item_no  and to_char(TO_DATE(tahun ||'-'|| bulan, 'YYYY-MM'), 'YYYY-MM') = trim(to_char(add_months(v_date,3),'YYYY-MM'))
               and used = 1
               --and revisi  = (select max(revisi) from ztb_assy_plan where to_char(TO_DATE(tahun ||'-'|| bulan, 'YYYY-MM'), 'YYYY-MM') = trim(to_char(add_months(v_date,3),'YYYY-MM')))
               and bb.cell_type is not null
               group by bulan, tahun,tanggal
               )aa;     
        
       v_inventory := 0;
        
        begin
        select this_inventory - nvl(qty_not_approve,0) into v_inventory from whinventory 
        left outer join (   select item_no,sum(s.qty) qty_not_approve from mte_header r
                            inner join mte_details s on r.slip_no = s.slip_no
                            where r.approval_Date is null and slip_date > '01-JAN-19'
                            group by item_no)bb
        on  whinventory.item_no = bb.item_no 
        where whinventory.item_no = c_item_no;
        exception
               when NO_DATA_FOUND
               then v_inventory := 0;
        end;
        
        begin
        select unit_pl into v_uom from unit inner join item on item.uom_q  = unit_code where item_no = c_item_no;
        exception
               when NO_DATA_FOUND
               then v_uom := '';
        end;
        
        begin
        select sum(nvl(bal_qty,0)) into v_outstanding from po_details where eta < (select sysdate from dual) and eta > '01-JAN-18' and item_no = c_item_no;
        exception
               when NO_DATA_FOUND
               then v_outstanding := 0;
        end;
         
         insert into ztb_mrp_data(item_no, item_desc,no_id,description,item_type)
         values(c_item_no, c_description,1,'Daily Consumption Plan',c_item_type);
         
         
         v_tot := v_inventory + nvl(v_outstanding,0);
         insert into ztb_mrp_data(item_no, item_desc,no_id,description,item_type)
         values(c_item_no, c_description,4,'Inventory + Outstanding   '|| v_inventory ||' + '|| nvl(v_outstanding,0) ||' = '||  v_tot ||' '|| v_uom ||' )',c_item_type);
         
         v_inventory := v_inventory + nvl(v_outstanding,0);
         
         
         insert into ztb_mrp_data(item_no, item_desc,no_id,description,item_type)
         values(c_item_no, c_description,2,'Arrival FI Plan',c_item_type);
        
         insert into ztb_mrp_data(item_no, item_desc,no_id,description,item_type)
         values(c_item_no, c_description,3,'Purchase Plan',c_item_type);
        
         insert into ztb_mrp_data(item_no, item_desc,no_id,description,item_type)
         values(c_item_no, c_description,5,'Max ITO(Days)',c_item_type);
        
         insert into ztb_mrp_data(item_no, item_desc,no_id,description,item_type)
         values(c_item_no, c_description,6,'ITO(Days)',c_item_type);
        
         insert into ztb_mrp_data(item_no, item_desc,no_id,description,item_type)
         values(c_item_no, c_description,7,'Min ITO(Days)',c_item_type);
         
          insert into ztb_mrp_data(item_no, item_desc,no_id,description,item_type)
         values(c_item_no, c_description,8,'Qty ITO/Day',c_item_type);
         
        commit;
       
       --Get Arrival
        
 select sum(tgl1) t1,
              sum(tgl2) t2,
              sum(tgl3) t3,
              sum(tgl4) t4,
              sum(tgl5) t5,
              sum(tgl6) t6,
              sum(tgl7) t7,
              sum(tgl8) t8,
              sum(tgl9) t9,
              sum(tgl10) t10,
              sum(tgl11) t11,
              sum(tgl12) t12,
              sum(tgl13) t13,
              sum(tgl14) t14,
              sum(tgl15) t15,
              sum(tgl16) t16,
              sum(tgl17) t17,
              sum(tgl18) t18,
              sum(tgl19) t19,
              sum(tgl20) t20,
              sum(tgl21) t21,
              sum(tgl22) t22,
              sum(tgl23) t23,
              sum(tgl24) t24,
              sum(tgl25) t25,
              sum(tgl26) t26,
              sum(tgl27) t27,
              sum(tgl28) t28,
              sum(tgl29) t29,
              sum(tgl30) t30,
              sum(tgl31) t31,
              sum(tgl32) t32,
              sum(tgl33) t33,
              sum(tgl34) t34,
              sum(tgl35) t35,
              sum(tgl36) t36,
              sum(tgl37) t37,
              sum(tgl38) t38,
              sum(tgl39) t39,
              sum(tgl40) t40,
              sum(tgl41) t41,
              sum(tgl42) t42,
              sum(tgl43) t43,
              sum(tgl44) t44,
              sum(tgl45) t45,
              sum(tgl46) t46,
              sum(tgl47) t47,
              sum(tgl48) t48,
              sum(tgl49) t49,
              sum(tgl50) t50,
              sum(tgl51) t51,
              sum(tgl52) t52,
              sum(tgl53) t53,
              sum(tgl54) t54,
              sum(tgl55) t55,
              sum(tgl56) t56,
              sum(tgl57) t57,
              sum(tgl58) t58,
              sum(tgl59) t59,
              sum(tgl60) t50,
              sum(tgl61) t61,
              sum(tgl62) t62,
              sum(tgl63) t63,
              sum(tgl64) t64,
              sum(tgl65) t65,
              sum(tgl66) t66,
              sum(tgl67) t67,
              sum(tgl68) t68,
              sum(tgl69) t69,
              sum(tgl70) t70,
              sum(tgl71) t71,
              sum(tgl72) t72,
              sum(tgl73) t73,
              sum(tgl74) t74,
              sum(tgl75) t75,
              sum(tgl76) t76,
              sum(tgl77) t77,
              sum(tgl78) t78,
              sum(tgl79) t79,
              sum(tgl80) t80,
              sum(tgl81) t81,
              sum(tgl82) t82,
              sum(tgl83) t83,
              sum(tgl84) t84,
              sum(tgl85) t85,
              sum(tgl86) t86,
              sum(tgl87) t87,
              sum(tgl88) t88,
              sum(tgl89) t89,
              sum(tgl90) t90
              into
              v_arrival1,
              v_arrival2,
              v_arrival3,
              v_arrival4,
              v_arrival5,
              v_arrival6, 
              v_arrival7,
              v_arrival8,
              v_arrival9,
              v_arrival10,
              v_arrival11,
              v_arrival12,
              v_arrival13,
              v_arrival14,
              v_arrival15,
              v_arrival16, 
              v_arrival17,
              v_arrival18,
              v_arrival19,
              v_arrival20,
              v_arrival21,
              v_arrival22,
              v_arrival23,
              v_arrival24,
              v_arrival25,
              v_arrival26, 
              v_arrival27,
              v_arrival28,
              v_arrival29,
              v_arrival30,
              v_arrival31,
              v_arrival32,
              v_arrival33,
              v_arrival34,
              v_arrival35,
              v_arrival36, 
              v_arrival37,
              v_arrival38,
              v_arrival39,
              v_arrival40,
              v_arrival41,
              v_arrival42,
              v_arrival43,
              v_arrival44,
              v_arrival45,
              v_arrival46, 
              v_arrival47,
              v_arrival48,
              v_arrival49,
              v_arrival50,
              v_arrival51,
              v_arrival52,
              v_arrival53,
              v_arrival54,
              v_arrival55,
              v_arrival56, 
              v_arrival57,
              v_arrival58,
              v_arrival59,
              v_arrival60,
              v_arrival61,
              v_arrival62,
              v_arrival63,
              v_arrival64,
              v_arrival65,
              v_arrival66, 
              v_arrival67,
              v_arrival68,
              v_arrival69,
              v_arrival70,
              v_arrival71,
              v_arrival72,
              v_arrival73,
              v_arrival74,
              v_arrival75,
              v_arrival76, 
              v_arrival77,
              v_arrival78,
              v_arrival79,
              v_arrival80,
              v_arrival81,
              v_arrival82,
              v_arrival83,
              v_arrival84,
              v_arrival85,
              v_arrival86, 
              v_arrival87,
              v_arrival88,
              v_arrival89,
              v_arrival90
              
              
       from     
       (
       select case when tgl = v_date  + 1 then jum else 0 end tgl1 ,
              case when tgl = v_date  + 2 then jum else 0 end tgl2 ,
              case when tgl = v_date + 3 then jum else 0 end tgl3 ,
              case when tgl = v_date  + 4 then jum else 0 end tgl4 ,
              case when tgl = v_date  + 5 then jum else 0 end tgl5 ,
              case when tgl = v_date  + 6 then jum else 0 end tgl6 ,
              case when tgl = v_date  + 7 then jum else 0 end tgl7 ,
              case when tgl = v_date  + 8 then jum else 0 end tgl8 ,
              case when tgl = v_date  + 9 then jum else 0 end tgl9 ,
              case when tgl = v_date  + 10 then jum else 0 end tgl10 ,
              case when tgl = v_date  + 11 then jum else 0 end tgl11 ,
              case when tgl = v_date  + 12 then jum else 0 end tgl12 ,
              case when tgl = v_date  + 13 then jum else 0 end tgl13 ,
              case when tgl = v_date  + 14 then jum else 0 end tgl14 ,
              case when tgl = v_date  + 15 then jum else 0 end tgl15 ,
              case when tgl = v_date  + 16 then jum else 0 end tgl16 ,
              case when tgl = v_date  + 17 then jum else 0 end tgl17 ,
              case when tgl = v_date  + 18 then jum else 0 end tgl18 ,
              case when tgl = v_date  + 19 then jum else 0 end tgl19 ,
              case when tgl = v_date  + 20 then jum else 0 end tgl20 ,
              case when tgl = v_date  + 21 then jum else 0 end tgl21 ,
              case when tgl = v_date  + 22 then jum else 0 end tgl22 ,
              case when tgl = v_date  + 23 then jum else 0 end tgl23 ,
              case when tgl = v_date  + 24 then jum else 0 end tgl24 ,
              case when tgl = v_date  + 25 then jum else 0 end tgl25 ,
              case when tgl = v_date  + 26 then jum else 0 end tgl26 ,
              case when tgl = v_date  + 27 then jum else 0 end tgl27 ,
              case when tgl = v_date  + 28 then jum else 0 end tgl28 ,
              case when tgl = v_date  + 29 then jum else 0 end tgl29 ,
              case when tgl = v_date  + 30 then jum else 0 end tgl30 ,
              case when tgl = v_date  + 31 then jum else 0 end tgl31 ,
              case when tgl = v_date  + 32 then jum else 0 end tgl32 ,
              case when tgl = v_date  + 33 then jum else 0 end tgl33 ,
              case when tgl = v_date  + 34 then jum else 0 end tgl34 ,
              case when tgl = v_date  + 35 then jum else 0 end tgl35 ,
              case when tgl = v_date  + 36 then jum else 0 end tgl36 ,
              case when tgl = v_date  + 37 then jum else 0 end tgl37 ,
              case when tgl = v_date  + 38 then jum else 0 end tgl38 ,
              case when tgl = v_date  + 39 then jum else 0 end tgl39 ,
              case when tgl = v_date  + 40 then jum else 0 end tgl40 ,
              case when tgl = v_date  + 41 then jum else 0 end tgl41 ,
              case when tgl = v_date  + 42 then jum else 0 end tgl42 ,
              case when tgl = v_date  + 43 then jum else 0 end tgl43,
              case when tgl = v_date  + 44 then jum else 0 end tgl44 ,
              case when tgl = v_date  + 45 then jum else 0 end tgl45 ,
              case when tgl = v_date  + 46 then jum else 0 end tgl46 ,
              case when tgl = v_date  + 47 then jum else 0 end tgl47 ,
              case when tgl = v_date  + 48 then jum else 0 end tgl48 ,
              case when tgl = v_date  + 49 then jum else 0 end tgl49,
              case when tgl = v_date  + 50 then jum else 0 end tgl50 ,
              case when tgl = v_date  + 51 then jum else 0 end tgl51 ,
              case when tgl = v_date  + 52 then jum else 0 end tgl52 ,
              case when tgl = v_date  + 53 then jum else 0 end tgl53 ,
              case when tgl = v_date  + 54 then jum else 0 end tgl54 ,
              case when tgl = v_date  + 55 then jum else 0 end tgl55 ,
              case when tgl = v_date  + 56 then jum else 0 end tgl56 ,
              case when tgl = v_date  + 57 then jum else 0 end tgl57 ,
              case when tgl = v_date  + 58 then jum else 0 end tgl58 ,
              case when tgl = v_date  + 59 then jum else 0 end tgl59 ,
              case when tgl = v_date  + 60 then jum else 0 end tgl60 ,
              case when tgl = v_date  + 61 then jum else 0 end tgl61 ,
              case when tgl = v_date  + 62 then jum else 0 end tgl62 ,
              case when tgl = v_date  + 63 then jum else 0 end tgl63 ,
              case when tgl = v_date  + 64 then jum else 0 end tgl64 ,
              case when tgl = v_date  + 65 then jum else 0 end tgl65 ,
              case when tgl = v_date  + 66 then jum else 0 end tgl66 ,
              case when tgl = v_date  + 67 then jum else 0 end tgl67 ,
              case when tgl = v_date  + 68 then jum else 0 end tgl68 ,
              case when tgl = v_date  + 69 then jum else 0 end tgl69 ,
               case when tgl = v_date  + 70 then jum else 0 end tgl70 ,
              case when tgl = v_date  + 71 then jum else 0 end tgl71 ,
              case when tgl = v_date  + 72 then jum else 0 end tgl72 ,
              case when tgl = v_date  + 73 then jum else 0 end tgl73 ,
              case when tgl = v_date  + 74 then jum else 0 end tgl74 ,
              case when tgl = v_date  + 75 then jum else 0 end tgl75 ,
              case when tgl = v_date  + 76 then jum else 0 end tgl76 ,
              case when tgl = v_date  + 77 then jum else 0 end tgl77 ,
              case when tgl = v_date  + 78 then jum else 0 end tgl78 ,
              case when tgl = v_date  + 79 then jum else 0 end tgl79 ,
              case when tgl = v_date  + 80 then jum else 0 end tgl80 ,
              case when tgl = v_date  + 81 then jum else 0 end tgl81 ,
              case when tgl = v_date  + 82 then jum else 0 end tgl82 ,
              case when tgl = v_date  + 83 then jum else 0 end tgl83 ,
              case when tgl = v_date  + 84 then jum else 0 end tgl84 ,
              case when tgl = v_date  + 85 then jum else 0 end tgl85 ,
              case when tgl = v_date  + 86 then jum else 0 end tgl86 ,
              case when tgl = v_date  + 87 then jum else 0 end tgl87 ,
              case when tgl = v_date  + 88 then jum else 0 end tgl88 ,
              case when tgl = v_date  + 89 then jum else 0 end tgl89 ,
              case when tgl = v_date  + 90 then jum else 0 end tgl90 
       from 
       (
       select nvl(sum(bal_qty),0) jum,eta tgl  from po_details where eta > trim(v_Date) and item_no = c_item_no and bal_qty <> 0 
       group by eta
       )aa   

       )bb;
       
       
       --Get Purchasa
        select sum(tgl1) t1,
              sum(tgl2) t2,
              sum(tgl3) t3,
              sum(tgl4) t4,
              sum(tgl5) t5,
              sum(tgl6) t6,
              sum(tgl7) t7,
              sum(tgl8) t8,
              sum(tgl9) t9,
              sum(tgl10) t10,
              sum(tgl11) t11,
              sum(tgl12) t12,
              sum(tgl13) t13,
              sum(tgl14) t14,
              sum(tgl15) t15,
              sum(tgl16) t16,
              sum(tgl17) t17,
              sum(tgl18) t18,
              sum(tgl19) t19,
              sum(tgl20) t20,
              sum(tgl21) t21,
              sum(tgl22) t22,
              sum(tgl23) t23,
              sum(tgl24) t24,
              sum(tgl25) t25,
              sum(tgl26) t26,
              sum(tgl27) t27,
              sum(tgl28) t28,
              sum(tgl29) t29,
              sum(tgl30) t30,
              sum(tgl31) t31,
              sum(tgl32) t32,
              sum(tgl33) t33,
              sum(tgl34) t34,
              sum(tgl35) t35,
              sum(tgl36) t36,
              sum(tgl37) t37,
              sum(tgl38) t38,
              sum(tgl39) t39,
              sum(tgl40) t40,
              sum(tgl41) t41,
              sum(tgl42) t42,
              sum(tgl43) t43,
              sum(tgl44) t44,
              sum(tgl45) t45,
              sum(tgl46) t46,
              sum(tgl47) t47,
              sum(tgl48) t48,
              sum(tgl49) t49,
              sum(tgl50) t50,
              sum(tgl51) t51,
              sum(tgl52) t52,
              sum(tgl53) t53,
              sum(tgl54) t54,
              sum(tgl55) t55,
              sum(tgl56) t56,
              sum(tgl57) t57,
              sum(tgl58) t58,
              sum(tgl59) t59,
              sum(tgl60) t50,
              sum(tgl61) t61,
              sum(tgl62) t62,
              sum(tgl63) t63,
              sum(tgl64) t64,
              sum(tgl65) t65,
              sum(tgl66) t66,
              sum(tgl67) t67,
              sum(tgl68) t68,
              sum(tgl69) t69,
              sum(tgl70) t70,
              sum(tgl71) t71,
              sum(tgl72) t72,
              sum(tgl73) t73,
              sum(tgl74) t74,
              sum(tgl75) t75,
              sum(tgl76) t76,
              sum(tgl77) t77,
              sum(tgl78) t78,
              sum(tgl79) t79,
              sum(tgl80) t80,
              sum(tgl81) t81,
              sum(tgl82) t82,
              sum(tgl83) t83,
              sum(tgl84) t84,
              sum(tgl85) t85,
              sum(tgl86) t86,
              sum(tgl87) t87,
              sum(tgl88) t88,
              sum(tgl89) t89,
              sum(tgl90) t90
              into
             v_purchase1,
              v_purchase2,
              v_purchase3,
              v_purchase4,
              v_purchase5,
              v_purchase6, 
              v_purchase7,
              v_purchase8,
              v_purchase9,
              v_purchase10,
              v_purchase11,
              v_purchase12,
              v_purchase13,
              v_purchase14,
              v_purchase15,
              v_purchase16, 
              v_purchase17,
              v_purchase18,
              v_purchase19,
              v_purchase20,
              v_purchase21,
              v_purchase22,
              v_purchase23,
              v_purchase24,
              v_purchase25,
              v_purchase26, 
              v_purchase27,
              v_purchase28,
              v_purchase29,
              v_purchase30,
              v_purchase31,
              v_purchase32,
              v_purchase33,
              v_purchase34,
              v_purchase35,
              v_purchase36, 
              v_purchase37,
              v_purchase38,
              v_purchase39,
              v_purchase40,
              v_purchase41,
              v_purchase42,
              v_purchase43,
              v_purchase44,
              v_purchase45,
              v_purchase46, 
              v_purchase47,
              v_purchase48,
              v_purchase49,
              v_purchase50,
              v_purchase51,
              v_purchase52,
              v_purchase53,
              v_purchase54,
              v_purchase55,
              v_purchase56, 
              v_purchase57,
              v_purchase58,
              v_purchase59,
              v_purchase60,
              v_purchase61,
              v_purchase62,
              v_purchase63,
              v_purchase64,
              v_purchase65,
              v_purchase66, 
              v_purchase67,
              v_purchase68,
              v_purchase69,
              v_purchase70,
              v_purchase71,
              v_purchase72,
              v_purchase73,
              v_purchase74,
              v_purchase75,
              v_purchase76, 
              v_purchase77,
              v_purchase78,
              v_purchase79,
              v_purchase80,
              v_purchase81,
              v_purchase82,
              v_purchase83,
              v_purchase84,
              v_purchase85,
              v_purchase86, 
              v_purchase87,
              v_purchase88,
              v_purchase89,
              v_purchase90
              
              
       from     
       (
       select case when tgl = v_date  + 1 then jum else 0 end tgl1 ,
              case when tgl = v_date  + 2 then jum else 0 end tgl2 ,
              case when tgl = v_date + 3 then jum else 0 end tgl3 ,
              case when tgl = v_date  + 4 then jum else 0 end tgl4 ,
              case when tgl = v_date  + 5 then jum else 0 end tgl5 ,
              case when tgl = v_date  + 6 then jum else 0 end tgl6 ,
              case when tgl = v_date  + 7 then jum else 0 end tgl7 ,
              case when tgl = v_date  + 8 then jum else 0 end tgl8 ,
              case when tgl = v_date  + 9 then jum else 0 end tgl9 ,
              case when tgl = v_date  + 10 then jum else 0 end tgl10 ,
              case when tgl = v_date  + 11 then jum else 0 end tgl11 ,
              case when tgl = v_date  + 12 then jum else 0 end tgl12 ,
              case when tgl = v_date  + 13 then jum else 0 end tgl13 ,
              case when tgl = v_date  + 14 then jum else 0 end tgl14 ,
              case when tgl = v_date  + 15 then jum else 0 end tgl15 ,
              case when tgl = v_date  + 16 then jum else 0 end tgl16 ,
              case when tgl = v_date  + 17 then jum else 0 end tgl17 ,
              case when tgl = v_date  + 18 then jum else 0 end tgl18 ,
              case when tgl = v_date  + 19 then jum else 0 end tgl19 ,
              case when tgl = v_date  + 20 then jum else 0 end tgl20 ,
              case when tgl = v_date  + 21 then jum else 0 end tgl21 ,
              case when tgl = v_date  + 22 then jum else 0 end tgl22 ,
              case when tgl = v_date  + 23 then jum else 0 end tgl23 ,
              case when tgl = v_date  + 24 then jum else 0 end tgl24 ,
              case when tgl = v_date  + 25 then jum else 0 end tgl25 ,
              case when tgl = v_date  + 26 then jum else 0 end tgl26 ,
              case when tgl = v_date  + 27 then jum else 0 end tgl27 ,
              case when tgl = v_date  + 28 then jum else 0 end tgl28 ,
              case when tgl = v_date  + 29 then jum else 0 end tgl29 ,
              case when tgl = v_date  + 30 then jum else 0 end tgl30 ,
              case when tgl = v_date  + 31 then jum else 0 end tgl31 ,
              case when tgl = v_date  + 32 then jum else 0 end tgl32 ,
              case when tgl = v_date  + 33 then jum else 0 end tgl33 ,
              case when tgl = v_date  + 34 then jum else 0 end tgl34 ,
              case when tgl = v_date  + 35 then jum else 0 end tgl35 ,
              case when tgl = v_date  + 36 then jum else 0 end tgl36 ,
              case when tgl = v_date  + 37 then jum else 0 end tgl37 ,
              case when tgl = v_date  + 38 then jum else 0 end tgl38 ,
              case when tgl = v_date  + 39 then jum else 0 end tgl39 ,
              case when tgl = v_date  + 40 then jum else 0 end tgl40 ,
              case when tgl = v_date  + 41 then jum else 0 end tgl41 ,
              case when tgl = v_date  + 42 then jum else 0 end tgl42 ,
              case when tgl = v_date  + 43 then jum else 0 end tgl43,
              case when tgl = v_date  + 44 then jum else 0 end tgl44 ,
              case when tgl = v_date  + 45 then jum else 0 end tgl45 ,
              case when tgl = v_date  + 46 then jum else 0 end tgl46 ,
              case when tgl = v_date  + 47 then jum else 0 end tgl47 ,
              case when tgl = v_date  + 48 then jum else 0 end tgl48 ,
              case when tgl = v_date  + 49 then jum else 0 end tgl49,
              case when tgl = v_date  + 50 then jum else 0 end tgl50 ,
              case when tgl = v_date  + 51 then jum else 0 end tgl51 ,
              case when tgl = v_date  + 52 then jum else 0 end tgl52 ,
              case when tgl = v_date  + 53 then jum else 0 end tgl53 ,
              case when tgl = v_date  + 54 then jum else 0 end tgl54 ,
              case when tgl = v_date  + 55 then jum else 0 end tgl55 ,
              case when tgl = v_date  + 56 then jum else 0 end tgl56 ,
              case when tgl = v_date  + 57 then jum else 0 end tgl57 ,
              case when tgl = v_date  + 58 then jum else 0 end tgl58 ,
              case when tgl = v_date  + 59 then jum else 0 end tgl59 ,
              case when tgl = v_date  + 60 then jum else 0 end tgl60 ,
              case when tgl = v_date  + 61 then jum else 0 end tgl61 ,
              case when tgl = v_date  + 62 then jum else 0 end tgl62 ,
              case when tgl = v_date  + 63 then jum else 0 end tgl63 ,
              case when tgl = v_date  + 64 then jum else 0 end tgl64 ,
              case when tgl = v_date  + 65 then jum else 0 end tgl65 ,
              case when tgl = v_date  + 66 then jum else 0 end tgl66 ,
              case when tgl = v_date  + 67 then jum else 0 end tgl67 ,
              case when tgl = v_date  + 68 then jum else 0 end tgl68 ,
              case when tgl = v_date  + 69 then jum else 0 end tgl69 ,
              case when tgl = v_date  + 70 then jum else 0 end tgl70 ,
              case when tgl = v_date  + 71 then jum else 0 end tgl71 ,
              case when tgl = v_date  + 72 then jum else 0 end tgl72 ,
              case when tgl = v_date  + 73 then jum else 0 end tgl73 ,
              case when tgl = v_date  + 74 then jum else 0 end tgl74 ,
              case when tgl = v_date  + 75 then jum else 0 end tgl75 ,
              case when tgl = v_date  + 76 then jum else 0 end tgl76 ,
              case when tgl = v_date  + 77 then jum else 0 end tgl77 ,
              case when tgl = v_date  + 78 then jum else 0 end tgl78 ,
              case when tgl = v_date  + 79 then jum else 0 end tgl79 ,
              case when tgl = v_date  + 80 then jum else 0 end tgl80 ,
              case when tgl = v_date  + 81 then jum else 0 end tgl81 ,
              case when tgl = v_date  + 82 then jum else 0 end tgl82 ,
              case when tgl = v_date  + 83 then jum else 0 end tgl83 ,
              case when tgl = v_date  + 84 then jum else 0 end tgl84 ,
              case when tgl = v_date  + 85 then jum else 0 end tgl85 ,
              case when tgl = v_date  + 86 then jum else 0 end tgl86 ,
              case when tgl = v_date  + 87 then jum else 0 end tgl87 ,
              case when tgl = v_date  + 88 then jum else 0 end tgl88 ,
              case when tgl = v_date  + 89 then jum else 0 end tgl89 ,
              case when tgl = v_date  + 90 then jum else 0 end tgl90 
       from 
       (
       
        
         select nvl(sum(nvl(qty,0) ),0) jum, require_date  tgl from prf_details aa inner join prf_header bb
              on aa.prf_no = bb.prf_no
              where item_no = c_item_no and require_date > trim(v_Date) group by require_date
        
--        select nvl(sum(nvl(qty,0)),0) jum, require_date  tgl from prf_details aa 
--            inner join prf_header bb
--              on aa.prf_no = bb.prf_no
--              where item_no = c_item_no and require_date > trim(v_Date) 
--                  and aa.prf_no||aa.line_no not in (select nvl(prf_no||prf_line_no,'xx123') from po_details where item_no =c_item_no)
--              group by require_date
        
       )aa   

       )bb;
       
        
       --Get Konversi
       select sum(tgl1) t1,
              sum(tgl2) t2,
              sum(tgl3) t3,
              sum(tgl4) t4,
              sum(tgl5) t5,
              sum(tgl6) t6,
              sum(tgl7) t7,
              sum(tgl8) t8,
              sum(tgl9) t9,
              sum(tgl10) t10,
              sum(tgl11) t11,
              sum(tgl12) t12,
              sum(tgl13) t13,
              sum(tgl14) t14,
              sum(tgl15) t15,
              sum(tgl16) t16,
              sum(tgl17) t17,
              sum(tgl18) t18,
              sum(tgl19) t19,
              sum(tgl20) t20,
              sum(tgl21) t21,
              sum(tgl22) t22,
              sum(tgl23) t23,
              sum(tgl24) t24,
              sum(tgl25) t25,
              sum(tgl26) t26,
              sum(tgl27) t27,
              sum(tgl28) t28,
              sum(tgl29) t29,
              sum(tgl30) t30,
              sum(tgl31) t31,
              sum(tgl32) t32,
              sum(tgl33) t33,
              sum(tgl34) t34,
              sum(tgl35) t35,
              sum(tgl36) t36,
              sum(tgl37) t37,
              sum(tgl38) t38,
              sum(tgl39) t39,
              sum(tgl40) t40,
              sum(tgl41) t41,
              sum(tgl42) t42,
              sum(tgl43) t43,
              sum(tgl44) t44,
              sum(tgl45) t45,
              sum(tgl46) t46,
              sum(tgl47) t47,
              sum(tgl48) t48,
              sum(tgl49) t49,
              sum(tgl50) t50,
              sum(tgl51) t51,
              sum(tgl52) t52,
              sum(tgl53) t53,
              sum(tgl54) t54,
              sum(tgl55) t55,
              sum(tgl56) t56,
              sum(tgl57) t57,
              sum(tgl58) t58,
              sum(tgl59) t59,
              sum(tgl60) t50,
              sum(tgl61) t61,
              sum(tgl62) t62,
              sum(tgl63) t63,
              sum(tgl64) t64,
              sum(tgl65) t65,
              sum(tgl66) t66,
              sum(tgl67) t67,
              sum(tgl68) t68,
              sum(tgl69) t69,
              sum(tgl70) t70,
              sum(tgl71) t71,
              sum(tgl72) t72,
              sum(tgl73) t73,
              sum(tgl74) t74,
              sum(tgl75) t75,
              sum(tgl76) t76,
              sum(tgl77) t77,
              sum(tgl78) t78,
              sum(tgl79) t79,
              sum(tgl80) t80,
              sum(tgl81) t81,
              sum(tgl82) t82,
              sum(tgl83) t83,
              sum(tgl84) t84,
              sum(tgl85) t85,
              sum(tgl86) t86,
              sum(tgl87) t87,
              sum(tgl88) t88,
              sum(tgl89) t89,
              sum(tgl90) t90
              into
              v_plan1,
              v_plan2,
              v_plan3,
              v_plan4,
              v_plan5,
              v_plan6, 
              v_plan7,
              v_plan8,
              v_plan9,
              v_plan10,
              v_plan11,
              v_plan12,
              v_plan13,
              v_plan14,
              v_plan15,
              v_plan16, 
              v_plan17,
              v_plan18,
              v_plan19,
              v_plan20,
              v_plan21,
              v_plan22,
              v_plan23,
              v_plan24,
              v_plan25,
              v_plan26, 
              v_plan27,
              v_plan28,
              v_plan29,
              v_plan30,
              v_plan31,
              v_plan32,
              v_plan33,
              v_plan34,
              v_plan35,
              v_plan36, 
              v_plan37,
              v_plan38,
              v_plan39,
              v_plan40,
              v_plan41,
              v_plan42,
              v_plan43,
              v_plan44,
              v_plan45,
              v_plan46, 
              v_plan47,
              v_plan48,
              v_plan49,
              v_plan50,
              v_plan51,
              v_plan52,
              v_plan53,
              v_plan54,
              v_plan55,
              v_plan56, 
              v_plan57,
              v_plan58,
              v_plan59,
              v_plan60,
              v_plan61,
              v_plan62,
              v_plan63,
              v_plan64,
              v_plan65,
              v_plan66, 
              v_plan67,
              v_plan68,
              v_plan69,
              v_plan70,
              v_plan71,
              v_plan72,
              v_plan73,
              v_plan74,
              v_plan75,
              v_plan76, 
              v_plan77,
              v_plan78,
              v_plan79,
              v_plan80,
              v_plan81,
              v_plan82,
              v_plan83,
              v_plan84,
              v_plan85,
              v_plan86, 
              v_plan87,
              v_plan88,
              v_plan89,
              v_plan90
              
              
       from     
       (
       select case when tgl = v_date  + 1 then jum else 0 end tgl1 ,
              case when tgl = v_date  + 2 then jum else 0 end tgl2 ,
              case when tgl = v_date  + 3 then jum else 0 end tgl3 ,
              case when tgl = v_date  + 4 then jum else 0 end tgl4 ,
              case when tgl = v_date  + 5 then jum else 0 end tgl5 ,
              case when tgl = v_date  + 6 then jum else 0 end tgl6 ,
              case when tgl = v_date  + 7 then jum else 0 end tgl7 ,
              case when tgl = v_date  + 8 then jum else 0 end tgl8 ,
              case when tgl = v_date  + 9 then jum else 0 end tgl9 ,
              case when tgl = v_date  + 10 then jum else 0 end tgl10 ,
              case when tgl = v_date  + 11 then jum else 0 end tgl11 ,
              case when tgl = v_date  + 12 then jum else 0 end tgl12 ,
              case when tgl = v_date  + 13 then jum else 0 end tgl13 ,
              case when tgl = v_date  + 14 then jum else 0 end tgl14 ,
              case when tgl = v_date  + 15 then jum else 0 end tgl15 ,
              case when tgl = v_date  + 16 then jum else 0 end tgl16 ,
              case when tgl = v_date  + 17 then jum else 0 end tgl17 ,
              case when tgl = v_date  + 18 then jum else 0 end tgl18 ,
              case when tgl = v_date  + 19 then jum else 0 end tgl19 ,
              case when tgl = v_date  + 20 then jum else 0 end tgl20 ,
              case when tgl = v_date  + 21 then jum else 0 end tgl21 ,
              case when tgl = v_date  + 22 then jum else 0 end tgl22 ,
              case when tgl = v_date  + 23 then jum else 0 end tgl23 ,
              case when tgl = v_date  + 24 then jum else 0 end tgl24 ,
              case when tgl = v_date  + 25 then jum else 0 end tgl25 ,
              case when tgl = v_date  + 26 then jum else 0 end tgl26 ,
              case when tgl = v_date  + 27 then jum else 0 end tgl27 ,
              case when tgl = v_date  + 28 then jum else 0 end tgl28 ,
              case when tgl = v_date  + 29 then jum else 0 end tgl29 ,
              case when tgl = v_date  + 30 then jum else 0 end tgl30 ,
              case when tgl = v_date  + 31 then jum else 0 end tgl31 ,
              case when tgl = v_date  + 32 then jum else 0 end tgl32 ,
              case when tgl = v_date  + 33 then jum else 0 end tgl33 ,
              case when tgl = v_date  + 34 then jum else 0 end tgl34 ,
              case when tgl = v_date  + 35 then jum else 0 end tgl35 ,
              case when tgl = v_date  + 36 then jum else 0 end tgl36 ,
              case when tgl = v_date  + 37 then jum else 0 end tgl37 ,
              case when tgl = v_date  + 38 then jum else 0 end tgl38 ,
              case when tgl = v_date  + 39 then jum else 0 end tgl39 ,
              case when tgl = v_date  + 40 then jum else 0 end tgl40 ,
              case when tgl = v_date  + 41 then jum else 0 end tgl41 ,
              case when tgl = v_date  + 42 then jum else 0 end tgl42 ,
              case when tgl = v_date  + 43 then jum else 0 end tgl43,
              case when tgl = v_date  + 44 then jum else 0 end tgl44 ,
              case when tgl = v_date  + 45 then jum else 0 end tgl45 ,
              case when tgl = v_date  + 46 then jum else 0 end tgl46 ,
              case when tgl = v_date  + 47 then jum else 0 end tgl47 ,
              case when tgl = v_date  + 48 then jum else 0 end tgl48 ,
              case when tgl = v_date  + 49 then jum else 0 end tgl49,
              case when tgl = v_date  + 50 then jum else 0 end tgl50 ,
              case when tgl = v_date  + 51 then jum else 0 end tgl51 ,
              case when tgl = v_date  + 52 then jum else 0 end tgl52 ,
              case when tgl = v_date  + 53 then jum else 0 end tgl53 ,
              case when tgl = v_date  + 54 then jum else 0 end tgl54 ,
              case when tgl = v_date  + 55 then jum else 0 end tgl55 ,
              case when tgl = v_date  + 56 then jum else 0 end tgl56 ,
              case when tgl = v_date  + 57 then jum else 0 end tgl57 ,
              case when tgl = v_date  + 58 then jum else 0 end tgl58 ,
              case when tgl = v_date  + 59 then jum else 0 end tgl59 ,
              case when tgl = v_date  + 60 then jum else 0 end tgl60 ,
              case when tgl = v_date  + 61 then jum else 0 end tgl61 ,
              case when tgl = v_date  + 62 then jum else 0 end tgl62 ,
              case when tgl = v_date  + 63 then jum else 0 end tgl63 ,
              case when tgl = v_date  + 64 then jum else 0 end tgl64 ,
              case when tgl = v_date  + 65 then jum else 0 end tgl65 ,
              case when tgl = v_date  + 66 then jum else 0 end tgl66 ,
              case when tgl = v_date  + 67 then jum else 0 end tgl67 ,
              case when tgl = v_date  + 68 then jum else 0 end tgl68 ,
              case when tgl = v_date  + 69 then jum else 0 end tgl69 ,
              case when tgl = v_date  + 70 then jum else 0 end tgl70 ,
              case when tgl = v_date  + 71 then jum else 0 end tgl71 ,
              case when tgl = v_date  + 72 then jum else 0 end tgl72 ,
              case when tgl = v_date  + 73 then jum else 0 end tgl73 ,
              case when tgl = v_date  + 74 then jum else 0 end tgl74 ,
              case when tgl = v_date  + 75 then jum else 0 end tgl75 ,
              case when tgl = v_date  + 76 then jum else 0 end tgl76 ,
              case when tgl = v_date  + 77 then jum else 0 end tgl77 ,
              case when tgl = v_date  + 78 then jum else 0 end tgl78 ,
              case when tgl = v_date  + 79 then jum else 0 end tgl79 ,
              case when tgl = v_date  + 80 then jum else 0 end tgl80 ,
              case when tgl = v_date  + 81 then jum else 0 end tgl81 ,
              case when tgl = v_date  + 82 then jum else 0 end tgl82 ,
              case when tgl = v_date  + 83 then jum else 0 end tgl83 ,
              case when tgl = v_date  + 84 then jum else 0 end tgl84 ,
              case when tgl = v_date  + 85 then jum else 0 end tgl85 ,
              case when tgl = v_date  + 86 then jum else 0 end tgl86 ,
              case when tgl = v_date  + 87 then jum else 0 end tgl87 ,
              case when tgl = v_date  + 88 then jum else 0 end tgl88 ,
              case when tgl = v_date  + 89 then jum else 0 end tgl89 ,
              case when tgl = v_date  + 90 then jum else 0 end tgl90 
       from 
       (
       select nvl(sum(qty/1000 * konversi ),0) jum,TO_DATE(tahun ||'-'|| bulan||'-'||tanggal, 'YYYY-MM-DD') Tgl
                      from ztb_assy_plan aa
                      inner join ztb_material_konversi bb
                      on aa.cell_type = bb.cell_type and aa.assy_line = bb.assy_line
                      where item_no = c_item_no  and TO_DATE(tahun ||'-'|| bulan||'-'||tanggal, 'YYYY-MM-DD') > trim(v_date)
                      and used = 1
                     --and revisi  = (select max(revisi) from ztb_assy_plan where to_char(TO_DATE(tahun ||'-'|| bulan, 'YYYY-MM'), 'YYYY-MM') = trim(to_char(v_date,'YYYY-MM')))
                      group by tanggal,bulan, tahun
       )aa   

       )bb;
       
        v_month := trunc(v_Date) - (to_number(to_char(v_date,'DD')) - 1);
       
        while v_from < v_to 
        LOOP
              
              v_from := v_from + 1;    
              v_date := v_date + 1;  
              v_rata := ceil(v_rata1);
              
              v_plan := 0;
              v_purchase := 0;
              v_arrival:= 0;
              v_Month_Diff := floor(MONTHS_BETWEEN(v_date,v_month));
              
              if v_from > 1 then
                  if  v_Month_Diff  = 1 THEN
                     v_rata := nvl(ceil(v_rata2),0);
                  elsif v_Month_Diff = 2 then
                     v_rata := nvl(ceil(v_rata3),0);
                  elsif v_Month_Diff = 3 then
                     v_rata := nvl(ceil(v_rata4),0);   
                  end if;
              end if;
              
              IF v_from = 1 THEN
                 v_plan := v_plan1;
              ELSIF v_from = 2 THEN
                  v_plan := v_plan2;
              ELSIF v_from = 3 THEN
                  v_plan := v_plan3;
              ELSIF v_from = 4 THEN
                  v_plan := v_plan4;
              ELSIF v_from = 5 THEN
                  v_plan := v_plan5;
              ELSIF v_from = 6 THEN
                  v_plan := v_plan6;
              ELSIF v_from = 7 THEN
                  v_plan := v_plan7;
              ELSIF v_from = 8 THEN
                  v_plan := v_plan8;
              ELSIF v_from = 9 THEN
                  v_plan := v_plan9;
              ELSIF v_from = 10 THEN
                  v_plan := v_plan10;
               ELSIF v_from = 11 THEN
                  v_plan := v_plan11;
              ELSIF v_from = 12 THEN
                  v_plan := v_plan12;
              ELSIF v_from = 13 THEN
                  v_plan := v_plan13;
              ELSIF v_from = 14 THEN
                  v_plan := v_plan14;
              ELSIF v_from = 15 THEN
                  v_plan := v_plan15;
              ELSIF v_from = 16 THEN
                  v_plan := v_plan16;
              ELSIF v_from = 17 THEN
                  v_plan := v_plan17;
              ELSIF v_from = 18 THEN
                  v_plan := v_plan18;
              ELSIF v_from = 19 THEN
                  v_plan := v_plan19;
              ELSIF v_from = 20 THEN
                  v_plan := v_plan20;
               ELSIF v_from = 21 THEN
                  v_plan := v_plan21;
              ELSIF v_from = 22 THEN
                  v_plan := v_plan22;
              ELSIF v_from = 23 THEN
                  v_plan := v_plan23;
              ELSIF v_from = 24 THEN
                  v_plan := v_plan24;
              ELSIF v_from = 25 THEN
                  v_plan := v_plan25;
              ELSIF v_from = 26 THEN
                  v_plan := v_plan26;
              ELSIF v_from = 27 THEN
                  v_plan := v_plan27;
              ELSIF v_from = 28 THEN
                  v_plan := v_plan28;
              ELSIF v_from = 29 THEN
                  v_plan := v_plan29;
              ELSIF v_from = 30 THEN
                  v_plan := v_plan30;  
               ELSIF v_from = 31 THEN
                  v_plan := v_plan31;
              ELSIF v_from = 32 THEN
                  v_plan := v_plan32;
              ELSIF v_from = 33 THEN
                  v_plan := v_plan33;
              ELSIF v_from = 34 Then
                  v_plan := v_plan34;
              ELSIF v_from = 35 THEN
                  v_plan := v_plan35;
              ELSIF v_from = 36 THEN
                  v_plan := v_plan36;
              ELSIF v_from = 37 THEN
                  v_plan := v_plan37;
              ELSIF v_from = 38 THEN
                  v_plan := v_plan38;
              ELSIF v_from = 39 THEN
                  v_plan := v_plan39;
              ELSIF v_from = 40 THEN
                  v_plan := v_plan40;  
               ELSIF v_from = 41 THEN
                  v_plan := v_plan41;
              ELSIF v_from = 42 THEN
                  v_plan := v_plan42;
              ELSIF v_from = 43 THeN
                  v_plan := v_plan43;
              ELSIF v_from = 44 THEN
                  v_plan := v_plan44;
              ELSIF v_from = 45 THEN
                  v_plan := v_plan45;
              ELSIF v_from = 46 THEN
                  v_plan := v_plan46;
              ELSIF v_from = 47 THEN
                  v_plan := v_plan47;
              ELSIF v_from = 48 THEN
                  v_plan := v_plan48;
              ELSIF v_from = 49 THEN
                  v_plan := v_plan49;
              ELSIF v_from = 50 THEN
                  v_plan := v_plan50;  
             
               ELSIF v_from = 51 THEN
                  v_plan := v_plan51;
              ELSIF v_from = 52 THEN
                  v_plan := v_plan52;
              ELSIF v_from = 53 THEN
                  v_plan := v_plan53;
              ELSIF v_from = 54 THEN
                  v_plan := v_plan54;
              ELSIF v_from = 55 THEN
                  v_plan := v_plan55;
              ELSIF v_from = 56 THEN
                  v_plan := v_plan56;
              ELSIF v_from = 57 THEN
                  v_plan := v_plan57;
              ELSIF v_from = 58 THEN
                  v_plan := v_plan58;
              ELSIF v_from = 59 THEN
                  v_plan := v_plan59;
              ELSIF v_from = 60 THEN
                  v_plan := v_plan60;  
             
               ELSIF v_from = 61 THEN
                  v_plan := v_plan61;
              ELSIF v_from = 62 THEN
                  v_plan := v_plan62;
              ELSIF v_from = 63 THEN
                  v_plan := v_plan63;
              ELSIF v_from = 64 THEN
                  v_plan := v_plan64;
              ELSIF v_from = 65 THEN
                  v_plan := v_plan65;
              ELSIF v_from = 66 THEN
                  v_plan := v_plan66;
              ELSIF v_from = 67 THEN
                  v_plan := v_plan67;
              ELSIF v_from = 68 THEN
                  v_plan := v_plan68;
              ELSIF v_from = 69 THEN
                  v_plan := v_plan69;
              ELSIF v_from = 70 THEN
                  v_plan := v_plan70;  
               ELSIF v_from = 71 THEN
                  v_plan := v_plan71;
              ELSIF v_from = 72 THEN
                  v_plan := v_plan72;
              ELSIF v_from = 73 THEN
                  v_plan := v_plan73;
              ELSIF v_from = 74 THEN
                  v_plan := v_plan74;
              ELSIF v_from = 75 THEN
                  v_plan := v_plan75;
              ELSIF v_from = 76 THEN
                  v_plan := v_plan76;
              ELSIF v_from = 77 THEN
                  v_plan := v_plan77;
              ELSIF v_from = 78 THEN
                  v_plan := v_plan78;
              ELSIF v_from = 79 THEN
                  v_plan := v_plan79;
              ELSIF v_from = 80 THEN
                  v_plan := v_plan80;  
               
              ELSIF v_from = 81 THEN
                  v_plan := v_plan81;
              ELSIF v_from = 82 THEN
                  v_plan := v_plan82;
              ELSIF v_from = 83 THEN
                  v_plan := v_plan83;
              ELSIF v_from = 84 THEN
                  v_plan := v_plan84;
              ELSIF v_from = 85 THEN
                  v_plan := v_plan85;
              ELSIF v_from = 86 THEN
                  v_plan := v_plan86;
              ELSIF v_from = 87 THEN
                  v_plan := v_plan87;
              ELSIF v_from = 88 THEN
                  v_plan := v_plan88;
              ELSIF v_from = 89 THEN
                  v_plan := v_plan89;
              ELSIF v_from = 90 THEN
                  v_plan := v_plan90;  
              else
                  v_plan := 0;
              END IF;
              
              
                IF v_from = 1 THEN
                 v_purchase := v_purchase1;
              ELSIF v_from = 2 THEN
                  v_purchase := v_purchase2;
              ELSIF v_from = 3 THEN
                  v_purchase := v_purchase3;
              ELSIF v_from = 4 THEN
                  v_purchase := v_purchase4;
              ELSIF v_from = 5 THEN
                  v_purchase := v_purchase5;
              ELSIF v_from = 6 THEN
                  v_purchase := v_purchase6;
              ELSIF v_from = 7 THEN
                  v_purchase := v_purchase7;
              ELSIF v_from = 8 THEN
                  v_purchase := v_purchase8;
              ELSIF v_from = 9 THEN
                  v_purchase := v_purchase9;
              ELSIF v_from = 10 THEN
                  v_purchase := v_purchase10;
               ELSIF v_from = 11 THEN
                  v_purchase := v_purchase11;
              ELSIF v_from = 12 THEN
                  v_purchase := v_purchase12;
              ELSIF v_from = 13 THEN
                  v_purchase := v_purchase13;
              ELSIF v_from = 14 THEN
                  v_purchase := v_purchase14;
              ELSIF v_from = 15 THEN
                  v_purchase := v_purchase15;
              ELSIF v_from = 16 THEN
                  v_purchase := v_purchase16;
              ELSIF v_from = 17 THEN
                  v_purchase := v_purchase17;
              ELSIF v_from = 18 THEN
                  v_purchase := v_purchase18;
              ELSIF v_from = 19 THEN
                  v_purchase := v_purchase19;
              ELSIF v_from = 20 THEN
                  v_purchase := v_purchase20;
               ELSIF v_from = 21 THEN
                  v_purchase := v_purchase21;
              ELSIF v_from = 22 THEN
                  v_purchase := v_purchase22;
              ELSIF v_from = 23 THEN
                  v_purchase := v_purchase23;
              ELSIF v_from = 24 THEN
                  v_purchase := v_purchase24;
              ELSIF v_from = 25 THEN
                  v_purchase := v_purchase25;
              ELSIF v_from = 26 THEN
                  v_purchase := v_purchase26;
              ELSIF v_from = 27 THEN
                  v_purchase := v_purchase27;
              ELSIF v_from = 28 THEN
                  v_purchase := v_purchase28;
              ELSIF v_from = 29 THEN
                  v_purchase := v_purchase29;
              ELSIF v_from = 30 THEN
                  v_purchase := v_purchase30;  
               ELSIF v_from = 31 THEN
                  v_purchase := v_purchase31;
              ELSIF v_from = 32 THEN
                  v_purchase := v_purchase32;
              ELSIF v_from = 33 THEN
                  v_purchase := v_purchase33;
              ELSIF v_from = 34 Then
                  v_purchase := v_purchase34;
              ELSIF v_from = 35 THEN
                  v_purchase := v_purchase35;
              ELSIF v_from = 36 THEN
                  v_purchase := v_purchase36;
              ELSIF v_from = 37 THEN
                  v_purchase := v_purchase37;
              ELSIF v_from = 38 THEN
                  v_purchase := v_purchase38;
              ELSIF v_from = 39 THEN
                  v_purchase := v_purchase39;
              ELSIF v_from = 40 THEN
                  v_purchase := v_purchase40;  
               ELSIF v_from = 41 THEN
                  v_purchase := v_purchase41;
              ELSIF v_from = 42 THEN
                  v_purchase := v_purchase42;
              ELSIF v_from = 43 THeN
                  v_purchase := v_purchase43;
              ELSIF v_from = 44 THEN
                  v_purchase := v_purchase44;
              ELSIF v_from = 45 THEN
                  v_purchase := v_purchase45;
              ELSIF v_from = 46 THEN
                  v_purchase := v_purchase46;
              ELSIF v_from = 47 THEN
                  v_purchase := v_purchase47;
              ELSIF v_from = 48 THEN
                  v_purchase := v_purchase48;
              ELSIF v_from = 49 THEN
                  v_purchase := v_purchase49;
              ELSIF v_from = 50 THEN
                  v_purchase := v_purchase50;  
             
               ELSIF v_from = 51 THEN
                  v_purchase := v_purchase51;
              ELSIF v_from = 52 THEN
                  v_purchase := v_purchase52;
              ELSIF v_from = 53 THEN
                  v_purchase := v_purchase53;
              ELSIF v_from = 54 THEN
                  v_purchase := v_purchase54;
              ELSIF v_from = 55 THEN
                  v_purchase := v_purchase55;
              ELSIF v_from = 56 THEN
                  v_purchase := v_purchase56;
              ELSIF v_from = 57 THEN
                  v_purchase := v_purchase57;
              ELSIF v_from = 58 THEN
                  v_purchase := v_purchase58;
              ELSIF v_from = 59 THEN
                  v_purchase := v_purchase59;
              ELSIF v_from = 60 THEN
                  v_purchase := v_purchase60;  
             
               ELSIF v_from = 61 THEN
                  v_purchase := v_purchase61;
              ELSIF v_from = 62 THEN
                  v_purchase := v_purchase62;
              ELSIF v_from = 63 THEN
                  v_purchase := v_purchase63;
              ELSIF v_from = 64 THEN
                  v_purchase := v_purchase64;
              ELSIF v_from = 65 THEN
                  v_purchase := v_purchase65;
              ELSIF v_from = 66 THEN
                  v_purchase := v_purchase66;
              ELSIF v_from = 67 THEN
                  v_purchase := v_purchase67;
              ELSIF v_from = 68 THEN
                  v_purchase := v_purchase68;
              ELSIF v_from = 69 THEN
                  v_purchase := v_purchase69;
              ELSIF v_from = 70 THEN
                  v_purchase := v_purchase70;  
               ELSIF v_from = 71 THEN
                  v_purchase := v_purchase71;
              ELSIF v_from = 72 THEN
                  v_purchase := v_purchase72;
              ELSIF v_from = 73 THEN
                  v_purchase := v_purchase73;
              ELSIF v_from = 74 THEN
                  v_purchase := v_purchase74;
              ELSIF v_from = 75 THEN
                  v_purchase := v_purchase75;
              ELSIF v_from = 76 THEN
                  v_purchase := v_purchase76;
              ELSIF v_from = 77 THEN
                  v_purchase := v_purchase77;
              ELSIF v_from = 78 THEN
                  v_purchase := v_purchase78;
              ELSIF v_from = 79 THEN
                  v_purchase := v_purchase79;
              ELSIF v_from = 80 THEN
                  v_purchase := v_purchase80;  
               
              ELSIF v_from = 81 THEN
                  v_purchase := v_purchase81;
              ELSIF v_from = 82 THEN
                  v_purchase := v_purchase82;
              ELSIF v_from = 83 THEN
                  v_purchase := v_purchase83;
              ELSIF v_from = 84 THEN
                  v_purchase := v_purchase84;
              ELSIF v_from = 85 THEN
                  v_purchase := v_purchase85;
              ELSIF v_from = 86 THEN
                  v_purchase := v_purchase86;
              ELSIF v_from = 87 THEN
                  v_purchase := v_purchase87;
              ELSIF v_from = 88 THEN
                  v_purchase := v_purchase88;
              ELSIF v_from = 89 THEN
                  v_purchase := v_purchase89;
              ELSIF v_from = 90 THEN
                  v_purchase := v_purchase90;  
              else
                  v_purchase := 0;
              END IF;
              
               IF v_from = 1 THEN
                 v_arrival := v_arrival1;
              ELSIF v_from = 2 THEN
                  v_arrival := v_arrival2;
              ELSIF v_from = 3 THEN
                  v_arrival := v_arrival3;
              ELSIF v_from = 4 THEN
                  v_arrival := v_arrival4;
              ELSIF v_from = 5 THEN
                  v_arrival := v_arrival5;
              ELSIF v_from = 6 THEN
                  v_arrival := v_arrival6;
              ELSIF v_from = 7 THEN
                  v_arrival := v_arrival7;
              ELSIF v_from = 8 THEN
                  v_arrival := v_arrival8;
              ELSIF v_from = 9 THEN
                  v_arrival := v_arrival9;
              ELSIF v_from = 10 THEN
                  v_arrival := v_arrival10;
               ELSIF v_from = 11 THEN
                  v_arrival := v_arrival11;
              ELSIF v_from = 12 THEN
                  v_arrival := v_arrival12;
              ELSIF v_from = 13 THEN
                  v_arrival := v_arrival13;
              ELSIF v_from = 14 THEN
                  v_arrival := v_arrival14;
              ELSIF v_from = 15 THEN
                  v_arrival := v_arrival15;
              ELSIF v_from = 16 THEN
                  v_arrival := v_arrival16;
              ELSIF v_from = 17 THEN
                  v_arrival := v_arrival17;
              ELSIF v_from = 18 THEN
                  v_arrival := v_arrival18;
              ELSIF v_from = 19 THEN
                  v_arrival := v_arrival19;
              ELSIF v_from = 20 THEN
                  v_arrival := v_arrival20;
               ELSIF v_from = 21 THEN
                  v_arrival := v_arrival21;
              ELSIF v_from = 22 THEN
                  v_arrival := v_arrival22;
              ELSIF v_from = 23 THEN
                  v_arrival := v_arrival23;
              ELSIF v_from = 24 THEN
                  v_arrival := v_arrival24;
              ELSIF v_from = 25 THEN
                  v_arrival := v_arrival25;
              ELSIF v_from = 26 THEN
                  v_arrival := v_arrival26;
              ELSIF v_from = 27 THEN
                  v_arrival := v_arrival27;
              ELSIF v_from = 28 THEN
                  v_arrival := v_arrival28;
              ELSIF v_from = 29 THEN
                  v_arrival := v_arrival29;
              ELSIF v_from = 30 THEN
                  v_arrival := v_arrival30;  
               ELSIF v_from = 31 THEN
                  v_arrival := v_arrival31;
              ELSIF v_from = 32 THEN
                  v_arrival := v_arrival32;
              ELSIF v_from = 33 THEN
                  v_arrival := v_arrival33;
              ELSIF v_from = 34 Then
                  v_arrival := v_arrival34;
              ELSIF v_from = 35 THEN
                  v_arrival := v_arrival35;
              ELSIF v_from = 36 THEN
                  v_arrival := v_arrival36;
              ELSIF v_from = 37 THEN
                  v_arrival := v_arrival37;
              ELSIF v_from = 38 THEN
                  v_arrival := v_arrival38;
              ELSIF v_from = 39 THEN
                  v_arrival := v_arrival39;
              ELSIF v_from = 40 THEN
                  v_arrival := v_arrival40;  
               ELSIF v_from = 41 THEN
                  v_arrival := v_arrival41;
              ELSIF v_from = 42 THEN
                  v_arrival := v_arrival42;
              ELSIF v_from = 43 THeN
                  v_arrival := v_arrival43;
              ELSIF v_from = 44 THEN
                  v_arrival := v_arrival44;
              ELSIF v_from = 45 THEN
                  v_arrival := v_arrival45;
              ELSIF v_from = 46 THEN
                  v_arrival := v_arrival46;
              ELSIF v_from = 47 THEN
                  v_arrival := v_arrival47;
              ELSIF v_from = 48 THEN
                  v_arrival := v_arrival48;
              ELSIF v_from = 49 THEN
                  v_arrival := v_arrival49;
              ELSIF v_from = 50 THEN
                  v_arrival := v_arrival50;  
             
               ELSIF v_from = 51 THEN
                  v_arrival := v_arrival51;
              ELSIF v_from = 52 THEN
                  v_arrival := v_arrival52;
              ELSIF v_from = 53 THEN
                  v_arrival := v_arrival53;
              ELSIF v_from = 54 THEN
                  v_arrival := v_arrival54;
              ELSIF v_from = 55 THEN
                  v_arrival := v_arrival55;
              ELSIF v_from = 56 THEN
                  v_arrival := v_arrival56;
              ELSIF v_from = 57 THEN
                  v_arrival := v_arrival57;
              ELSIF v_from = 58 THEN
                  v_arrival := v_arrival58;
              ELSIF v_from = 59 THEN
                  v_arrival := v_arrival59;
              ELSIF v_from = 60 THEN
                  v_arrival := v_arrival60;  
             
               ELSIF v_from = 61 THEN
                  v_arrival := v_arrival61;
              ELSIF v_from = 62 THEN
                  v_arrival := v_arrival62;
              ELSIF v_from = 63 THEN
                  v_arrival := v_arrival63;
              ELSIF v_from = 64 THEN
                  v_arrival := v_arrival64;
              ELSIF v_from = 65 THEN
                  v_arrival := v_arrival65;
              ELSIF v_from = 66 THEN
                  v_arrival := v_arrival66;
              ELSIF v_from = 67 THEN
                  v_arrival := v_arrival67;
              ELSIF v_from = 68 THEN
                  v_arrival := v_arrival68;
              ELSIF v_from = 69 THEN
                  v_arrival := v_arrival69;
              ELSIF v_from = 70 THEN
                  v_arrival := v_arrival70;  
               ELSIF v_from = 71 THEN
                  v_arrival := v_arrival71;
              ELSIF v_from = 72 THEN
                  v_arrival := v_arrival72;
              ELSIF v_from = 73 THEN
                  v_arrival := v_arrival73;
              ELSIF v_from = 74 THEN
                  v_arrival := v_arrival74;
              ELSIF v_from = 75 THEN
                  v_arrival := v_arrival75;
              ELSIF v_from = 76 THEN
                  v_arrival := v_arrival76;
              ELSIF v_from = 77 THEN
                  v_arrival := v_arrival77;
              ELSIF v_from = 78 THEN
                  v_arrival := v_arrival78;
              ELSIF v_from = 79 THEN
                  v_arrival := v_arrival79;
              ELSIF v_from = 80 THEN
                  v_arrival := v_arrival80;  
               
              ELSIF v_from = 81 THEN
                  v_arrival := v_arrival81;
              ELSIF v_from = 82 THEN
                  v_arrival := v_arrival82;
              ELSIF v_from = 83 THEN
                  v_arrival := v_arrival83;
              ELSIF v_from = 84 THEN
                  v_arrival := v_arrival84;
              ELSIF v_from = 85 THEN
                  v_arrival := v_arrival85;
              ELSIF v_from = 86 THEN
                  v_arrival := v_arrival86;
              ELSIF v_from = 87 THEN
                  v_arrival := v_arrival87;
              ELSIF v_from = 88 THEN
                  v_arrival := v_arrival88;
              ELSIF v_from = 89 THEN
                  v_arrival := v_arrival89;
              ELSIF v_from = 90 THEN
                  v_arrival := v_arrival90;  
              else
                  v_arrival := 0;
              END IF;

            v_plan := ceil(v_plan);     
            v_rata := ceil(v_rata);
            
            --insert into ztb_log_kuraire  (wo) values (v_rata);   
            v_inventory := nvl(v_inventory,0) - nvl(v_plan,0) + nvl(v_arrival,0);-- + nvl(v_purchase,0);
            
           
            
--            if v_rata < 1 then 
--             v_ito := ceil(v_inventory / v_rata1); 
--            else
--             v_ito := ceil(v_inventory / v_rata); 
--            end if;
            
           


            v_str := ' ' ; 
            
           
            v_str :=  'update ztb_mrp_data set N_' || v_from || ' = '''|| nvl(ceil(v_plan),0) || ''' WHERE item_no = '''|| c_item_no ||''' and no_id = 1';
            EXECUTE IMMEDIATE v_str;
            --insert into ztb_log_kuraire  (wo) values (v_str) ;
            
           
            v_str :=   'update ztb_mrp_data set N_' || v_from || ' = '|| v_inventory ||' WHERE item_no = '|| c_item_no ||' and no_id = 4 ';
            EXECUTE IMMEDIATE v_str;
            --insert into ztb_log_kuraire  (wo) values (v_str) ;
             
            v_str := 'update ztb_mrp_data set N_' || v_from || ' = '|| nvl(v_arrival,0) ||' WHERE item_no = '|| c_item_no ||' and no_id = 2';
            EXECUTE IMMEDIATE v_str;
            --insert into ztb_log_kuraire  (wo) values (v_str) ;
              
            v_str :=  'update ztb_mrp_data set N_' || v_from || ' = '|| nvl(v_purchase,0) ||' WHERE item_no = '|| c_item_no ||' and no_id = 3 ';
            EXECUTE IMMEDIATE v_str;
            --insert into ztb_log_kuraire  (wo) values (v_str) ;
              
            v_str :=  'update ztb_mrp_data set N_' || v_from || ' = '|| nvl(v_ito_min,0) ||' WHERE item_no = '|| c_item_no ||' and no_id = 5 ';
            EXECUTE IMMEDIATE v_str;
            
            if v_rata is null or v_rata = 0 then 
               v_str :=  'update ztb_mrp_data set N_' || v_from || ' = '|| 0 ||' WHERE item_no = '|| c_item_no ||' and no_id = 6 ';
            else
              v_ito := ceil(v_inventory / nvl(v_rata,1));
               v_str :=  'update ztb_mrp_data set N_' || v_from || ' = '|| nvl(v_ito,0) ||' WHERE item_no = '|| c_item_no ||' and no_id = 6 ';
            end if;
            
           
            EXECUTE IMMEDIATE v_str;
              
            v_str := 'update ztb_mrp_data set N_' || v_from || ' = '|| nvl(v_ito_max,0) ||' WHERE item_no = '|| c_item_no ||' and no_id = 7 ';
            EXECUTE IMMEDIATE v_str;
            
            if v_rata is null or v_rata = 0 then 
               v_str :=  'update ztb_mrp_data set N_' || v_from || ' = '|| 0 ||' WHERE item_no = '|| c_item_no ||' and no_id = 8 ';
            else
             
               v_str :=  'update ztb_mrp_data set N_' || v_from || ' = '|| nvl(v_rata,0) ||' WHERE item_no = '|| c_item_no ||' and no_id = 8 ';
            end if;
            EXECUTE IMMEDIATE v_str;
   
               
         END LOOP;   
      commit;  
      end;


--   
--update ztb_mrp_Data 
--   set N_1 = N_1 || v_uom ,
--   N_2 = N_2 || v_uom,
--N_3 = N_3 || v_uom,
--N_4 = N_4 || v_uom,
--N_5 = N_5 || v_uom,
--N_6 = N_6 || v_uom,
--N_7 = N_7 || v_uom,
--N_8 = N_8 || v_uom,
--N_9 = N_9 || v_uom,
--N_10 = N_10 || v_uom,
--N_11 = N_11 || v_uom,
--N_12 = N_12 || v_uom,
--N_13 = N_13 || v_uom,
--N_14 = N_14 || v_uom,
--N_15 = N_15 || v_uom,
--N_16 = N_16 || v_uom,
--N_17 = N_17 || v_uom,
--N_18 = N_18 || v_uom,
--N_19 = N_19 || v_uom,
--N_20 = N_20 || v_uom,
--N_21 = N_21 || v_uom,
--N_22 = N_22 || v_uom,
--N_23 = N_23 || v_uom,
--N_24 = N_24 || v_uom,
--N_25 = N_25 || v_uom,
--N_26 = N_26 || v_uom,
--N_27 = N_27 || v_uom,
--N_28 = N_28 || v_uom,
--N_29 = N_29 || v_uom,
--N_30 = N_30 || v_uom,
--N_31 = N_31 || v_uom,
--N_32 = N_32 || v_uom,
--N_33 = N_33 || v_uom,
--N_34 = N_34 || v_uom,
--N_35 = N_35 || v_uom,
--N_36 = N_36 || v_uom,
--N_37 = N_37 || v_uom,
--N_38 = N_38 || v_uom,
--N_39 = N_39 || v_uom,
--N_40 = N_40 || v_uom,
--N_41 = N_41 || v_uom,
--N_42 = N_42 || v_uom,
--N_43 = N_43 || v_uom,
--N_44 = N_44 || v_uom,
--N_45 = N_45 || v_uom,
--N_46 = N_46 || v_uom,
--N_47 = N_47 || v_uom,
--N_48 = N_48 || v_uom,
--N_49 = N_49 || v_uom,
--N_50 = N_50 || v_uom,
--N_51 = N_51 || v_uom,
--N_52 = N_52 || v_uom,
--N_53 = N_53 || v_uom,
--N_54 = N_54 || v_uom,
--N_55 = N_55 || v_uom,
--N_56 = N_56 || v_uom,
--N_57 = N_57 || v_uom,
--N_58 = N_58 || v_uom,
--N_59 = N_59 || v_uom,
--N_60 = N_60 || v_uom,
--N_61 = N_61 || v_uom,
--N_62 = N_62 || v_uom,
--N_63 = N_63 || v_uom,
--N_64 = N_64 || v_uom,
--N_65 = N_65 || v_uom,
--N_66 = N_66 || v_uom,
--N_67 = N_67 || v_uom,
--N_68 = N_68 || v_uom,
--N_69 = N_69 || v_uom,
--N_70 = N_70 || v_uom,
--N_71 = N_71 || v_uom,
--N_72 = N_72 || v_uom,
--N_73 = N_73 || v_uom,
--N_74 = N_74 || v_uom,
--N_75 = N_75 || v_uom,
--N_76 = N_76 || v_uom,
--N_77 = N_77 || v_uom,
--N_78 = N_78 || v_uom,
--N_79 = N_79 || v_uom,
--N_80 = N_80 || v_uom,
--N_81 = N_81 || v_uom,
--N_82 = N_82 || v_uom,
--N_83 = N_83 || v_uom,
--N_84 = N_84 || v_uom,
--N_85 = N_85 || v_uom,
--N_86 = N_86 || v_uom,
--N_87 = N_87 || v_uom,
--N_88 = N_88 || v_uom,
--N_89 = N_89 || v_uom,
--N_90 = N_90 || v_uom
--where item_no = c_item_no ;

   
   END LOOP;
CLOSE c_item; 

--EXECUTE IMMEDIATE v_str;              
      
          

      


ENd;


/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_MRP_MATERIAL_ITEM" (
    V_ITEM_NO IN VARCHAR
) is 


v_outstanding VARCHAR(100) := 0;
v_tot integer := 0;
v_uom varchar(10) := '';

c_item_type VARCHAR(100) := '';
v_Month_Diff integer := 0;
v_month VARCHAR(10) := '';
c_item_no VARCHAR(10) := '';
c_description VARCHAR(100) := '';
v_str VARCHAR(32000) := '';
v_rata varchar(20) := 0;
v_Date date := sysdate;
v_from VARCHAR(10) := 0;
v_to VARCHAR(10) := 90;
v_plan number := 0;
v_purchase number :=0;
v_arrival number := 0;
v_rata1 number := 0;
v_rata2 number := 0;
v_rata3 number := 0;
v_rata4 number := 0;
v_inventory VARCHAR(100) := 0;
v_inventory_PRF VARCHAR(10) := 0;
v_month1 date := sysdate;
v_month2 date := add_months(sysdate,1);
v_month3 date := add_months(sysdate,1);
v_ito VARCHAR(100) := 0;
v_ito_prf VARCHAR(100) := 0;
v_ito_max VARCHAR(100) := 0;
v_ito_min VARCHAR(100) := 0;
 v_plan1 Number := 0;
              v_plan2 Number := 0;
              v_plan3 Number := 0;
              v_plan4 Number := 0;
              v_plan5 Number := 0;
              v_plan6 Number := 0; 
              v_plan7 Number := 0;
              v_plan8 Number := 0;
              v_plan9 Number := 0;
              v_plan10 Number := 0;
              v_plan11 Number := 0;
              v_plan12 Number := 0;
              v_plan13 Number := 0;
              v_plan14 Number := 0;
              v_plan15 Number := 0;
              v_plan16 Number := 0; 
              v_plan17 Number := 0;
              v_plan18 Number := 0;
              v_plan19 Number := 0;
              v_plan20 Number := 0;
              v_plan21 Number := 0;
              v_plan22 Number := 0;
              v_plan23 Number := 0;
              v_plan24 Number := 0;
              v_plan25 Number := 0;
              v_plan26 Number := 0; 
              v_plan27 Number := 0;
              v_plan28 Number := 0;
              v_plan29 Number := 0;
              v_plan30 Number := 0;
              v_plan31 Number := 0;
              v_plan32 Number := 0;
              v_plan33 Number := 0;
              v_plan34 Number := 0;
              v_plan35 Number := 0;
              v_plan36 Number := 0; 
              v_plan37 Number := 0;
              v_plan38 Number := 0;
              v_plan39 Number := 0;
              v_plan40 Number := 0;
              v_plan41 Number := 0;
              v_plan42 Number := 0;
              v_plan43 Number := 0;
              v_plan44 Number := 0;
              v_plan45 Number := 0;
              v_plan46 Number := 0; 
              v_plan47 Number := 0;
              v_plan48 Number := 0;
              v_plan49 Number := 0;
              v_plan50 Number := 0;
              v_plan51 Number := 0;
              v_plan52 Number := 0;
              v_plan53 Number := 0;
              v_plan54 Number := 0;
              v_plan55 Number := 0;
              v_plan56 Number := 0; 
              v_plan57 Number := 0;
              v_plan58 Number := 0;
              v_plan59 Number := 0;
              v_plan60 Number := 0;
              v_plan61 Number := 0;
              v_plan62 Number := 0;
              v_plan63 Number := 0;
              v_plan64 Number := 0;
              v_plan65 Number := 0;
              v_plan66 Number := 0; 
              v_plan67 Number := 0;
              v_plan68 Number := 0;
              v_plan69 Number := 0;
              v_plan70 Number := 0;
              v_plan71 Number := 0;
              v_plan72 Number := 0;
              v_plan73 Number := 0;
              v_plan74 Number := 0;
              v_plan75 Number := 0;
              v_plan76 Number := 0; 
              v_plan77 Number := 0;
              v_plan78 Number := 0;
              v_plan79 Number := 0;
              v_plan80 Number := 0;
              v_plan81 Number := 0;
              v_plan82 Number := 0;
              v_plan83 Number := 0;
              v_plan84 Number := 0;
              v_plan85 Number := 0;
              v_plan86 Number := 0; 
              v_plan87 Number := 0;
              v_plan88 Number := 0;
              v_plan89 Number := 0;
              v_plan90 Number := 0;
                  v_purchase1 Number := 0;
               v_purchase2 Number := 0;
              v_purchase3 Number := 0;
              v_purchase4 Number := 0;
              v_purchase5 Number := 0;
              v_purchase6 Number := 0; 
              v_purchase7 Number := 0;
              v_purchase8 Number := 0;
              v_purchase9 Number := 0;
              v_purchase10 Number := 0;
              v_purchase11 Number := 0;
              v_purchase12 Number := 0;
              v_purchase13 Number := 0;
              v_purchase14 Number := 0;
              v_purchase15 Number := 0;
              v_purchase16 Number := 0; 
              v_purchase17 Number := 0;
              v_purchase18 Number := 0;
              v_purchase19 Number := 0;
              v_purchase20 Number := 0;
              v_purchase21 Number := 0;
              v_purchase22 Number := 0;
              v_purchase23 Number := 0;
              v_purchase24 Number := 0;
              v_purchase25 Number := 0;
              v_purchase26 Number := 0; 
              v_purchase27 Number := 0;
              v_purchase28 Number := 0;
              v_purchase29 Number := 0;
              v_purchase30 Number := 0;
              v_purchase31 Number := 0;
              v_purchase32 Number := 0;
              v_purchase33 Number := 0;
              v_purchase34 Number := 0;
              v_purchase35 Number := 0;
              v_purchase36 Number := 0; 
              v_purchase37 Number := 0;
              v_purchase38 Number := 0;
              v_purchase39 Number := 0;
              v_purchase40 Number := 0;
              v_purchase41 Number := 0;
              v_purchase42 Number := 0;
              v_purchase43 Number := 0;
              v_purchase44 Number := 0;
              v_purchase45 Number := 0;
              v_purchase46 Number := 0; 
              v_purchase47 Number := 0;
              v_purchase48 Number := 0;
              v_purchase49 Number := 0;
              v_purchase50 Number := 0;
              v_purchase51 Number := 0;
              v_purchase52 Number := 0;
              v_purchase53 Number := 0;
              v_purchase54 Number := 0;
              v_purchase55 Number := 0;
              v_purchase56 Number := 0; 
              v_purchase57 Number := 0;
              v_purchase58 Number := 0;
              v_purchase59 Number := 0;
              v_purchase60 Number := 0;
              v_purchase61 Number := 0;
              v_purchase62 Number := 0;
              v_purchase63 Number := 0;
              v_purchase64 Number := 0;
              v_purchase65 Number := 0;
              v_purchase66 Number := 0; 
              v_purchase67 Number := 0;
              v_purchase68 Number := 0;
              v_purchase69 Number := 0;
              v_purchase70 Number := 0;
              v_purchase71 Number := 0;
              v_purchase72 Number := 0;
              v_purchase73 Number := 0;
              v_purchase74 Number := 0;
              v_purchase75 Number := 0;
              v_purchase76 Number := 0; 
              v_purchase77 Number := 0;
              v_purchase78 Number := 0;
              v_purchase79 Number := 0;
              v_purchase80 Number := 0;
              v_purchase81 Number := 0;
              v_purchase82 Number := 0;
              v_purchase83 Number := 0;
              v_purchase84 Number := 0;
              v_purchase85 Number := 0;
              v_purchase86 Number := 0; 
              v_purchase87 Number := 0;
              v_purchase88 Number := 0;
              v_purchase89 Number := 0;
              v_purchase90 Number := 0;
              v_arrival1 Number := 0;
               v_arrival2 Number := 0;
              v_arrival3 Number := 0;
              v_arrival4 Number := 0;
              v_arrival5 Number := 0;
              v_arrival6 Number := 0; 
              v_arrival7 Number := 0;
              v_arrival8 Number := 0;
              v_arrival9 Number := 0;
              v_arrival10 Number := 0;
              v_arrival11 Number := 0;
              v_arrival12 Number := 0;
              v_arrival13 Number := 0;
              v_arrival14 Number := 0;
              v_arrival15 Number := 0;
              v_arrival16 Number := 0; 
              v_arrival17 Number := 0;
              v_arrival18 Number := 0;
              v_arrival19 Number := 0;
              v_arrival20 Number := 0;
              v_arrival21 Number := 0;
              v_arrival22 Number := 0;
              v_arrival23 Number := 0;
              v_arrival24 Number := 0;
              v_arrival25 Number := 0;
              v_arrival26 Number := 0; 
              v_arrival27 Number := 0;
              v_arrival28 Number := 0;
              v_arrival29 Number := 0;
              v_arrival30 Number := 0;
              v_arrival31 Number := 0;
              v_arrival32 Number := 0;
              v_arrival33 Number := 0;
              v_arrival34 Number := 0;
              v_arrival35 Number := 0;
              v_arrival36 Number := 0; 
              v_arrival37 Number := 0;
              v_arrival38 Number := 0;
              v_arrival39 Number := 0;
              v_arrival40 Number := 0;
              v_arrival41 Number := 0;
              v_arrival42 Number := 0;
              v_arrival43 Number := 0;
              v_arrival44 Number := 0;
              v_arrival45 Number := 0;
              v_arrival46 Number := 0; 
              v_arrival47 Number := 0;
              v_arrival48 Number := 0;
              v_arrival49 Number := 0;
              v_arrival50 Number := 0;
              v_arrival51 Number := 0;
              v_arrival52 Number := 0;
              v_arrival53 Number := 0;
              v_arrival54 Number := 0;
              v_arrival55 Number := 0;
              v_arrival56 Number := 0; 
              v_arrival57 Number := 0;
              v_arrival58 Number := 0;
              v_arrival59 Number := 0;
              v_arrival60 Number := 0;
              v_arrival61 Number := 0;
              v_arrival62 Number := 0;
              v_arrival63 Number := 0;
              v_arrival64 Number := 0;
              v_arrival65 Number := 0;
              v_arrival66 Number := 0; 
              v_arrival67 Number := 0;
              v_arrival68 Number := 0;
              v_arrival69 Number := 0;
              v_arrival70 Number := 0;
              v_arrival71 Number := 0;
              v_arrival72 Number := 0;
              v_arrival73 Number := 0;
              v_arrival74 Number := 0;
              v_arrival75 Number := 0;
              v_arrival76 Number := 0; 
              v_arrival77 Number := 0;
              v_arrival78 Number := 0;
              v_arrival79 Number := 0;
              v_arrival80 Number := 0;
              v_arrival81 Number := 0;
              v_arrival82 Number := 0;
              v_arrival83 Number := 0;
              v_arrival84 Number := 0;
              v_arrival85 Number := 0;
              v_arrival86 Number := 0; 
              v_arrival87 Number := 0;
              v_arrival88 Number := 0;
              v_arrival89 Number := 0;
              v_arrival90 Number := 0;


CURSOR c_item is 
  SELECT distinct z.item_no,aa.description,aa.item_type
  FROM ztb_material_konversi z inner join (select item_no, description,
    case Item_no 
        when 1170140 then 'CC ROD LR6'
        when 1130031 then 'CC ROD LR6'
        when 1170133 Then 'KOH'
        when 1170037 then 'KOH'
        when 1110064 then 'GASKET LR03'
        when 1110026 then 'GASKET LR03'
        when 1120007 then 'WASHER LR6'
        when 1120026 then 'WASHER LR6'
        when 1120028 Then 'GASKET LR6'
        when 1120041 Then 'GASKET LR6'
        when 1130025 then 'GASKET LR6'
        when 1110031 then 'WASHER LR03'
        when 1110006 then 'WASHER LR03'
        when 1170113 then 'EMD TOSOH HH T2'
        when 1170130 then 'EMD TOSOH HH T2'
        when 1170118 then 'ZINC POWDER'
        when 1170120 then 'ZINC POWDER'
        when 1110060 then 'CATH CAN LR03 (COATED)  (S)'
        when 1110065 then 'CATH CAN LR03 (COATED)  (S)'
        when 1170155 then 'CATH CAN LR6(COAT)2.0'
        when 1120045 then 'CATH CAN LR6(COAT)2.0'
        when 1170161 then 'CARBOXIL/AQUPEC'
        when 1170139 then 'CARBOXIL/AQUPEC'
        else description end item_type
  from item )aa on z.item_no = aa.item_no  where z.item_no = v_item_no;

begin

delete from ztb_mrp_data where item_no  = v_item_no;

OPEN c_item; 
   LOOP 
   FETCH c_item into c_item_no,c_description,c_item_type; 
      EXIT WHEN c_item%notfound; 
      begin


          v_from :=0;
          v_inventory := 0;
          v_inventory_PRF := 0;
        
        
        select trim(sysdate) into v_date from dual;
        select nvl(min_days,0),nvl(max_days,0) into v_ito_min,v_ito_max from ztb_config_rm where item_no = c_item_no;

        
        --Rata2 Bulan 1
        select nvl(sum(total)/count(tanggal),0) into v_rata1 from (
               select tanggal,sum(qty * konversi / 1000) as total, to_char(TO_DATE(tahun ||'-'|| bulan, 'YYYY-MM'), 'YYYY-MM')--,count(tanggal)
               from ztb_assy_plan aa
               inner join ztb_material_konversi bb
               on aa.cell_type = bb.cell_type and aa.assy_line = bb.assy_line
               where item_no = c_item_no  and to_char(TO_DATE(tahun ||'-'|| bulan, 'YYYY-MM'), 'YYYY-MM') = trim(to_char(v_date,'YYYY-MM'))
               and used = 1
               --and revisi  = (select max(revisi) from ztb_assy_plan where to_char(TO_DATE(tahun ||'-'|| bulan, 'YYYY-MM'), 'YYYY-MM') = trim(to_char(v_date,'YYYY-MM')))
               and bb.cell_type is not null
               group by bulan, tahun,tanggal
               )aa;
        
        
        --Rata2 Bulan 2
        select nvl(sum(total)/count(tanggal),0)  into v_rata2 from (
               select tanggal,sum(qty * konversi / 1000) as total, to_char(TO_DATE(tahun ||'-'|| bulan, 'YYYY-MM'), 'YYYY-MM')--,count(tanggal)
               from ztb_assy_plan aa
               inner join ztb_material_konversi bb
               on aa.cell_type = bb.cell_type and aa.assy_line = bb.assy_line
               where item_no = c_item_no  and to_char(TO_DATE(tahun ||'-'|| bulan, 'YYYY-MM'), 'YYYY-MM') = trim(to_char(add_months(v_date,1),'YYYY-MM'))
               and used = 1
               --and revisi  = (select max(revisi) from ztb_assy_plan where to_char(TO_DATE(tahun ||'-'|| bulan, 'YYYY-MM'), 'YYYY-MM') = trim(to_char(add_months(v_date,1),'YYYY-MM')))
            and bb.cell_type is not null
               group by bulan, tahun,tanggal
               )aa;
        
        --Rata2 Bulan3
        select nvl(sum(total)/count(tanggal),0)  into v_rata3 from (
               select tanggal,sum(qty * konversi / 1000) as total, to_char(TO_DATE(tahun ||'-'|| bulan, 'YYYY-MM'), 'YYYY-MM')--,count(tanggal)
               from ztb_assy_plan aa
               inner join ztb_material_konversi bb
               on aa.cell_type = bb.cell_type and aa.assy_line = bb.assy_line
               where item_no = c_item_no  and to_char(TO_DATE(tahun ||'-'|| bulan, 'YYYY-MM'), 'YYYY-MM') = trim(to_char(add_months(v_date,2),'YYYY-MM'))
               and used = 1
               --and revisi  = (select max(revisi) from ztb_assy_plan where to_char(TO_DATE(tahun ||'-'|| bulan, 'YYYY-MM'), 'YYYY-MM') = trim(to_char(add_months(v_date,2),'YYYY-MM')))
               and bb.cell_type is not null
               group by bulan, tahun,tanggal
               )aa;
               
        --Rata2 Bulan4
        select nvl(sum(total)/count(tanggal),0)  into v_rata4 from (
               select tanggal,sum(qty * konversi / 1000) as total, to_char(TO_DATE(tahun ||'-'|| bulan, 'YYYY-MM'), 'YYYY-MM')--,count(tanggal)
               from ztb_assy_plan aa
               inner join ztb_material_konversi bb
               on aa.cell_type = bb.cell_type and aa.assy_line = bb.assy_line
               where item_no = c_item_no  and to_char(TO_DATE(tahun ||'-'|| bulan, 'YYYY-MM'), 'YYYY-MM') = trim(to_char(add_months(v_date,3),'YYYY-MM'))
               and used = 1
               --and revisi  = (select max(revisi) from ztb_assy_plan where to_char(TO_DATE(tahun ||'-'|| bulan, 'YYYY-MM'), 'YYYY-MM') = trim(to_char(add_months(v_date,3),'YYYY-MM')))
               and bb.cell_type is not null
               group by bulan, tahun,tanggal
               )aa;     
        
        v_inventory := 0;
        v_inventory_PRF := 0;
        begin
        select this_inventory into v_inventory from whinventory where item_no = c_item_no;
        exception
               when NO_DATA_FOUND
               then v_inventory := 0;
        end;
        
         v_inventory_PRF := v_inventory;
        
        begin
        select unit_pl into v_uom from unit inner join item on item.uom_q  = unit_code where item_no = c_item_no;
        exception
               when NO_DATA_FOUND
               then v_uom := '';
        end;
        
        begin
        select sum(nvl(bal_qty,0)) into v_outstanding from po_details where eta < (select sysdate from dual) and eta > '01-JAN-18' and item_no = c_item_no;
        exception
               when NO_DATA_FOUND 
               then v_outstanding := 0;
        end;
        insert into ztb_mrp_data(item_no, item_desc,no_id,description,item_type)
         values(c_item_no, c_description,1,'Daily Consumption Plan',c_item_type);
         
         
         v_tot := v_inventory + nvl(v_outstanding,0);
         insert into ztb_mrp_data(item_no, item_desc,no_id,description,item_type)
         values(c_item_no, c_description,4,'Inventory + Outstanding   '|| v_inventory ||' + '|| nvl(v_outstanding,0) ||' = '||  v_tot ||' '|| v_uom ||' )',c_item_type);
         
         v_inventory := v_inventory + nvl(v_outstanding,0);
         v_inventory_PRF := v_inventory;
         
         insert into ztb_mrp_data(item_no, item_desc,no_id,description,item_type)
         values(c_item_no, c_description,2,'Arrival FI Plan',c_item_type);
        
         insert into ztb_mrp_data(item_no, item_desc,no_id,description,item_type)
         values(c_item_no, c_description,3,'Purchase Plan',c_item_type);
        
         insert into ztb_mrp_data(item_no, item_desc,no_id,description,item_type)
         values(c_item_no, c_description,5,'Max ITO(Days)',c_item_type);
        
         insert into ztb_mrp_data(item_no, item_desc,no_id,description,item_type)
         values(c_item_no, c_description,6,'ITO(Days)',c_item_type);
        
         insert into ztb_mrp_data(item_no, item_desc,no_id,description,item_type)
         values(c_item_no, c_description,7,'Min ITO(Days)',c_item_type);
         
          insert into ztb_mrp_data(item_no, item_desc,no_id,description,item_type)
         values(c_item_no, c_description,8,'Qty ITO/Day',c_item_type);
         
--         insert into ztb_mrp_data(item_no, item_desc,no_id,description,item_type)
--         values(c_item_no, c_description,9,'ITO (DAYS BY PURCHASE)',c_item_type);
--         
        commit;
       
       --Get Arrival
        
 select sum(tgl1) t1,
              sum(tgl2) t2,
              sum(tgl3) t3,
              sum(tgl4) t4,
              sum(tgl5) t5,
              sum(tgl6) t6,
              sum(tgl7) t7,
              sum(tgl8) t8,
              sum(tgl9) t9,
              sum(tgl10) t10,
              sum(tgl11) t11,
              sum(tgl12) t12,
              sum(tgl13) t13,
              sum(tgl14) t14,
              sum(tgl15) t15,
              sum(tgl16) t16,
              sum(tgl17) t17,
              sum(tgl18) t18,
              sum(tgl19) t19,
              sum(tgl20) t20,
              sum(tgl21) t21,
              sum(tgl22) t22,
              sum(tgl23) t23,
              sum(tgl24) t24,
              sum(tgl25) t25,
              sum(tgl26) t26,
              sum(tgl27) t27,
              sum(tgl28) t28,
              sum(tgl29) t29,
              sum(tgl30) t30,
              sum(tgl31) t31,
              sum(tgl32) t32,
              sum(tgl33) t33,
              sum(tgl34) t34,
              sum(tgl35) t35,
              sum(tgl36) t36,
              sum(tgl37) t37,
              sum(tgl38) t38,
              sum(tgl39) t39,
              sum(tgl40) t40,
              sum(tgl41) t41,
              sum(tgl42) t42,
              sum(tgl43) t43,
              sum(tgl44) t44,
              sum(tgl45) t45,
              sum(tgl46) t46,
              sum(tgl47) t47,
              sum(tgl48) t48,
              sum(tgl49) t49,
              sum(tgl50) t50,
              sum(tgl51) t51,
              sum(tgl52) t52,
              sum(tgl53) t53,
              sum(tgl54) t54,
              sum(tgl55) t55,
              sum(tgl56) t56,
              sum(tgl57) t57,
              sum(tgl58) t58,
              sum(tgl59) t59,
              sum(tgl60) t50,
              sum(tgl61) t61,
              sum(tgl62) t62,
              sum(tgl63) t63,
              sum(tgl64) t64,
              sum(tgl65) t65,
              sum(tgl66) t66,
              sum(tgl67) t67,
              sum(tgl68) t68,
              sum(tgl69) t69,
              sum(tgl70) t70,
              sum(tgl71) t71,
              sum(tgl72) t72,
              sum(tgl73) t73,
              sum(tgl74) t74,
              sum(tgl75) t75,
              sum(tgl76) t76,
              sum(tgl77) t77,
              sum(tgl78) t78,
              sum(tgl79) t79,
              sum(tgl80) t80,
              sum(tgl81) t81,
              sum(tgl82) t82,
              sum(tgl83) t83,
              sum(tgl84) t84,
              sum(tgl85) t85,
              sum(tgl86) t86,
              sum(tgl87) t87,
              sum(tgl88) t88,
              sum(tgl89) t89,
              sum(tgl90) t90
              into
              v_arrival1,
              v_arrival2,
              v_arrival3,
              v_arrival4,
              v_arrival5,
              v_arrival6, 
              v_arrival7,
              v_arrival8,
              v_arrival9,
              v_arrival10,
              v_arrival11,
              v_arrival12,
              v_arrival13,
              v_arrival14,
              v_arrival15,
              v_arrival16, 
              v_arrival17,
              v_arrival18,
              v_arrival19,
              v_arrival20,
              v_arrival21,
              v_arrival22,
              v_arrival23,
              v_arrival24,
              v_arrival25,
              v_arrival26, 
              v_arrival27,
              v_arrival28,
              v_arrival29,
              v_arrival30,
              v_arrival31,
              v_arrival32,
              v_arrival33,
              v_arrival34,
              v_arrival35,
              v_arrival36, 
              v_arrival37,
              v_arrival38,
              v_arrival39,
              v_arrival40,
              v_arrival41,
              v_arrival42,
              v_arrival43,
              v_arrival44,
              v_arrival45,
              v_arrival46, 
              v_arrival47,
              v_arrival48,
              v_arrival49,
              v_arrival50,
              v_arrival51,
              v_arrival52,
              v_arrival53,
              v_arrival54,
              v_arrival55,
              v_arrival56, 
              v_arrival57,
              v_arrival58,
              v_arrival59,
              v_arrival60,
              v_arrival61,
              v_arrival62,
              v_arrival63,
              v_arrival64,
              v_arrival65,
              v_arrival66, 
              v_arrival67,
              v_arrival68,
              v_arrival69,
              v_arrival70,
              v_arrival71,
              v_arrival72,
              v_arrival73,
              v_arrival74,
              v_arrival75,
              v_arrival76, 
              v_arrival77,
              v_arrival78,
              v_arrival79,
              v_arrival80,
              v_arrival81,
              v_arrival82,
              v_arrival83,
              v_arrival84,
              v_arrival85,
              v_arrival86, 
              v_arrival87,
              v_arrival88,
              v_arrival89,
              v_arrival90
              
              
       from     
       (
       select case when tgl = v_date  + 1 then jum else 0 end tgl1 ,
              case when tgl = v_date  + 2 then jum else 0 end tgl2 ,
              case when tgl = v_date + 3 then jum else 0 end tgl3 ,
              case when tgl = v_date  + 4 then jum else 0 end tgl4 ,
              case when tgl = v_date  + 5 then jum else 0 end tgl5 ,
              case when tgl = v_date  + 6 then jum else 0 end tgl6 ,
              case when tgl = v_date  + 7 then jum else 0 end tgl7 ,
              case when tgl = v_date  + 8 then jum else 0 end tgl8 ,
              case when tgl = v_date  + 9 then jum else 0 end tgl9 ,
              case when tgl = v_date  + 10 then jum else 0 end tgl10 ,
              case when tgl = v_date  + 11 then jum else 0 end tgl11 ,
              case when tgl = v_date  + 12 then jum else 0 end tgl12 ,
              case when tgl = v_date  + 13 then jum else 0 end tgl13 ,
              case when tgl = v_date  + 14 then jum else 0 end tgl14 ,
              case when tgl = v_date  + 15 then jum else 0 end tgl15 ,
              case when tgl = v_date  + 16 then jum else 0 end tgl16 ,
              case when tgl = v_date  + 17 then jum else 0 end tgl17 ,
              case when tgl = v_date  + 18 then jum else 0 end tgl18 ,
              case when tgl = v_date  + 19 then jum else 0 end tgl19 ,
              case when tgl = v_date  + 20 then jum else 0 end tgl20 ,
              case when tgl = v_date  + 21 then jum else 0 end tgl21 ,
              case when tgl = v_date  + 22 then jum else 0 end tgl22 ,
              case when tgl = v_date  + 23 then jum else 0 end tgl23 ,
              case when tgl = v_date  + 24 then jum else 0 end tgl24 ,
              case when tgl = v_date  + 25 then jum else 0 end tgl25 ,
              case when tgl = v_date  + 26 then jum else 0 end tgl26 ,
              case when tgl = v_date  + 27 then jum else 0 end tgl27 ,
              case when tgl = v_date  + 28 then jum else 0 end tgl28 ,
              case when tgl = v_date  + 29 then jum else 0 end tgl29 ,
              case when tgl = v_date  + 30 then jum else 0 end tgl30 ,
              case when tgl = v_date  + 31 then jum else 0 end tgl31 ,
              case when tgl = v_date  + 32 then jum else 0 end tgl32 ,
              case when tgl = v_date  + 33 then jum else 0 end tgl33 ,
              case when tgl = v_date  + 34 then jum else 0 end tgl34 ,
              case when tgl = v_date  + 35 then jum else 0 end tgl35 ,
              case when tgl = v_date  + 36 then jum else 0 end tgl36 ,
              case when tgl = v_date  + 37 then jum else 0 end tgl37 ,
              case when tgl = v_date  + 38 then jum else 0 end tgl38 ,
              case when tgl = v_date  + 39 then jum else 0 end tgl39 ,
              case when tgl = v_date  + 40 then jum else 0 end tgl40 ,
              case when tgl = v_date  + 41 then jum else 0 end tgl41 ,
              case when tgl = v_date  + 42 then jum else 0 end tgl42 ,
              case when tgl = v_date  + 43 then jum else 0 end tgl43,
              case when tgl = v_date  + 44 then jum else 0 end tgl44 ,
              case when tgl = v_date  + 45 then jum else 0 end tgl45 ,
              case when tgl = v_date  + 46 then jum else 0 end tgl46 ,
              case when tgl = v_date  + 47 then jum else 0 end tgl47 ,
              case when tgl = v_date  + 48 then jum else 0 end tgl48 ,
              case when tgl = v_date  + 49 then jum else 0 end tgl49,
              case when tgl = v_date  + 50 then jum else 0 end tgl50 ,
              case when tgl = v_date  + 51 then jum else 0 end tgl51 ,
              case when tgl = v_date  + 52 then jum else 0 end tgl52 ,
              case when tgl = v_date  + 53 then jum else 0 end tgl53 ,
              case when tgl = v_date  + 54 then jum else 0 end tgl54 ,
              case when tgl = v_date  + 55 then jum else 0 end tgl55 ,
              case when tgl = v_date  + 56 then jum else 0 end tgl56 ,
              case when tgl = v_date  + 57 then jum else 0 end tgl57 ,
              case when tgl = v_date  + 58 then jum else 0 end tgl58 ,
              case when tgl = v_date  + 59 then jum else 0 end tgl59 ,
              case when tgl = v_date  + 60 then jum else 0 end tgl60 ,
              case when tgl = v_date  + 61 then jum else 0 end tgl61 ,
              case when tgl = v_date  + 62 then jum else 0 end tgl62 ,
              case when tgl = v_date  + 63 then jum else 0 end tgl63 ,
              case when tgl = v_date  + 64 then jum else 0 end tgl64 ,
              case when tgl = v_date  + 65 then jum else 0 end tgl65 ,
              case when tgl = v_date  + 66 then jum else 0 end tgl66 ,
              case when tgl = v_date  + 67 then jum else 0 end tgl67 ,
              case when tgl = v_date  + 68 then jum else 0 end tgl68 ,
              case when tgl = v_date  + 69 then jum else 0 end tgl69 ,
               case when tgl = v_date  + 70 then jum else 0 end tgl70 ,
              case when tgl = v_date  + 71 then jum else 0 end tgl71 ,
              case when tgl = v_date  + 72 then jum else 0 end tgl72 ,
              case when tgl = v_date  + 73 then jum else 0 end tgl73 ,
              case when tgl = v_date  + 74 then jum else 0 end tgl74 ,
              case when tgl = v_date  + 75 then jum else 0 end tgl75 ,
              case when tgl = v_date  + 76 then jum else 0 end tgl76 ,
              case when tgl = v_date  + 77 then jum else 0 end tgl77 ,
              case when tgl = v_date  + 78 then jum else 0 end tgl78 ,
              case when tgl = v_date  + 79 then jum else 0 end tgl79 ,
              case when tgl = v_date  + 80 then jum else 0 end tgl80 ,
              case when tgl = v_date  + 81 then jum else 0 end tgl81 ,
              case when tgl = v_date  + 82 then jum else 0 end tgl82 ,
              case when tgl = v_date  + 83 then jum else 0 end tgl83 ,
              case when tgl = v_date  + 84 then jum else 0 end tgl84 ,
              case when tgl = v_date  + 85 then jum else 0 end tgl85 ,
              case when tgl = v_date  + 86 then jum else 0 end tgl86 ,
              case when tgl = v_date  + 87 then jum else 0 end tgl87 ,
              case when tgl = v_date  + 88 then jum else 0 end tgl88 ,
              case when tgl = v_date  + 89 then jum else 0 end tgl89 ,
              case when tgl = v_date  + 90 then jum else 0 end tgl90 
       from 
       (
       select nvl(sum(bal_qty),0) jum,eta tgl  from po_details where eta > trim(v_Date) and item_no = c_item_no and bal_qty <> 0 
       group by eta
       )aa   

       )bb;
       
       
       --Get Purchasa
        select sum(tgl1) t1,
              sum(tgl2) t2,
              sum(tgl3) t3,
              sum(tgl4) t4,
              sum(tgl5) t5,
              sum(tgl6) t6,
              sum(tgl7) t7,
              sum(tgl8) t8,
              sum(tgl9) t9,
              sum(tgl10) t10,
              sum(tgl11) t11,
              sum(tgl12) t12,
              sum(tgl13) t13,
              sum(tgl14) t14,
              sum(tgl15) t15,
              sum(tgl16) t16,
              sum(tgl17) t17,
              sum(tgl18) t18,
              sum(tgl19) t19,
              sum(tgl20) t20,
              sum(tgl21) t21,
              sum(tgl22) t22,
              sum(tgl23) t23,
              sum(tgl24) t24,
              sum(tgl25) t25,
              sum(tgl26) t26,
              sum(tgl27) t27,
              sum(tgl28) t28,
              sum(tgl29) t29,
              sum(tgl30) t30,
              sum(tgl31) t31,
              sum(tgl32) t32,
              sum(tgl33) t33,
              sum(tgl34) t34,
              sum(tgl35) t35,
              sum(tgl36) t36,
              sum(tgl37) t37,
              sum(tgl38) t38,
              sum(tgl39) t39,
              sum(tgl40) t40,
              sum(tgl41) t41,
              sum(tgl42) t42,
              sum(tgl43) t43,
              sum(tgl44) t44,
              sum(tgl45) t45,
              sum(tgl46) t46,
              sum(tgl47) t47,
              sum(tgl48) t48,
              sum(tgl49) t49,
              sum(tgl50) t50,
              sum(tgl51) t51,
              sum(tgl52) t52,
              sum(tgl53) t53,
              sum(tgl54) t54,
              sum(tgl55) t55,
              sum(tgl56) t56,
              sum(tgl57) t57,
              sum(tgl58) t58,
              sum(tgl59) t59,
              sum(tgl60) t50,
              sum(tgl61) t61,
              sum(tgl62) t62,
              sum(tgl63) t63,
              sum(tgl64) t64,
              sum(tgl65) t65,
              sum(tgl66) t66,
              sum(tgl67) t67,
              sum(tgl68) t68,
              sum(tgl69) t69,
              sum(tgl70) t70,
              sum(tgl71) t71,
              sum(tgl72) t72,
              sum(tgl73) t73,
              sum(tgl74) t74,
              sum(tgl75) t75,
              sum(tgl76) t76,
              sum(tgl77) t77,
              sum(tgl78) t78,
              sum(tgl79) t79,
              sum(tgl80) t80,
              sum(tgl81) t81,
              sum(tgl82) t82,
              sum(tgl83) t83,
              sum(tgl84) t84,
              sum(tgl85) t85,
              sum(tgl86) t86,
              sum(tgl87) t87,
              sum(tgl88) t88,
              sum(tgl89) t89,
              sum(tgl90) t90
              into
             v_purchase1,
              v_purchase2,
              v_purchase3,
              v_purchase4,
              v_purchase5,
              v_purchase6, 
              v_purchase7,
              v_purchase8,
              v_purchase9,
              v_purchase10,
              v_purchase11,
              v_purchase12,
              v_purchase13,
              v_purchase14,
              v_purchase15,
              v_purchase16, 
              v_purchase17,
              v_purchase18,
              v_purchase19,
              v_purchase20,
              v_purchase21,
              v_purchase22,
              v_purchase23,
              v_purchase24,
              v_purchase25,
              v_purchase26, 
              v_purchase27,
              v_purchase28,
              v_purchase29,
              v_purchase30,
              v_purchase31,
              v_purchase32,
              v_purchase33,
              v_purchase34,
              v_purchase35,
              v_purchase36, 
              v_purchase37,
              v_purchase38,
              v_purchase39,
              v_purchase40,
              v_purchase41,
              v_purchase42,
              v_purchase43,
              v_purchase44,
              v_purchase45,
              v_purchase46, 
              v_purchase47,
              v_purchase48,
              v_purchase49,
              v_purchase50,
              v_purchase51,
              v_purchase52,
              v_purchase53,
              v_purchase54,
              v_purchase55,
              v_purchase56, 
              v_purchase57,
              v_purchase58,
              v_purchase59,
              v_purchase60,
              v_purchase61,
              v_purchase62,
              v_purchase63,
              v_purchase64,
              v_purchase65,
              v_purchase66, 
              v_purchase67,
              v_purchase68,
              v_purchase69,
              v_purchase70,
              v_purchase71,
              v_purchase72,
              v_purchase73,
              v_purchase74,
              v_purchase75,
              v_purchase76, 
              v_purchase77,
              v_purchase78,
              v_purchase79,
              v_purchase80,
              v_purchase81,
              v_purchase82,
              v_purchase83,
              v_purchase84,
              v_purchase85,
              v_purchase86, 
              v_purchase87,
              v_purchase88,
              v_purchase89,
              v_purchase90
              
              
       from     
       (
       select case when tgl = v_date  + 1 then jum else 0 end tgl1 ,
              case when tgl = v_date  + 2 then jum else 0 end tgl2 ,
              case when tgl = v_date + 3 then jum else 0 end tgl3 ,
              case when tgl = v_date  + 4 then jum else 0 end tgl4 ,
              case when tgl = v_date  + 5 then jum else 0 end tgl5 ,
              case when tgl = v_date  + 6 then jum else 0 end tgl6 ,
              case when tgl = v_date  + 7 then jum else 0 end tgl7 ,
              case when tgl = v_date  + 8 then jum else 0 end tgl8 ,
              case when tgl = v_date  + 9 then jum else 0 end tgl9 ,
              case when tgl = v_date  + 10 then jum else 0 end tgl10 ,
              case when tgl = v_date  + 11 then jum else 0 end tgl11 ,
              case when tgl = v_date  + 12 then jum else 0 end tgl12 ,
              case when tgl = v_date  + 13 then jum else 0 end tgl13 ,
              case when tgl = v_date  + 14 then jum else 0 end tgl14 ,
              case when tgl = v_date  + 15 then jum else 0 end tgl15 ,
              case when tgl = v_date  + 16 then jum else 0 end tgl16 ,
              case when tgl = v_date  + 17 then jum else 0 end tgl17 ,
              case when tgl = v_date  + 18 then jum else 0 end tgl18 ,
              case when tgl = v_date  + 19 then jum else 0 end tgl19 ,
              case when tgl = v_date  + 20 then jum else 0 end tgl20 ,
              case when tgl = v_date  + 21 then jum else 0 end tgl21 ,
              case when tgl = v_date  + 22 then jum else 0 end tgl22 ,
              case when tgl = v_date  + 23 then jum else 0 end tgl23 ,
              case when tgl = v_date  + 24 then jum else 0 end tgl24 ,
              case when tgl = v_date  + 25 then jum else 0 end tgl25 ,
              case when tgl = v_date  + 26 then jum else 0 end tgl26 ,
              case when tgl = v_date  + 27 then jum else 0 end tgl27 ,
              case when tgl = v_date  + 28 then jum else 0 end tgl28 ,
              case when tgl = v_date  + 29 then jum else 0 end tgl29 ,
              case when tgl = v_date  + 30 then jum else 0 end tgl30 ,
              case when tgl = v_date  + 31 then jum else 0 end tgl31 ,
              case when tgl = v_date  + 32 then jum else 0 end tgl32 ,
              case when tgl = v_date  + 33 then jum else 0 end tgl33 ,
              case when tgl = v_date  + 34 then jum else 0 end tgl34 ,
              case when tgl = v_date  + 35 then jum else 0 end tgl35 ,
              case when tgl = v_date  + 36 then jum else 0 end tgl36 ,
              case when tgl = v_date  + 37 then jum else 0 end tgl37 ,
              case when tgl = v_date  + 38 then jum else 0 end tgl38 ,
              case when tgl = v_date  + 39 then jum else 0 end tgl39 ,
              case when tgl = v_date  + 40 then jum else 0 end tgl40 ,
              case when tgl = v_date  + 41 then jum else 0 end tgl41 ,
              case when tgl = v_date  + 42 then jum else 0 end tgl42 ,
              case when tgl = v_date  + 43 then jum else 0 end tgl43,
              case when tgl = v_date  + 44 then jum else 0 end tgl44 ,
              case when tgl = v_date  + 45 then jum else 0 end tgl45 ,
              case when tgl = v_date  + 46 then jum else 0 end tgl46 ,
              case when tgl = v_date  + 47 then jum else 0 end tgl47 ,
              case when tgl = v_date  + 48 then jum else 0 end tgl48 ,
              case when tgl = v_date  + 49 then jum else 0 end tgl49,
              case when tgl = v_date  + 50 then jum else 0 end tgl50 ,
              case when tgl = v_date  + 51 then jum else 0 end tgl51 ,
              case when tgl = v_date  + 52 then jum else 0 end tgl52 ,
              case when tgl = v_date  + 53 then jum else 0 end tgl53 ,
              case when tgl = v_date  + 54 then jum else 0 end tgl54 ,
              case when tgl = v_date  + 55 then jum else 0 end tgl55 ,
              case when tgl = v_date  + 56 then jum else 0 end tgl56 ,
              case when tgl = v_date  + 57 then jum else 0 end tgl57 ,
              case when tgl = v_date  + 58 then jum else 0 end tgl58 ,
              case when tgl = v_date  + 59 then jum else 0 end tgl59 ,
              case when tgl = v_date  + 60 then jum else 0 end tgl60 ,
              case when tgl = v_date  + 61 then jum else 0 end tgl61 ,
              case when tgl = v_date  + 62 then jum else 0 end tgl62 ,
              case when tgl = v_date  + 63 then jum else 0 end tgl63 ,
              case when tgl = v_date  + 64 then jum else 0 end tgl64 ,
              case when tgl = v_date  + 65 then jum else 0 end tgl65 ,
              case when tgl = v_date  + 66 then jum else 0 end tgl66 ,
              case when tgl = v_date  + 67 then jum else 0 end tgl67 ,
              case when tgl = v_date  + 68 then jum else 0 end tgl68 ,
              case when tgl = v_date  + 69 then jum else 0 end tgl69 ,
               case when tgl = v_date  + 70 then jum else 0 end tgl70 ,
              case when tgl = v_date  + 71 then jum else 0 end tgl71 ,
              case when tgl = v_date  + 72 then jum else 0 end tgl72 ,
              case when tgl = v_date  + 73 then jum else 0 end tgl73 ,
              case when tgl = v_date  + 74 then jum else 0 end tgl74 ,
              case when tgl = v_date  + 75 then jum else 0 end tgl75 ,
              case when tgl = v_date  + 76 then jum else 0 end tgl76 ,
              case when tgl = v_date  + 77 then jum else 0 end tgl77 ,
              case when tgl = v_date  + 78 then jum else 0 end tgl78 ,
              case when tgl = v_date  + 79 then jum else 0 end tgl79 ,
              case when tgl = v_date  + 80 then jum else 0 end tgl80 ,
              case when tgl = v_date  + 81 then jum else 0 end tgl81 ,
              case when tgl = v_date  + 82 then jum else 0 end tgl82 ,
              case when tgl = v_date  + 83 then jum else 0 end tgl83 ,
              case when tgl = v_date  + 84 then jum else 0 end tgl84 ,
              case when tgl = v_date  + 85 then jum else 0 end tgl85 ,
              case when tgl = v_date  + 86 then jum else 0 end tgl86 ,
              case when tgl = v_date  + 87 then jum else 0 end tgl87 ,
              case when tgl = v_date  + 88 then jum else 0 end tgl88 ,
              case when tgl = v_date  + 89 then jum else 0 end tgl89 ,
              case when tgl = v_date  + 90 then jum else 0 end tgl90 
       from 
       (
            
         select nvl(sum(nvl(qty ,0)),0) jum, require_date  tgl from prf_details aa inner join prf_header bb
              on aa.prf_no = bb.prf_no
              where item_no = c_item_no and require_date > trim(v_Date) 
                    and aa.prf_no||aa.line_no not in (select prf_no||prf_line_no from po_details where prf_no =  aa.prf_no and prf_line_no = aa.line_no)
              group by require_date
        
--        select nvl(sum(nvl(qty,0)),0) jum, require_date  tgl from prf_details aa 
--            inner join prf_header bb
--              on aa.prf_no = bb.prf_no
--              where item_no = c_item_no and require_date > trim(v_Date) 
--                  and aa.prf_no||aa.line_no not in (select nvl(prf_no||prf_line_no,'xx123') from po_details where item_no =c_item_no)
--              group by require_date
        
       )aa   

       )bb;
       
        
       --Get Konversi
       select sum(tgl1) t1,
              sum(tgl2) t2,
              sum(tgl3) t3,
              sum(tgl4) t4,
              sum(tgl5) t5,
              sum(tgl6) t6,
              sum(tgl7) t7,
              sum(tgl8) t8,
              sum(tgl9) t9,
              sum(tgl10) t10,
              sum(tgl11) t11,
              sum(tgl12) t12,
              sum(tgl13) t13,
              sum(tgl14) t14,
              sum(tgl15) t15,
              sum(tgl16) t16,
              sum(tgl17) t17,
              sum(tgl18) t18,
              sum(tgl19) t19,
              sum(tgl20) t20,
              sum(tgl21) t21,
              sum(tgl22) t22,
              sum(tgl23) t23,
              sum(tgl24) t24,
              sum(tgl25) t25,
              sum(tgl26) t26,
              sum(tgl27) t27,
              sum(tgl28) t28,
              sum(tgl29) t29,
              sum(tgl30) t30,
              sum(tgl31) t31,
              sum(tgl32) t32,
              sum(tgl33) t33,
              sum(tgl34) t34,
              sum(tgl35) t35,
              sum(tgl36) t36,
              sum(tgl37) t37,
              sum(tgl38) t38,
              sum(tgl39) t39,
              sum(tgl40) t40,
              sum(tgl41) t41,
              sum(tgl42) t42,
              sum(tgl43) t43,
              sum(tgl44) t44,
              sum(tgl45) t45,
              sum(tgl46) t46,
              sum(tgl47) t47,
              sum(tgl48) t48,
              sum(tgl49) t49,
              sum(tgl50) t50,
              sum(tgl51) t51,
              sum(tgl52) t52,
              sum(tgl53) t53,
              sum(tgl54) t54,
              sum(tgl55) t55,
              sum(tgl56) t56,
              sum(tgl57) t57,
              sum(tgl58) t58,
              sum(tgl59) t59,
              sum(tgl60) t50,
              sum(tgl61) t61,
              sum(tgl62) t62,
              sum(tgl63) t63,
              sum(tgl64) t64,
              sum(tgl65) t65,
              sum(tgl66) t66,
              sum(tgl67) t67,
              sum(tgl68) t68,
              sum(tgl69) t69,
              sum(tgl70) t70,
              sum(tgl71) t71,
              sum(tgl72) t72,
              sum(tgl73) t73,
              sum(tgl74) t74,
              sum(tgl75) t75,
              sum(tgl76) t76,
              sum(tgl77) t77,
              sum(tgl78) t78,
              sum(tgl79) t79,
              sum(tgl80) t80,
              sum(tgl81) t81,
              sum(tgl82) t82,
              sum(tgl83) t83,
              sum(tgl84) t84,
              sum(tgl85) t85,
              sum(tgl86) t86,
              sum(tgl87) t87,
              sum(tgl88) t88,
              sum(tgl89) t89,
              sum(tgl90) t90
              into
              v_plan1,
              v_plan2,
              v_plan3,
              v_plan4,
              v_plan5,
              v_plan6, 
              v_plan7,
              v_plan8,
              v_plan9,
              v_plan10,
              v_plan11,
              v_plan12,
              v_plan13,
              v_plan14,
              v_plan15,
              v_plan16, 
              v_plan17,
              v_plan18,
              v_plan19,
              v_plan20,
              v_plan21,
              v_plan22,
              v_plan23,
              v_plan24,
              v_plan25,
              v_plan26, 
              v_plan27,
              v_plan28,
              v_plan29,
              v_plan30,
              v_plan31,
              v_plan32,
              v_plan33,
              v_plan34,
              v_plan35,
              v_plan36, 
              v_plan37,
              v_plan38,
              v_plan39,
              v_plan40,
              v_plan41,
              v_plan42,
              v_plan43,
              v_plan44,
              v_plan45,
              v_plan46, 
              v_plan47,
              v_plan48,
              v_plan49,
              v_plan50,
              v_plan51,
              v_plan52,
              v_plan53,
              v_plan54,
              v_plan55,
              v_plan56, 
              v_plan57,
              v_plan58,
              v_plan59,
              v_plan60,
              v_plan61,
              v_plan62,
              v_plan63,
              v_plan64,
              v_plan65,
              v_plan66, 
              v_plan67,
              v_plan68,
              v_plan69,
              v_plan70,
              v_plan71,
              v_plan72,
              v_plan73,
              v_plan74,
              v_plan75,
              v_plan76, 
              v_plan77,
              v_plan78,
              v_plan79,
              v_plan80,
              v_plan81,
              v_plan82,
              v_plan83,
              v_plan84,
              v_plan85,
              v_plan86, 
              v_plan87,
              v_plan88,
              v_plan89,
              v_plan90
              
              
       from     
       (
       select case when tgl = v_date  + 1 then jum else 0 end tgl1 ,
              case when tgl = v_date  + 2 then jum else 0 end tgl2 ,
              case when tgl = v_date + 3 then jum else 0 end tgl3 ,
              case when tgl = v_date  + 4 then jum else 0 end tgl4 ,
              case when tgl = v_date  + 5 then jum else 0 end tgl5 ,
              case when tgl = v_date  + 6 then jum else 0 end tgl6 ,
              case when tgl = v_date  + 7 then jum else 0 end tgl7 ,
              case when tgl = v_date  + 8 then jum else 0 end tgl8 ,
              case when tgl = v_date  + 9 then jum else 0 end tgl9 ,
              case when tgl = v_date  + 10 then jum else 0 end tgl10 ,
              case when tgl = v_date  + 11 then jum else 0 end tgl11 ,
              case when tgl = v_date  + 12 then jum else 0 end tgl12 ,
              case when tgl = v_date  + 13 then jum else 0 end tgl13 ,
              case when tgl = v_date  + 14 then jum else 0 end tgl14 ,
              case when tgl = v_date  + 15 then jum else 0 end tgl15 ,
              case when tgl = v_date  + 16 then jum else 0 end tgl16 ,
              case when tgl = v_date  + 17 then jum else 0 end tgl17 ,
              case when tgl = v_date  + 18 then jum else 0 end tgl18 ,
              case when tgl = v_date  + 19 then jum else 0 end tgl19 ,
              case when tgl = v_date  + 20 then jum else 0 end tgl20 ,
              case when tgl = v_date  + 21 then jum else 0 end tgl21 ,
              case when tgl = v_date  + 22 then jum else 0 end tgl22 ,
              case when tgl = v_date  + 23 then jum else 0 end tgl23 ,
              case when tgl = v_date  + 24 then jum else 0 end tgl24 ,
              case when tgl = v_date  + 25 then jum else 0 end tgl25 ,
              case when tgl = v_date  + 26 then jum else 0 end tgl26 ,
              case when tgl = v_date  + 27 then jum else 0 end tgl27 ,
              case when tgl = v_date  + 28 then jum else 0 end tgl28 ,
              case when tgl = v_date  + 29 then jum else 0 end tgl29 ,
              case when tgl = v_date  + 30 then jum else 0 end tgl30 ,
              case when tgl = v_date  + 31 then jum else 0 end tgl31 ,
              case when tgl = v_date  + 32 then jum else 0 end tgl32 ,
              case when tgl = v_date  + 33 then jum else 0 end tgl33 ,
              case when tgl = v_date  + 34 then jum else 0 end tgl34 ,
              case when tgl = v_date  + 35 then jum else 0 end tgl35 ,
              case when tgl = v_date  + 36 then jum else 0 end tgl36 ,
              case when tgl = v_date  + 37 then jum else 0 end tgl37 ,
              case when tgl = v_date  + 38 then jum else 0 end tgl38 ,
              case when tgl = v_date  + 39 then jum else 0 end tgl39 ,
              case when tgl = v_date  + 40 then jum else 0 end tgl40 ,
              case when tgl = v_date  + 41 then jum else 0 end tgl41 ,
              case when tgl = v_date  + 42 then jum else 0 end tgl42 ,
              case when tgl = v_date  + 43 then jum else 0 end tgl43,
              case when tgl = v_date  + 44 then jum else 0 end tgl44 ,
              case when tgl = v_date  + 45 then jum else 0 end tgl45 ,
              case when tgl = v_date  + 46 then jum else 0 end tgl46 ,
              case when tgl = v_date  + 47 then jum else 0 end tgl47 ,
              case when tgl = v_date  + 48 then jum else 0 end tgl48 ,
              case when tgl = v_date  + 49 then jum else 0 end tgl49,
              case when tgl = v_date  + 50 then jum else 0 end tgl50 ,
              case when tgl = v_date  + 51 then jum else 0 end tgl51 ,
              case when tgl = v_date  + 52 then jum else 0 end tgl52 ,
              case when tgl = v_date  + 53 then jum else 0 end tgl53 ,
              case when tgl = v_date  + 54 then jum else 0 end tgl54 ,
              case when tgl = v_date  + 55 then jum else 0 end tgl55 ,
              case when tgl = v_date  + 56 then jum else 0 end tgl56 ,
              case when tgl = v_date  + 57 then jum else 0 end tgl57 ,
              case when tgl = v_date  + 58 then jum else 0 end tgl58 ,
              case when tgl = v_date  + 59 then jum else 0 end tgl59 ,
              case when tgl = v_date  + 60 then jum else 0 end tgl60 ,
              case when tgl = v_date  + 61 then jum else 0 end tgl61 ,
              case when tgl = v_date  + 62 then jum else 0 end tgl62 ,
              case when tgl = v_date  + 63 then jum else 0 end tgl63 ,
              case when tgl = v_date  + 64 then jum else 0 end tgl64 ,
              case when tgl = v_date  + 65 then jum else 0 end tgl65 ,
              case when tgl = v_date  + 66 then jum else 0 end tgl66 ,
              case when tgl = v_date  + 67 then jum else 0 end tgl67 ,
              case when tgl = v_date  + 68 then jum else 0 end tgl68 ,
              case when tgl = v_date  + 69 then jum else 0 end tgl69 ,
               case when tgl = v_date  + 70 then jum else 0 end tgl70 ,
              case when tgl = v_date  + 71 then jum else 0 end tgl71 ,
              case when tgl = v_date  + 72 then jum else 0 end tgl72 ,
              case when tgl = v_date  + 73 then jum else 0 end tgl73 ,
              case when tgl = v_date  + 74 then jum else 0 end tgl74 ,
              case when tgl = v_date  + 75 then jum else 0 end tgl75 ,
              case when tgl = v_date  + 76 then jum else 0 end tgl76 ,
              case when tgl = v_date  + 77 then jum else 0 end tgl77 ,
              case when tgl = v_date  + 78 then jum else 0 end tgl78 ,
              case when tgl = v_date  + 79 then jum else 0 end tgl79 ,
              case when tgl = v_date  + 80 then jum else 0 end tgl80 ,
              case when tgl = v_date  + 81 then jum else 0 end tgl81 ,
              case when tgl = v_date  + 82 then jum else 0 end tgl82 ,
              case when tgl = v_date  + 83 then jum else 0 end tgl83 ,
              case when tgl = v_date  + 84 then jum else 0 end tgl84 ,
              case when tgl = v_date  + 85 then jum else 0 end tgl85 ,
              case when tgl = v_date  + 86 then jum else 0 end tgl86 ,
              case when tgl = v_date  + 87 then jum else 0 end tgl87 ,
              case when tgl = v_date  + 88 then jum else 0 end tgl88 ,
              case when tgl = v_date  + 89 then jum else 0 end tgl89 ,
              case when tgl = v_date  + 90 then jum else 0 end tgl90 
       from 
       (
       select nvl(sum(qty/1000 * konversi ),0) jum,TO_DATE(tahun ||'-'|| bulan||'-'||tanggal, 'YYYY-MM-DD') Tgl
                      from ztb_assy_plan aa
                      inner join ztb_material_konversi bb
                      on aa.cell_type = bb.cell_type and aa.assy_line = bb.assy_line
                      where item_no = c_item_no  and TO_DATE(tahun ||'-'|| bulan||'-'||tanggal, 'YYYY-MM-DD') > trim(v_date)
                      and used = 1
                      --and revisi  = (select max(revisi) from ztb_assy_plan where to_char(TO_DATE(tahun ||'-'|| bulan, 'YYYY-MM'), 'YYYY-MM') = trim(to_char(v_date,'YYYY-MM')))
                      group by tanggal,bulan, tahun
       )aa   

       )bb;
       
        v_month := trunc(v_Date) - (to_number(to_char(v_date,'DD')) - 1);
       
        while v_from < v_to 
        LOOP
              
              v_from := v_from + 1;    
              v_date := v_date + 1;  
              v_rata := ceil(v_rata1);
              
              v_plan := 0;
              v_purchase := 0;
              v_arrival:= 0;
              v_Month_Diff := floor(MONTHS_BETWEEN(v_date,v_month));
              
              if v_from > 1 then
                  if  v_Month_Diff  = 1 THEN
                     v_rata := nvl(ceil(v_rata2),0);
                  elsif v_Month_Diff = 2 then
                     v_rata := nvl(ceil(v_rata3),0);
                  elsif v_Month_Diff = 3 then
                     v_rata := nvl(ceil(v_rata4),0);   
                  end if;
              end if;
              
              IF v_from = 1 THEN
                 v_plan := v_plan1;
              ELSIF v_from = 2 THEN
                  v_plan := v_plan2;
              ELSIF v_from = 3 THEN
                  v_plan := v_plan3;
              ELSIF v_from = 4 THEN
                  v_plan := v_plan4;
              ELSIF v_from = 5 THEN
                  v_plan := v_plan5;
              ELSIF v_from = 6 THEN
                  v_plan := v_plan6;
              ELSIF v_from = 7 THEN
                  v_plan := v_plan7;
              ELSIF v_from = 8 THEN
                  v_plan := v_plan8;
              ELSIF v_from = 9 THEN
                  v_plan := v_plan9;
              ELSIF v_from = 10 THEN
                  v_plan := v_plan10;
               ELSIF v_from = 11 THEN
                  v_plan := v_plan11;
              ELSIF v_from = 12 THEN
                  v_plan := v_plan12;
              ELSIF v_from = 13 THEN
                  v_plan := v_plan13;
              ELSIF v_from = 14 THEN
                  v_plan := v_plan14;
              ELSIF v_from = 15 THEN
                  v_plan := v_plan15;
              ELSIF v_from = 16 THEN
                  v_plan := v_plan16;
              ELSIF v_from = 17 THEN
                  v_plan := v_plan17;
              ELSIF v_from = 18 THEN
                  v_plan := v_plan18;
              ELSIF v_from = 19 THEN
                  v_plan := v_plan19;
              ELSIF v_from = 20 THEN
                  v_plan := v_plan20;
               ELSIF v_from = 21 THEN
                  v_plan := v_plan21;
              ELSIF v_from = 22 THEN
                  v_plan := v_plan22;
              ELSIF v_from = 23 THEN
                  v_plan := v_plan23;
              ELSIF v_from = 24 THEN
                  v_plan := v_plan24;
              ELSIF v_from = 25 THEN
                  v_plan := v_plan25;
              ELSIF v_from = 26 THEN
                  v_plan := v_plan26;
              ELSIF v_from = 27 THEN
                  v_plan := v_plan27;
              ELSIF v_from = 28 THEN
                  v_plan := v_plan28;
              ELSIF v_from = 29 THEN
                  v_plan := v_plan29;
              ELSIF v_from = 30 THEN
                  v_plan := v_plan30;  
               ELSIF v_from = 31 THEN
                  v_plan := v_plan31;
              ELSIF v_from = 32 THEN
                  v_plan := v_plan32;
              ELSIF v_from = 33 THEN
                  v_plan := v_plan33;
              ELSIF v_from = 34 Then
                  v_plan := v_plan34;
              ELSIF v_from = 35 THEN
                  v_plan := v_plan35;
              ELSIF v_from = 36 THEN
                  v_plan := v_plan36;
              ELSIF v_from = 37 THEN
                  v_plan := v_plan37;
              ELSIF v_from = 38 THEN
                  v_plan := v_plan38;
              ELSIF v_from = 39 THEN
                  v_plan := v_plan39;
              ELSIF v_from = 40 THEN
                  v_plan := v_plan40;  
               ELSIF v_from = 41 THEN
                  v_plan := v_plan41;
              ELSIF v_from = 42 THEN
                  v_plan := v_plan42;
              ELSIF v_from = 43 THeN
                  v_plan := v_plan43;
              ELSIF v_from = 44 THEN
                  v_plan := v_plan44;
              ELSIF v_from = 45 THEN
                  v_plan := v_plan45;
              ELSIF v_from = 46 THEN
                  v_plan := v_plan46;
              ELSIF v_from = 47 THEN
                  v_plan := v_plan47;
              ELSIF v_from = 48 THEN
                  v_plan := v_plan48;
              ELSIF v_from = 49 THEN
                  v_plan := v_plan49;
              ELSIF v_from = 50 THEN
                  v_plan := v_plan50;  
             
               ELSIF v_from = 51 THEN
                  v_plan := v_plan51;
              ELSIF v_from = 52 THEN
                  v_plan := v_plan52;
              ELSIF v_from = 53 THEN
                  v_plan := v_plan53;
              ELSIF v_from = 54 THEN
                  v_plan := v_plan54;
              ELSIF v_from = 55 THEN
                  v_plan := v_plan55;
              ELSIF v_from = 56 THEN
                  v_plan := v_plan56;
              ELSIF v_from = 57 THEN
                  v_plan := v_plan57;
              ELSIF v_from = 58 THEN
                  v_plan := v_plan58;
              ELSIF v_from = 59 THEN
                  v_plan := v_plan59;
              ELSIF v_from = 60 THEN
                  v_plan := v_plan60;  
             
               ELSIF v_from = 61 THEN
                  v_plan := v_plan61;
              ELSIF v_from = 62 THEN
                  v_plan := v_plan62;
              ELSIF v_from = 63 THEN
                  v_plan := v_plan63;
              ELSIF v_from = 64 THEN
                  v_plan := v_plan64;
              ELSIF v_from = 65 THEN
                  v_plan := v_plan65;
              ELSIF v_from = 66 THEN
                  v_plan := v_plan66;
              ELSIF v_from = 67 THEN
                  v_plan := v_plan67;
              ELSIF v_from = 68 THEN
                  v_plan := v_plan68;
              ELSIF v_from = 69 THEN
                  v_plan := v_plan69;
              ELSIF v_from = 70 THEN
                  v_plan := v_plan70;  
               ELSIF v_from = 71 THEN
                  v_plan := v_plan71;
              ELSIF v_from = 72 THEN
                  v_plan := v_plan72;
              ELSIF v_from = 73 THEN
                  v_plan := v_plan73;
              ELSIF v_from = 74 THEN
                  v_plan := v_plan74;
              ELSIF v_from = 75 THEN
                  v_plan := v_plan75;
              ELSIF v_from = 76 THEN
                  v_plan := v_plan76;
              ELSIF v_from = 77 THEN
                  v_plan := v_plan77;
              ELSIF v_from = 78 THEN
                  v_plan := v_plan78;
              ELSIF v_from = 79 THEN
                  v_plan := v_plan79;
              ELSIF v_from = 80 THEN
                  v_plan := v_plan80;  
               
              ELSIF v_from = 81 THEN
                  v_plan := v_plan81;
              ELSIF v_from = 82 THEN
                  v_plan := v_plan82;
              ELSIF v_from = 83 THEN
                  v_plan := v_plan83;
              ELSIF v_from = 84 THEN
                  v_plan := v_plan84;
              ELSIF v_from = 85 THEN
                  v_plan := v_plan85;
              ELSIF v_from = 86 THEN
                  v_plan := v_plan86;
              ELSIF v_from = 87 THEN
                  v_plan := v_plan87;
              ELSIF v_from = 88 THEN
                  v_plan := v_plan88;
              ELSIF v_from = 89 THEN
                  v_plan := v_plan89;
              ELSIF v_from = 90 THEN
                  v_plan := v_plan90;  
              else
                  v_plan := 0;
              END IF;
              
              
                IF v_from = 1 THEN
                 v_purchase := v_purchase1;
              ELSIF v_from = 2 THEN
                  v_purchase := v_purchase2;
              ELSIF v_from = 3 THEN
                  v_purchase := v_purchase3;
              ELSIF v_from = 4 THEN
                  v_purchase := v_purchase4;
              ELSIF v_from = 5 THEN
                  v_purchase := v_purchase5;
              ELSIF v_from = 6 THEN
                  v_purchase := v_purchase6;
              ELSIF v_from = 7 THEN
                  v_purchase := v_purchase7;
              ELSIF v_from = 8 THEN
                  v_purchase := v_purchase8;
              ELSIF v_from = 9 THEN
                  v_purchase := v_purchase9;
              ELSIF v_from = 10 THEN
                  v_purchase := v_purchase10;
               ELSIF v_from = 11 THEN
                  v_purchase := v_purchase11;
              ELSIF v_from = 12 THEN
                  v_purchase := v_purchase12;
              ELSIF v_from = 13 THEN
                  v_purchase := v_purchase13;
              ELSIF v_from = 14 THEN
                  v_purchase := v_purchase14;
              ELSIF v_from = 15 THEN
                  v_purchase := v_purchase15;
              ELSIF v_from = 16 THEN
                  v_purchase := v_purchase16;
              ELSIF v_from = 17 THEN
                  v_purchase := v_purchase17;
              ELSIF v_from = 18 THEN
                  v_purchase := v_purchase18;
              ELSIF v_from = 19 THEN
                  v_purchase := v_purchase19;
              ELSIF v_from = 20 THEN
                  v_purchase := v_purchase20;
               ELSIF v_from = 21 THEN
                  v_purchase := v_purchase21;
              ELSIF v_from = 22 THEN
                  v_purchase := v_purchase22;
              ELSIF v_from = 23 THEN
                  v_purchase := v_purchase23;
              ELSIF v_from = 24 THEN
                  v_purchase := v_purchase24;
              ELSIF v_from = 25 THEN
                  v_purchase := v_purchase25;
              ELSIF v_from = 26 THEN
                  v_purchase := v_purchase26;
              ELSIF v_from = 27 THEN
                  v_purchase := v_purchase27;
              ELSIF v_from = 28 THEN
                  v_purchase := v_purchase28;
              ELSIF v_from = 29 THEN
                  v_purchase := v_purchase29;
              ELSIF v_from = 30 THEN
                  v_purchase := v_purchase30;  
               ELSIF v_from = 31 THEN
                  v_purchase := v_purchase31;
              ELSIF v_from = 32 THEN
                  v_purchase := v_purchase32;
              ELSIF v_from = 33 THEN
                  v_purchase := v_purchase33;
              ELSIF v_from = 34 Then
                  v_purchase := v_purchase34;
              ELSIF v_from = 35 THEN
                  v_purchase := v_purchase35;
              ELSIF v_from = 36 THEN
                  v_purchase := v_purchase36;
              ELSIF v_from = 37 THEN
                  v_purchase := v_purchase37;
              ELSIF v_from = 38 THEN
                  v_purchase := v_purchase38;
              ELSIF v_from = 39 THEN
                  v_purchase := v_purchase39;
              ELSIF v_from = 40 THEN
                  v_purchase := v_purchase40;  
               ELSIF v_from = 41 THEN
                  v_purchase := v_purchase41;
              ELSIF v_from = 42 THEN
                  v_purchase := v_purchase42;
              ELSIF v_from = 43 THeN
                  v_purchase := v_purchase43;
              ELSIF v_from = 44 THEN
                  v_purchase := v_purchase44;
              ELSIF v_from = 45 THEN
                  v_purchase := v_purchase45;
              ELSIF v_from = 46 THEN
                  v_purchase := v_purchase46;
              ELSIF v_from = 47 THEN
                  v_purchase := v_purchase47;
              ELSIF v_from = 48 THEN
                  v_purchase := v_purchase48;
              ELSIF v_from = 49 THEN
                  v_purchase := v_purchase49;
              ELSIF v_from = 50 THEN
                  v_purchase := v_purchase50;  
             
               ELSIF v_from = 51 THEN
                  v_purchase := v_purchase51;
              ELSIF v_from = 52 THEN
                  v_purchase := v_purchase52;
              ELSIF v_from = 53 THEN
                  v_purchase := v_purchase53;
              ELSIF v_from = 54 THEN
                  v_purchase := v_purchase54;
              ELSIF v_from = 55 THEN
                  v_purchase := v_purchase55;
              ELSIF v_from = 56 THEN
                  v_purchase := v_purchase56;
              ELSIF v_from = 57 THEN
                  v_purchase := v_purchase57;
              ELSIF v_from = 58 THEN
                  v_purchase := v_purchase58;
              ELSIF v_from = 59 THEN
                  v_purchase := v_purchase59;
              ELSIF v_from = 60 THEN
                  v_purchase := v_purchase60;  
             
               ELSIF v_from = 61 THEN
                  v_purchase := v_purchase61;
              ELSIF v_from = 62 THEN
                  v_purchase := v_purchase62;
              ELSIF v_from = 63 THEN
                  v_purchase := v_purchase63;
              ELSIF v_from = 64 THEN
                  v_purchase := v_purchase64;
              ELSIF v_from = 65 THEN
                  v_purchase := v_purchase65;
              ELSIF v_from = 66 THEN
                  v_purchase := v_purchase66;
              ELSIF v_from = 67 THEN
                  v_purchase := v_purchase67;
              ELSIF v_from = 68 THEN
                  v_purchase := v_purchase68;
              ELSIF v_from = 69 THEN
                  v_purchase := v_purchase69;
              ELSIF v_from = 70 THEN
                  v_purchase := v_purchase70;  
               ELSIF v_from = 71 THEN
                  v_purchase := v_purchase71;
              ELSIF v_from = 72 THEN
                  v_purchase := v_purchase72;
              ELSIF v_from = 73 THEN
                  v_purchase := v_purchase73;
              ELSIF v_from = 74 THEN
                  v_purchase := v_purchase74;
              ELSIF v_from = 75 THEN
                  v_purchase := v_purchase75;
              ELSIF v_from = 76 THEN
                  v_purchase := v_purchase76;
              ELSIF v_from = 77 THEN
                  v_purchase := v_purchase77;
              ELSIF v_from = 78 THEN
                  v_purchase := v_purchase78;
              ELSIF v_from = 79 THEN
                  v_purchase := v_purchase79;
              ELSIF v_from = 80 THEN
                  v_purchase := v_purchase80;  
               
              ELSIF v_from = 81 THEN
                  v_purchase := v_purchase81;
              ELSIF v_from = 82 THEN
                  v_purchase := v_purchase82;
              ELSIF v_from = 83 THEN
                  v_purchase := v_purchase83;
              ELSIF v_from = 84 THEN
                  v_purchase := v_purchase84;
              ELSIF v_from = 85 THEN
                  v_purchase := v_purchase85;
              ELSIF v_from = 86 THEN
                  v_purchase := v_purchase86;
              ELSIF v_from = 87 THEN
                  v_purchase := v_purchase87;
              ELSIF v_from = 88 THEN
                  v_purchase := v_purchase88;
              ELSIF v_from = 89 THEN
                  v_purchase := v_purchase89;
              ELSIF v_from = 90 THEN
                  v_purchase := v_purchase90;  
              else
                  v_purchase := 0;
              END IF;
              
               IF v_from = 1 THEN
                 v_arrival := v_arrival1;
              ELSIF v_from = 2 THEN
                  v_arrival := v_arrival2;
              ELSIF v_from = 3 THEN
                  v_arrival := v_arrival3;
              ELSIF v_from = 4 THEN
                  v_arrival := v_arrival4;
              ELSIF v_from = 5 THEN
                  v_arrival := v_arrival5;
              ELSIF v_from = 6 THEN
                  v_arrival := v_arrival6;
              ELSIF v_from = 7 THEN
                  v_arrival := v_arrival7;
              ELSIF v_from = 8 THEN
                  v_arrival := v_arrival8;
              ELSIF v_from = 9 THEN
                  v_arrival := v_arrival9;
              ELSIF v_from = 10 THEN
                  v_arrival := v_arrival10;
               ELSIF v_from = 11 THEN
                  v_arrival := v_arrival11;
              ELSIF v_from = 12 THEN
                  v_arrival := v_arrival12;
              ELSIF v_from = 13 THEN
                  v_arrival := v_arrival13;
              ELSIF v_from = 14 THEN
                  v_arrival := v_arrival14;
              ELSIF v_from = 15 THEN
                  v_arrival := v_arrival15;
              ELSIF v_from = 16 THEN
                  v_arrival := v_arrival16;
              ELSIF v_from = 17 THEN
                  v_arrival := v_arrival17;
              ELSIF v_from = 18 THEN
                  v_arrival := v_arrival18;
              ELSIF v_from = 19 THEN
                  v_arrival := v_arrival19;
              ELSIF v_from = 20 THEN
                  v_arrival := v_arrival20;
               ELSIF v_from = 21 THEN
                  v_arrival := v_arrival21;
              ELSIF v_from = 22 THEN
                  v_arrival := v_arrival22;
              ELSIF v_from = 23 THEN
                  v_arrival := v_arrival23;
              ELSIF v_from = 24 THEN
                  v_arrival := v_arrival24;
              ELSIF v_from = 25 THEN
                  v_arrival := v_arrival25;
              ELSIF v_from = 26 THEN
                  v_arrival := v_arrival26;
              ELSIF v_from = 27 THEN
                  v_arrival := v_arrival27;
              ELSIF v_from = 28 THEN
                  v_arrival := v_arrival28;
              ELSIF v_from = 29 THEN
                  v_arrival := v_arrival29;
              ELSIF v_from = 30 THEN
                  v_arrival := v_arrival30;  
               ELSIF v_from = 31 THEN
                  v_arrival := v_arrival31;
              ELSIF v_from = 32 THEN
                  v_arrival := v_arrival32;
              ELSIF v_from = 33 THEN
                  v_arrival := v_arrival33;
              ELSIF v_from = 34 Then
                  v_arrival := v_arrival34;
              ELSIF v_from = 35 THEN
                  v_arrival := v_arrival35;
              ELSIF v_from = 36 THEN
                  v_arrival := v_arrival36;
              ELSIF v_from = 37 THEN
                  v_arrival := v_arrival37;
              ELSIF v_from = 38 THEN
                  v_arrival := v_arrival38;
              ELSIF v_from = 39 THEN
                  v_arrival := v_arrival39;
              ELSIF v_from = 40 THEN
                  v_arrival := v_arrival40;  
               ELSIF v_from = 41 THEN
                  v_arrival := v_arrival41;
              ELSIF v_from = 42 THEN
                  v_arrival := v_arrival42;
              ELSIF v_from = 43 THeN
                  v_arrival := v_arrival43;
              ELSIF v_from = 44 THEN
                  v_arrival := v_arrival44;
              ELSIF v_from = 45 THEN
                  v_arrival := v_arrival45;
              ELSIF v_from = 46 THEN
                  v_arrival := v_arrival46;
              ELSIF v_from = 47 THEN
                  v_arrival := v_arrival47;
              ELSIF v_from = 48 THEN
                  v_arrival := v_arrival48;
              ELSIF v_from = 49 THEN
                  v_arrival := v_arrival49;
              ELSIF v_from = 50 THEN
                  v_arrival := v_arrival50;  
             
               ELSIF v_from = 51 THEN
                  v_arrival := v_arrival51;
              ELSIF v_from = 52 THEN
                  v_arrival := v_arrival52;
              ELSIF v_from = 53 THEN
                  v_arrival := v_arrival53;
              ELSIF v_from = 54 THEN
                  v_arrival := v_arrival54;
              ELSIF v_from = 55 THEN
                  v_arrival := v_arrival55;
              ELSIF v_from = 56 THEN
                  v_arrival := v_arrival56;
              ELSIF v_from = 57 THEN
                  v_arrival := v_arrival57;
              ELSIF v_from = 58 THEN
                  v_arrival := v_arrival58;
              ELSIF v_from = 59 THEN
                  v_arrival := v_arrival59;
              ELSIF v_from = 60 THEN
                  v_arrival := v_arrival60;  
             
               ELSIF v_from = 61 THEN
                  v_arrival := v_arrival61;
              ELSIF v_from = 62 THEN
                  v_arrival := v_arrival62;
              ELSIF v_from = 63 THEN
                  v_arrival := v_arrival63;
              ELSIF v_from = 64 THEN
                  v_arrival := v_arrival64;
              ELSIF v_from = 65 THEN
                  v_arrival := v_arrival65;
              ELSIF v_from = 66 THEN
                  v_arrival := v_arrival66;
              ELSIF v_from = 67 THEN
                  v_arrival := v_arrival67;
              ELSIF v_from = 68 THEN
                  v_arrival := v_arrival68;
              ELSIF v_from = 69 THEN
                  v_arrival := v_arrival69;
              ELSIF v_from = 70 THEN
                  v_arrival := v_arrival70;  
               ELSIF v_from = 71 THEN
                  v_arrival := v_arrival71;
              ELSIF v_from = 72 THEN
                  v_arrival := v_arrival72;
              ELSIF v_from = 73 THEN
                  v_arrival := v_arrival73;
              ELSIF v_from = 74 THEN
                  v_arrival := v_arrival74;
              ELSIF v_from = 75 THEN
                  v_arrival := v_arrival75;
              ELSIF v_from = 76 THEN
                  v_arrival := v_arrival76;
              ELSIF v_from = 77 THEN
                  v_arrival := v_arrival77;
              ELSIF v_from = 78 THEN
                  v_arrival := v_arrival78;
              ELSIF v_from = 79 THEN
                  v_arrival := v_arrival79;
              ELSIF v_from = 80 THEN
                  v_arrival := v_arrival80;  
               
              ELSIF v_from = 81 THEN
                  v_arrival := v_arrival81;
              ELSIF v_from = 82 THEN
                  v_arrival := v_arrival82;
              ELSIF v_from = 83 THEN
                  v_arrival := v_arrival83;
              ELSIF v_from = 84 THEN
                  v_arrival := v_arrival84;
              ELSIF v_from = 85 THEN
                  v_arrival := v_arrival85;
              ELSIF v_from = 86 THEN
                  v_arrival := v_arrival86;
              ELSIF v_from = 87 THEN
                  v_arrival := v_arrival87;
              ELSIF v_from = 88 THEN
                  v_arrival := v_arrival88;
              ELSIF v_from = 89 THEN
                  v_arrival := v_arrival89;
              ELSIF v_from = 90 THEN
                  v_arrival := v_arrival90;  
              else
                  v_arrival := 0;
              END IF;
        
--            insert into ztb_log_kuraire  (ID,wo) values (1,v_inventory); 
--            insert into ztb_log_kuraire  (ID,wo) values (2,v_plan); 
--            insert into ztb_log_kuraire  (ID,wo) values (3,v_rata); 
--             insert into ztb_log_kuraire  (ID,wo) values (4,v_inventory_prf); 
--              insert into ztb_log_kuraire  (ID,wo) values (5,v_purchase); 
            v_plan := ceil(v_plan);     
            v_rata := ceil(v_rata);
            
           -- insert into ztb_log_kuraire  (wo) values (v_rata);   
            v_inventory := nvl(v_inventory,0) - nvl(v_plan,0) + nvl(v_arrival,0)+ nvl(v_purchase,0); 
            v_inventory_prf := nvl(v_inventory_prf,0) - nvl(v_plan,0) + nvl(v_purchase,0);
--            + nvl(v_purchase,0);
            
           
            
--            if v_rata < 1 then 
--             v_ito := ceil(v_inventory / v_rata1); 
--            else
--             v_ito := ceil(v_inventory / v_rata); 
--            end if;
            
           


            v_str := ' ' ;  
            v_str :=  'update ztb_mrp_data set N_' || v_from || ' = '''|| nvl(ceil(v_plan),0) ||''' WHERE item_no = '''|| c_item_no ||''' and no_id = 1';
            EXECUTE IMMEDIATE v_str;
            --insert into ztb_log_kuraire  (wo) values (v_rata || 'dan' || v_date || 'dan' || v_rata2 || 'dan' || v_rata3) ;
              
            v_str :=   'update ztb_mrp_data set N_' || v_from || ' = '|| v_inventory ||' WHERE item_no = '|| c_item_no ||' and no_id = 4 ';
            EXECUTE IMMEDIATE v_str;
            --insert into ztb_log_kuraire  (wo) values (v_str) ;
             
            v_str := 'update ztb_mrp_data set N_' || v_from || ' = '|| nvl(v_arrival,0) ||' WHERE item_no = '|| c_item_no ||' and no_id = 2';
            EXECUTE IMMEDIATE v_str;
            --insert into ztb_log_kuraire  (wo) values (v_str) ;
              
            v_str :=  'update ztb_mrp_data set N_' || v_from || ' = '|| nvl(v_purchase,0) ||' WHERE item_no = '|| c_item_no ||' and no_id = 3 ';
            EXECUTE IMMEDIATE v_str;
            --insert into ztb_log_kuraire  (wo) values (v_str) ;
              
            v_str :=  'update ztb_mrp_data set N_' || v_from || ' = '|| nvl(v_ito_min,0) ||' WHERE item_no = '|| c_item_no ||' and no_id = 5 ';
            EXECUTE IMMEDIATE v_str;
            
            if v_rata is null or v_rata = 0 then 
               v_str :=  'update ztb_mrp_data set N_' || v_from || ' = '|| 0 ||' WHERE item_no = '|| c_item_no ||' and no_id = 6 ';
            else
              v_ito := ceil(v_inventory / nvl(v_rata,1));
               v_str :=  'update ztb_mrp_data set N_' || v_from || ' = '|| nvl(v_ito,0) ||' WHERE item_no = '|| c_item_no ||' and no_id = 6 ';
            end if;
            
           
            EXECUTE IMMEDIATE v_str;
              
            v_str := 'update ztb_mrp_data set N_' || v_from || ' = '|| nvl(v_ito_max,0) ||' WHERE item_no = '|| c_item_no ||' and no_id = 7 ';
            EXECUTE IMMEDIATE v_str;
            
             if v_rata is null or v_rata = 0 then 
               v_str :=  'update ztb_mrp_data set N_' || v_from || ' = '|| 0 ||' WHERE item_no = '|| c_item_no ||' and no_id = 8 ';
             else
             
               v_str :=  'update ztb_mrp_data set N_' || v_from || ' = '|| nvl(v_rata,0) ||' WHERE item_no = '|| c_item_no ||' and no_id = 8 ';
            end if;
            EXECUTE IMMEDIATE v_str;
            
            
--            if v_rata is null or v_rata = 0 then 
--               v_str :=  'update ztb_mrp_data set N_' || v_from || ' = '|| 0 ||' WHERE item_no = '|| c_item_no ||' and no_id = 9 ';
--            else
--               v_ito_prf := ceil(v_inventory_prf / nvl(v_rata,1));
--               v_str :=  'update ztb_mrp_data set N_' || v_from || ' = '|| nvl(v_ito_prf,0) ||' WHERE item_no = '|| c_item_no ||' and no_id = 9 ';
--            end if;
--            
--           
--            EXECUTE IMMEDIATE v_str;
            
            
               
         END LOOP;   
      commit;  
      end;
--   
--   
--update ztb_mrp_Data 
--   set N_1 = N_1 ||' '|| v_uom ,
--  N_2 = N_2 ||' '|| v_uom,
--N_3 = N_3 ||' '|| v_uom,
--N_4 = N_4 ||' '|| v_uom,
--N_5 = N_5 ||' '|| v_uom,
--N_6 = N_6 ||' '|| v_uom,
--N_7 = N_7 ||' '|| v_uom,
--N_8 = N_8 ||' '|| v_uom,
--N_9 = N_9 ||' '|| v_uom,
--N_10 = N_10 ||' '|| v_uom,
--N_11 = N_11 ||' '|| v_uom,
--N_12 = N_12 ||' '|| v_uom,
--N_13 = N_13 ||' '|| v_uom,
--N_14 = N_14 ||' '|| v_uom,
--N_15 = N_15 ||' '|| v_uom,
--N_16 = N_16 ||' '|| v_uom,
--N_17 = N_17 ||' '|| v_uom,
--N_18 = N_18 ||' '|| v_uom,
--N_19 = N_19 ||' '|| v_uom,
--N_20 = N_20 ||' '|| v_uom,
--N_21 = N_21 ||' '|| v_uom,
--N_22 = N_22 ||' '|| v_uom,
--N_23 = N_23 ||' '|| v_uom,
--N_24 = N_24 ||' '|| v_uom,
--N_25 = N_25 ||' '|| v_uom,
--N_26 = N_26 ||' '|| v_uom,
--N_27 = N_27 ||' '|| v_uom,
--N_28 = N_28 ||' '|| v_uom,
--N_29 = N_29 ||' '|| v_uom,
--N_30 = N_30 ||' '|| v_uom,
--N_31 = N_31 ||' '|| v_uom,
--N_32 = N_32 ||' '|| v_uom,
--N_33 = N_33 ||' '|| v_uom,
--N_34 = N_34 ||' '|| v_uom,
--N_35 = N_35 ||' '|| v_uom,
--N_36 = N_36 ||' '|| v_uom,
--N_37 = N_37 ||' '|| v_uom,
--N_38 = N_38 ||' '|| v_uom,
--N_39 = N_39 ||' '|| v_uom,
--N_40 = N_40 ||' '|| v_uom,
--N_41 = N_41 ||' '|| v_uom,
--N_42 = N_42 ||' '|| v_uom,
--N_43 = N_43 ||' '|| v_uom,
--N_44 = N_44 ||' '|| v_uom,
--N_45 = N_45 ||' '|| v_uom,
--N_46 = N_46 ||' '|| v_uom,
--N_47 = N_47 ||' '|| v_uom,
--N_48 = N_48 ||' '|| v_uom,
--N_49 = N_49 ||' '|| v_uom,
--N_50 = N_50 ||' '|| v_uom,
--N_51 = N_51 ||' '|| v_uom,
--N_52 = N_52 ||' '|| v_uom,
--N_53 = N_53 ||' '|| v_uom,
--N_54 = N_54 ||' '|| v_uom,
--N_55 = N_55 ||' '|| v_uom,
--N_56 = N_56 ||' '|| v_uom,
--N_57 = N_57 ||' '|| v_uom,
--N_58 = N_58 ||' '|| v_uom,
--N_59 = N_59 ||' '|| v_uom,
--N_60 = N_60 ||' '|| v_uom,
--N_61 = N_61 ||' '|| v_uom,
--N_62 = N_62 ||' '|| v_uom,
--N_63 = N_63 ||' '|| v_uom,
--N_64 = N_64 ||' '|| v_uom,
--N_65 = N_65 ||' '|| v_uom,
--N_66 = N_66 ||' '|| v_uom,
--N_67 = N_67 ||' '|| v_uom,
--N_68 = N_68 ||' '|| v_uom,
--N_69 = N_69 ||' '|| v_uom,
--N_70 = N_70 ||' '|| v_uom,
--N_71 = N_71 ||' '|| v_uom,
--N_72 = N_72 ||' '|| v_uom,
--N_73 = N_73 ||' '|| v_uom,
--N_74 = N_74 ||' '|| v_uom,
--N_75 = N_75 ||' '|| v_uom,
--N_76 = N_76 ||' '|| v_uom,
--N_77 = N_77 ||' '|| v_uom,
--N_78 = N_78 ||' '|| v_uom,
--N_79 = N_79 ||' '|| v_uom,
--N_80 = N_80 ||' '|| v_uom,
--N_81 = N_81 ||' '|| v_uom,
--N_82 = N_82 ||' '|| v_uom,
--N_83 = N_83 ||' '|| v_uom,
--N_84 = N_84 ||' '|| v_uom,
--N_85 = N_85 ||' '|| v_uom,
--N_86 = N_86 ||' '|| v_uom,
--N_87 = N_87 ||' '|| v_uom,
--N_88 = N_88 ||' '|| v_uom,
--N_89 = N_89 ||' '|| v_uom,
--N_90 = N_90 ||' '|| v_uom
--
--   where item_no = c_item_no ;
 
   
   END LOOP;
CLOSE c_item; 

--EXECUTE IMMEDIATE v_str;              
      
             

      


ENd;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_MRP_PM" is

v_i number := 0;
v_days number:= 1;
v_days1 number:= 0;
v_tgl VARCHAR(100);
v_qty number;
c_qty number;
c_qty_p number;
c_Date date;
c_item VARCHAR(100);
c_day number;
c_description varchar(100);
v_inventory number:=0;
v_purchase number:=0;
v_preq number:=0;
v_inventory_awal number :=0;
v_str varchar(3000);
c_wo varchar(3000);


cursor c_insert is
select 
       distinct
       case when st.lower_item_no > 70000000 then st.lower_item_no - 70000000 else st.lower_item_no end lower_item_no,
       it.description
from mps_header r
inner join mps_details s 
on r.po_no = s.po_no and s.po_line_no = r.po_line_no
inner join (  
          select * from structure 

            ) st
on st.upper_item_no||level_no = r.item_no||bom_level
inner join item it 
on case when st.lower_item_no > 70000000 then st.lower_item_no - 70000000 else st.lower_item_no end = it.item_no
where   s.mps_date > (select trim(sysdate) from dual) --and upper_item_no = '88680'
;


cursor c_purchase_plan is
select  aa.item_no,  
        to_Date(require_date,'dd-MM-yyyy') - to_date(trim(sysdate), 'dd-MM-yyyy') as DateDiff, 
        sum(nvl(case when remainder_qty < 0 then 0 else remainder_qty end,0)) JumPre
from prf_details aa
inner join (select distinct item_no
            from ztb_mrp_data_pck) bb  
on aa.item_no = bb.item_no
where aa.require_date > (select trim(sysdate) from dual) and to_Date(require_date,'dd-MM-yyyy') - to_date(trim(sysdate), 'dd-MM-yyyy') <= 90
and aa.item_no not in ('2211524',
                              '2212349',
                              '2211525',
                              '2212350',
                              '2211521',
                              '2212353',
                              '2211482',
                              '2212354',
                              '2211523',
                              '2212356',
                              '2211487',
                              '2211485',
                              '2212351',
                              '2211486',
                              '2212352',
                              '2111425',
                              '2112268',
                              '2111426',
                              '2112269',
                              '2111423',
                              '2112272',
                              '2111387',
                              '2112273',
                              '2111388',
                              '2112274',
                              '2111391',
                              '2223131',
                              '2123131'
                              )
group by aa.item_no,require_date
order by aa.item_no,require_date;

cursor c_di_plan is
select  bb.item_no,  
        to_Date(aa.di_date,'dd-MM-yyyy') - to_date(trim(sysdate), 'dd-MM-yyyy') as DateDiff, 
        sum(qty) JumPre from di_header aa
inner join di_details bb
on aa.di_no = bb.di_no
where item_no in ('2211524',
                              '2212349',
                              '2211525',
                              '2212350',
                              '2211521',
                              '2212353',
                              '2211482',
                              '2212354',
                              '2211523',
                              '2212356',
                              '2211487',
                              '2211485',
                              '2212351',
                              '2211486',
                              '2212352',
                              '2111425',
                              '2112268',
                              '2111426',
                              '2112269',
                              '2111423',
                              '2112272',
                              '2111387',
                              '2112273',
                              '2111388',
                              '2112274',
                              '2111391',
                              '2223131',
                              '2123131'
                              )
and to_Date(aa.di_date,'dd-MM-yyyy') - to_date(trim(sysdate), 'dd-MM-yyyy') > 0                               
group by bb.item_no,di_Date
order by bb.item_no,di_Date;


cursor c_purchase_plan2 is
select  aa.item_no,  
        to_Date(require_date,'dd-MM-yyyy') - to_date(trim(sysdate), 'dd-MM-yyyy') as DateDiff, 
        sum(nvl(case when remainder_qty < 0 then 0 else remainder_qty end,0)) JumPre
from prf_details aa
inner join (select distinct item_no
            from ztb_mrp_data_pck) bb  
on aa.item_no = bb.item_no
where aa.require_date > (select trim(sysdate) from dual) and to_Date(require_date,'dd-MM-yyyy') - to_date(trim(sysdate), 'dd-MM-yyyy') <= 90
      and aa.remainder_qty <> 0 or remainder_qty is null
      and to_Date(require_date,'dd-MM-yyyy') - to_date(trim(sysdate), 'dd-MM-yyyy') > 0 
      and aa.item_no not in ('2211524',
                              '2212349',
                              '2211525',
                              '2212350',
                              '2211521',
                              '2212353',
                              '2211482',
                              '2212354',
                              '2211523',
                              '2212356',
                              '2211487',
                              '2211485',
                              '2212351',
                              '2211486',
                              '2212352',
                              '2111425',
                              '2112268',
                              '2111426',
                              '2112269',
                              '2111423',
                              '2112272',
                              '2111387',
                              '2112273',
                              '2111388',
                              '2112274',
                              '2111391',
                              '2223131',
                              '2123131'
                              )
group by aa.item_no,require_date
order by aa.item_no,require_date;

cursor c_arrive_plan is
select  aa.item_no,  
        to_Date(eta,'dd-MM-yyyy') - to_date(trim(sysdate), 'dd-MM-yyyy') as DateDiff, 
        sum(bal_qty) JumPre
from po_details aa
inner join (select distinct  item_no 
            from ztb_mrp_data_pck) bb  
on aa.item_no = bb.item_no
where aa.eta > (select trim(sysdate) from dual) and to_Date(eta,'dd-MM-yyyy') - to_date(trim(sysdate), 'dd-MM-yyyy') <= 90
      and aa.item_no not in ('2211524',
                              '2212349',
                              '2211525',
                              '2212350',
                              '2211521',
                              '2212353',
                              '2211482',
                              '2212354',
                              '2211523',
                              '2212356',
                              '2211487',
                              '2211485',
                              '2212351',
                              '2211486',
                              '2212352',
                              '2111425',
                              '2112268',
                              '2111426',
                              '2112269',
                              '2111423',
                              '2112272',
                              '2111387',
                              '2112273',
                              '2111388',
                              '2112274',
                              '2111391',
                              '2223131',
                              '2123131'
                              )
group by aa.item_no,eta
order by aa.item_no,eta;


cursor c_used_plan is
select 'update ztb_mrp_data_pck  set N_1 = ' ||
       sum(n_1) || ' ,N_2 = ' ||
       sum(n_2) || ' ,N_3 = ' ||
       sum(n_3) || ' ,N_4 = ' ||
       sum(n_4) || ' ,N_5 = ' ||
       sum(n_5) || ' ,N_6 = ' ||
       sum(n_6) || ' ,N_7 = ' ||
       sum(n_7) || ' ,N_8 = ' ||
       sum(n_8) || ' ,N_9 = ' ||
       sum(n_9) || ' ,N_10 = ' ||
       sum(n_10) || ' ,N_11 = ' ||
       
        sum(n_11) || ' ,N_12 = ' ||
       sum(n_12) || ' ,N_13 = ' ||
       sum(n_13) || ' ,N_14 = ' ||
       sum(n_14) || ' ,N_15 = ' ||
       sum(n_15) || ' ,N_16 = ' ||
       sum(n_16) || ' ,N_17 = ' ||
       sum(n_17) || ' ,N_18 = ' ||
       sum(n_18) || ' ,N_19 = ' ||
       sum(n_19) || ' ,N_20 = ' ||
       sum(n_20) || ' ,N_21 = ' ||
       
        sum(n_21) || ' ,N_22 = ' ||
       sum(n_22) || ' ,N_23 = ' ||
       sum(n_23) || ' ,N_24 = ' ||
       sum(n_24) || ' ,N_25 = ' ||
       sum(n_25) || ' ,N_26 = ' ||
       sum(n_26) || ' ,N_27 = ' ||
       sum(n_27) || ' ,N_28 = ' ||
       sum(n_28) || ' ,N_29 = ' ||
       sum(n_29) || ' ,N_30 = ' ||
       sum(n_30) || ' ,N_31 = ' ||
       
        sum(n_31) || ' ,N_32 = ' ||
       sum(n_32) || ' ,N_33 = ' ||
       sum(n_33) || ' ,N_34 = ' ||
       sum(n_34) || ' ,N_35 = ' ||
       sum(n_35) || ' ,N_36 = ' ||
       sum(n_36) || ' ,N_37 = ' ||
       sum(n_37) || ' ,N_38 = ' ||
       sum(n_38) || ' ,N_39 = ' ||
       sum(n_39) || ' ,N_40 = ' ||
       sum(n_40) || ' ,N_41 = ' ||
       
        sum(n_41) || ' ,N_42 = ' ||
       sum(n_42) || ' ,N_43 = ' ||
       sum(n_43) || ' ,N_44 = ' ||
       sum(n_44) || ' ,N_45 = ' ||
       sum(n_45) || ' ,N_46 = ' ||
       sum(n_46) || ' ,N_47 = ' ||
       sum(n_47) || ' ,N_48 = ' ||
       sum(n_48) || ' ,N_49 = ' ||
       sum(n_49) || ' ,N_50 = ' ||
       sum(n_50) || ' ,N_51 = ' ||
       
        sum(n_51) || ' ,N_52 = ' ||
       sum(n_52) || ' ,N_53 = ' ||
       sum(n_53) || ' ,N_54 = ' ||
       sum(n_54) || ' ,N_55 = ' ||
       sum(n_55) || ' ,N_56 = ' ||
       sum(n_56) || ' ,N_57 = ' ||
       sum(n_57) || ' ,N_58 = ' ||
       sum(n_58) || ' ,N_59 = ' ||
       sum(n_59) || ' ,N_60 = ' ||
       sum(n_60) || ' ,N_61 = ' ||
       
        sum(n_61) || ' ,N_62 = ' ||
       sum(n_62) || ' ,N_63 = ' ||
       sum(n_63) || ' ,N_64 = ' ||
       sum(n_64) || ' ,N_65 = ' ||
       sum(n_65) || ' ,N_66 = ' ||
       sum(n_66) || ' ,N_67 = ' ||
       sum(n_67) || ' ,N_68 = ' ||
       sum(n_68) || ' ,N_69 = ' ||
       sum(n_69) || ' ,N_70 = ' ||
       sum(n_70) || ' ,N_71 = ' ||
       
        sum(n_71) || ' ,N_72 = ' ||
       sum(n_72) || ' ,N_73 = ' ||
       sum(n_73) || ' ,N_74 = ' ||
       sum(n_74) || ' ,N_75 = ' ||
       sum(n_75) || ' ,N_76 = ' ||
       sum(n_76) || ' ,N_77 = ' ||
       sum(n_77) || ' ,N_78 = ' ||
       sum(n_78) || ' ,N_79 = ' ||
       sum(n_79) || ' ,N_80 = ' ||
       sum(n_80) || ' ,N_81 = ' ||
       
        sum(n_81) || ' ,N_82 = ' ||
       sum(n_82) || ' ,N_83 = ' ||
       sum(n_83) || ' ,N_84 = ' ||
       sum(n_84) || ' ,N_85 = ' ||
       sum(n_85) || ' ,N_86 = ' ||
       sum(n_86) || ' ,N_87 = ' ||
       sum(n_87) || ' ,N_88 = ' ||
       sum(n_88) || ' ,N_89 = ' ||
       sum(n_89) || ' ,N_90 = ' ||
       sum(n_90) || ' where no_id = 1 and item_no = ' || lower_item_no str
from (
  select lower_item_no,
         case when  mps_date = 1 then qty_p else 0 end n_1,
         case when  mps_date = 2 then qty_p else 0 end n_2,
         case when  mps_date = 3 then qty_p else 0 end n_3,
         case when  mps_date = 4 then qty_p else 0 end n_4,
         case when  mps_date = 5 then qty_p else 0 end n_5,
         case when  mps_date = 6 then qty_p else 0 end n_6,
         case when  mps_date = 7 then qty_p else 0 end n_7,
         case when  mps_date = 8 then qty_p else 0 end n_8,
         case when  mps_date = 9 then qty_p else 0 end n_9,
         case when  mps_date = 10 then qty_p else 0 end n_10,
         case when  mps_date = 11 then qty_p else 0 end n_11,
         case when  mps_date = 12 then qty_p else 0 end n_12,
         case when  mps_date = 13 then qty_p else 0 end n_13,
         case when  mps_date = 14 then qty_p else 0 end n_14,
         case when  mps_date = 15 then qty_p else 0 end n_15,
         case when  mps_date = 16 then qty_p else 0 end n_16,
         case when  mps_date = 17 then qty_p else 0 end n_17,
         case when  mps_date = 18 then qty_p else 0 end n_18,
         case when  mps_date = 19 then qty_p else 0 end n_19,
         case when  mps_date = 20 then qty_p else 0 end n_20,
         case when  mps_date = 21 then qty_p else 0 end n_21,
         case when  mps_date = 22 then qty_p else 0 end n_22,
         case when  mps_date = 23 then qty_p else 0 end n_23,
         case when  mps_date = 24 then qty_p else 0 end n_24,
         case when  mps_date = 25 then qty_p else 0 end n_25,
         case when  mps_date = 26 then qty_p else 0 end n_26,
         case when  mps_date = 27 then qty_p else 0 end n_27,
         case when  mps_date = 28 then qty_p else 0 end n_28,
         case when  mps_date = 29 then qty_p else 0 end n_29,
         case when  mps_date = 30 then qty_p else 0 end n_30,
         case when  mps_date = 31 then qty_p else 0 end n_31,
         case when  mps_date = 32 then qty_p else 0 end n_32,
         case when  mps_date = 33 then qty_p else 0 end n_33,
         case when  mps_date = 34 then qty_p else 0 end n_34,
         case when  mps_date = 35 then qty_p else 0 end n_35,
         case when  mps_date = 36 then qty_p else 0 end n_36,
         case when  mps_date = 37 then qty_p else 0 end n_37,
         case when  mps_date = 38 then qty_p else 0 end n_38,
         case when  mps_date = 39 then qty_p else 0 end n_39,
         case when  mps_date = 40 then qty_p else 0 end n_40,
         case when  mps_date = 41 then qty_p else 0 end n_41,
         case when  mps_date = 42 then qty_p else 0 end n_42,
         case when  mps_date = 43 then qty_p else 0 end n_43,
         case when  mps_date = 44 then qty_p else 0 end n_44,
         case when  mps_date = 45 then qty_p else 0 end n_45,
         case when  mps_date = 46 then qty_p else 0 end n_46,
         case when  mps_date = 47 then qty_p else 0 end n_47,
         case when  mps_date = 48 then qty_p else 0 end n_48,
         case when  mps_date = 49 then qty_p else 0 end n_49,
         case when  mps_date = 50 then qty_p else 0 end n_50,
         case when  mps_date = 51 then qty_p else 0 end n_51,
         case when  mps_date = 52 then qty_p else 0 end n_52,
         case when  mps_date = 53 then qty_p else 0 end n_53,
         case when  mps_date = 54 then qty_p else 0 end n_54,
         case when  mps_date = 55 then qty_p else 0 end n_55,
         case when  mps_date = 56 then qty_p else 0 end n_56,
         case when  mps_date = 57 then qty_p else 0 end n_57,
         case when  mps_date = 58 then qty_p else 0 end n_58,
         case when  mps_date = 59 then qty_p else 0 end n_59,
         case when  mps_date = 60 then qty_p else 0 end n_60,
         case when  mps_date = 61 then qty_p else 0 end n_61,
         case when  mps_date = 62 then qty_p else 0 end n_62,
         case when  mps_date = 63 then qty_p else 0 end n_63,
         case when  mps_date = 64 then qty_p else 0 end n_64,
         case when  mps_date = 65 then qty_p else 0 end n_65,
         case when  mps_date = 66 then qty_p else 0 end n_66,
         case when  mps_date = 67 then qty_p else 0 end n_67,
         case when  mps_date = 68 then qty_p else 0 end n_68,
         case when  mps_date = 69 then qty_p else 0 end n_69,
         case when  mps_date = 70 then qty_p else 0 end n_70,
         case when  mps_date = 71 then qty_p else 0 end n_71,
         case when  mps_date = 72 then qty_p else 0 end n_72,
         case when  mps_date = 73 then qty_p else 0 end n_73,
         case when  mps_date = 74 then qty_p else 0 end n_74,
         case when  mps_date = 75 then qty_p else 0 end n_75,
         case when  mps_date = 76 then qty_p else 0 end n_76,
         case when  mps_date = 77 then qty_p else 0 end n_77,
         case when  mps_date = 78 then qty_p else 0 end n_78,
         case when  mps_date = 79 then qty_p else 0 end n_79,
         case when  mps_date = 80 then qty_p else 0 end n_80,
         case when  mps_date = 81 then qty_p else 0 end n_81,
         case when  mps_date = 82 then qty_p else 0 end n_82,
         case when  mps_date = 83 then qty_p else 0 end n_83,
         case when  mps_date = 84 then qty_p else 0 end n_84,
         case when  mps_date = 85 then qty_p else 0 end n_85,
         case when  mps_date = 86 then qty_p else 0 end n_86,
         case when  mps_date = 87 then qty_p else 0 end n_87,
         case when  mps_date = 88 then qty_p else 0 end n_88,
         case when  mps_date = 89 then qty_p else 0 end n_89,
         case when  mps_date = 90 then qty_p else 0 end n_90
         
  from (
  select case when st.lower_item_no > 70000000 then st.lower_item_no - 70000000 else st.lower_item_no end lower_item_no,
         to_Date(mps_date,'dd-MM-yyyy') - to_date(trim(sysdate), 'dd-MM-yyyy')  mps_date,
        CAST(sum(s.mps_qty) * quantity / quantity_base as decimal(18,2)) * (1 + (failure_rate /100))   qty_p
  from mps_header r
  inner join ztb_mps_details s 
  on r.po_no = s.po_no and s.po_line_no = r.po_line_no
  inner join (  
            select * from structure s
              ) st
  on st.upper_item_no||level_no = r.item_no||r.bom_level
  inner join item it 
  on case when st.lower_item_no > 70000000 then st.lower_item_no - 70000000 else st.lower_item_no end = it.item_no
  where  mps_date > (select trim(sysdate) from dual) and to_Date(mps_date,'dd-MM-yyyy') - to_date(trim(sysdate), 'dd-MM-yyyy') <=90
        -- and upper_item_no = '88680'
  group by mps_date,case when st.lower_item_no > 70000000 then st.lower_item_no - 70000000 else st.lower_item_no end,quantity_base,quantity,failure_rate
  )
) group by lower_item_no;
--select case when st.lower_item_no > 70000000 then st.lower_item_no - 70000000 else st.lower_item_no end lower_item_no,
--       to_Date(mps_date,'dd-MM-yyyy') - to_date(trim(sysdate), 'dd-MM-yyyy')  mps_date,
--       CEIL(sum(s.mps_qty) * quantity / quantity_base) * (1 + (failure_rate /100))   qty_p
--from mps_header r
--inner join ztb_mps_details s 
--on r.po_no = s.po_no and s.po_line_no = r.po_line_no
--inner join (  
--          select * from structure s
--          inner join (
--          select max(level_no) level_nos, upper_item_no upper from structure
--          group by upper_item_no
--          )ss on s.upper_item_no = ss.upper and s.level_no = ss.level_nos
--
--            ) st
--on st.upper_item_no = r.item_no
--inner join item it 
--on case when st.lower_item_no > 70000000 then st.lower_item_no - 70000000 else st.lower_item_no end = it.item_no
--where  mps_date > (select trim(sysdate) from dual) and to_Date(mps_date,'dd-MM-yyyy') - to_date(trim(sysdate), 'dd-MM-yyyy') <=90
--      -- and upper_item_no = '88680'
--group by mps_date,case when st.lower_item_no > 70000000 then st.lower_item_no - 70000000 else st.lower_item_no end,quantity_base,quantity,failure_rate;


cursor c_mps (param1 in INTEGER) is
select 
       sum(s.mps_qty)  qty, 
       CEIL(sum(s.mps_qty) * quantity / quantity_base)   qty_p, 
       mps_date,
       st.lower_item_no,
       it.description
from mps_header r
inner join mps_details s 
on r.po_no = s.po_no and s.po_line_no = r.po_line_no
inner join (  
          select * from structure s
            ) st
on st.upper_item_no||level_no = r.item_no||bom_level
inner join item it 
on st.lower_item_no = it.item_no
where mps_date = (select trim(sysdate+param1) from dual)
group by mps_date,lower_item_no,quantity_base,quantity,it.description;


cursor c_update is
select wo from ztb_log_kuraire;


BEGIN
delete from ztb_log_kuraire;
delete from ZTB_MRP_DATA_PCK;
  
  
  
  open c_insert;
    loop
      fetch c_insert into c_item,c_description;
      exit when c_insert%notfound;
        begin
          
--          insert into ztb_mrp_data_pck (NO_ID,description,item_no,item_desc)
--          select '0','TANGGAL',c_item,c_description
--          from dual;
--          
         
--          select sum(bal_qty) into v_qty from po_details where eta < (select trim(sysdate) from dual) and item_no = c_item;
--          EXCEPTION
--          WHEN NO_DATA_FOUND THEN
--          v_qty := 0;
--          END;
          
          insert into ztb_mrp_data_pck (NO_ID,description,item_no,item_desc)
          select '1','PLAN',c_item,c_description
          from dual;
          
          insert into ztb_mrp_data_pck (NO_ID,description,item_no,item_desc)
          select '2','ARRIVE',c_item,c_description
          from dual;
          
          insert into ztb_mrp_data_pck (NO_ID,description,item_no,item_desc)
          select '3','PURCHASE',c_item,c_description
          from dual;
          
          insert into ztb_mrp_data_pck (NO_ID,description,item_no,item_desc)
          select '4','INVENTORY ',c_item,c_description
          from dual;
          
          insert into ztb_mrp_data_pck (NO_ID,description,item_no,item_desc)
          select '5','PURCHASE2 ',c_item,c_description
          from dual;
          
          v_qty := 0;
      end;
    end loop;
  close c_insert;
 
 
   open c_purchase_plan;
    loop
      fetch c_purchase_plan into c_item,c_day,c_qty;
      exit when c_purchase_plan%notfound;
        begin
          
            v_str := 'update ztb_mrp_data_pck set N_' || c_day || ' = '|| nvl(c_qty,0) ||' WHERE item_no = '|| c_item ||' and no_id = 3 ';  
            execute IMMEDIATE v_str;
        end;
    end loop;
  close c_purchase_plan;
  
  open c_purchase_plan2;
    loop
      fetch c_purchase_plan2 into c_item,c_day,c_qty;
      exit when c_purchase_plan2%notfound;
        begin
          
            v_str := 'update ztb_mrp_data_pck set N_' || c_day || ' = '|| nvl(c_qty,0) ||' WHERE item_no = '|| c_item ||' and no_id =5 ';  
            execute IMMEDIATE v_str;
        end;
    end loop;
  close c_purchase_plan2;
  
  
    open c_di_plan;
    loop
      fetch c_di_plan into c_item,c_day,c_qty;
      exit when c_di_plan%notfound;
        begin
          
            v_str := 'update ztb_mrp_data_pck set N_' || c_day || ' = '|| nvl(c_qty,0) ||' WHERE item_no = '|| c_item ||' and no_id =5 ';  
            execute IMMEDIATE v_str;
        end;
    end loop;
  close c_di_plan;
--  
   open c_arrive_plan;
    loop
      fetch c_arrive_plan into c_item,c_day,c_qty;
      exit when c_arrive_plan%notfound;
        begin
            v_str := 'update ztb_mrp_data_pck set N_' || c_day || ' = '|| nvl(c_qty,0) ||' WHERE item_no = '|| c_item ||' and no_id = 2 ';  
            execute IMMEDIATE v_str;
        end;
    end loop;
  close c_arrive_plan;
--
  open c_used_plan;
    loop
      fetch c_used_plan into c_wo;
      exit when c_used_plan%notfound;
        begin
--            insert into ztb_log_kuraire (wo) values (' nomor : ' || v_i || ' - ' || v_str  );
            execute IMMEDIATE c_wo;
        end;
    end loop;
  close c_used_plan;  
--
--  while v_days <= 90
--  loop
--  
--   select trim(sysdate+v_Days) into v_tgl from dual;
--      
--      if v_days = 1 then
--          v_str := 'update ZTB_MRP_DATA_PCK set n_' || v_days || ' =  (select w.this_inventory from whinventory w where w.item_no = ZTB_MRP_DATA_PCK.item_no) where no_id = 4' ;     
--          execute IMMEDIATE v_str;
--          -- insert into ztb_log_kuraire (wo) values (v_str);  
--          v_str := 'update ztb_MRP_data_pck set description =  description ||  (select ''( '' || cast(w.this_inventory as varchar(20))|| '') '' from whinventory w where w.item_no = ZTB_MRP_DATA_PCK.item_no) where no_id = 4 ';
--          execute IMMEDIATE v_str;
--         --  insert into ztb_log_kuraire (wo) values (v_str);
--
--      end if;
--      v_str := 'update ZTB_MRP_DATA_PCK set n_' || v_days || ' = (select sum(case when mm.no_id  = ''1'' then mm.n_' || v_days || '  * -1 else mm.n_' || v_days || ' * 1  end) from ZTB_MRP_DATA_PCK mm where mm.item_no = ZTB_MRP_DATA_PCK.item_no and mm.no_id <> 3) where no_id = 4';
--      execute IMMEDIATE v_str;
--      -- insert into ztb_log_kuraire (wo) values (v_str);
--      v_days1 := v_days1 + 1;
--      v_days := v_days + 1;
--  end loop;

END;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_MRP_PM_ITEM" (
  p_item_no IN varchar
) is

v_i number := 0;
v_days number:= 1;
v_days1 number:= 0;
v_tgl VARCHAR(100);
v_qty number;
c_qty number;
c_qty_p number;
c_Date date;
c_item VARCHAR(100);
c_day number;
c_description varchar(100);
v_inventory number:=0;
v_purchase number:=0;
v_preq number:=0;
v_inventory_awal number :=0;
v_str varchar(3000);
c_wo varchar(3000);


cursor c_insert is
select 
       distinct
       case when st.lower_item_no > 70000000 then st.lower_item_no - 70000000 else st.lower_item_no end lower_item_no,
       it.description
from mps_header r
inner join ztb_mps_details s 
on r.po_no = s.po_no and s.po_line_no = r.po_line_no
inner join (  
          select * from structure s
          inner join (
          select max(level_no) level_nos, upper_item_no upper from structure
          group by upper_item_no
          )ss on s.upper_item_no = ss.upper and s.level_no = ss.level_nos
            ) st
on st.upper_item_no = r.item_no
inner join item it 
on case when st.lower_item_no > 70000000 then st.lower_item_no - 70000000 else st.lower_item_no end = it.item_no
where   s.mps_date > (select trim(sysdate) from dual) and st.lower_item_no = p_item_no
;


cursor c_purchase_plan is
select  aa.item_no,  
        to_Date(require_date,'dd-MM-yyyy') - to_date(trim(sysdate), 'dd-MM-yyyy') as DateDiff, 
        sum(qty) JumPre
from prf_details aa
inner join (select distinct item_no
            from ztb_mrp_data_pck) bb  
on aa.item_no = bb.item_no
where aa.require_date > (select trim(sysdate) from dual) and to_Date(require_date,'dd-MM-yyyy') - to_date(trim(sysdate), 'dd-MM-yyyy') <= 90
and aa.item_no = p_item_no
and aa.item_no not in ('2211524',
                              '2212349',
                              '2211525',
                              '2212350',
                              '2211521',
                              '2212353',
                              '2211482',
                              '2212354',
                              '2211523',
                              '2212356',
                              '2211487',
                              '2211485',
                              '2212351',
                              '2211486',
                              '2212352',
                              '2111425',
                              '2112268',
                              '2111426',
                              '2112269',
                              '2111423',
                              '2112272',
                              '2111387',
                              '2112273',
                              '2111388',
                              '2112274',
                              '2111391',
                              '2223131',
                              '2123131'
                              )
group by aa.item_no,require_date
order by aa.item_no,require_date;

cursor c_di_plan is
select  bb.item_no,  
        to_Date(aa.di_date,'dd-MM-yyyy') - to_date(trim(sysdate), 'dd-MM-yyyy') as DateDiff, 
        sum(qty) JumPre from di_header aa
inner join di_details bb
on aa.di_no = bb.di_no
where item_no = p_item_no and item_no in ('2211524',
                              '2212349',
                              '2211525',
                              '2212350',
                              '2211521',
                              '2212353',
                              '2211482',
                              '2212354',
                              '2211523',
                              '2212356',
                              '2211487',
                              '2211485',
                              '2212351',
                              '2211486',
                              '2212352',
                              '2111425',
                              '2112268',
                              '2111426',
                              '2112269',
                              '2111423',
                              '2112272',
                              '2111387',
                              '2112273',
                              '2111388',
                              '2112274',
                              '2111391',
                              '2223131',
                              '2123131'
                              )
and to_Date(aa.di_date,'dd-MM-yyyy') - to_date(trim(sysdate), 'dd-MM-yyyy') > 0                               
group by bb.item_no,di_Date
order by bb.item_no,di_Date;


cursor c_purchase_plan2 is
select  aa.item_no,  
        to_Date(require_date,'dd-MM-yyyy') - to_date(trim(sysdate), 'dd-MM-yyyy') as DateDiff, 
        sum(nvl(remainder_qty,qty)) JumPre
from prf_details aa
inner join (select distinct item_no
            from ztb_mrp_data_pck) bb  
on aa.item_no = bb.item_no
where aa.require_date > (select trim(sysdate) from dual) and to_Date(require_date,'dd-MM-yyyy') - to_date(trim(sysdate), 'dd-MM-yyyy') <= 90
      and aa.remainder_qty <> 0 or remainder_qty is null
      and to_Date(require_date,'dd-MM-yyyy') - to_date(trim(sysdate), 'dd-MM-yyyy') > 0 
      and aa.item_no = p_item_no
      and aa.item_no not in ('2211524',
                              '2212349',
                              '2211525',
                              '2212350',
                              '2211521',
                              '2212353',
                              '2211482',
                              '2212354',
                              '2211523',
                              '2212356',
                              '2211487',
                              '2211485',
                              '2212351',
                              '2211486',
                              '2212352',
                              '2111425',
                              '2112268',
                              '2111426',
                              '2112269',
                              '2111423',
                              '2112272',
                              '2111387',
                              '2112273',
                              '2111388',
                              '2112274',
                              '2111391',
                              '2223131',
                              '2123131'
                              )
group by aa.item_no,require_date
order by aa.item_no,require_date;

cursor c_arrive_plan is
select  aa.item_no,  
        to_Date(eta,'dd-MM-yyyy') - to_date(trim(sysdate), 'dd-MM-yyyy') as DateDiff, 
        sum(qty) JumPre
from po_details aa
inner join (select distinct  item_no 
            from ztb_mrp_data_pck) bb  
on aa.item_no = bb.item_no
where aa.eta > (select trim(sysdate) from dual) and to_Date(eta,'dd-MM-yyyy') - to_date(trim(sysdate), 'dd-MM-yyyy') <= 90
      and aa.item_no = p_item_no
      and aa.item_no not in ('2211524',
                              '2212349',
                              '2211525',
                              '2212350',
                              '2211521',
                              '2212353',
                              '2211482',
                              '2212354',
                              '2211523',
                              '2212356',
                              '2211487',
                              '2211485',
                              '2212351',
                              '2211486',
                              '2212352',
                              '2111425',
                              '2112268',
                              '2111426',
                              '2112269',
                              '2111423',
                              '2112272',
                              '2111387',
                              '2112273',
                              '2111388',
                              '2112274',
                              '2111391',
                              '2223131',
                              '2123131'
                              )
group by aa.item_no,eta
order by aa.item_no,eta;


cursor c_used_plan is
select 'update ztb_mrp_data_pck  set N_1 = ' ||
       sum(n_1) || ' ,N_2 = ' ||
       sum(n_2) || ' ,N_3 = ' ||
       sum(n_3) || ' ,N_4 = ' ||
       sum(n_4) || ' ,N_5 = ' ||
       sum(n_5) || ' ,N_6 = ' ||
       sum(n_6) || ' ,N_7 = ' ||
       sum(n_7) || ' ,N_8 = ' ||
       sum(n_8) || ' ,N_9 = ' ||
       sum(n_9) || ' ,N_10 = ' ||
       sum(n_10) || ' ,N_11 = ' ||
       
        sum(n_11) || ' ,N_12 = ' ||
       sum(n_12) || ' ,N_13 = ' ||
       sum(n_13) || ' ,N_14 = ' ||
       sum(n_14) || ' ,N_15 = ' ||
       sum(n_15) || ' ,N_16 = ' ||
       sum(n_16) || ' ,N_17 = ' ||
       sum(n_17) || ' ,N_18 = ' ||
       sum(n_18) || ' ,N_19 = ' ||
       sum(n_19) || ' ,N_20 = ' ||
       sum(n_20) || ' ,N_21 = ' ||
       
        sum(n_21) || ' ,N_22 = ' ||
       sum(n_22) || ' ,N_23 = ' ||
       sum(n_23) || ' ,N_24 = ' ||
       sum(n_24) || ' ,N_25 = ' ||
       sum(n_25) || ' ,N_26 = ' ||
       sum(n_26) || ' ,N_27 = ' ||
       sum(n_27) || ' ,N_28 = ' ||
       sum(n_28) || ' ,N_29 = ' ||
       sum(n_29) || ' ,N_30 = ' ||
       sum(n_30) || ' ,N_31 = ' ||
       
        sum(n_31) || ' ,N_32 = ' ||
       sum(n_32) || ' ,N_33 = ' ||
       sum(n_33) || ' ,N_34 = ' ||
       sum(n_34) || ' ,N_35 = ' ||
       sum(n_35) || ' ,N_36 = ' ||
       sum(n_36) || ' ,N_37 = ' ||
       sum(n_37) || ' ,N_38 = ' ||
       sum(n_38) || ' ,N_39 = ' ||
       sum(n_39) || ' ,N_40 = ' ||
       sum(n_40) || ' ,N_41 = ' ||
       
        sum(n_41) || ' ,N_42 = ' ||
       sum(n_42) || ' ,N_43 = ' ||
       sum(n_43) || ' ,N_44 = ' ||
       sum(n_44) || ' ,N_45 = ' ||
       sum(n_45) || ' ,N_46 = ' ||
       sum(n_46) || ' ,N_47 = ' ||
       sum(n_47) || ' ,N_48 = ' ||
       sum(n_48) || ' ,N_49 = ' ||
       sum(n_49) || ' ,N_50 = ' ||
       sum(n_50) || ' ,N_51 = ' ||
       
        sum(n_51) || ' ,N_52 = ' ||
       sum(n_52) || ' ,N_53 = ' ||
       sum(n_53) || ' ,N_54 = ' ||
       sum(n_54) || ' ,N_55 = ' ||
       sum(n_55) || ' ,N_56 = ' ||
       sum(n_56) || ' ,N_57 = ' ||
       sum(n_57) || ' ,N_58 = ' ||
       sum(n_58) || ' ,N_59 = ' ||
       sum(n_59) || ' ,N_60 = ' ||
       sum(n_60) || ' ,N_61 = ' ||
       
        sum(n_61) || ' ,N_62 = ' ||
       sum(n_62) || ' ,N_63 = ' ||
       sum(n_63) || ' ,N_64 = ' ||
       sum(n_64) || ' ,N_65 = ' ||
       sum(n_65) || ' ,N_66 = ' ||
       sum(n_66) || ' ,N_67 = ' ||
       sum(n_67) || ' ,N_68 = ' ||
       sum(n_68) || ' ,N_69 = ' ||
       sum(n_69) || ' ,N_70 = ' ||
       sum(n_70) || ' ,N_71 = ' ||
       
        sum(n_71) || ' ,N_72 = ' ||
       sum(n_72) || ' ,N_73 = ' ||
       sum(n_73) || ' ,N_74 = ' ||
       sum(n_74) || ' ,N_75 = ' ||
       sum(n_75) || ' ,N_76 = ' ||
       sum(n_76) || ' ,N_77 = ' ||
       sum(n_77) || ' ,N_78 = ' ||
       sum(n_78) || ' ,N_79 = ' ||
       sum(n_79) || ' ,N_80 = ' ||
       sum(n_80) || ' ,N_81 = ' ||
       
        sum(n_81) || ' ,N_82 = ' ||
       sum(n_82) || ' ,N_83 = ' ||
       sum(n_83) || ' ,N_84 = ' ||
       sum(n_84) || ' ,N_85 = ' ||
       sum(n_85) || ' ,N_86 = ' ||
       sum(n_86) || ' ,N_87 = ' ||
       sum(n_87) || ' ,N_88 = ' ||
       sum(n_88) || ' ,N_89 = ' ||
       sum(n_89) || ' ,N_90 = ' ||
       sum(n_90) || ' where no_id = 1 and item_no = ' || lower_item_no str
from (
  select lower_item_no,
         case when  mps_date = 1 then qty_p else 0 end n_1,
         case when  mps_date = 2 then qty_p else 0 end n_2,
         case when  mps_date = 3 then qty_p else 0 end n_3,
         case when  mps_date = 4 then qty_p else 0 end n_4,
         case when  mps_date = 5 then qty_p else 0 end n_5,
         case when  mps_date = 6 then qty_p else 0 end n_6,
         case when  mps_date = 7 then qty_p else 0 end n_7,
         case when  mps_date = 8 then qty_p else 0 end n_8,
         case when  mps_date = 9 then qty_p else 0 end n_9,
         case when  mps_date = 10 then qty_p else 0 end n_10,
         case when  mps_date = 11 then qty_p else 0 end n_11,
         case when  mps_date = 12 then qty_p else 0 end n_12,
         case when  mps_date = 13 then qty_p else 0 end n_13,
         case when  mps_date = 14 then qty_p else 0 end n_14,
         case when  mps_date = 15 then qty_p else 0 end n_15,
         case when  mps_date = 16 then qty_p else 0 end n_16,
         case when  mps_date = 17 then qty_p else 0 end n_17,
         case when  mps_date = 18 then qty_p else 0 end n_18,
         case when  mps_date = 19 then qty_p else 0 end n_19,
         case when  mps_date = 20 then qty_p else 0 end n_20,
         case when  mps_date = 21 then qty_p else 0 end n_21,
         case when  mps_date = 22 then qty_p else 0 end n_22,
         case when  mps_date = 23 then qty_p else 0 end n_23,
         case when  mps_date = 24 then qty_p else 0 end n_24,
         case when  mps_date = 25 then qty_p else 0 end n_25,
         case when  mps_date = 26 then qty_p else 0 end n_26,
         case when  mps_date = 27 then qty_p else 0 end n_27,
         case when  mps_date = 28 then qty_p else 0 end n_28,
         case when  mps_date = 29 then qty_p else 0 end n_29,
         case when  mps_date = 30 then qty_p else 0 end n_30,
         case when  mps_date = 31 then qty_p else 0 end n_31,
         case when  mps_date = 32 then qty_p else 0 end n_32,
         case when  mps_date = 33 then qty_p else 0 end n_33,
         case when  mps_date = 34 then qty_p else 0 end n_34,
         case when  mps_date = 35 then qty_p else 0 end n_35,
         case when  mps_date = 36 then qty_p else 0 end n_36,
         case when  mps_date = 37 then qty_p else 0 end n_37,
         case when  mps_date = 38 then qty_p else 0 end n_38,
         case when  mps_date = 39 then qty_p else 0 end n_39,
         case when  mps_date = 40 then qty_p else 0 end n_40,
         case when  mps_date = 41 then qty_p else 0 end n_41,
         case when  mps_date = 42 then qty_p else 0 end n_42,
         case when  mps_date = 43 then qty_p else 0 end n_43,
         case when  mps_date = 44 then qty_p else 0 end n_44,
         case when  mps_date = 45 then qty_p else 0 end n_45,
         case when  mps_date = 46 then qty_p else 0 end n_46,
         case when  mps_date = 47 then qty_p else 0 end n_47,
         case when  mps_date = 48 then qty_p else 0 end n_48,
         case when  mps_date = 49 then qty_p else 0 end n_49,
         case when  mps_date = 50 then qty_p else 0 end n_50,
         case when  mps_date = 51 then qty_p else 0 end n_51,
         case when  mps_date = 52 then qty_p else 0 end n_52,
         case when  mps_date = 53 then qty_p else 0 end n_53,
         case when  mps_date = 54 then qty_p else 0 end n_54,
         case when  mps_date = 55 then qty_p else 0 end n_55,
         case when  mps_date = 56 then qty_p else 0 end n_56,
         case when  mps_date = 57 then qty_p else 0 end n_57,
         case when  mps_date = 58 then qty_p else 0 end n_58,
         case when  mps_date = 59 then qty_p else 0 end n_59,
         case when  mps_date = 60 then qty_p else 0 end n_60,
         case when  mps_date = 61 then qty_p else 0 end n_61,
         case when  mps_date = 62 then qty_p else 0 end n_62,
         case when  mps_date = 63 then qty_p else 0 end n_63,
         case when  mps_date = 64 then qty_p else 0 end n_64,
         case when  mps_date = 65 then qty_p else 0 end n_65,
         case when  mps_date = 66 then qty_p else 0 end n_66,
         case when  mps_date = 67 then qty_p else 0 end n_67,
         case when  mps_date = 68 then qty_p else 0 end n_68,
         case when  mps_date = 69 then qty_p else 0 end n_69,
         case when  mps_date = 70 then qty_p else 0 end n_70,
         case when  mps_date = 71 then qty_p else 0 end n_71,
         case when  mps_date = 72 then qty_p else 0 end n_72,
         case when  mps_date = 73 then qty_p else 0 end n_73,
         case when  mps_date = 74 then qty_p else 0 end n_74,
         case when  mps_date = 75 then qty_p else 0 end n_75,
         case when  mps_date = 76 then qty_p else 0 end n_76,
         case when  mps_date = 77 then qty_p else 0 end n_77,
         case when  mps_date = 78 then qty_p else 0 end n_78,
         case when  mps_date = 79 then qty_p else 0 end n_79,
         case when  mps_date = 80 then qty_p else 0 end n_80,
         case when  mps_date = 81 then qty_p else 0 end n_81,
         case when  mps_date = 82 then qty_p else 0 end n_82,
         case when  mps_date = 83 then qty_p else 0 end n_83,
         case when  mps_date = 84 then qty_p else 0 end n_84,
         case when  mps_date = 85 then qty_p else 0 end n_85,
         case when  mps_date = 86 then qty_p else 0 end n_86,
         case when  mps_date = 87 then qty_p else 0 end n_87,
         case when  mps_date = 88 then qty_p else 0 end n_88,
         case when  mps_date = 89 then qty_p else 0 end n_89,
         case when  mps_date = 90 then qty_p else 0 end n_90
         
  from (
  select case when st.lower_item_no > 70000000 then st.lower_item_no - 70000000 else st.lower_item_no end lower_item_no,
         to_Date(mps_date,'dd-MM-yyyy') - to_date(trim(sysdate), 'dd-MM-yyyy')  mps_date,
         CEIL(sum(s.mps_qty) * quantity / quantity_base) * (1 + (failure_rate /100))   qty_p
  from mps_header r
  inner join ztb_mps_details s 
  on r.po_no = s.po_no and s.po_line_no = r.po_line_no
  inner join (  
            select * from structure s
            inner join (
            select max(level_no) level_nos, upper_item_no upper from structure
            group by upper_item_no
            )ss on s.upper_item_no = ss.upper and s.level_no = ss.level_nos
  
              ) st
  on st.upper_item_no = r.item_no
  inner join item it 
  on case when st.lower_item_no > 70000000 then st.lower_item_no - 70000000 else st.lower_item_no end = it.item_no
  where  mps_date > (select trim(sysdate) from dual) and to_Date(mps_date,'dd-MM-yyyy') - to_date(trim(sysdate), 'dd-MM-yyyy') <=90
        and st.lower_item_no = p_item_no
  group by mps_date,case when st.lower_item_no > 70000000 then st.lower_item_no - 70000000 else st.lower_item_no end,quantity_base,quantity,failure_rate
  )
) group by lower_item_no;
--select case when st.lower_item_no > 70000000 then st.lower_item_no - 70000000 else st.lower_item_no end lower_item_no,
--       to_Date(mps_date,'dd-MM-yyyy') - to_date(trim(sysdate), 'dd-MM-yyyy')  mps_date,
--       CEIL(sum(s.mps_qty) * quantity / quantity_base) * (1 + (failure_rate /100))   qty_p
--from mps_header r
--inner join ztb_mps_details s 
--on r.po_no = s.po_no and s.po_line_no = r.po_line_no
--inner join (  
--          select * from structure s
--          inner join (
--          select max(level_no) level_nos, upper_item_no upper from structure
--          group by upper_item_no
--          )ss on s.upper_item_no = ss.upper and s.level_no = ss.level_nos
--
--            ) st
--on st.upper_item_no = r.item_no
--inner join item it 
--on case when st.lower_item_no > 70000000 then st.lower_item_no - 70000000 else st.lower_item_no end = it.item_no
--where  mps_date > (select trim(sysdate) from dual) and to_Date(mps_date,'dd-MM-yyyy') - to_date(trim(sysdate), 'dd-MM-yyyy') <=90
--      -- and upper_item_no = '88680'
--group by mps_date,case when st.lower_item_no > 70000000 then st.lower_item_no - 70000000 else st.lower_item_no end,quantity_base,quantity,failure_rate;


cursor c_mps (param1 in INTEGER) is
select 
       sum(s.mps_qty)  qty, 
       CEIL(sum(s.mps_qty) * quantity / quantity_base)   qty_p, 
       mps_date,
       st.lower_item_no,
       it.description
from mps_header r
inner join ztb_mps_details s 
on r.po_no = s.po_no and s.po_line_no = r.po_line_no
inner join (  
          select * from structure s
          inner join (
          select max(level_no) level_nos, upper_item_no upper from structure
          group by upper_item_no
          )ss on s.upper_item_no = ss.upper and s.level_no = ss.level_nos

            ) st
on st.upper_item_no = r.item_no
inner join item it 
on st.lower_item_no = it.item_no
where mps_date = (select trim(sysdate+param1) from dual) and st.lower_item_no = p_item_no
group by mps_date,lower_item_no,quantity_base,quantity,it.description;


cursor c_update is
select wo from ztb_log_kuraire;


BEGIN
delete from ztb_log_kuraire;
delete from ZTB_MRP_DATA_PCK where item_no = p_item_no;
  
  
  
  open c_insert;
    loop
      fetch c_insert into c_item,c_description;
      exit when c_insert%notfound;
        begin
          
--          insert into ztb_mrp_data_pck (NO_ID,description,item_no,item_desc)
--          select '0','TANGGAL',c_item,c_description
--          from dual;
--          
         
--          select sum(bal_qty) into v_qty from po_details where eta < (select trim(sysdate) from dual) and item_no = c_item;
--          EXCEPTION
--          WHEN NO_DATA_FOUND THEN
--          v_qty := 0;
--          END;
          
          insert into ztb_mrp_data_pck (NO_ID,description,item_no,item_desc)
          select '1','PLAN',c_item,c_description
          from dual;
          
          insert into ztb_mrp_data_pck (NO_ID,description,item_no,item_desc)
          select '2','ARRIVE',c_item,c_description
          from dual;
          
          insert into ztb_mrp_data_pck (NO_ID,description,item_no,item_desc)
          select '3','PURCHASE',c_item,c_description
          from dual;
          
          insert into ztb_mrp_data_pck (NO_ID,description,item_no,item_desc)
          select '4','INVENTORY ',c_item,c_description
          from dual;
          
          insert into ztb_mrp_data_pck (NO_ID,description,item_no,item_desc)
          select '5','PURCHASE2 ',c_item,c_description
          from dual;
          
          v_qty := 0;
      end;
    end loop;
  close c_insert;
 
 
   open c_purchase_plan;
    loop
      fetch c_purchase_plan into c_item,c_day,c_qty;
      exit when c_purchase_plan%notfound;
        begin
          
            v_str := 'update ztb_mrp_data_pck set N_' || c_day || ' = '|| nvl(c_qty,0) ||' WHERE item_no = '|| c_item ||' and no_id = 3 ';  
            execute IMMEDIATE v_str;
        end;
    end loop;
  close c_purchase_plan;
  
  open c_purchase_plan2;
    loop
      fetch c_purchase_plan2 into c_item,c_day,c_qty;
      exit when c_purchase_plan2%notfound;
        begin
          
            v_str := 'update ztb_mrp_data_pck set N_' || c_day || ' = '|| nvl(c_qty,0) ||' WHERE item_no = '|| c_item ||' and no_id =5 ';  
            execute IMMEDIATE v_str;
        end;
    end loop;
  close c_purchase_plan2;
  
  
    open c_di_plan;
    loop
      fetch c_di_plan into c_item,c_day,c_qty;
      exit when c_di_plan%notfound;
        begin
          
            v_str := 'update ztb_mrp_data_pck set N_' || c_day || ' = '|| nvl(c_qty,0) ||' WHERE item_no = '|| c_item ||' and no_id =5 ';  
            execute IMMEDIATE v_str;
        end;
    end loop;
  close c_di_plan;
--  
   open c_arrive_plan;
    loop
      fetch c_arrive_plan into c_item,c_day,c_qty;
      exit when c_arrive_plan%notfound;
        begin
            v_str := 'update ztb_mrp_data_pck set N_' || c_day || ' = '|| nvl(c_qty,0) ||' WHERE item_no = '|| c_item ||' and no_id = 2 ';  
            execute IMMEDIATE v_str;
        end;
    end loop;
  close c_arrive_plan;
--
  open c_used_plan;
    loop
      fetch c_used_plan into c_wo;
      exit when c_used_plan%notfound;
        begin
--            insert into ztb_log_kuraire (wo) values (' nomor : ' || v_i || ' - ' || v_str  );
            execute IMMEDIATE c_wo;
        end;
    end loop;
  close c_used_plan;  
--
--  while v_days <= 90
--  loop
--  
--   select trim(sysdate+v_Days) into v_tgl from dual;
--      
--      if v_days = 1 then
--          v_str := 'update ZTB_MRP_DATA_PCK set n_' || v_days || ' =  (select w.this_inventory from whinventory w where w.item_no = ZTB_MRP_DATA_PCK.item_no) where no_id = 4' ;     
--          execute IMMEDIATE v_str;
--          -- insert into ztb_log_kuraire (wo) values (v_str);  
--          v_str := 'update ztb_MRP_data_pck set description =  description ||  (select ''( '' || cast(w.this_inventory as varchar(20))|| '') '' from whinventory w where w.item_no = ZTB_MRP_DATA_PCK.item_no) where no_id = 4 ';
--          execute IMMEDIATE v_str;
--         --  insert into ztb_log_kuraire (wo) values (v_str);
--
--      end if;
--      v_str := 'update ZTB_MRP_DATA_PCK set n_' || v_days || ' = (select sum(case when mm.no_id  = ''1'' then mm.n_' || v_days || '  * -1 else mm.n_' || v_days || ' * 1  end) from ZTB_MRP_DATA_PCK mm where mm.item_no = ZTB_MRP_DATA_PCK.item_no and mm.no_id <> 3) where no_id = 4';
--      execute IMMEDIATE v_str;
--      -- insert into ztb_log_kuraire (wo) values (v_str);
--      v_days1 := v_days1 + 1;
--      v_days := v_days + 1;
--  end loop;

END;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_MRP_PRF" (
    V_ITEM_NO IN VARCHAR,
    V_PRF_NO in varchar
) is  


v_old_prf_no VARCHAR(30) := '';
v_old_line_no integer := 0;
v_STR VARCHAR(100) := '';


      
begin
  
 
  
  BEGIN
  select h.prf_no into v_old_prf_no 
  from prf_details s
  inner join prf_header h on s.prf_no = h.prf_no
  where item_no = v_item_no and customer_po_no = 'MRP' and h.prf_no <> v_prf_no
      and h.prf_no not in (select nvl(prf_no,'123') from po_details where item_no = v_item_no)
      and rownum = 1;
   exception
               when NO_DATA_FOUND
               then v_old_prf_no := 'X';
   END;
  
  IF v_old_prf_no <> 'X' then 
    
    select max(line_no) into v_old_line_no  from prf_details 
    where prf_no = v_old_prf_no;
       
    v_old_line_no := v_old_line_no + 1;
    
    update prf_details set prf_no = v_old_prf_no , line_no = v_old_line_no
    where prf_no = v_prf_no;
    
    V_STR := 'update prf_details set prf_no = '''|| v_old_prf_no ||''' , line_no = '|| v_old_line_no ||'
    where prf_no = '''|| v_prf_no ||''';';
    
    INSERT INTO ztb_log_kuraire (wo) values (v_str);
    
    V_STR := '';
    
    V_STR := 'delete prf_header 
    where prf_no = '''|| v_prf_no ||''';';
    
    delete prf_header where prf_no = v_prf_no;
    
    INSERT INTO ztb_log_kuraire (wo) values (v_str);
    
    
    update prf_details set prf_no = v_prf_no 
    where prf_no =  v_old_prf_no;
    
    update prf_header set prf_no = v_prf_no 
    where prf_no = v_old_prf_no;
    
  else
    V_STR := ''''|| v_item_no ||''' = '''|| v_prf_no ||''';';
    INSERT INTO ztb_log_kuraire (wo) values (v_str);
  end if;

end;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_MRP_REQUEST_DATE" 
is


v_days number:= 1;
v_tgl date;
v_str VARCHAR(200);
v_str2 VARCHAR(200);


begin
  delete from ztb_mrp_item_need;
  while v_days <= 90
  loop
  
   select trim(sysdate+v_days) into v_tgl from dual;
      
   v_str2 := 'insert into ztb_mrp_item_need (tipe,item_no,item_desc,quantity,tgl) ';
   v_str := 'select 1,item_no,item_desc,N_' || v_days || ',''' || v_tgl || ''' from ztb_mrp_data where no_id in (4) and N_' || v_days || ' < 0 ';
  
   EXECUTE IMMEDIATE v_str2 || v_str;
   
  
   v_str2 := 'insert into ztb_mrp_item_need (tipe,item_no,item_desc,quantity_plan,tgl) ';
   v_str := 'select 2,item_no,item_desc,N_' || v_days || ',''' || v_tgl || ''' from ztb_mrp_data where no_id in (1)  ';
    
     
   EXECUTE IMMEDIATE v_str2 || v_str;
   v_days := v_days + 1;
  end loop;

end;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_MRP_REQUEST_DATE2" 
is


v_days number:= 1;
v_tgl date;
v_str VARCHAR(200);
v_str2 VARCHAR(200);


begin
--  delete from ztb_mrp_item_need;
  while v_days <= 90
  loop
  
   select trim(sysdate+v_days) into v_tgl from dual;
      
   v_str2 := 'insert into ztb_mrp_item_need (tipe,item_no,item_desc,quantity,tgl) ';
   v_str := 'select 1,item_no,item_desc,N_' || v_days || ',''' || v_tgl || ''' from ztb_mrp_data_PCK where no_id in (4) and N_' || v_days || ' < 0 ';
  
   EXECUTE IMMEDIATE v_str2 || v_str;
   
  
   v_str2 := 'insert into ztb_mrp_item_need (tipe,item_no,item_desc,quantity_plan,tgl) ';
   v_str := 'select 2,item_no,item_desc,N_' || v_days || ',''' || v_tgl || ''' from ztb_mrp_data_PCK where no_id in (1)  ';
    
     
   EXECUTE IMMEDIATE v_str2 || v_str;
   v_days := v_days + 1;
  end loop;

end;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_SAFETY_STOCK" 

is

      v_tahun integer := 0;
      v_bulan integer := 0;
      c_lower_item_no varchar(100); 
      c_period varchar(100);
      c_tahun varchar(100);
      c_quantity varchar(100);
      c_upload varchar(100);
      c_bundle_qty varchar(100);
      c_sts_bundle varchar(100);
    
 --     insert into ztb_wo_list (item_no,period,year,qty,upload,sts_bundle,bundle_qty)
      CURSOR C_Stock (PARAM1 IN VARCHAR2,PARAM2 IN VARCHAR2) IS
      SELECT lower_item_no,
             bulan  period,
             tahun,
             ceil(sum(average_used)) Quantity ,
             '1000',
             sts_bundle,
             bundle_qty
      from
      (
      select lower_item_no,
             st.quantity_base,st.quantity,
             sum(mps_qty),
             sum(mps_qty)/ st.quantity_base * st.quantity QuantityUsed,
             count(distinct mps_Date) DayProduction,
             (((sum(mps_qty)/ st.quantity_base * st.quantity))/(count(distinct mps_Date))) *4  average_Used,
             to_char(mps_date,'MM') bulan,
             to_char(mps_date,'YYYY') tahun,
             sts_bundle,
             bundle_qty
            from 
            mps_header  r,
            mps_details s,
            (
              select * from structure s
              inner join (
              select max(level_no) level_nos, upper_item_no upper from structure
              group by upper_item_no
              )ss on s.upper_item_no = ss.upper and s.level_no = ss.level_nos
                        
            
            )   st,
            ztb_safety_stock z
            where r.po_no = s.po_no 
              and r.po_line_no = s.po_line_no
              and r.item_no = st.upper_item_no
              and to_char(mps_date,'MM') >= (select to_char(sysdate,'MM')   from dual)
              and z.item_no = st.lower_item_no
              and z.period = 1
              and year = '2019'
              and st.level_no = (select max(level_no) from structure where lower_item_no = st.lower_item_no and  upper_item_no = st.upper_item_no)
            group by lower_item_no,st.quantity_base,st.quantity,to_char(mps_date,'MM'),to_char(mps_date,'YYYY'),
                     sts_bundle,bundle_qty
       )aa where bulan = cast(PARAM2 as int) group by lower_item_no ,bulan ,tahun ,sts_bundle,bundle_qty;
    
      begin
        delete from mps_details where mps_date is null and mps_qty = 0;
        
        select  tahun,bulan into v_tahun, v_bulan from
        (
        select ltrim(TO_CHAR(sysdate,'yyyy')) tahun,ltrim(TO_CHAR(sysdate,'MM')) bulan
        from dual
        
        ) aa;
        
         delete from ztb_safety_stock where  year = v_tahun and period = cast(v_bulan as int);
        
        OPEN C_Stock(v_tahun,v_bulan); 
           LOOP 
           FETCH C_Stock into c_lower_item_no,c_period,c_tahun,c_quantity,c_upload,c_sts_bundle,c_bundle_qty; 
              EXIT WHEN C_Stock%notfound; 
              begin
              insert into ztb_safety_stock (item_no,period,year,qty,upload,sts_bundle,bundle_qty)
              values (c_lower_item_no,c_period,c_tahun,c_quantity,c_upload,c_sts_bundle,c_bundle_qty);
              end;
          END LOOP; 
        CLOSE C_Stock; 
      
      
      
      end;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_SAFETY_STOCK_1" 

is

      v_tahun integer := 0;
      v_bulan integer := 0;
      c_lower_item_no varchar(100); 
      c_period varchar(100);
      c_tahun varchar(100);
      c_quantity varchar(100);
      c_upload varchar(100);
      c_bundle_qty varchar(100);
      c_sts_bundle varchar(100);
    
 --     insert into ztb_wo_list (item_no,period,year,qty,upload,sts_bundle,bundle_qty)
      CURSOR C_Stock (PARAM1 IN VARCHAR2,PARAM2 IN VARCHAR2) IS
      SELECT lower_item_no,
             bulan  period,
             tahun,
             ceil(sum(average_used)) Quantity ,
             '1000',
             sts_bundle,
             bundle_qty
      from
      (
      select lower_item_no,
            
             st.quantity_base,st.quantity,
             sum(mps_qty),
             sum(mps_qty)/ st.quantity_base * st.quantity QuantityUsed,
             count(distinct mps_Date) DayProduction,
             (((sum(mps_qty)/ st.quantity_base * st.quantity))/(count(distinct mps_Date))) *4  average_Used,
             to_char(mps_date,'MM') bulan,
             to_char(mps_date,'YYYY') tahun,
             sts_bundle,
             bundle_qty
            from 
            mps_header  r,
            mps_details s,
            (
              select * from structure s
              inner join (
              select max(level_no) level_nos, upper_item_no upper from structure
              group by upper_item_no
              )ss on s.upper_item_no = ss.upper and s.level_no = ss.level_nos
                        
            
            )   st,
            ztb_safety_stock z
            where r.po_no = s.po_no 
              and r.po_line_no = s.po_line_no
              and r.item_no = st.upper_item_no
              and to_char(mps_date,'YYYYMM') >= (select to_char(sysdate,'YYYYMM')   from dual)
              and z.item_no = st.lower_item_no
              and z.period ='1'
              and year = PARAM1
             -- and lower_item_no = '2226088'
              and st.level_no = (select max(level_no) from structure where lower_item_no = st.lower_item_no and  upper_item_no = st.upper_item_no)
            group by lower_item_no,st.quantity_base,st.quantity,to_char(mps_date,'MM'),to_char(mps_date,'YYYY'),
                     sts_bundle,bundle_qty
       )aa --where bulan = cast(PARAM2 as int) 
       group by lower_item_no ,bulan ,tahun ,sts_bundle,bundle_qty;
    
      begin
        
        select  tahun,bulan into v_tahun, v_bulan from
        (
        select ltrim(TO_CHAR(sysdate,'yyyy')) tahun,ltrim(TO_CHAR(sysdate,'MM')) bulan
        from dual
        
        ) aa;
        
         delete from ztb_safety_stock_1;
        
        OPEN C_Stock(v_tahun,v_bulan); 
           LOOP 
           FETCH C_Stock into c_lower_item_no,c_period,c_tahun,c_quantity,c_upload,c_sts_bundle,c_bundle_qty; 
              EXIT WHEN C_Stock%notfound; 
              begin
              insert into ztb_safety_stock_1 (item_no,period,year,qty,upload,sts_bundle,bundle_qty)
              values (c_lower_item_no,c_period,c_tahun,c_quantity,c_upload,c_sts_bundle,c_bundle_qty);
              end;
          END LOOP; 
        CLOSE C_Stock; 
      
      
      
      end;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_SEMI_BAT" 

as
BEGIN
delete from ztb_semi_bat;

--###########################INSERT Data Awal ##################################
insert into ztb_semi_bat (
  TIPE,
  TIPE2,
  GRADE,
  aging,
  safety_day,
  working_day, 
  total_order, 
  order_per_day,
  average, 
  std_minimum
)

select aa.batery_type || aa.cell_grade ||'-'|| case when cc.aging_day = 0 then 2 else aging_day end Type_Bat,
  aa.batery_type || aa.cell_grade type2,
  aa.cell_grade,
  case when aging_day = 0 then 2 else aging_day end Aging,
  case when aa.batery_type  = 'LR6' then '1' else '2' end safety_day,
  
  --working days--
  (select count(distinct tanggal)
    from ztb_assy_plan where bulan = 2 and tahun = 2019 and used = 1
    and case when substr(assy_line, 1, instr(assy_line, '#') -1) = 'LR06' then 'LR6' else substr(assy_line, 1, instr(assy_line, '#') -1) end  = aa.batery_type
    group by case when substr(assy_line, 1, instr(assy_line, '#') -1) = 'LR06' then 'LR6' else substr(assy_line, 1, instr(assy_line, '#') -1) end
  ) workingDays,
  
  --total_order
  sum(bb.mps_qty) Total_Order,
  
  -- order per_day
  ceil(sum(bb.mps_qty) / 
  (select count(distinct tanggal) 
    from ztb_assy_plan where bulan = 2 and tahun = 2018 and used = 1
    and case when substr(assy_line, 1, instr(assy_line, '#') -1) = 'LR06' then 'LR6' else substr(assy_line, 1, instr(assy_line, '#') -1) end  = aa.batery_type 
    group by case when substr(assy_line, 1, instr(assy_line, '#') -1) = 'LR06' then 'LR6' else substr(assy_line, 1, instr(assy_line, '#') -1) end 
  )) order_per_day,
  
  -- average
  ceil(sum(bb.mps_qty) / 
  (select count(distinct tanggal) 
    from ztb_assy_plan where bulan = 2 and tahun = 2019 and used = 1
    and case when substr(assy_line, 1, instr(assy_line, '#') -1) = 'LR06' then 'LR6' else substr(assy_line, 1, instr(assy_line, '#') -1) end  = aa.batery_type 
    group by case when substr(assy_line, 1, instr(assy_line, '#') -1) = 'LR06' then 'LR6' else substr(assy_line, 1, instr(assy_line, '#') -1) end
  )) average,
  
  -- std_stock
  (ceil(sum(bb.mps_qty) / 
   (select count(distinct tanggal)
    from ztb_assy_plan where bulan = 2 and tahun = 2019 and used = 1
    and case when substr(assy_line, 1, instr(assy_line, '#') -1) = 'LR06' then 'LR6' else substr(assy_line, 1, instr(assy_line, '#') -1) end  = aa.batery_type 
    group by case when substr(assy_line, 1, instr(assy_line, '#') -1) = 'LR06' then 'LR6' else substr(assy_line, 1, instr(assy_line, '#') -1) end        
   )) * case when aging_day = 0 then 2 else aging_day end) + 
   (ceil(sum(bb.mps_qty) / 
    (select count(distinct tanggal) 
    from ztb_assy_plan where bulan = 2 and tahun = 2019 and used = 1
    and case when substr(assy_line, 1, instr(assy_line, '#') -1) = 'LR06' then 'LR6' else substr(assy_line, 1, instr(assy_line, '#') -1) end  = aa.batery_type 
    group by case when substr(assy_line, 1, instr(assy_line, '#') -1) = 'LR06' then 'LR6' else substr(assy_line, 1, instr(assy_line, '#') -1) end               
    )) * 
    case when aa.batery_type  = 'LR6' then 1 else 2 end
   ) Std_Stock

from mps_header aa
inner join mps_details bb on aa.po_line_no = bb.po_line_no and aa.po_no = bb.po_no
inner join item cc on aa.item_no = cc.item_no
where mps_date between '01-MAR-19' and '31-MAR-19' and aa.batery_type <> 'LR1'
group by aa.batery_type || aa.cell_grade ||'-'|| case when cc.aging_day = 0 then 2 else aging_day end,
aa.cell_grade,case when cc.aging_day = 0 then 2 else aging_day end,aa.batery_type ;


--########################### UPDATE HEATING ################################### 
update ztb_semi_bat set heating_room = (select sum(qty) from zvw_semi_bat where ket = 'HEAT' and tipe = ztb_semi_bat.tipe);


update ztb_semi_bat set qty_aging = nvl((select sum(qty) from zvw_semi_bat where ket = 'AGING' and tipe = ztb_semi_bat.tipe),0);


update ztb_semi_bat set before_label = (select sum(qty_label) from zvw_semi_bat_label where ket = 'BEFORE LABEL' and tipe = ztb_semi_bat.tipe);

update ztb_semi_bat set suspended = (select sum(qty) from zvw_semi_bat where ket = 'SUSPENDED' and tipe = ztb_semi_bat.tipe);

 --########################### UPDATE AGING ####################################

--########################### UPDATE LABEL #####################################

 --########################### UPDATE SUSPEND ##################################
 
 --###########################UPDATE AFTER LABEL################################ 
insert into after_label
  select sum(qty) qty_after_lbl,tipe 
  from ztb_lbl_trans_det aa 
  inner join (select bb.id_print, replace(replace(substr(assy_line, 1, instr(assy_line, '#') -1)||replace(replace(cell_type,'C01','C1'),'(T)'),'LR06','LR6'),'LR01','LR1')||'-'||case when nvl(aging,ng_id) = '0' then '2' else nvl(aging,ng_id) end tipe,sum(qty_act_perpallet) qty_1,
    max(tanggal_produksi) tgl
    from  ztb_assy_kanban bb
      left outer join (select id_print,cast(substr(id_pallet, instr(id_pallet, ',') - 1) as varchar(10)) aging
                        from ztb_assy_heating 
                        where position = 2)zz on bb.id_print = zz.id_print
                        group by replace(replace(substr(assy_line, 1, instr(assy_line, '#') -1)||replace(replace(cell_type,'C01','C1'),'(T)'),'LR06','LR6'),'LR01','LR1')||'-'||case when nvl(aging,ng_id) = '0' then '2' else nvl(aging,ng_id) end,
                                          bb.id_print) cc on aa.id_print = cc.id_print
                                    left outer join 
                                    (select zz.wo_no, zz.plt_no 
                                      from production_income pp
                                      inner join ztb_p_plan zz on pp.slip_no = cast(zz.id as varchar(50))
                                      where slip_date >  '15-JAN-19'
                                    )bb on aa.wo_no = bb.wo_no and aa.plt_no = bb.plt_no
                                    where tanggal > '2019-03-31' and bb.wo_no is null --and  bb.tipe = tl.tipe2
                                    group by tipe;
                                    
UPDATE ztb_semi_bat tl SET (after_label) = (select qty_after_lbl from after_label where tipe = tl.tipe and qty_after_lbl > 0)
where exists (select 1 from  after_label where tipe = tl.tipe  and qty_after_lbl > 0);

delete from after_label;
   
--#################################### UPDATE BALANCE ############################
UPDATE ztb_semi_bat tl set (balance) = (select nvl(qty_aging,0)-sum(std_minimum) from ztb_semi_bat
where tipe = tl.tipe
group by tipe,qty_aging )
where exists (select 1 from ztb_semi_bat where tipe = tl.tipe group by tipe,qty_aging);

--#################################### END CODE HERE #############################
END;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_SHIP_DETAIL" ( p_item_no   in varchar,p_qty   in varchar,p_ppbe   in varchar,p_wo   in varchar, p_answer_no in varchar)
as 

c_item_no varchar(100); 
v_number number := 0;
I number := 1;

c_item_no2 varchar(100); 
C_GR_no varchar(100);
c_amount NUMBER;
c_four_feet NUMBER;
c_two_feet NUMBER;
c_pallet number;
c_pallet_ctn NUMBER;
c_pallet_pcs number;



    
  

CURSOR C_ITEM IS
  select four_feet*pallet_ctn FOUR_FEET ,two_feet*pallet_ctn TWO_FEET,CEIL(p_qty/(pallet_pcs/ pallet_ctn)) PALLET 
  ,pallet_pcs,pallet_ctn from ztb_item where item_no = p_item_no;
      
BEGIN
v_number := 0;
delete from ztb_shipping_detail where answer_no = p_answer_no;

OPEN C_ITEM; 
   LOOP 
   FETCH C_Item into c_four_feet,c_two_feet,c_pallet,c_pallet_pcs,c_pallet_ctn; 
      EXIT WHEN C_Item%notfound; 
      BEGIN
     WHILE c_pallet > 0 
      LOOP
         
         
         IF c_pallet > c_four_feet then
            v_number := c_four_feet * (c_pallet_pcs/c_pallet_ctn);
            c_pallet := c_pallet - c_four_feet;   
            
      --#######################################################################################   
            insert into ztb_shipping_detail(answer_no,WO_NO,PPBE_NO,ITEM_NO,QTY,PALLET,GROSS,NET,MSM,CARTON_NOT_FULL,CONTAINERS, container_value)
            select    p_answer_no,
                      p_wo,p_ppbe,
                      p_item_no,
                      v_number,
                      v_number/c_pallet_pcs, 
                      
            case when v_number< pallet_pcs then 
    
            (gw_pallet *  (floor((v_number+pallet_pcs)/pallet_pcs))
              +
            
                (
                ((GW_pallet -  case when panjang_pallet = 110 then 35 else case when panjang_pallet = 100 then 27 else 25 end end  
                ) / pallet_ctn) * (((v_number+pallet_pcs)/(pallet_pcs/pallet_ctn)) - pallet_ctn) )
                +case when panjang_pallet = 110 then 35 else case when panjang_pallet = 100 then 27 else 25 end end)
     
              - gw_pallet
             else
             gw_pallet *  floor(v_number/pallet_pcs)
              +
              case when v_number/pallet_pcs - floor(v_number/pallet_pcs) > 0 then 
                (
                ((GW_pallet -  case when panjang_pallet = 110 then 35 else case when panjang_pallet = 100 then 27 else 25 end end  
                ) / pallet_ctn) * 
                     case when v_number/pallet_pcs - floor(v_number/pallet_pcs) > 0 then 
                    (v_number / (pallet_pcs / pallet_ctn)) - (floor(v_number/pallet_pcs) * pallet_ctn)
                    else 0 end
                
                )
                +case when panjang_pallet = 110 then 35 else case when panjang_pallet = 100 then 27 else 25 end end
              else 0 
              end
              end  as GrossWeight,
             v_number * zt.NW_Pallet / pallet_pcs  as NetWeight, 
                (floor( v_number/zt.pallet_pcs) *
                 zt.panjang_pallet*zt.lebar_pallet* (zt.carton_height+150)/10000000)+
                 zt.panjang_pallet*zt.lebar_pallet*
                 ((zt.carton_height/(zt.pallet_ctn/step))*ceil(
                 (
                  case when v_number/pallet_pcs - floor(v_number/pallet_pcs) > 0 then 
             (v_number / (pallet_pcs / pallet_ctn)) - (floor(v_number/pallet_pcs) * pallet_ctn)
            else 0 end
                 
                 )
                 
                 /step)+150)/10000000 as MSM ,
                       
                      case when v_number/pallet_pcs - floor(v_number/pallet_pcs) > 0 then 
             (v_number / (pallet_pcs / pallet_ctn)) - (floor(v_number/pallet_pcs) * pallet_ctn)
            else 0 end,
               '40 FEET',
                ((v_number / (pallet_pcs/ pallet_ctn))/(four_feet* pallet_ctn))
                from item i 
                left outer join packing_information pi on pi.pi_no = i.pi_no 
                left outer join ztb_item zt on trim(zt.item_no) = i.item_no
                where  i.item_no = p_item_no ;
            
     
      --#######################################################################################  
         ELSIF c_pallet > c_two_feet and c_pallet <= c_four_feet THEN
             v_number := c_pallet* (c_pallet_pcs/c_pallet_ctn); 
             c_pallet := 0;
            
          --#######################################################################################   
            insert into ztb_shipping_detail(answer_no,WO_NO,PPBE_NO,ITEM_NO,QTY,PALLET,GROSS,NET,MSM,CARTON_NOT_FULL,CONTAINERS, container_value)
            select    p_answer_no,    
                      p_wo,p_ppbe,
                      p_item_no,
                      v_number,
                      v_number/c_pallet_pcs, 
                      
            case when v_number< pallet_pcs then 
    
            (gw_pallet *  (floor((v_number+pallet_pcs)/pallet_pcs))
              +
            
                (
                ((GW_pallet -  case when panjang_pallet = 110 then 35 else case when panjang_pallet = 100 then 27 else 25 end end  
                ) / pallet_ctn) * (((v_number+pallet_pcs)/(pallet_pcs/pallet_ctn)) - pallet_ctn) )
                +case when panjang_pallet = 110 then 35 else case when panjang_pallet = 100 then 27 else 25 end end)
     
              - gw_pallet
             else
             gw_pallet *  floor(v_number/pallet_pcs)
              +
              case when v_number/pallet_pcs - floor(v_number/pallet_pcs) > 0 then 
                (
                ((GW_pallet -  case when panjang_pallet = 110 then 35 else case when panjang_pallet = 100 then 27 else 25 end end  
                ) / pallet_ctn) * 
                    case when v_number/pallet_pcs - floor(v_number/pallet_pcs) > 0 then 
                    (v_number / (pallet_pcs / pallet_ctn)) - (floor(v_number/pallet_pcs) * pallet_ctn)
                    else 0 end
                )
                +case when panjang_pallet = 110 then 35 else case when panjang_pallet = 100 then 27 else 25 end end
              else 0 
              end
              end  as GrossWeight,
             v_number * zt.NW_Pallet / pallet_pcs  as NetWeight, 
                (floor( v_number/zt.pallet_pcs) *
       zt.panjang_pallet*zt.lebar_pallet* (zt.carton_height+150)/10000000)+
       zt.panjang_pallet*zt.lebar_pallet*
       ((zt.carton_height/(zt.pallet_ctn/step))*ceil(
       (
        case when v_number/pallet_pcs - floor(v_number/pallet_pcs) > 0 then 
         (v_number / (pallet_pcs / pallet_ctn)) - (floor(v_number/pallet_pcs) * pallet_ctn)
        else 0 end
             
             )
             
             /step)+150)/10000000 as MSM ,
                   
                  case when v_number/pallet_pcs - floor(v_number/pallet_pcs) > 0 then 
         (v_number / (pallet_pcs / pallet_ctn)) - (floor(v_number/pallet_pcs) * pallet_ctn)
        else 0 end,
            '40 FEET',
             ((v_number / (pallet_pcs/ pallet_ctn))/(four_feet* pallet_ctn))
            from item i 
            left outer join packing_information pi on pi.pi_no = i.pi_no 
            left outer join ztb_item zt on trim(zt.item_no) = i.item_no
            where  i.item_no = p_item_no ;
       
      --#######################################################################################  
         
        ELSE  
            v_number := c_pallet* (c_pallet_pcs/c_pallet_ctn);
            c_pallet := 0;
               
    --#######################################################################################   
            insert into ztb_shipping_detail(answer_no,WO_NO,PPBE_NO,ITEM_NO,QTY,PALLET,GROSS,NET,MSM,CARTON_NOT_FULL,CONTAINERS, container_value)
            select    p_answer_no,    
                      p_wo,p_ppbe,
                      p_item_no,
                      v_number,
                      v_number/c_pallet_pcs, 
                      
            case when v_number< pallet_pcs then 
    
            (gw_pallet *  (floor((v_number+pallet_pcs)/pallet_pcs))
              +
            
                (
                ((GW_pallet -  case when panjang_pallet = 110 then 35 else case when panjang_pallet = 100 then 27 else 25 end end  
                ) / pallet_ctn) * (((v_number+pallet_pcs)/(pallet_pcs/pallet_ctn)) - pallet_ctn) )
                +case when panjang_pallet = 110 then 35 else case when panjang_pallet = 100 then 27 else 25 end end)
     
              - gw_pallet
             else
             gw_pallet *  floor(v_number/pallet_pcs)
              +
              case when v_number/pallet_pcs - floor(v_number/pallet_pcs) > 0 then 
                (
                ((GW_pallet -  case when panjang_pallet = 110 then 35 else case when panjang_pallet = 100 then 27 else 25 end end  
                ) / pallet_ctn) *  case when v_number/pallet_pcs - floor(v_number/pallet_pcs) > 0 then 
                    (v_number / (pallet_pcs / pallet_ctn)) - (floor(v_number/pallet_pcs) * pallet_ctn)
                    else 0 end )
                +case when panjang_pallet = 110 then 35 else case when panjang_pallet = 100 then 27 else 25 end end
              else 0 
              end
              end  as GrossWeight,
             v_number * zt.NW_Pallet / pallet_pcs  as NetWeight, 
                (floor( v_number/zt.pallet_pcs) *
       zt.panjang_pallet*zt.lebar_pallet* (zt.carton_height+150)/10000000)+
       zt.panjang_pallet*zt.lebar_pallet*
       ((zt.carton_height/(zt.pallet_ctn/step))*ceil(
       (
        case when v_number/pallet_pcs - floor(v_number/pallet_pcs) > 0 then 
   (v_number / (pallet_pcs / pallet_ctn)) - (floor(v_number/pallet_pcs) * pallet_ctn)
  else 0 end
       
       )
       
       /step)+150)/10000000 as MSM ,
             
            case when v_number/pallet_pcs - floor(v_number/pallet_pcs) > 0 then 
   (v_number / (pallet_pcs / pallet_ctn)) - (floor(v_number/pallet_pcs) * pallet_ctn)
  else 0 end,
      '20 FEET',
       c_pallet--((v_number / (pallet_pcs/ pallet_ctn))/(two_feet* pallet_ctn))
      from item i 
      left outer join packing_information pi on pi.pi_no = i.pi_no 
      left outer join ztb_item zt on trim(zt.item_no) = i.item_no
      where  i.item_no = p_item_no ;
      --#######################################################################################
   END IF;
      
      END LOOP;
      end;
  END LOOP; 
CLOSE C_Item; 
END;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_SHIP_DETAIL_1" ( p_item_no   in varchar,p_qty   in varchar,p_ppbe   in varchar,p_wo   in varchar,p_container_no   in varchar,p_rowid in varchar,p_answer_no in varchar, p_tw in varchar, p_enr in varchar)
as 

c_item_no varchar(100); 
v_number number := 0;
I number := 1;
c_item_no2 varchar(100); 
C_GR_no varchar(100);
c_amount NUMBER;
c_four_feet NUMBER;
c_two_feet NUMBER;
c_pallet number;
c_pallet_ctn NUMBER;
c_pallet_pcs number;
v_msm number;
v_gw number;
v_nw number;

CURSOR C_ITEM IS
  select four_feet*pallet_ctn FOUR_FEET ,two_feet*pallet_ctn TWO_FEET,CEIL(p_qty/(pallet_pcs/ pallet_ctn)) PALLET,
  pallet_pcs,pallet_ctn from ztb_item where item_no = p_item_no and p_qty > 0;    
BEGIN



/* Otomatis menghapus wo yang sudah tidak ada di MPS */
--  delete from answer where 
--  answer_no in (
--                select answer_no from ztb_shipping_detail where ppbe_no = p_ppbe and wo_no not in (select work_order from mps_header) 
--                );
--  and answer_no not in (select answer_no from indication where answer_no = p_answer_no and inv_no is not null)

v_number := 0;
delete from ztb_shipping_detail where rowid = p_rowid;


OPEN C_ITEM; 
   LOOP 
    FETCH C_Item into c_four_feet,c_two_feet,c_pallet,c_pallet_pcs,c_pallet_ctn; 
      EXIT WHEN C_Item%notfound ;   
      BEGIN
     WHILE c_pallet > 0 
      LOOP
         IF c_pallet > c_four_feet then
            v_number := c_four_feet * (c_pallet_pcs/c_pallet_ctn);
            c_pallet := c_pallet - c_four_feet;     
         --#######################################################################################
            insert into ztb_shipping_detail(answer_no,WO_NO,PPBE_NO,
                                            ITEM_NO,QTY,PALLET,
                                            GROSS,NET,MSM,
                                            CARTON_NOT_FULL,CONTAINERS,container_value,
                                            container_no, TW, ENR)
            select p_answer_no,p_wo,p_ppbe,
                   p_item_no,v_number,v_number/c_pallet_pcs,
                   
            -- START GROSS    
            case when v_number< pallet_pcs then 
              (gw_pallet *  (floor((v_number+pallet_pcs)/pallet_pcs)) +
              (
                ((GW_pallet -  case when panjang_pallet = 110 then 35 else case when panjang_pallet = 100 then 27 else 25 end end  
                ) / pallet_ctn) * (((v_number+pallet_pcs)/(pallet_pcs/pallet_ctn)) - pallet_ctn) 
              )
              + case when panjang_pallet = 110 then 35 else case when panjang_pallet = 100 then 27 else 25 end end
              ) - gw_pallet
            else
              gw_pallet *  floor(v_number/pallet_pcs) +
              case when v_number/pallet_pcs - floor(v_number/pallet_pcs) > 0 then 
                (
                ((GW_pallet -  case when panjang_pallet = 110 then 35 else case when panjang_pallet = 100 then 27 else 25 end end  
                ) / pallet_ctn) * 
                     case when v_number/pallet_pcs - floor(v_number/pallet_pcs) > 0 then 
                    (v_number / (pallet_pcs / pallet_ctn)) - (floor(v_number/pallet_pcs) * pallet_ctn)
                    else 0 end
                ) + case when panjang_pallet = 110 then 35 else case when panjang_pallet = 100 then 27 else 25 end end
              else 0 
              end
             end  as GrossWeight,
             -- END GROSS
              
             -- START NET
             v_number * zt.NW_Pallet / pallet_pcs  as NetWeight, 
              
             -- START MSM
                (floor( v_number/zt.pallet_pcs) * zt.panjang_pallet*zt.lebar_pallet* (zt.carton_height+150)/10000000)
                + zt.panjang_pallet*zt.lebar_pallet *
                ((zt.carton_height/(zt.pallet_ctn/step))*ceil(
                (
                  case when v_number/pallet_pcs - floor(v_number/pallet_pcs) > 0 then 
                    (v_number / (pallet_pcs / pallet_ctn)) - (floor(v_number/pallet_pcs) * pallet_ctn)
                  else 0 end
                ) / step)+150
                )/10000000 as MSM,
             -- END MSM
                       
             case when v_number/pallet_pcs - floor(v_number/pallet_pcs) > 0 then 
                (v_number / (pallet_pcs / pallet_ctn)) - (floor(v_number/pallet_pcs) * pallet_ctn)
             else 0 end,
             '40 FEET',
             ((v_number / (pallet_pcs/ pallet_ctn))/(four_feet* pallet_ctn)),
             p_container_no, p_tw, p_enr
                
             from item i 
             left outer join packing_information pi on pi.pi_no = i.pi_no 
             left outer join ztb_item zt on trim(zt.item_no) = i.item_no
             where  i.item_no = p_item_no ;
            
         --#######################################################################################  
         ELSIF c_pallet > c_two_feet and c_pallet <= c_four_feet THEN
             v_number := c_pallet* (c_pallet_pcs/c_pallet_ctn); 
             c_pallet := 0;
            
            --#######################################################################################   
            insert into ztb_shipping_detail(answer_no,WO_NO,PPBE_NO,
                                            ITEM_NO,QTY,PALLET,
                                            GROSS,NET,MSM,
                                            CARTON_NOT_FULL, CONTAINERS, container_value,
                                            container_no, TW, ENR)
            select p_answer_no,p_wo,p_ppbe,
                   p_item_no, p_qty, v_number/c_pallet_pcs, 
                    
            -- START GROSS  
            case when v_number< pallet_pcs then 
              (gw_pallet *  (floor((v_number+pallet_pcs)/pallet_pcs)) +
                (
                  ((GW_pallet -  case when panjang_pallet = 110 then 35 else case when panjang_pallet = 100 then 27 else 25 end end  
                    ) / pallet_ctn) * (((v_number+pallet_pcs)/(pallet_pcs/pallet_ctn)) - pallet_ctn) 
                ) + case when panjang_pallet = 110 then 35 else case when panjang_pallet = 100 then 27 else 25 end end
              ) - gw_pallet
            else
             gw_pallet *  floor(v_number/pallet_pcs) +
             case when v_number/pallet_pcs - floor(v_number/pallet_pcs) > 0 then 
                (
                 ((GW_pallet -  case when panjang_pallet = 110 then 35 else case when panjang_pallet = 100 then 27 else 25 end end  
                  ) / pallet_ctn) * 
                  case when v_number/pallet_pcs - floor(v_number/pallet_pcs) > 0 then 
                    (v_number / (pallet_pcs / pallet_ctn)) - (floor(v_number/pallet_pcs) * pallet_ctn)
                  else 0 end
                ) + case when panjang_pallet = 110 then 35 else case when panjang_pallet = 100 then 27 else 25 end end
              else 0 end
              end  as GrossWeight,
            -- END GROSS
            
            -- START NET
              v_number * zt.NW_Pallet / pallet_pcs  as NetWeight,
              
            -- START MSM
              (floor( v_number/zt.pallet_pcs) * zt.panjang_pallet*zt.lebar_pallet* (zt.carton_height+150)/10000000) +
              zt.panjang_pallet*zt.lebar_pallet*
              ((zt.carton_height/(zt.pallet_ctn/step))*ceil(
              (
                case when v_number/pallet_pcs - floor(v_number/pallet_pcs) > 0 then 
                  (v_number / (pallet_pcs / pallet_ctn)) - (floor(v_number/pallet_pcs) * pallet_ctn)
                else 0 end
              ) / step)+150)/10000000 as MSM,
            -- END MSM
            
                case when v_number/pallet_pcs - floor(v_number/pallet_pcs) > 0 then 
                  (v_number / (pallet_pcs / pallet_ctn)) - (floor(v_number/pallet_pcs) * pallet_ctn)
                else 0 end,
                '40 FEET',
                ((v_number / (pallet_pcs/ pallet_ctn))/(four_feet* pallet_ctn)),
                p_container_no, p_tw, p_enr
            from item i 
            left outer join packing_information pi on pi.pi_no = i.pi_no 
            left outer join ztb_item zt on trim(zt.item_no) = i.item_no
            where  i.item_no = p_item_no ;
       
      --#######################################################################################  
         
        ELSE  
            v_number := c_pallet* (c_pallet_pcs/c_pallet_ctn);
            c_pallet := 0;
               
          --#######################################################################################   
          insert into ztb_shipping_detail(answer_no,WO_NO,PPBE_NO,
                                          ITEM_NO,QTY,PALLET,
                                          GROSS,NET,MSM,
                                          CARTON_NOT_FULL,CONTAINERS, container_value,
                                          container_no, TW, ENR)
          select p_answer_no,p_wo,p_ppbe,
                   p_item_no, p_qty, v_number/c_pallet_pcs,
                   
            -- START GROSS
            case when v_number< pallet_pcs then 
              (gw_pallet *  (floor((v_number+pallet_pcs)/pallet_pcs)) +
                (
                  ((GW_pallet -  case when panjang_pallet = 110 then 35 else case when panjang_pallet = 100 then 27 else 25 end end  
                   ) / pallet_ctn
                  ) * (((v_number+pallet_pcs)/(pallet_pcs/pallet_ctn)) - pallet_ctn) 
                ) + case when panjang_pallet = 110 then 35 else case when panjang_pallet = 100 then 27 else 25 end end
              ) - gw_pallet
            else
             gw_pallet *  floor(v_number/pallet_pcs) +
             case when v_number/pallet_pcs - floor(v_number/pallet_pcs) > 0 then 
              (
                ((GW_pallet -  case when panjang_pallet = 110 then 35 else case when panjang_pallet = 100 then 27 else 25 end end  
                ) / pallet_ctn) *  case when v_number/pallet_pcs - floor(v_number/pallet_pcs) > 0 then 
                    (v_number / (pallet_pcs / pallet_ctn)) - (floor(v_number/pallet_pcs) * pallet_ctn)
                    else 0 end 
              ) + case when panjang_pallet = 110 then 35 else case when panjang_pallet = 100 then 27 else 25 end end
             else 0 end
            end  as GrossWeight,
            --END GROSS
            
            -- START NET
             v_number * zt.NW_Pallet / pallet_pcs  as NetWeight,
             
            -- START MSM
             (floor( v_number/zt.pallet_pcs) * zt.panjang_pallet * zt.lebar_pallet * (zt.carton_height+150)/10000000)+
             zt.panjang_pallet*zt.lebar_pallet *
             (((zt.carton_height/(zt.pallet_ctn/step))*ceil(
             (
              case when v_number/pallet_pcs - floor(v_number/pallet_pcs) > 0 then 
                (v_number / (pallet_pcs / pallet_ctn)) - (floor(v_number/pallet_pcs) * pallet_ctn)
              else 0 end
             ) / step)+150))/10000000 as MSM,
             -- END MSM
             
            case when v_number/pallet_pcs - floor(v_number/pallet_pcs) > 0 then 
              (v_number / (pallet_pcs / pallet_ctn)) - (floor(v_number/pallet_pcs) * pallet_ctn)
            else 0 end,
            '20 FEET',
            ((v_number / (pallet_pcs/ pallet_ctn))/(two_feet* pallet_ctn)),
            p_container_no, p_tw, p_enr
          from item i 
          left outer join packing_information pi on pi.pi_no = i.pi_no 
          left outer join ztb_item zt on trim(zt.item_no) = i.item_no
          where  i.item_no = p_item_no ;
        --#######################################################################################
        END IF;
      END LOOP;
      end;
  END LOOP; 
CLOSE C_Item; 

select sum(msm),sum(gross),sum(net) into v_msm,v_gw,v_nw from ztb_shipping_detail
where answer_no = p_answer_no and ppbe_no = p_ppbe;

update ztb_shipping_ins set msm = v_msm,gw = v_gw,nw = v_nw
where answer_no = p_answer_no and remarks = p_ppbe;

END;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_SHOW_NUMBER_VALUES" 
ZSP_show_number_values (
   table_in    IN VARCHAR2,
   column_in   IN VARCHAR2,
   where_in    IN VARCHAR2)
IS
   TYPE values_t IS TABLE OF NUMBER;

   l_values   values_t;
BEGIN
   EXECUTE IMMEDIATE
         'SELECT '
      || column_in
      || ' FROM '
      || table_in
      || ' WHERE '
      || where_in
      BULK COLLECT INTO l_values;

   FOR indx IN 1 .. l_values.COUNT
   LOOP
      DBMS_OUTPUT.put_line 
      (l_values (indx));
   END LOOP;
END;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_UPDATE_MRP" is

c_wo varchar(1000);



v_id varchar(100) := '';
v_days number:= 1;
v_days1 number:= 1;
v_tgl VARCHAR(100);
v_qty number;
c_qty number;
c_qty_p number;
c_Date date;
c_item VARCHAR(100);
c_day number;
c_description varchar(100);
v_inventory number:=0;
v_purchase number:=0;
v_preq number:=0;
v_inventory_awal number :=0;
v_str varchar(30000);
v_str_header varchar(700);
v_str_detail varchar(700);
c_wo varchar(700);
c_long clob;
c_inventory varchar(100);



cursor c_update is
select aa.item_no,nvl(bb.this_inventory,0) - nvl(cc.qty_not_approve,0) this_inventory
from ztb_mrp_data_pck aa
left outer join whinventory bb
on aa.item_no = bb.item_no
left outer join (   select item_no,sum(s.qty) qty_not_approve from mte_header r
                            inner join mte_details s on r.slip_no = s.slip_no
                            where r.approval_Date is null and slip_date > '01-JAN-19'
                            group by item_no)cc
        on  aa.item_no = cc.item_no
where no_id = 1 ;




BEGIN
  
delete from ztb_mrp_data_pck where no_id in (4);
delete from ztb_log_kuraire;
  open c_update;
    loop
      fetch c_update into c_item,c_qty;
      exit when c_update%notfound;
        begin
            c_inventory := '''Inventory (' || c_qty ||')''';
            v_days :=1;
            v_str := 'insert into  ztb_mrp_data_pck ( description,item_no,NO_ID,N_1,N_2,N_3,N_4,N_5,N_6,N_7,N_8,N_9,N_10,N_11,N_12,N_13,N_14,N_15,N_16,N_17,N_18,N_19,N_20,N_21,N_22,N_23,N_24,N_25,N_26,N_27,N_28,N_29,N_30,N_31,N_32,N_33,N_34,N_35,N_36,N_37,N_38,N_39,N_40,N_41,N_42,N_43,N_44,N_45,N_46,N_47,N_48,N_49,N_50,N_51,N_52,N_53,N_54,N_55,N_56,N_57,N_58,N_59,N_60,N_61,N_62,N_63,N_64,N_65,N_66,N_67,N_68,N_69,N_70,N_71,N_72,N_73,N_74,N_75,N_76,N_77,N_78,N_79,N_80,N_81,N_82,N_83,N_84,N_85,N_86,N_87,N_88,N_89,N_90) ';                                 
            v_str := v_str || ' select '|| c_inventory ||',' || c_item || ',4,';
            insert into ztb_log_kuraire(id,wo,pallet) values(v_days,v_str,c_item);
            while v_days <= 90
            loop
                 
                 v_str := '';
--                 c_long := '';
                 v_str := v_str || '' || c_qty || '  ';
                 v_days1 := 1;
                 while v_days1 <= v_days
                 loop
                    v_str := v_str || ' + sum(case when no_id = 1 then n_' || v_days1 || ' * -1 else n_' || v_days1 || ' * 1 end) ';
                    v_days1 := v_days1 + 1;
                 end loop;
                   v_days1 := 1;
                   if v_days < 90 then
                    v_str := v_str ||', ';
                   end if;
--                   
                   v_str := v_str_header || v_str || v_str_detail;
--                   c_long := c_long || ' ' || v_str;
                  
                   v_days := v_days + 1;
--                   v_str := v_str || ' where item_no = ' || c_item || ' and no_id = 4;';
                   insert into ztb_log_kuraire(id,wo,pallet) values(v_days,v_str,c_item);
            end loop;
            
             v_str :=  'from ztb_mrp_data_pck where item_no = ' || c_item || ' and no_id not in (3,4)';
             insert into ztb_log_kuraire(id,wo,pallet) values(v_days + 1,v_str,c_item);
          
       end;
      end loop;
  close c_update;
  
  
  delete from ztb_mrp_data_pck where no_id in (5);
end;
 


/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_UPDATE_MRP_ITEM" (
    P_ITEM_NO IN VARCHAR
) is 


c_wo varchar(1000);



v_id varchar(100) := '';
v_days number:= 1;
v_days1 number:= 1;
v_tgl VARCHAR(100);
v_qty number;
c_qty number;
c_qty_p number;
c_Date date;
c_item VARCHAR(100);
c_day number;
c_description varchar(100);
v_inventory number:=0;
v_purchase number:=0;
v_preq number:=0;
v_inventory_awal number :=0;
v_str varchar(30000);
v_str_header varchar(700);
v_str_detail varchar(700);
c_wo varchar(700);
c_long clob;
c_inventory varchar(100);



cursor c_update is
select aa.item_no,bb.this_inventory 
from ztb_mrp_data_pck aa
inner join whinventory bb
on aa.item_no = bb.item_no 
and aa.item_no = p_item_no
where no_id = 1 ;




BEGIN
  
delete from ztb_mrp_data_pck where no_id in (4)
and item_no = p_item_no;                        
delete from ztb_log_kuraire;

  open c_update;
    loop
      fetch c_update into c_item,c_qty;
      exit when c_update%notfound;
        begin
            c_inventory := '''Inventory (' || c_qty ||')''';
            v_days :=1;
            v_str := 'insert into  ztb_mrp_data_pck ( description,item_no,NO_ID,N_1,N_2,N_3,N_4,N_5,N_6,N_7,N_8,N_9,N_10,N_11,N_12,N_13,N_14,N_15,N_16,N_17,N_18,N_19,N_20,N_21,N_22,N_23,N_24,N_25,N_26,N_27,N_28,N_29,N_30,N_31,N_32,N_33,N_34,N_35,N_36,N_37,N_38,N_39,N_40,N_41,N_42,N_43,N_44,N_45,N_46,N_47,N_48,N_49,N_50,N_51,N_52,N_53,N_54,N_55,N_56,N_57,N_58,N_59,N_60,N_61,N_62,N_63,N_64,N_65,N_66,N_67,N_68,N_69,N_70,N_71,N_72,N_73,N_74,N_75,N_76,N_77,N_78,N_79,N_80,N_81,N_82,N_83,N_84,N_85,N_86,N_87,N_88,N_89,N_90) ';                                 
            v_str := v_str || ' select '|| c_inventory ||',' || c_item || ',4,';
            insert into ztb_log_kuraire(id,wo,pallet) values(v_days,v_str,c_item);
            while v_days <= 90
            loop
                 
                 v_str := '';
--                 c_long := '';
                 v_str := v_str || '' || c_qty || '  ';
                 v_days1 := 1;
                 while v_days1 <= v_days
                 loop
                    v_str := v_str || ' + sum(case when no_id = 1 then n_' || v_days1 || ' * -1 else n_' || v_days1 || ' * 1 end) ';
                    v_days1 := v_days1 + 1;
                 end loop;
                   v_days1 := 1;
                   if v_days < 90 then
                    v_str := v_str ||', ';
                   end if;
--                   
                   v_str := v_str_header || v_str || v_str_detail;
--                   c_long := c_long || ' ' || v_str;
                  
                   v_days := v_days + 1;
--                   v_str := v_str || ' where item_no = ' || c_item || ' and no_id = 4;';
                   insert into ztb_log_kuraire(id,wo,pallet) values(v_days,v_str,c_item);
            end loop;
            
             v_str :=  'from ztb_mrp_data_pck where item_no = ' || c_item || ' and no_id not in (3,4)';
             insert into ztb_log_kuraire(id,wo,pallet) values(v_days + 1,v_str,c_item);
          
       end;
      end loop;
  close c_update;
  
  
  delete from ztb_mrp_data_pck where no_id in (5);
end;
 
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_UPDATE_PO" (
    V_FROM NUMBER,
    V_TO NUMBER,
    V_PO_NO IN varchar,
    V_PO_DATE IN varchar,
    V_DI_OUTPUT_TYPE IN varchar,
    V_TRANSPORT IN varchar, 
    V_REMARK1 IN varchar,
    V_MARKS1 IN varchar,
     v_po_rev in varchar,
    v_po_rev_res in varchar,
     V_EX_RATE  IN varchar, 
     v_po_line_new in  varchar,
       V_ITEM_NO IN varchar,
     v_po_line in varchar,
      V_UOM_Q IN varchar,
       V_ORIGIN_CODE IN varchar,
       V_U_PRICE IN varchar,
     V_PO_CURR in VARCHAR,
     V_PO_CURR_ITEM in VARCHAR,
     V_QTY IN varchar,
     V_GR_QTY in varchar,
       V_BAL_QTY IN varchar,
        V_ETA IN varchar,
         V_PRF_NO IN varchar, 
    V_PRF_LINE_NO IN varchar,
   V_PO_DT_CODE IN VARCHAR,
    V_D_AMT_O IN varchar,
    V_D_AMT_L IN varchar,
    V_PRC_UBAH in varchar
     )as
     
v_hitungPO number :=0;  
v_POAMTO number;
v_POAMTL number;
v_line_parsial number; 

begin


IF v_po_line = 'NEW' THEN 
  insert into po_details(po_no, 
                             line_no,
                             prf_no,
                             prf_line_no,
                             item_no,
                             origin_code,
                             qty,
                             uom_q,
                             u_price,
                             amt_o,
                             amt_l,
                             eta,
                             schedule,
                             gr_qty,
                             sh_qty,
                             pret_qty,
                             bal_qty,
                             upto_date,
                             reg_date
                             )
  values (v_po_no,
          v_po_line_new,
          v_prf_no,
          v_prf_line_no,
          v_item_no,
          v_origin_code,
          v_qty,
          v_uom_q,
          v_u_price,
          v_d_amt_o,
          v_d_amt_l,
          v_eta,
          v_eta,
          0,
          0,
          0,
          v_qty,
          sysdate,
          sysdate);
ElsIf v_po_line = 'PARSIAL' THEN          
  select count(*)+1 into v_line_parsial from po_details where po_no= v_po_no;
  insert into po_details(po_no, 
                             line_no,
                             prf_no,
                             prf_line_no,
                             item_no,
                             origin_code,
                             qty,
                             uom_q,
                             u_price,
                             amt_o,
                             amt_l,
                             eta,
                             schedule,
                             gr_qty,
                             sh_qty,
                             pret_qty,
                             bal_qty,
                             upto_date,
                             reg_date
                             )
  values (v_po_no,
          v_line_parsial,
          v_prf_no,
          v_prf_line_no,
          v_item_no,
          v_origin_code,
          v_qty,
          v_uom_q,
          v_u_price,
          v_d_amt_o,
          v_d_amt_l,
          v_eta,
          v_eta,
          0,
          0,
          0,
          v_qty,
          sysdate,
          sysdate);          
ELSE
  
  update po_details 
  set qty = v_qty,
      bal_qty = v_bal_qty,
      u_price = v_u_price,
      amt_o = v_d_amt_o,
      amt_l = v_d_amt_l,
      eta = v_eta,
      schedule = v_eta,
      upto_date = sysdate,
      carved_stamp = V_PO_DT_CODE
  where line_no = v_po_line and po_no = v_po_no;
END IF;

--
update PRF_DETAILS set REMAINDER_QTY = QTY - v_qty, UPTO_DATE = sysdate
where PRF_NO = v_prf_no and LINE_NO = v_prf_line_no;

select sum(amt_l) into v_POAMTl from po_details where po_no = v_po_no;
select sum(amt_o) into v_POAMTo from po_details where po_no = v_po_no;
--
update po_header set 
      po_date        = v_po_date,
      amt_o 		     = v_POAMTo,					  	  
      amt_l 		     = v_POAMTl,						      
      di_output_type = v_di_output_type,
      transport      = v_transport,
      remark1        = v_remark1,
      marks1         = v_marks1,
      revise         = v_po_rev,
      reason1        = v_po_rev_res,
      -- start --update ueng (25-aug-17)
      curr_code      = v_po_curr,
      ex_rate        = v_ex_rate,
      -- end
      upto_date       = sysdate   
	 where po_no = v_po_no;


IF V_PRC_UBAH = 'UPD' THEN
  
  --update gr_details
  update gr_details set u_price=v_u_price, amt_o=v_u_price*qty, amt_l=v_u_price* qty* V_EX_RATE
  where po_no=v_po_no AND po_line_no=v_po_line 
  AND gr_no  in (select gr_no from gr_header where to_char(gr_date, 'yyyymm') = (select distinct this_month from whinventory)) 
  ;

  --update gr_header
  update gr_header set amt_o=(select sum(amt_o) from gr_details where gr_details.gr_no = gr_header.gr_no),
  amt_l=(select sum(amt_l) from gr_details where gr_details.gr_no = gr_header.gr_no )
  where gr_no in(select gr_no from gr_details where po_no=v_po_no AND po_line_no= v_po_line)
  AND to_char(gr_date,'yyyymm') = (select distinct this_month from whinventory)
  ;

  --update AP
  update account_payable set amt=(select sum(amt_o) from gr_details where gr_details.gr_no= account_payable.gr_no ),
  amt_f=(select sum(amt_l) from gr_details where gr_details.gr_no= account_payable.gr_no )
  where gr_no in(select gr_no from gr_details where po_no=v_po_no AND po_line_no= v_po_line)
  AND to_char(payment_date,'yyyymm') = (select distinct this_month from whinventory)
  ;

  --update FDAC
  update fdac_purchase_trn set 
  purchase_amount=(select sum(amt_o) from gr_details where gr_details.gr_no= fdac_purchase_trn.INVOICE_NO)
  where po_no= v_po_no AND line_no= v_po_line
  AND to_char(OPERATION_DATE,'yyyymm') = (select distinct this_month from whinventory) 
 ;

  --update transaction
  update transaction set slip_price= v_u_price, 
  slip_amount= (select sum(amt_l) from gr_details where gr_details.gr_no= transaction.slip_no),
  standard_amount= (select sum(amt_l) from gr_details where gr_details.gr_no= transaction.slip_no),
  purchase_amount= (select sum(amt_l) from gr_details where gr_details.gr_no= transaction.slip_no)
  where order_number = v_po_no AND line_no= v_po_line
  --AND to_char(slip_date,'yyyymm') = (select distinct this_month from whinventory)
  ;
  
END IF;
END;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_UPDATE_PO_1" (
    V_FROM NUMBER,
    V_TO NUMBER,
    V_PO_NO IN varchar,
    V_PO_DATE IN varchar,
    V_DI_OUTPUT_TYPE IN varchar,
    V_TRANSPORT IN varchar, 
    V_REMARK1 IN varchar,
    V_MARKS1 IN varchar,
    v_po_rev in varchar,
    v_po_rev_res in varchar,
    V_EX_RATE  IN varchar, 
    v_po_line_new in  varchar,
    V_ITEM_NO IN varchar,
    v_po_line in varchar,
      V_UOM_Q IN varchar,
       V_ORIGIN_CODE IN varchar,
       V_U_PRICE IN varchar,
     V_PO_CURR in VARCHAR,  
     V_PO_CURR_ITEM in VARCHAR,
     V_QTY IN varchar,
     V_GR_QTY in varchar,
       V_BAL_QTY IN varchar,
        V_ETA IN varchar,
         V_PRF_NO IN varchar, 
    V_PRF_LINE_NO IN varchar,
   V_PO_DT_CODE IN VARCHAR,
    V_D_AMT_O IN varchar,
    V_D_AMT_L IN varchar,
    V_PRC_UBAH in varchar
     )as
     
v_hitungPO number :=0;  
v_POAMTO number;
v_POAMTL number;

begin


IF v_po_line = 'NEW' THEN 

 
  insert into po_details(po_no, 
                             line_no,
                             prf_no,
                             prf_line_no,
                             item_no,
                             origin_code,
                             qty,
                             uom_q,
                             u_price,
                             amt_o,
                             amt_l,
                             eta,
                             schedule,
                             gr_qty,
                             sh_qty,
                             pret_qty,
                             bal_qty,
                             upto_date,
                             reg_date
                             )
  values (v_po_no,
          v_po_line_new,
          v_prf_no,
          v_prf_line_no,
          v_item_no,
          v_origin_code,
          v_qty,
          v_uom_q,
          v_u_price,
          v_d_amt_o,
          v_d_amt_l,
          v_eta,
          v_eta,
          0,
          0,
          0,
          v_qty,
          sysdate,
          sysdate);
          

ELSE
  
  update po_details 
  set qty = v_qty,
      bal_qty = v_bal_qty,
      u_price = v_u_price,
      amt_o = v_d_amt_o,
      amt_l = v_d_amt_l,
      eta = v_eta,
      schedule = v_eta,
      upto_date = sysdate,
      carved_stamp = V_PO_DT_CODE
  where line_no = v_po_line and po_no = v_po_no;
END IF;

--
update PRF_DETAILS set REMAINDER_QTY = QTY - v_qty, UPTO_DATE = sysdate
where PRF_NO = v_prf_no and LINE_NO = v_prf_line_no;

select sum(amt_l) into v_POAMTl from po_details where po_no = v_po_no;
select sum(amt_o) into v_POAMTo from po_details where po_no = v_po_no;
--
update po_header set 
      po_date        = v_po_date,
      amt_l 		     = v_POAMTl,					  	  
      amt_o 		     = v_POAMTo,						      
      di_output_type = v_di_output_type,
      transport      = v_transport,
      remark1        = v_remark1,
      marks1         = v_marks1,
      revise         = v_po_rev,
      reason1        = v_po_rev_res,
      -- start --update ueng (25-aug-17)
      curr_code      = v_po_curr,
      ex_rate        = v_ex_rate,
      -- end
      upto_date       = sysdate   
	 where po_no = v_po_no;

--
IF V_PRC_UBAH = 'UPD' THEN
  --update gr_details
  update gr_details set u_price=v_u_price, amt_o=v_u_price*qty, amt_l=v_u_price* qty* V_EX_RATE
  where po_no=v_po_no AND po_line_no=v_po_line;

  --update gr_header
  update gr_header set amt_o=(select sum(amt_o) from gr_details where po_no= v_po_no AND po_line_no= v_po_line),
  amt_l=(select sum(amt_l) from gr_details where po_no= v_po_no AND po_line_no= v_po_line)
  where gr_no in(select gr_no from gr_details where po_no=v_po_no AND po_line_no= v_po_line);

  --update AP
  update account_payable set amt=(select sum(amt_o) from gr_details where po_no= v_po_no AND po_line_no= v_po_line),
  amt_f=(select sum(amt_l) from gr_details where po_no= v_po_no AND po_line_no= v_po_line)
  where gr_no in(select gr_no from gr_details where po_no=v_po_no AND po_line_no= v_po_line);

  --update FDAC
  update fdac_purchase_trn set purchase_amount=(select sum(amt_o) from gr_details where po_no= v_po_no AND po_line_no= v_po_line)
  where po_no= v_po_no AND line_no= v_po_line;

  --update transaction
  update transaction set slip_price= v_u_price, 
  slip_amount= (select sum(amt_l) from gr_details where po_no= v_po_no AND po_line_no= v_po_line),
  standard_amount= (select sum(amt_l) from gr_details where po_no= v_po_no AND po_line_no= v_po_line),
  purchase_amount= (select sum(amt_l) from gr_details where po_no= v_po_no AND po_line_no= v_po_line)
  where order_number= v_po_no AND line_no= v_po_line;
  
END IF;
END;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_VALIDATE_DATECODE" IS

v_str varchar(30000);

cursor c_update is
select 'Insert into ZTB_BOM_LEVEL (PO_NO,PO_LINE_NO,ITEM_NO,LEVEL_NO) values ('''||r.po_no||''','|| r.po_line_no||','||upper_item_no||','|| s.level_no ||')'
from (select max(level_no) level_no, upper_item_no from structure group by upper_item_no) s
inner join mps_header r
on r.item_no = s.upper_item_no
left outer  join ZTB_BOM_LEVEL z
on r.po_no = z.po_no and r.po_line_no = z.po_line_no
where z.level_type is null;


begin

delete from ZTB_BOM_LEVEL where level_type is null;

open c_update;
    loop
      fetch c_update into v_str;
      exit when c_update%notfound;
        begin
             execute IMMEDIATE v_str;
        end;
    end loop;
  close c_update;




update mps_header set bom_level = (select level_no from ZTB_BOM_LEVEL where po_no = mps_header.po_no and po_line_no = mps_header.po_line_no),
                      bom_edit_stat = (select level_type from ZTB_BOM_LEVEL where po_no = mps_header.po_no and po_line_no = mps_header.po_line_no);


update mps_header set date_code = null where 
work_order in  (
select work_order
from 
(
        select  r.work_order,
                s.mps_date,
                date_code,
                i.date_code_month,
                add_months(to_date( case when length(substr(date_code,4,7)) < 3 then '20'||substr(date_code,4,7) else substr(date_code,4,7) end || '/' ||
                          substr(date_code, 0, 2) || '/' || '01 1:00:25', 'YYYY/MM/DD HH:MI:SS') , i.date_code_month * -1) Tanggal
        from mps_header r
        inner join mps_details s
        on r.po_line_no = s.po_line_no and r.po_no = s.po_no
        inner join item i
        on r.item_no = i.item_no
        where date_code_type  in (
        '1',
        'MM-YYYY',
        'MM/YYYY',
        'MMAYY'
        ) and date_code is not null and i.date_code_month is not null
        and i.item_no not in ('15990',
                              '16000',
                              '17390',
                              '30070',
                              '31820',
                              '31830',
                              '31840',
                              '31850',
                              '31940',
                              '31950',
                              '31990',
                              '32000',
                              '32010',
                              '32130',
                              '43610',
                              '44280',
                              '44290',
                              '44340',
                              '44360',
                              '44440',
                              '44460',
                              '44480',
                              '54780',
                              '54790',
                              '57886',
                              '59000',
                              '59001',
                              '66470',
                              '68250',
                              '68260',
                              '68350',
                              '68360',
                              '68400',
                              '68450',
                              '68460',
                              '68470',
                              '68480',
                              '68500',
                              '71355',
                              '71356',
                              '76385',
                              '76386',
                              '77195',
                              '77196',
                              '84010',
                              '84011',
                              '84090',
                              '84091',
                              '84370',
                              '84371',
                              '84390',
                              '84391',
                              '85335',
                              '95340',
                              '86585',
                              '86575',
                              '95590',
                              '95630',
                              '96530',
                              '96535',
                              '73012220',
                              '73012230'
                              )--and work_order = '18FI056-LR1C-1'
) where   case when tanggal between trunc(add_months(mps_date,-3),'MONTH')-1 and trunc(add_months(mps_date, 3),'MONTH')+1 then 1 else 0 end =0

);


end;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_WH_CREATE_FIFO" 

is 


c_this_inventory varchar(100); 
c_item_no varchar(100); 
v_number number := 0;
I number := 1;

c_item_no2 varchar(100); 
C_GR_no varchar(100);
c_amount NUMBER;
c_u_price NUMBER;
c_rate NUMBER;
c_qty number;


	CURSOR C_Item IS
     select * from (
    --untuk menambah item NG
    select case when t.item_no > 90000000 then t.item_no - 90000000 else t.item_no end as item_no,sum(w.this_inventory) inventory from item t 
    inner join whinventory w
    on t.item_no = w.item_no
    where  t.cost_subject_code = '136010' and w.item_no = 123111111 --and t.item_no = v_item_no
    and  t.item not in ('SCRAP NPS','SCRAP GEL LR','SCRAP GEL LR','A. DISK AFT DEGREASE','AFTER TP','HALF BATTERY','LABELED BATTERY','NAKED BATTERY','AFTER TP','PACKED BATTERY','CCR AFTER PLATING','BATTERY AFTER WEIGHT CHECKER','SCRAP BLACK MIX LR')
    group by case when t.item_no > 90000000 then t.item_no - 90000000 else t.item_no end
   )order by item_no;
    
    
    
--    select t.item_no,w.this_inventory from item t 
--    inner join whinventory w
--    on t.item_no = w.item_no
--    where  t.cost_subject_code = '136010' --and t.item_no = '1110057'
--    and  t.item not in ('SCRAP NPS','SCRAP GEL LR','SCRAP GEL LR','A. DISK AFT DEGREASE','AFTER TP','HALF BATTERY','LABELED BATTERY','NAKED BATTERY','AFTER TP','PACKED BATTERY','CCR AFTER PLATING','BATTERY AFTER WEIGHT CHECKER','SCRAP BLACK MIX LR')
--    order by item;
--      

	CURSOR C_GR(PARAM1 IN VARCHAR2) IS
		 select tt.item_no,r.gr_no, s.amt_l, s.qty , s.u_price, r.ex_rate  
    from GR_header r
    inner join gr_details s
    on r.gr_no = s.gr_no
    inner join item tt
    on tt.item_no = s.item_no
    where tt.item_no = PARAM1
    --and item_no = '1110057'
    order by gr_date desc ;
      
BEGIN
v_number := 0;
delete from ztb_material_fifo;


OPEN C_Item; 
   LOOP 
   FETCH C_Item into c_item_no,c_this_inventory; 
      EXIT WHEN C_Item%notfound; 
      begin
      v_number := 0;
      v_number := c_this_inventory;
      
      
      --Cursor c_GR
      open C_GR(c_item_no);
      LOOP
      FETCH C_GR into c_item_no2,C_GR_no,c_amount,c_qty, c_u_price, c_rate;
          EXIT WHEN C_GR%notfound; 
          begin
          
          if v_number - c_qty > 0 then 
            v_number := v_number  - c_qty;
            insert into ztb_material_fifo (item_no, gr_no, amount,qty) values (c_item_no2,C_GR_no,c_amount,c_qty);
            commit;
          else 
            insert into ztb_material_fifo (item_no, gr_no, amount,qty) values (c_item_no2,C_GR_no,v_number * c_u_price * c_rate,v_number);
            commit;
            EXIT ;
          end if;
          i := i+1;
          end;
      END LOOP;
      CLOSE C_GR; 
      
      end;
END LOOP; 
CLOSE C_Item; 


END;





/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZSP_WH_ITEM_FIFO" ( v_item_no   in varchar)
is 

c_this_inventory varchar(100); 
c_item_no varchar(100); 
v_number number := 0;
I number := 1;

c_item_no2 varchar(100); 
C_GR_no varchar(100);
c_amount NUMBER;
c_u_price NUMBER;
c_rate NUMBER;
c_qty number;


	CURSOR C_Item IS
     select * from (
    --untuk menambah item NG
    select case when t.item_no > 90000000 then t.item_no - 90000000 else t.item_no end as item_no,sum(w.this_inventory) inventory from item t 
    inner join whinventory w
    on t.item_no = w.item_no
    where  t.cost_subject_code = '136010' and t.item_no = v_item_no
    and  t.item not in ('SCRAP NPS','SCRAP GEL LR','SCRAP GEL LR','A. DISK AFT DEGREASE','AFTER TP','HALF BATTERY','LABELED BATTERY','NAKED BATTERY','AFTER TP','PACKED BATTERY','CCR AFTER PLATING','BATTERY AFTER WEIGHT CHECKER','SCRAP BLACK MIX LR')
    group by case when t.item_no > 90000000 then t.item_no - 90000000 else t.item_no end
   )order by item_no;
    
    
    
--    select t.item_no,w.this_inventory from item t 
--    inner join whinventory w
--    on t.item_no = w.item_no
--    where  t.cost_subject_code = '136010' --and t.item_no = '1110057'
--    and  t.item not in ('SCRAP NPS','SCRAP GEL LR','SCRAP GEL LR','A. DISK AFT DEGREASE','AFTER TP','HALF BATTERY','LABELED BATTERY','NAKED BATTERY','AFTER TP','PACKED BATTERY','CCR AFTER PLATING','BATTERY AFTER WEIGHT CHECKER','SCRAP BLACK MIX LR')
--    order by item;
--      

	CURSOR C_GR(PARAM1 IN VARCHAR2) IS
		 select tt.item_no,r.gr_no, s.amt_l, s.qty , s.u_price, r.ex_rate  
    from GR_header r
    inner join gr_details s
    on r.gr_no = s.gr_no
    inner join item tt
    on tt.item_no = s.item_no
    where tt.item_no = PARAM1
    --and item_no = '1110057'
    order by gr_date desc ;
      
BEGIN
v_number := 0;



OPEN C_Item; 
   LOOP 
   FETCH C_Item into c_item_no,c_this_inventory; 
      EXIT WHEN C_Item%notfound; 
      begin
      v_number := 0;
      v_number := c_this_inventory;
      delete from ztb_material_fifo where item_no = c_item_no;
      
      --Cursor c_GR
      open C_GR(c_item_no);
      LOOP
      FETCH C_GR into c_item_no2,C_GR_no,c_amount,c_qty, c_u_price, c_rate;
          EXIT WHEN C_GR%notfound; 
          begin
          
          if v_number - c_qty > 0 then 
            v_number := v_number  - c_qty;
            insert into ztb_material_fifo (item_no, gr_no, amount,qty) values (c_item_no2,C_GR_no,c_amount,c_qty);
            commit;
          else 
            insert into ztb_material_fifo (item_no, gr_no, amount,qty) values (c_item_no2,C_GR_no,v_number * c_u_price * c_rate,v_number);
            commit;
            EXIT ;
          end if;
          i := i+1;
          end;
      END LOOP;
      CLOSE C_GR; 
      
      end;
END LOOP; 
CLOSE C_Item; END;
/
 
  CREATE OR REPLACE PROCEDURE "PORDER"."ZTB_WHINVENTORY_SET" (
    v_item_no   in number,             -- ???? (?????????? -1)
    v_slip_date in date,               -- ?? ????????????????? -2?
    v_slip_qty  in number,             -- ??
    v_table_position in varchar2,           -- 1:??,2:???,3:??,4:???
    v_ret_no    in out number,         -- ???????????????
    v_sec_code  in number DEFAULT NULL -- ?????(????????????????????? null???? -5)
)
is
begin
  declare
   WHI_REC whinventory%rowtype ;
   ITM_REC item%rowtype ;

   v_date  date ;

   v_section_code        whinventory.section_code%TYPE          :=v_sec_code ;
   v_receive1            whinventory.receive1%TYPE              :=0 ;
   v_other_receive1      whinventory.other_receive1%TYPE        :=0 ;
   v_issue1              whinventory.issue1%TYPE                :=0 ;
   v_other_issue1        whinventory.other_issue1%TYPE          :=0 ;
   v_stocktaking_adjust1 whinventory.stocktaking_adjust1%TYPE   :=0 ;
   v_this_inventory      whinventory.this_inventory%TYPE        :=0 ;
   v_receive2            whinventory.receive2%TYPE              :=0 ;
   v_other_receive2      whinventory.other_receive2%TYPE        :=0 ;
   v_issue2              whinventory.issue2%TYPE                :=0 ;
   v_other_issue2        whinventory.other_issue2%TYPE          :=0 ;
   v_stocktaking_adjust2 whinventory.stocktaking_adjust2%TYPE   :=0 ;
   v_last_inventory      whinventory.last_inventory%TYPE        :=0 ;

    cursor C1(PARAM1 in number,PARAM2 in number) is
     select *
     from whinventory
     where item_no = PARAM1
       and section_code = PARAM2
     for update ;

    cursor C2 is
     select nvl(to_date(max(this_month),'yyyymm'),trunc(sysdate))
     from whinventory  ;

    cursor C3 is
     select *
     from item
     where item_no = v_item_no ;

  begin
      v_ret_no := 0 ;

      /* ??????*/
      open C3 ;
         fetch C3 into ITM_REC ;
      close C3 ;
      If ITM_REC.item_no is null Then
          v_ret_no := -1 ;
          goto LAST ;
      End If ;

      /* ?????? */
      If v_section_code is null Then
          v_section_code := ITM_REC.SECTION_CODE ;
          If v_section_code is null Then
               v_ret_no := -5 ;
               goto LAST ;
          End If ;
      End If ;

      /* ????????*/
      open C2 ;
         fetch C2 into v_date ;
      close C2 ;

      /* ????????*/
      If  trunc(v_slip_date,'mm') != trunc(v_date,'mm') and  trunc(v_slip_date,'mm') != trunc(add_months(v_date,-1),'mm') Then
          v_ret_no := -2 ;
          goto LAST ;
      End If ;


      /* ?????? */
      open C1(v_item_no,v_section_code) ;
          fetch C1 into WHI_REC;
          If to_char(v_slip_date,'yyyymm') = to_char(v_date,'yyyymm') Then                    --???
               If    v_table_position = 1 Then  v_receive1            := v_slip_qty ; v_this_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 2 Then  v_other_receive1      := v_slip_qty ; v_this_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 3 Then  v_issue1              := v_slip_qty ; v_this_inventory := -v_slip_qty ;
               ElsIf v_table_position = 4 Then  v_other_issue1        := v_slip_qty ; v_this_inventory := -v_slip_qty ;
               End If ;
          ElsIf to_char(v_slip_date,'yyyymm') = to_char(add_months(v_date,-1),'yyyymm') Then  --???
               If    v_table_position = 1 Then  v_receive2            := v_slip_qty ; v_this_inventory :=  v_slip_qty ; v_last_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 2 Then  v_other_receive2      := v_slip_qty ; v_this_inventory :=  v_slip_qty ; v_last_inventory :=  v_slip_qty ;
               ElsIf v_table_position = 3 Then  v_issue2              := v_slip_qty ; v_this_inventory := -v_slip_qty ; v_last_inventory := -v_slip_qty ;
               ElsIf v_table_position = 4 Then  v_other_issue2        := v_slip_qty ; v_this_inventory := -v_slip_qty ; v_last_inventory := -v_slip_qty ;
               End If ;
          End If ;

          If C1%notfound Then
             -- ?????
            insert into whinventory(
               operation_date,
               section_code,
               item_no,
               location,
               this_month,
               receive1,
               other_receive1,
               issue1,
               other_issue1,
               stocktaking_adjust1,
               this_inventory,
               last_month,
               receive2,
               other_receive2,
               issue2,
               other_issue2,
               stocktaking_adjust2,
               last_inventory,
               last2_inventory
            ) VALUES (
               sysdate,
               v_section_code,
               v_item_no,
               null,
               to_char(v_date,'yyyymm'),
               nvl(v_receive1,0),
               nvl(v_other_receive1,0),
               nvl(v_issue1,0),
               nvl(v_other_issue1,0),
               nvl(v_stocktaking_adjust1,0),
               nvl(v_this_inventory,0),
               to_char(add_months(v_date,-1),'yyyymm'),
               nvl(v_receive2,0),
               nvl(v_other_receive2,0),
               nvl(v_issue2,0),
               nvl(v_other_issue2,0),
               nvl(v_stocktaking_adjust2,0),
               nvl(v_last_inventory,0),
               0
            ) ;
          Else
             -- ???
            update whinventory set
               operation_date        = sysdate,
               receive1              = receive1            + nvl(v_receive1           ,0),
               other_receive1        = other_receive1      + nvl(v_other_receive1     ,0),
               issue1                = issue1              + nvl(v_issue1             ,0),
               other_issue1          = other_issue1        + nvl(v_other_issue1       ,0),
               stocktaking_adjust1   = stocktaking_adjust1 + nvl(v_stocktaking_adjust1,0),
               this_inventory        = this_inventory      + nvl(v_this_inventory     ,0),
               receive2              = receive2            + nvl(v_receive2           ,0),
               other_receive2        = other_receive2      + nvl(v_other_receive2     ,0),
               issue2                = issue2              + nvl(v_issue2             ,0),
               other_issue2          = other_issue2        + nvl(v_other_issue2       ,0),
               stocktaking_adjust2   = stocktaking_adjust2 + nvl(v_stocktaking_adjust2,0),
               last_inventory        = last_inventory      + nvl(v_last_inventory     ,0)
            where item_no = v_item_no
              and section_code = v_section_code
            ;


          End If ;
          If    v_table_position = 1 Then              update item  set  receive_date        = v_slip_date where item_no = v_item_no and (receive_date < v_slip_date or receive_date is null);
          ElsIf v_table_position = 2 Then              update item  set  receive_date        = v_slip_date where item_no = v_item_no and (receive_date < v_slip_date or receive_date is null);
          ElsIf v_table_position = 3 Then              update item  set  issue_date          = v_slip_date where item_no = v_item_no and (issue_date < v_slip_date or issue_date is null);
          ElsIf v_table_position = 4 Then              update item  set  issue_date          = v_slip_date where item_no = v_item_no and (issue_date < v_slip_date or issue_date is null); 
          End If ;
      close C1 ;

 <<LAST>>
   null ;

  end ;
end ztb_whinventory_set; 
/
 